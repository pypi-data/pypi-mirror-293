from typing import Optional, TypeVar

from pydbsp.core import AbelianGroupOperation
from pydbsp.stream import Stream, StreamHandle, step_until_timestamp_and_return
from pydbsp.stream.operator import Lift2, UnaryOperator
from pydbsp.stream.operators.linear import Differentiate, Integrate, LiftedDelay, LiftedIntegrate
from pydbsp.zset import ZSet
from pydbsp.zset.functions.binary import H

T = TypeVar("T")


class LiftedH(Lift2[ZSet[T], ZSet[T], ZSet[T]]):
    def __init__(
        self,
        diff_stream_a: StreamHandle[ZSet[T]],
        integrated_stream_a: StreamHandle[ZSet[T]],
    ):
        super().__init__(diff_stream_a, integrated_stream_a, H, None)


class LiftedLiftedH(Lift2[Stream[ZSet[T]], Stream[ZSet[T]], Stream[ZSet[T]]]):
    def __init__(
        self,
        integrated_diff_stream_a: StreamHandle[Stream[ZSet[T]]],
        lifted_delayed_lifted_integrated_stream_a: StreamHandle[Stream[ZSet[T]]],
    ):
        super().__init__(
            integrated_diff_stream_a,
            lifted_delayed_lifted_integrated_stream_a,
            lambda x, y: step_until_timestamp_and_return(
                LiftedH(StreamHandle(lambda: x), StreamHandle(lambda: y)),
                min(x.current_time(), y.current_time()),
            ),
            None,
        )


class DeltaLiftedDeltaLiftedDistinct(UnaryOperator[Stream[ZSet[T]], Stream[ZSet[T]]]):
    integrated_diff_stream_a: Integrate[Stream[ZSet[T]]]
    lift_integrated_diff_stream_a: LiftedIntegrate[ZSet[T]]
    lift_delay_lift_integrated_diff_stream_a: LiftedDelay[ZSet[T]]
    lift_lift_H: LiftedLiftedH[T]
    diff_lift_lift_H: Differentiate[Stream[ZSet[T]]]

    def set_input(
        self,
        stream_handle: StreamHandle[Stream[ZSet[T]]],
        output_stream_group: Optional[AbelianGroupOperation[Stream[ZSet[T]]]],
    ) -> None:
        self._input_stream_a = stream_handle
        self.integrated_diff_stream_a = Integrate(self._input_stream_a)
        self.lift_integrated_diff_stream_a = LiftedIntegrate(self.integrated_diff_stream_a.output_handle())
        self.lift_delay_lift_integrated_diff_stream_a = LiftedDelay(self.lift_integrated_diff_stream_a.output_handle())
        self.lift_lift_H = LiftedLiftedH(
            self.integrated_diff_stream_a.output_handle(),
            self.lift_delay_lift_integrated_diff_stream_a.output_handle(),
        )
        self.diff_lift_lift_H = Differentiate(self.lift_lift_H.output_handle())
        self.output_stream_handle = self.diff_lift_lift_H.output_handle()

    def __init__(self, diff_stream_a: Optional[StreamHandle[Stream[ZSet[T]]]]):
        super().__init__(diff_stream_a, None)

    def step(self) -> bool:
        self.integrated_diff_stream_a.step()
        self.lift_integrated_diff_stream_a.step()
        self.lift_delay_lift_integrated_diff_stream_a.step()
        self.lift_lift_H.step()

        return self.diff_lift_lift_H.step()
