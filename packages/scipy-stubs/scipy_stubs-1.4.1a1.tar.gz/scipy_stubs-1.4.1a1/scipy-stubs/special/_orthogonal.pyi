from collections.abc import Callable
from typing import Literal, TypeAlias, overload

import numpy as np
import numpy.typing as npt
import scipy._typing as spt

_PointsWeights: TypeAlias = tuple[npt.NDArray[np.float64], npt.NDArray[np.float64]]
_PointsWeightsMu: TypeAlias = tuple[npt.NDArray[np.float64], npt.NDArray[np.float64], np.float64]

__all__ = [
    "chebyc",
    "chebys",
    "chebyt",
    "chebyu",
    "gegenbauer",
    "genlaguerre",
    "hermite",
    "hermitenorm",
    "jacobi",
    "laguerre",
    "legendre",
    "roots_chebyc",
    "roots_chebys",
    "roots_chebyt",
    "roots_chebyu",
    "roots_gegenbauer",
    "roots_genlaguerre",
    "roots_hermite",
    "roots_hermitenorm",
    "roots_jacobi",
    "roots_laguerre",
    "roots_legendre",
    "roots_sh_chebyt",
    "roots_sh_chebyu",
    "roots_sh_jacobi",
    "roots_sh_legendre",
    "sh_chebyt",
    "sh_chebyu",
    "sh_jacobi",
    "sh_legendre",
]

@overload
def roots_jacobi(n: spt.AnyInt, alpha: spt.AnyReal, beta: spt.AnyReal, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_jacobi(n: spt.AnyInt, alpha: spt.AnyReal, beta: spt.AnyReal, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_sh_jacobi(n: spt.AnyInt, p1: spt.AnyReal, q1: spt.AnyReal, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_sh_jacobi(n: spt.AnyInt, p1: spt.AnyReal, q1: spt.AnyReal, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_genlaguerre(n: spt.AnyInt, alpha: spt.AnyReal, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_genlaguerre(n: spt.AnyInt, alpha: spt.AnyReal, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_laguerre(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_laguerre(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_hermite(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_hermite(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_hermitenorm(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_hermitenorm(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_gegenbauer(n: spt.AnyInt, alpha: spt.AnyReal, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_gegenbauer(n: spt.AnyInt, alpha: spt.AnyReal, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_chebyt(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_chebyt(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_chebyu(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_chebyu(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_chebyc(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_chebyc(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_chebys(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_chebys(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_sh_chebyt(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_sh_chebyt(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_sh_chebyu(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_sh_chebyu(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_legendre(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_legendre(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...
@overload
def roots_sh_legendre(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights: ...
@overload
def roots_sh_legendre(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu: ...

class orthopoly1d(np.poly1d):
    @property
    def limits(self) -> tuple[float, float]: ...
    def __init__(
        self,
        roots: npt.ArrayLike,
        weights: npt.ArrayLike | None,
        hn: float = ...,
        kn: float = ...,
        wfunc: Callable[[float], float] | None = ...,
        limits: tuple[float, float] | None = ...,
        monic: bool = ...,
        eval_func: np.ufunc = ...,
    ) -> None: ...
    def weight_func(self, x: float) -> float: ...

def legendre(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def chebyt(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def chebyu(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def chebyc(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def chebys(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def jacobi(n: spt.AnyInt, alpha: spt.AnyReal, beta: spt.AnyReal, monic: bool = ...) -> orthopoly1d: ...
def laguerre(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def genlaguerre(n: spt.AnyInt, alpha: spt.AnyReal, monic: bool = ...) -> orthopoly1d: ...
def hermite(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def hermitenorm(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def gegenbauer(n: spt.AnyInt, alpha: spt.AnyReal, monic: bool = ...) -> orthopoly1d: ...
def sh_legendre(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def sh_chebyt(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def sh_chebyu(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d: ...
def sh_jacobi(n: spt.AnyInt, p: spt.AnyReal, q: spt.AnyReal, monic: bool = ...) -> orthopoly1d: ...

# These functions are not public, but still need stubs because they
# get checked in the tests.
def _roots_hermite_asy(n: spt.AnyInt) -> _PointsWeights: ...
