from scipy._lib._disjoint_set import DisjointSet
from scipy._typing import Untyped

__all__ = [
    "ClusterNode",
    "DisjointSet",
    "average",
    "centroid",
    "complete",
    "cophenet",
    "correspond",
    "cut_tree",
    "dendrogram",
    "fcluster",
    "fclusterdata",
    "from_mlab_linkage",
    "inconsistent",
    "is_isomorphic",
    "is_monotonic",
    "is_valid_im",
    "is_valid_linkage",
    "leaders",
    "leaves_list",
    "linkage",
    "maxRstat",
    "maxdists",
    "maxinconsts",
    "median",
    "num_obs_linkage",
    "optimal_leaf_ordering",
    "set_link_color_palette",
    "single",
    "to_mlab_linkage",
    "to_tree",
    "ward",
    "weighted",
]

class ClusterWarning(UserWarning): ...

def int_floor(arr, xp) -> Untyped: ...
def single(y) -> Untyped: ...
def complete(y) -> Untyped: ...
def average(y) -> Untyped: ...
def weighted(y) -> Untyped: ...
def centroid(y) -> Untyped: ...
def median(y) -> Untyped: ...
def ward(y) -> Untyped: ...
def linkage(y, method: str = "single", metric: str = "euclidean", optimal_ordering: bool = False) -> Untyped: ...

class ClusterNode:
    id: Untyped
    left: Untyped
    right: Untyped
    dist: Untyped
    count: Untyped
    def __init__(self, id, left: Untyped | None = None, right: Untyped | None = None, dist: int = 0, count: int = 1): ...
    def __lt__(self, node) -> Untyped: ...
    def __gt__(self, node) -> Untyped: ...
    def __eq__(self, node) -> Untyped: ...  # type: ignore[override]
    def get_id(self) -> Untyped: ...
    def get_count(self) -> Untyped: ...
    def get_left(self) -> Untyped: ...
    def get_right(self) -> Untyped: ...
    def is_leaf(self) -> Untyped: ...
    def pre_order(self, func=...) -> Untyped: ...

def cut_tree(Z, n_clusters: Untyped | None = None, height: Untyped | None = None) -> Untyped: ...
def to_tree(Z, rd: bool = False) -> Untyped: ...
def optimal_leaf_ordering(Z, y, metric: str = "euclidean") -> Untyped: ...
def cophenet(Z, Y: Untyped | None = None) -> Untyped: ...
def inconsistent(Z, d: int = 2) -> Untyped: ...
def from_mlab_linkage(Z) -> Untyped: ...
def to_mlab_linkage(Z) -> Untyped: ...
def is_monotonic(Z) -> Untyped: ...
def is_valid_im(R, warning: bool = False, throw: bool = False, name: Untyped | None = None) -> Untyped: ...
def is_valid_linkage(Z, warning: bool = False, throw: bool = False, name: Untyped | None = None) -> Untyped: ...
def num_obs_linkage(Z) -> Untyped: ...
def correspond(Z, Y) -> Untyped: ...
def fcluster(
    Z, t, criterion: str = "inconsistent", depth: int = 2, R: Untyped | None = None, monocrit: Untyped | None = None
) -> Untyped: ...
def fclusterdata(
    X,
    t,
    criterion: str = "inconsistent",
    metric: str = "euclidean",
    depth: int = 2,
    method: str = "single",
    R: Untyped | None = None,
) -> Untyped: ...
def leaves_list(Z) -> Untyped: ...
def set_link_color_palette(palette): ...
def dendrogram(
    Z,
    p: int = 30,
    truncate_mode: Untyped | None = None,
    color_threshold: Untyped | None = None,
    get_leaves: bool = True,
    orientation: str = "top",
    labels: Untyped | None = None,
    count_sort: bool = False,
    distance_sort: bool = False,
    show_leaf_counts: bool = True,
    no_plot: bool = False,
    no_labels: bool = False,
    leaf_font_size: Untyped | None = None,
    leaf_rotation: Untyped | None = None,
    leaf_label_func: Untyped | None = None,
    show_contracted: bool = False,
    link_color_func: Untyped | None = None,
    ax: Untyped | None = None,
    above_threshold_color: str = "C0",
) -> Untyped: ...
def is_isomorphic(T1, T2) -> Untyped: ...
def maxdists(Z) -> Untyped: ...
def maxinconsts(Z, R) -> Untyped: ...
def maxRstat(Z, R, i) -> Untyped: ...
def leaders(Z, T) -> Untyped: ...
