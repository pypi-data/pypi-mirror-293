from scipy._typing import Untyped
from scipy.optimize import OptimizeResult

EPS: Untyped
TERMINATION_MESSAGES: Untyped

class BVPResult(OptimizeResult): ...

def estimate_fun_jac(fun, x, y, p, f0: Untyped | None = None) -> Untyped: ...
def estimate_bc_jac(bc, ya, yb, p, bc0: Untyped | None = None) -> Untyped: ...
def compute_jac_indices(n, m, k) -> Untyped: ...
def stacked_matmul(a, b) -> Untyped: ...
def construct_global_jac(
    n,
    m,
    k,
    i_jac,
    j_jac,
    h,
    df_dy,
    df_dy_middle,
    df_dp,
    df_dp_middle,
    dbc_dya,
    dbc_dyb,
    dbc_dp,
) -> Untyped: ...
def collocation_fun(fun, y, p, x, h) -> Untyped: ...
def prepare_sys(n, m, k, fun, bc, fun_jac, bc_jac, x, h) -> Untyped: ...
def solve_newton(n, m, h, col_fun, bc, jac, y, p, B, bvp_tol, bc_tol) -> Untyped: ...
def print_iteration_header(): ...
def print_iteration_progress(iteration, residual, bc_residual, total_nodes, nodes_added): ...
def estimate_rms_residuals(fun, sol, x, h, p, r_middle, f_middle) -> Untyped: ...
def create_spline(y, yp, x, h) -> Untyped: ...
def modify_mesh(x, insert_1, insert_2) -> Untyped: ...
def wrap_functions(fun, bc, fun_jac, bc_jac, k, a, S, D, dtype) -> Untyped: ...
def solve_bvp(
    fun,
    bc,
    x,
    y,
    p: Untyped | None = None,
    S: Untyped | None = None,
    fun_jac: Untyped | None = None,
    bc_jac: Untyped | None = None,
    tol: float = 0.001,
    max_nodes: int = 1000,
    verbose: int = 0,
    bc_tol: Untyped | None = None,
) -> Untyped: ...
