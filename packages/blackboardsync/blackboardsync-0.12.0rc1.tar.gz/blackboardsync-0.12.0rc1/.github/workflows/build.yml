name: Build

on:
  push:
    tags:
      - '*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VER: "3.11.9"
  NAME: "BlackboardSync"
  PRE_RELEASE: ${{ contains(github.ref_name, '-') }}

permissions:
  contents: write

jobs:
  test:
    uses: ./.github/workflows/pytest.yml
    with:
      python-version: "3.10"

  version:
    needs: [ test ]
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.version-check.outputs.code }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VER }}
      - run: |
          pip install --upgrade setuptools
          pip install setuptools-scm
      - id: version-check
        run: echo "code=$(python -m setuptools_scm)" >> "$GITHUB_OUTPUT"

  release-notes:
    needs: [ test ]
    runs-on: ubuntu-latest
    outputs:
      body: ${{ steps.extract-release-notes.outputs.release_notes }}
    steps:
      - uses: actions/checkout@v4
      - id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v2
        with:
          prerelease: ${{ env.PRE_RELEASE }}

  package-prep:
    needs: [ version ]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.version.outputs.code }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VER }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 GitPython packaging

      - name: Run jinja2
        run: python packaging/replace.py $VERSION

      - run: cp LICENSE replaced

      - run: cp packaging/windows/*.ico replaced

      - uses: actions/upload-artifact@v4
        with:
          name: packaging
          path: replaced/

  pypi:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VER }}
      - uses: sanjacob/pipenv-requirements@v1
        with:
          from-pipfile: true
          dev: true
      - run: python -m build
      - name: Deploy to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: twine upload dist/*

  pyinstaller:
    needs: [ test ]
    uses: ./.github/workflows/pyinstaller.yml
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    with:
      python-version: "3.11.9"
      runs-on: ${{ matrix.os }}

  package-windows:
    needs: [ pyinstaller, version, package-prep ]
    runs-on: windows-latest
    env:
      BUILD_SCRIPT: "packaging/pkg_win.nsi"
      VERSION: ${{ needs.version.outputs.code }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: packaging
          path: ./packaging

      - uses: actions/download-artifact@v4
        with:
          name: build-windows-latest
          path: ./dist/

      - run: tar -xvf ./dist/build.tar

      - name: Create windows installer
        uses: joncloud/makensis-action@v4.1
        with:
          script-file: ${{ env.BUILD_SCRIPT }}
          arguments: "/V3 /DVERSION=${{ env.VERSION }}"

      - uses: actions/upload-artifact@v4
        with:
          name: package-windows-latest
          path: dist/*.exe

  package-macos:
    needs: [ pyinstaller, version, package-prep ]
    runs-on: macos-latest
    env:
      BUILD_SCRIPT: "packaging/pkg_macos.sh"
      VERSION: ${{ needs.version.outputs.code }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: packaging
          path: ./packaging

      - uses: actions/download-artifact@v4
        with:
          name: build-macos-latest
          path: ./dist/

      - run: tar -xvf ./dist/build.tar

      - name: Import signing certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.BB_P12 }}
          p12-password: ${{ secrets.BB_P12_PASSWORD }}

      - name: Sign and Package into DMG
        run: |
          chmod +x $BUILD_SCRIPT
          $BUILD_SCRIPT "blackboard_sync-$VERSION"

      - uses: actions/upload-artifact@v4
        with:
          name: package-macos-latest
          path: dist/*.dmg
  
  gh-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ package-windows, package-macos, release-notes ]
    runs-on: ubuntu-latest
    env:
      RELEASE_NOTES: ${{ needs.release-notes.outputs.body }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
          pattern: package-*
          merge-multiple: true
      - uses: softprops/action-gh-release@v1
        with:
          body: ${{ env.RELEASE_NOTES }}
          prerelease: ${{ env.PRE_RELEASE }}
          files: |
            dist/*.exe
            dist/*.dmg
