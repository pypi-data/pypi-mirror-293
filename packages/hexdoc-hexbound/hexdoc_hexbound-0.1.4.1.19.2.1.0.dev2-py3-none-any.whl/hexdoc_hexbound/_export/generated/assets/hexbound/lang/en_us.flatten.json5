{"hexcasting.mishap.no_construct": "%s can only be executed by a Construct", "hexcasting.mishap.construct_forbidden": "%s takes orders only from %s", "hexcasting.mishap.bad_block.stored_impetus": "a Cleric Impetus bound to someone present", "hexcasting.mishap.bad_block.construct_broadcaster": "a Construct Broadcaster", "hexcasting.mishap.invalid_value.entity.construct.generic": "a Construct", "hexcasting.mishap.invalid_value.entity.construct.spider": "a Spider Construct", "hexcasting.mishap.invalid_value.entity.construct.blaze": "an Unstable Blaze Construct", "hexcasting.mishap.invalid_value.entity.allay": "an Allay", "hexcasting.mishap.invalid_value.item_stack": "an Item Stack", "hexcasting.mishap.invalid_value.bindable": "a player, pattern, or Null", "hexcasting.mishap.invalid_value.spider_component.core": "a Spider Construct Core", "hexcasting.mishap.invalid_value.spider_component.battery": "a fully charged Spider Construct Battery", "hexcasting.mishap.colorizer.missing_key": "Pattern \"%s\" does not match a saved pigment", "hexcasting.mishap.colorizer.absent": "No pigment is present to be saved", "hexcasting.mishap.colorizer.storage_full": "Too many pigments have already been stored", "hexcasting.mishap.disallowed_construct": "%s is not allowed for Constructs", "hexcasting.mishap.target_not_enlightened": "%s is not enlightened enough", "hexcasting.iota.hexbound:item": "Item", "hexcasting.iota.hexbound:item_stack": "Item Stack", "hexcasting.spell.hexbound:colorizer/save": "Memorize Pigment", "hexcasting.spell.hexbound:colorizer/load": "Recall Pigment", "hexcasting.spell.hexbound:colorizer/delete": "Forget Pigment", "hexcasting.spell.hexbound:create_shield/normal": "Hex Shield", "hexcasting.spell.hexbound:create_shield/glitchy": "Unstable Hex Shield", "hexcasting.spell.hexbound:set_fake_impetus_player": "Bind Figment", "hexcasting.spell.hexbound:pattern/rotate": "Revolving Distillation", "hexcasting.spell.hexbound:pattern/merge": "Painter's Distillation", "hexcasting.spell.hexbound:pattern/head": "Starting Distillation", "hexcasting.spell.hexbound:pattern/tail": "Ending Distillation", "hexcasting.spell.hexbound:pattern/line_count": "Fragment's Purification", "hexcasting.spell.hexbound:pattern/start_dir": "Winding Purification", "hexcasting.spell.hexbound:construct_get_self": "Automaton's Reflection", "hexcasting.spell.hexbound:give_command/pick_up": "Command: Pick Up Item", "hexcasting.spell.hexbound:give_command/drop_off": "Command: Drop Item", "hexcasting.spell.hexbound:give_command/move_to": "Command: Move To Position", "hexcasting.spell.hexbound:give_command/harvest": "Command: Harvest", "hexcasting.spell.hexbound:give_command/use/block": "Command: Use On Block", "hexcasting.spell.hexbound:bind_construct": "Artificer's Gambit", "hexcasting.spell.hexbound:instructions/send": "Send Instructions", "hexcasting.spell.hexbound:instructions/broadcast": "Broadcast Instructions", "hexcasting.spell.hexbound:get_main_hand": "Duelist's Purification", "hexcasting.spell.hexbound:get_off_hand": "Shieldbearer's Purification", "hexcasting.spell.hexbound:get_inventory/stacks": "Hoarder's Distillation", "hexcasting.spell.hexbound:get_inventory/items": "Collector's Distillation", "hexcasting.spell.hexbound:get_stack_prop/size": "Treasurer's Purification", "hexcasting.spell.hexbound:get_stack_prop/item": "Logistician's Purification", "hexcasting.spell.hexbound:create_construct/spider": "Create Spider Construct", "hexcasting.spell.hexbound:get_entity/construct": "Entity Purification: Construct", "hexcasting.spell.hexbound:zone_entity/construct": "Zone Distillation: Construct", "hexcasting.spell.hexbound:zone_entity/not_construct": "Zone Distillation: Non-Construct", "hexcasting.spell.book.hexbound:get_entity/construct": "Entity Prfn.: Construct", "hexcasting.spell.book.hexbound:zone_entity/construct": "Zone Dstl.: Construct", "hexcasting.spell.book.hexbound:zone_entity/not_construct": "Zone Dstl.: Non-Construct", "hexcasting.spell.book.hexbound:get_off_hand": "Shieldbearer's Prfn.", "hexbound.vector_format": "(%s, %s, %s)", "hexbound.stack.format": "%dx %s", "hexbound.stack.empty": "Empty Stack", "hexbound.side.north": "north", "hexbound.side.south": "south", "hexbound.side.west": "west", "hexbound.side.east": "east", "hexbound.side.up": "top", "hexbound.side.down": "bottom", "hexbound.construct.status.executing": "Executing command: %s", "hexbound.construct.status.error": "Execution failed: %s", "hexbound.construct.status.idle": "Waiting for instructions", "hexbound.construct.status.bound_player": "Bound to %s", "hexbound.construct.status.bound_pattern": "Inscribed with pattern %s", "hexbound.construct.command.no_op": "not doing anything", "hexbound.construct.command.move_to": "moving to %s", "hexbound.construct.command.drop_off": "dropping an item", "hexbound.construct.command.pick_up": "picking up %s", "hexbound.construct.command.harvest": "harvesting crops at %s", "hexbound.construct.command.use_on_block": "using an item on %2$s of the block at %1$s", "hexbound.construct.command.unknown_item": "an unknown item", "hexbound.construct.exception.component_missing.item": "%s cannot carry items", "hexbound.construct.exception.bad_target.too_far": "%s is too far", "hexbound.construct.exception.bad_target.no_path_found": "could not find a path to %s", "hexbound.construct.exception.bad_target.could_not_reach": "could not reach %s", "hexbound.construct.exception.bad_target.target_expired": "%s is no longer available", "hexbound.construct.exception.bad_target.does_not_exist.item": "target item does not exist", "hexbound.construct.exception.bad_target.not_an_item": "%s is not an item", "hexbound.construct.exception.bad_target.forbidden": "Construct is not allowed to edit %s", "hexbound.construct.exception.bad_target.not_harvestable": "Block at %s is not harvestable", "hexbound.construct.exception.no_item": "construct isn't holding an item", "hexbound.construct.exception.already_has_item": "construct is already carrying %s", "hexbound.construct.exception.unknown_error": "Unknown exception has occurred (this is likely a bug!): %s", "hexbound.impetus.fake_enabled": "Contains a Figment", "entity.hexbound.spider_construct": "Spider Construct", "entity.hexbound.robot_construct": "Robot Construct", "entity.hexbound.shield": "Hex Shield", "item.hexbound.spider_construct_core": "Spider Construct Core", "item.hexbound.spider_construct_battery": "Spider Construct Battery", "item.hexbound.spider_construct_battery.charge": "%d%% charged (%s/%s)", "item.hexbound.spider_construct_battery.full_charge": "Fully charged", "block.hexbound.construct_broadcaster": "Construct Broadcaster", "itemGroup.hexbound.hexbound_group": "Hexbound", "effect.hexbound.reduced_ambit": "Event Horizon", "hexbound.book.category.constructs.title": "Constructs", "hexbound.book.category.constructs.desc": "The patterns in this chapter allow me to manipulate Constructs: living machines capable of carrying out my orders and even casting some limited _Hexes on their own.", "hexbound.book.basics.hexbound_exists.title": "Hexbinding", "hexbound.book.basics.hexbound_exists.1": "I have found evidence of a different branch of _Hexcasting. Known as $(hex)Hexbinding$(), this particular school uses media to create and control automata known as Constructs, manipulate items, and more. As always, I will document my findings in this journal.", "hexbound.book.casting.figments.title": "Figments", "hexbound.book.casting.figments.1": "All my study shows that the act of casting a _Hex inevitably requires a living Caster exist $(o)somewhere$(). Perhaps an obvious and pointless detail: I am the one casting the _Hex, so the requirement is met, but should I discover $(l:hexcasting:greatwork/spellcircles)some means of independent casting$() (or even rig a dispenser to flail a trinket around), it would lose the link and cease to function the moment I cross the portal to the Nether or elsewhere.", "hexbound.book.casting.figments.2": "However, I believe a specially designed web of _media could ''trick'' the _Hex into latching onto it long enough to resolve. These Figments as I've begun calling them, would either be severely limited in their abilities, as Constructs are, or would require something much more intricate to hold their hand through the _Hex, so to speak.$(br)Moreover, Figments are not entirely self-aware: Mind's Reflection simply returns $(l:hexcasting:casting/influences)$(thing)Null$(), while $(l:hexcasting:patterns/spells/sentinels)Sentinels$() and $(thing)$(l:hexcasting:items/pigments)Pigments$() are unreliable.", "hexbound.book.casting.item_iotas.title": "Item Iotas", "hexbound.book.casting.item_iotas.1": "I have discovered two additional types of iotas I can manipulate.$(br2)Item Iotas describe a singular item stripped of its properties, such as damage or enchantments.$(br2)Item Stack Iotas describe a stack of items as they might appear in my inventory, amount, custom names, enchantments, and all.", "hexbound.book.casting.item_iotas.2": "It would also seem Item Stack iotas referring to Foci containing other Item Stack iotas are somewhat faulty. A limit to the depth of my thought perhaps.", "hexbound.book.casting.hexbound_mishaps.title": "Hexbinding Mishaps", "hexbound.book.casting.hexbound_mishaps.1": "New schools of _Hexcasting bring new and exciting ways of utterly failing a _Hex. Here are some I have discovered.", "hexbound.book.casting.hexbound_mishaps.construct.no_construct.title": "Not Drawn By Construct", "hexbound.book.casting.hexbound_mishaps.construct.no_construct.desc": "The pattern drawn cannot be executed by anything except a $(l:hexbound:patterns/constructs/constructs_intro)Construct$(). Causes purple sparks and slows me for a few seconds.", "hexbound.book.casting.hexbound_mishaps.construct.missing_component.title": "Construct Incapable", "hexbound.book.casting.hexbound_mishaps.construct.missing_component.desc": "The pattern drawn (usually a command) requires the Construct do something it cannot, such as attacking for a utility Construct. Causes yellow sparks.", "hexbound.book.casting.hexbound_mishaps.construct.forbidden.title": "Construct Is Forbidden", "hexbound.book.casting.hexbound_mishaps.construct.forbidden.desc": "I attempted to give orders to a Construct that will not accept any from me. Causes brown sparks and pushes me away from the Construct.", "hexbound.book.casting.hexbound_mishaps.colorizer.not_set.title": "No Pigment Present", "hexbound.book.casting.hexbound_mishaps.colorizer.not_set.desc": "I have not internalized a Pigment yet. Causes white sparks.", "hexbound.book.casting.hexbound_mishaps.colorizer.missing_key.title": "No Pigment For Key", "hexbound.book.casting.hexbound_mishaps.colorizer.missing_key.desc": "I have not $(l:hexbound:patterns/spells/colorizer_storage)memorized a Pigment$() for the pattern I entered. Causes white sparks and causes me to lose my current Pigment.", "hexbound.book.casting.hexbound_mishaps.colorizer.too_many.title": "Too Many Pigments", "hexbound.book.casting.hexbound_mishaps.colorizer.too_many.desc": "I have already memorized too many Pigments and cannot add another. Causes red sparks.", "hexbound.book.greatwork.impetus_figment.title": "Impetus Figments", "hexbound.book.greatwork.impetus_figment.1": "Now that I possess the means to contain a mind, I have revisited my notes on $(l:hexbound:patterns/great_spells/impetus_fake_player)Bind Figment$() and confirmed that a $(l:hexcasting:greatwork/impetus)Cleric Impetus$() would be the perfect vessel for it. The Impetus must be bound to a $(hex)Hexcaster$() as $(o)enlightened$() as I am; no other mind would allow a piece of itself to be unraveled like this.$(br2)Not yet. THEY WILL. In time.", "hexbound.book.greatwork.impetus_figment.2": "Furthermore, if the Impetus can connect to its bound caster, that connection will take priority over the Figment.$(br2)A thought with no mind bound to a lattice every thought wrapped and screaming it is not itself it always made sense it will never make sense $(k)hello penguin$()$(br2)Ten $(media)Charged Amethyst$() for the spell.", "hexbound.book.interop.hexal.title": "Hexal-Hexbound", "hexbound.book.interop.hexal.1": "It appears some of the _Hexcasting disciplines I've encountered can operate together.$(br2) First, I've discovered that $(l:hexbound:casting/item_iotas)Item Iotas$(), as created by the likes of $(l:hexbound:patterns/item_patterns#hexbound:get_main_hand)Duelist's Purification$(), and Item Type Iotas, as created by $(l:hexal:patterns/types#hexal:type/entity)Physician's Purification$(), are near-identical! Comparisons between them or their types should therefore work as expected.", "hexbound.book.interop.hexal.2": "The second and, perhaps, even more important discovery is the ability of $(l:hexbound:patterns/constructs/constructs_intro)Constructs$() to maintain $(l:hexal:patterns/spells/links)Links$(). This will allow me to send iotas between Wisps and Constructs, or even Constructs and myself! The possibilities are well and truly endless.", "hexbound.book.patterns.pattern_editing.title": "Pattern Editing", "hexbound.book.patterns.pattern_editing.1": "Some patterns I found seem to allow editing other patterns in multiple ways, even producing patterns that would ordinarily be impossible to draw.$(br2)Exciting as that may sound, anything possible I could just draw myself, and any impossible pattern is very unlikely to produce valuable results.$(br)Some look pretty good on a $(l:hexcasting:items/scroll)Scroll$() though, so not entirely pointless!", "hexbound.book.patterns.pattern_editing.rotate": "Removes a pattern and an integer from the stack and rotates the pattern the number of times given by the integer. Positive numbers rotate clockwise, while negative rotate counter-clockwise.", "hexbound.book.patterns.pattern_editing.merge": "Removes two patterns and merges them, as if first stroke of the second was drawn from the last point of the first. It appears if the result is longer than 128 strokes, its end will be lost entirely.", "hexbound.book.patterns.pattern_editing.line_count": "Removes a pattern from the stack and returns the number of strokes the removed pattern is composed of.", "hexbound.book.patterns.pattern_editing.start_dir": "Removes a pattern from the stack and returns a number from 0 to 5 representing the pattern's starting direction. The returned number will be 0 for north-east, 1 for east, and continue to increase clockwise.", "hexbound.book.patterns.pattern_editing.head": "Removes a pattern and a number N from the stack. N must be between 1 and the number of strokes in the removed pattern. Returns a pattern composed of the first N strokes of the removed pattern, preserving the original pattern's direction.", "hexbound.book.patterns.pattern_editing.tail": "Removes a pattern and a number from the stack. Behaves exactly as Starting Distillation but takes the last strokes of the pattern instead of the first.", "hexbound.book.patterns.item_patterns.title": "Item Patterns", "hexbound.book.patterns.item_patterns.prop.item": "Transforms the $(l:hexbound:casting/item_iotas)Item Stack$() at the top of the stack into its Item.", "hexbound.book.patterns.item_patterns.prop.size": "Transforms the Item Stack at the top of the stack into its size.", "hexbound.book.patterns.item_patterns.main_hand": "Transforms the entity at the top of the stack into the Item Stack in its main hand. Also works on Item Frames and dropped items.", "hexbound.book.patterns.item_patterns.off_hand": "Transforms the entity at the top of the stack into the Item Stack in its off hand.", "hexbound.book.patterns.item_patterns.inventory.stacks": "Removes two vectors from the stack representing position and side. Returns a list of Item Stacks in the block at the given position accessible from the given side (or all if second vector is zero).", "hexbound.book.patterns.item_patterns.inventory.items": "Removes two vectors from the stack representing position and side. Returns a list of Items in the block at the given position accessible from the given side (or all if second vector is zero).", "hexbound.book.patterns.spells.colorizer_storage.title": "Memorizing Pigments", "hexbound.book.patterns.spells.colorizer_storage.1": "The patterns in this chapter allow me to memorize $(thing)$(l:hexcasting:items/pigments)Pigments$() I have already Internalized.$(br2)Using these patterns associates a Pigment with a pattern of my choosing in my mind, allowing me to revert to it whenever I please. I will never run out of eggs again!", "hexbound.book.patterns.spells.colorizer_storage.save": "Removes a pattern from the stack and associates my current Pigment with that pattern.", "hexbound.book.patterns.spells.colorizer_storage.load": "Removes a pattern from the stack and sets my current Pigment to the one I have associated with that pattern", "hexbound.book.patterns.spells.colorizer_storage.delete": "Removes a pattern from the stack, and forgets the Pigment I have associated with that pattern.", "hexbound.book.patterns.spells.shield.title": "Hex Shield", "hexbound.book.patterns.spells.shield.1": "In my search for geodes and other travels I've discovered that getting shot full of arrows significantly interferes with my ability to focus on my $(hex)Hexes$().$(br2)The patterns detailed in this entry will let me avoid using unwieldy and fragile shields, replacing them with a manifestation of $(media)media$().", "hexbound.book.patterns.spells.shield.2": "These manifestations, or $(hex)Hex Shields$(), will block most projectiles from going through, but only in the direction opposite its facing,allowing me to fire a bow or throw potions with no fear of reprisal. Curiously, this extends to $(l:hexcasting:patterns/basics#hexcasting:raycast/entity)Scout's Distillation$(), which will go through the shield only if it's facing in the same direction.$(br2)It appears I cannot have more than 10 active Hex Shields at once.", "hexbound.book.patterns.spells.shield.normal": "Removes a position vector, facing vector, and a positive number from the stack, creating a Hex Shield with the given position and facing, which will last for the given number of seconds.$(br)Costs 2 $(media)Amethyst Dust$() per second of duration.", "hexbound.book.patterns.spells.shield.glitchy": "Creates an unstable Hex Shield, which will occasionally distort. The effect appears purely visual.", "hexbound.book.patterns.great_spells.set_fake_impetus_player.1": "Removes a vector from the stack and binds a $(l:hexbound:casting/figments)Figment$() to the block at the position represented by the vector.$(br)I can't tell what the $(l:hexbound:greatwork/impetus_figment)target$() is supposed to be though.", "hexbound.book.constructs.constructs_intro.title": "Intro to Constructs", "hexbound.book.constructs.constructs_intro.1": "Constructs are a type of machine used by $(hex)Hexbinders$() in ages past, and, following meticulous study of surviving blueprints, are now at my disposal.", "hexbound.book.constructs.constructs_intro.2": "What puts Constructs apart from simpler machines such as the Golems employed by villages of this world is their ability to process _Hexes and use special patterns to interpret _Hexes as physical actions to perform. While the limitations are many, these $(l:hexbound:patterns/constructs/executing_commands)''commands''$() allow me to encode as Construct instructions a variety of tasks I'd personally find too mundane or dangerous (unless I find myself getting attached to these inanimate objects).", "hexbound.book.constructs.constructs_intro.3": "First, the limitations:$(br)$(li)Constructs are too sensitive to use their own _media for casting _Hexes. It should be assumed they do not possess any _media to spend.$(li)Most patterns, especially Spells, directly affecting the outside world simply cannot be processed by their limited pseudo-minds.$(li)Said pseudo-minds behave as any other $(l:hexbound:casting/figments)Figment$(): $(l:hexcasting:patterns/basics#hexcasting:get_caster)Mind's Reflection$() will push $(thing)$(l:hexcasting:casting/influences)Null$(), $(l:hexcasting:items/pigments)Pigments$() and $(l:hexcasting:patterns/spells/sentinels)Sentinels$() will not function.", "hexbound.book.constructs.constructs_intro.4": "Now, for some details about the casting mechanism:$(br)$(li)Construct instructions are a list of iotas and are executed immediately after each other, not unlike those contained within $(l:hexcasting:items/hexcasting)Casting Items$().$(li)Constructs start new instructions with an empty $(l:hexcasting:casting/stack)stack$() and $(l:hexcasting:patterns/readwrite#hexcasting:local)Ravenmind$().$(li)Encountering a Mishap or an error in executing the command, cancels both the execution and any issued command, as well as clear the stack and Ravenmind.", "hexbound.book.constructs.constructs_intro.send": "Some basic patterns to close off the introduction. Remove a reference to a Construct and a list of patterns from the stack and send the list as instructions to the Construct.", "hexbound.book.constructs.constructs_intro.construct_self": "If executed by a Construct, puts a reference to it on the stack. Otherwise, causes a $(l:hexcasting:casting/mishaps)Mishap$(). Should be used instead of $(l:hexcasting:patterns/basics#hexcasting:get_caster)Mind's Reflection$() for _Hexes executed by Constructs.", "hexbound.book.constructs.executing_commands.title": "Executing Commands", "hexbound.book.constructs.executing_commands.1": "The core component of any _Hex executed by a Construct will be its commands, however there is an issue that needs to be addressed first. Construct instructions, like $(l:hexcasting:patterns/meta)any _Hex packaged into a list$(), execute instantly after each other. While normally not an issue, this causes multiple commands issued in a row to replace each other, not giving even the shortest ones a moment to be executed.", "hexbound.book.constructs.executing_commands.2": "The solution lies in the last argument to any command pattern. Once the command has finished, the construct will execute the list passed to it next. Stack and $(l:hexcasting:patterns/readwrite#hexcasting:local)Ravenmind$() remain intact between these executions, and they can be chained to execute whole sequences of commands. However, each command will bring the spell closer to its execution limit, like $(l:hexcasting:patterns/meta#hexcasting:eval)Hermes' Gambit$() would.", "hexbound.book.constructs.executing_commands.3": "Finally, a few notes on evaluating commands:$(br)$(li)Commands can only be evaluated by a Construct. Doing so myself will cause a $(l:hexcasting:casting/mishaps)Mishap$() to occur.$(li)Some commands require the Construct be able to perform certain actions like picking up items or harvesting crops. $(li2)Should I, eventually, discover a Construct incapable of such actions, evaluating such a command will cause a Mishap.$(li)Some commands require the target be directly next to the Construct. I can expect about two blocks of leeway within which the Construct can figure the details out.", "hexbound.book.constructs.executing_commands.4": "Should a Mishap or a command error occur, I can examine the Construct by using a $(l:hexcasting:items/lens)Scrying Lens$() on it while sneaking to find the issue.$(br2)Now, for the commands themselves.", "hexbound.book.constructs.executing_commands.move_to": "Removes a vector from the stack and instructs the Construct to go to the position represented by that vector. The position must be within 32 blocks of the Construct.", "hexbound.book.constructs.executing_commands.pick_up": "Removes an entity representing a dropped item from the stack and instructs the Construct to pick it up. The item must be next to the Construct, the construct must be able to pick items up and not be carrying one already.", "hexbound.book.constructs.executing_commands.drop_off": "Instructs the Construct to drop the item it is currently carrying. The construct must be able carrying an item.", "hexbound.book.constructs.executing_commands.harvest": "Removes a vector from the stack and instructs the Construct to harvest crops or berries at the position represented by that vector. If harvesting the block destroys it, it will be replanted by the Construct. The position must be next to the Construct, and the Construct must be capable of interacting with the world.", "hexbound.book.constructs.executing_commands.use/block": "Removes two vectors from the stack and instructs the Construct to use the currently held item, if any, on the block represented by the first vector.", "hexbound.book.constructs.executing_commands.use/block.more": "If the second vector is not zero, the block is used from the side indicated by it. If it is zero, it will be used from the side closest to the Construct. The position must be next to the Construct, the Construct must be capable of carrying items, and interacting with the world.", "hexbound.book.constructs.spider_construct.title": "Spider Constructs", "hexbound.book.constructs.spider_construct.1": "After careful study, experimentation, and filling in both figurative and literal holes in what blueprints I could find, I believe I'm ready to create a Construct of my own.$(br2)Spider Constructs, as I've taken to calling them, are small, but nimble assistants capable of interacting with their surroundings, and carrying items.", "hexbound.book.constructs.spider_construct.2": "One of the blueprints contained an alternate design for this Construct, which I replicated as best I could. The two designs can be switched by using an Iron Block or Amethyst Block on the Construct while sneaking or, should I find the Spider form not to my taste, by enabling a form of perception filter in configuration files to make all Constructs appear to me as their alternate design.", "hexbound.book.constructs.spider_construct.core.title": "Spider Construct Core", "hexbound.book.constructs.spider_construct.core.desc": "The first of the three components required to create this Construct is the Core, a composite of the lenses, motivators, and inert _media required for the Construct's base form.", "hexbound.book.constructs.spider_construct.battery.title": "Spider Construct Battery", "hexbound.book.constructs.spider_construct.battery.desc": "The battery is the second component. While already made of a fair amount of _media, it will have to be amplified further. Standard usage of $(l:hexcasting:patterns/spells/hexcasting#hexcasting:recharge)Recharge$() will do, and I will be able to see the amount of $(media)Amethyst Dust$() required on the battery itself.", "hexbound.book.constructs.spider_construct.3": "Some notes on the final component. The evidence I found clearly shows it is meant to be created artificially, but is not detailed enough to do so.$(br)Fortunately, I managed to work a replacement into the process: a living Allay. A creature well-attuned to _media and already capable of carrying items makes this process almost too easy.$(br2)Sometimes I wonder if the Allay's fate should concern me more than a passing thought.", "hexbound.book.constructs.spider_construct.create": "The inputs represent, starting from deepest on the stack, the Allay, a dropped Core, and a dropped fully-charged Battery. The items are consumed, and the Allay is converted into a Construct.", "hexbound.book.constructs.selecting_constructs.title": "Selecting Constructs", "hexbound.book.constructs.selecting_constructs.single": "Transform the position on the stack into the Construct at that location (or $(l:hexcasting:casting/influences)$(thing)Null$() if there isn't one).", "hexbound.book.constructs.selecting_constructs.zone": "Take a position and maximum distance on the stack, and combine them into a list of Constructs near the position.", "hexbound.book.constructs.selecting_constructs.zone_negate": "Take a position and maximum distance on the stack, and combine them into a list of non-Construct entities near the position.", "hexbound.book.constructs.bind_broadcast.title": "Binding and Broadcasting", "hexbound.book.constructs.bind_broadcast.1": "I have run into several problems issuing orders to my Constructs: controlling several of them requires I pass orders to each individually, it is quite challenging to send order to only some of the Constructs in an area, and, finally, it occurred to me other $(hex)Hexcasters$() can order my Constructs to do anything they please!", "hexbound.book.constructs.bind_broadcast.broadcaster.title": "Construct Broadcaster", "hexbound.book.constructs.bind_broadcast.broadcaster.desc": "The Construct Broadcaster is a small structure capable of broadcasting my orders 16 blocks around itself, solving the first two of my issues.", "hexbound.book.constructs.bind_broadcast.broadcast": "Removes a vector and a list of patterns. Broadcasts the list as instructions through the Broadcaster located at the indicated position.", "hexbound.book.constructs.bind_broadcast.2": "Broadcasting orders should save me from a few headaches in the long run, even if the range is still limited. However that is not all: a $(l:hexcasting:items/slate)Slate$() containing a pattern can be placed in front of the Broadcaster, associating the instructions sent through it with that pattern.$(br2)To make use of that association, a Construct must be bound to a pattern.", "hexbound.book.constructs.bind_broadcast.bind": "Removes a reference to a player, a pattern, or $(thing)$(l:hexcasting:casting/influences)Null$() from the stack, and binds the Construct to it.", "hexbound.book.constructs.bind_broadcast.3": "If bound to a pattern, the Construct will ignore broadcast orders (but not direct orders!) unless they are associated with the same pattern.$(br2)If bound to a player, the Construct will refuse orders, direct or broadcast, from anyone other than that player.$(br2)Finally, passing $(thing)$(l:hexcasting:casting/influences)Null$() removes both the pattern and the player the Construct is bound to."}