# coding: utf-8

"""
BugProve Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 20240716
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from bugprove.internal.models.component_category import ComponentCategory
from bugprove.internal.models.cvss_vector import CvssVector
from typing import Optional, Set
from typing_extensions import Self


class KnownVulnerabilityFilter(BaseModel):
    """
    KnownVulnerabilityFilter
    """  # noqa: E501

    ignored_cvss_vectors: Optional[List[CvssVector]] = Field(
        default=None,
        description="Findings for known vulnerabilities that have CVSS vectors contained in this set will start in Ignored state.",
        alias="ignoredCvssVectors",
    )
    minimum_cvss_score: Optional[
        Union[Annotated[float, Field(le=11, strict=True, ge=0)], Annotated[int, Field(le=11, strict=True, ge=0)]]
    ] = Field(
        default=None,
        description="If set, findings for known vulnerabilities that have a lower CVSS score  than the one specified will start in Ignored state.",
        alias="minimumCvssScore",
    )
    ignored_dependency_categories: Optional[List[ComponentCategory]] = Field(
        default=None,
        description="Findings for known vulnerabilities for which the dependency's category  is contained in this set will start in Ignored state.",
        alias="ignoredDependencyCategories",
    )
    ignore_not_known_exploited: Optional[StrictBool] = Field(
        default=None,
        description="If true, findings for known vulnerabilities that are NOT marked as a known exploited vulnerability  will start in Ignored state.",
        alias="ignoreNotKnownExploited",
    )
    __properties: ClassVar[List[str]] = [
        "ignoredCvssVectors",
        "minimumCvssScore",
        "ignoredDependencyCategories",
        "ignoreNotKnownExploited",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KnownVulnerabilityFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ignored_cvss_vectors (nullable) is None
        # and model_fields_set contains the field
        if self.ignored_cvss_vectors is None and "ignored_cvss_vectors" in self.model_fields_set:
            _dict["ignoredCvssVectors"] = None

        # set to None if minimum_cvss_score (nullable) is None
        # and model_fields_set contains the field
        if self.minimum_cvss_score is None and "minimum_cvss_score" in self.model_fields_set:
            _dict["minimumCvssScore"] = None

        # set to None if ignored_dependency_categories (nullable) is None
        # and model_fields_set contains the field
        if self.ignored_dependency_categories is None and "ignored_dependency_categories" in self.model_fields_set:
            _dict["ignoredDependencyCategories"] = None

        # set to None if ignore_not_known_exploited (nullable) is None
        # and model_fields_set contains the field
        if self.ignore_not_known_exploited is None and "ignore_not_known_exploited" in self.model_fields_set:
            _dict["ignoreNotKnownExploited"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KnownVulnerabilityFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ignoredCvssVectors": obj.get("ignoredCvssVectors"),
                "minimumCvssScore": obj.get("minimumCvssScore"),
                "ignoredDependencyCategories": obj.get("ignoredDependencyCategories"),
                "ignoreNotKnownExploited": obj.get("ignoreNotKnownExploited"),
            }
        )
        return _obj
