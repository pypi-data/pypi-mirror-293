# coding: utf-8

"""
BugProve Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 20240716
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from bugprove.internal.models.known_vulnerability_filter import KnownVulnerabilityFilter
from bugprove.internal.models.monitoring_policy import MonitoringPolicy
from typing import Optional, Set
from typing_extensions import Self


class DefaultScanConfiguration(BaseModel):
    """
    DefaultScanConfiguration
    """  # noqa: E501

    is_manual: Optional[StrictBool] = Field(
        default=None,
        description="If true, no automatic PRIS scans are started, except for the binaries  explicitly specified in BinariesToScan. If false or left empty, automatic  PRIS scans are started for the most likely to be vulnerable binaries.",
        alias="isManual",
    )
    binaries_to_scan: Optional[List[StrictStr]] = Field(
        default=None,
        description="List of binaries to start PRIS scans for. Specify file names. If  specified, IsManual must be true.",
        alias="binariesToScan",
    )
    is_debug_build: Optional[StrictBool] = Field(
        default=None,
        description="Whether the uploaded artifact is a debug version of the  software. Suppresses findings related to debug symbols.",
        alias="isDebugBuild",
    )
    known_vulnerability_filter: Optional[KnownVulnerabilityFilter] = Field(
        default=None, alias="knownVulnerabilityFilter"
    )
    monitoring_policy: Optional[MonitoringPolicy] = Field(default=None, alias="monitoringPolicy")
    __properties: ClassVar[List[str]] = [
        "isManual",
        "binariesToScan",
        "isDebugBuild",
        "knownVulnerabilityFilter",
        "monitoringPolicy",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DefaultScanConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of known_vulnerability_filter
        if self.known_vulnerability_filter:
            _dict["knownVulnerabilityFilter"] = self.known_vulnerability_filter.to_dict()
        # set to None if is_manual (nullable) is None
        # and model_fields_set contains the field
        if self.is_manual is None and "is_manual" in self.model_fields_set:
            _dict["isManual"] = None

        # set to None if binaries_to_scan (nullable) is None
        # and model_fields_set contains the field
        if self.binaries_to_scan is None and "binaries_to_scan" in self.model_fields_set:
            _dict["binariesToScan"] = None

        # set to None if is_debug_build (nullable) is None
        # and model_fields_set contains the field
        if self.is_debug_build is None and "is_debug_build" in self.model_fields_set:
            _dict["isDebugBuild"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DefaultScanConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "isManual": obj.get("isManual"),
                "binariesToScan": obj.get("binariesToScan"),
                "isDebugBuild": obj.get("isDebugBuild"),
                "knownVulnerabilityFilter": KnownVulnerabilityFilter.from_dict(obj["knownVulnerabilityFilter"])
                if obj.get("knownVulnerabilityFilter") is not None
                else None,
                "monitoringPolicy": obj.get("monitoringPolicy"),
            }
        )
        return _obj
