# coding: utf-8

"""
BugProve Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 20240716
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from bugprove.internal.models.cvss import Cvss
from bugprove.internal.models.finding_state import FindingState
from bugprove.internal.models.finding_type import FindingType
from typing import Optional, Set
from typing_extensions import Self


class FindingResponse(BaseModel):
    """
    FindingResponse
    """  # noqa: E501

    digest: StrictStr = Field(description="Deduplication digest used to uniquely identify this finding")
    created: datetime
    updated: datetime
    type: FindingType
    state: FindingState
    cvss: Optional[Cvss] = None
    cwe: Optional[StrictInt] = None
    known_exploited: StrictBool = Field(alias="knownExploited")
    parameters: Dict[str, Optional[StrictStr]] = Field(
        description="Additional information, dependent on the finding's type"
    )
    generated_title: Optional[StrictStr] = Field(default=None, alias="generatedTitle")
    short_description: Optional[StrictStr] = Field(default=None, alias="shortDescription")
    long_description: Optional[StrictStr] = Field(default=None, alias="longDescription")
    __properties: ClassVar[List[str]] = [
        "digest",
        "created",
        "updated",
        "type",
        "state",
        "cvss",
        "cwe",
        "knownExploited",
        "parameters",
        "generatedTitle",
        "shortDescription",
        "longDescription",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindingResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cvss
        if self.cvss:
            _dict["cvss"] = self.cvss.to_dict()
        # set to None if cwe (nullable) is None
        # and model_fields_set contains the field
        if self.cwe is None and "cwe" in self.model_fields_set:
            _dict["cwe"] = None

        # set to None if generated_title (nullable) is None
        # and model_fields_set contains the field
        if self.generated_title is None and "generated_title" in self.model_fields_set:
            _dict["generatedTitle"] = None

        # set to None if short_description (nullable) is None
        # and model_fields_set contains the field
        if self.short_description is None and "short_description" in self.model_fields_set:
            _dict["shortDescription"] = None

        # set to None if long_description (nullable) is None
        # and model_fields_set contains the field
        if self.long_description is None and "long_description" in self.model_fields_set:
            _dict["longDescription"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindingResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "digest": obj.get("digest"),
                "created": obj.get("created"),
                "updated": obj.get("updated"),
                "type": obj.get("type"),
                "state": obj.get("state"),
                "cvss": Cvss.from_dict(obj["cvss"]) if obj.get("cvss") is not None else None,
                "cwe": obj.get("cwe"),
                "knownExploited": obj.get("knownExploited"),
                "parameters": obj.get("parameters"),
                "generatedTitle": obj.get("generatedTitle"),
                "shortDescription": obj.get("shortDescription"),
                "longDescription": obj.get("longDescription"),
            }
        )
        return _obj
