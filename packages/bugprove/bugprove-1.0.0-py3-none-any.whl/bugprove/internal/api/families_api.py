# coding: utf-8

"""
BugProve Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 20240716
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from bugprove.internal.models.family_response import FamilyResponse
from bugprove.internal.models.family_type import FamilyType
from bugprove.internal.models.list_families_response import ListFamiliesResponse

from bugprove.internal.api_client import ApiClient, RequestSerialized
from bugprove.internal.api_response import ApiResponse
from bugprove.internal.rest import RESTResponseType


class FamiliesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    async def get_family(
        self,
        family_id: Annotated[StrictStr, Field(description="Family ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FamilyResponse:
        """Describe a family (a product or project)


        :param family_id: Family ID (required)
        :type family_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_family_serialize(
            family_id=family_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "FamilyResponse",
            "500": "ErrorResponse",
            "503": "ErrorResponse",
            "429": "ErrorResponse",
            "404": "ErrorResponse",
            "401": "ErrorResponse",
            "403": "ErrorResponse",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def get_family_with_http_info(
        self,
        family_id: Annotated[StrictStr, Field(description="Family ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FamilyResponse]:
        """Describe a family (a product or project)


        :param family_id: Family ID (required)
        :type family_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_family_serialize(
            family_id=family_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "FamilyResponse",
            "500": "ErrorResponse",
            "503": "ErrorResponse",
            "429": "ErrorResponse",
            "404": "ErrorResponse",
            "401": "ErrorResponse",
            "403": "ErrorResponse",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def get_family_without_preload_content(
        self,
        family_id: Annotated[StrictStr, Field(description="Family ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Describe a family (a product or project)


        :param family_id: Family ID (required)
        :type family_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_family_serialize(
            family_id=family_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "FamilyResponse",
            "500": "ErrorResponse",
            "503": "ErrorResponse",
            "429": "ErrorResponse",
            "404": "ErrorResponse",
            "401": "ErrorResponse",
            "403": "ErrorResponse",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_family_serialize(
        self,
        family_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if family_id is not None:
            _path_params["familyId"] = family_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["Bearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/families/{familyId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    async def list_families(
        self,
        type: Annotated[Optional[FamilyType], Field(description="Filter items by type")] = None,
        var_from: Annotated[
            Optional[datetime],
            Field(
                description="Return only items created at or before this date - ignored if ContinuationToken is specified"
            ),
        ] = None,
        continuation_token: Annotated[
            Optional[StrictStr],
            Field(description="A continuation token returned by a previous response to fetch the next set of results"),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=500, strict=True, ge=1)]],
            Field(description="Maximum number of results to return"),
        ] = None,
        keywords: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True, max_length=140)]],
            Field(description="Filter items by name (matching is case-insensitive, whitespace normalized)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListFamiliesResponse:
        """List families (products and projects)


        :param type: Filter items by type
        :type type: FamilyType
        :param var_from: Return only items created at or before this date - ignored if ContinuationToken is specified
        :type var_from: datetime
        :param continuation_token: A continuation token returned by a previous response to fetch the next set of results
        :type continuation_token: str
        :param limit: Maximum number of results to return
        :type limit: int
        :param keywords: Filter items by name (matching is case-insensitive, whitespace normalized)
        :type keywords: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_families_serialize(
            type=type,
            var_from=var_from,
            continuation_token=continuation_token,
            limit=limit,
            keywords=keywords,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListFamiliesResponse",
            "500": "ErrorResponse",
            "503": "ErrorResponse",
            "400": "ValidationErrorResponse",
            "429": "ErrorResponse",
            "401": "ErrorResponse",
            "403": "ErrorResponse",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def list_families_with_http_info(
        self,
        type: Annotated[Optional[FamilyType], Field(description="Filter items by type")] = None,
        var_from: Annotated[
            Optional[datetime],
            Field(
                description="Return only items created at or before this date - ignored if ContinuationToken is specified"
            ),
        ] = None,
        continuation_token: Annotated[
            Optional[StrictStr],
            Field(description="A continuation token returned by a previous response to fetch the next set of results"),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=500, strict=True, ge=1)]],
            Field(description="Maximum number of results to return"),
        ] = None,
        keywords: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True, max_length=140)]],
            Field(description="Filter items by name (matching is case-insensitive, whitespace normalized)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListFamiliesResponse]:
        """List families (products and projects)


        :param type: Filter items by type
        :type type: FamilyType
        :param var_from: Return only items created at or before this date - ignored if ContinuationToken is specified
        :type var_from: datetime
        :param continuation_token: A continuation token returned by a previous response to fetch the next set of results
        :type continuation_token: str
        :param limit: Maximum number of results to return
        :type limit: int
        :param keywords: Filter items by name (matching is case-insensitive, whitespace normalized)
        :type keywords: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_families_serialize(
            type=type,
            var_from=var_from,
            continuation_token=continuation_token,
            limit=limit,
            keywords=keywords,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListFamiliesResponse",
            "500": "ErrorResponse",
            "503": "ErrorResponse",
            "400": "ValidationErrorResponse",
            "429": "ErrorResponse",
            "401": "ErrorResponse",
            "403": "ErrorResponse",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def list_families_without_preload_content(
        self,
        type: Annotated[Optional[FamilyType], Field(description="Filter items by type")] = None,
        var_from: Annotated[
            Optional[datetime],
            Field(
                description="Return only items created at or before this date - ignored if ContinuationToken is specified"
            ),
        ] = None,
        continuation_token: Annotated[
            Optional[StrictStr],
            Field(description="A continuation token returned by a previous response to fetch the next set of results"),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=500, strict=True, ge=1)]],
            Field(description="Maximum number of results to return"),
        ] = None,
        keywords: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True, max_length=140)]],
            Field(description="Filter items by name (matching is case-insensitive, whitespace normalized)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List families (products and projects)


        :param type: Filter items by type
        :type type: FamilyType
        :param var_from: Return only items created at or before this date - ignored if ContinuationToken is specified
        :type var_from: datetime
        :param continuation_token: A continuation token returned by a previous response to fetch the next set of results
        :type continuation_token: str
        :param limit: Maximum number of results to return
        :type limit: int
        :param keywords: Filter items by name (matching is case-insensitive, whitespace normalized)
        :type keywords: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_families_serialize(
            type=type,
            var_from=var_from,
            continuation_token=continuation_token,
            limit=limit,
            keywords=keywords,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListFamiliesResponse",
            "500": "ErrorResponse",
            "503": "ErrorResponse",
            "400": "ValidationErrorResponse",
            "429": "ErrorResponse",
            "401": "ErrorResponse",
            "403": "ErrorResponse",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_families_serialize(
        self,
        type,
        var_from,
        continuation_token,
        limit,
        keywords,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if type is not None:
            _query_params.append(("Type", type.value))

        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(("From", var_from.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("From", var_from))

        if continuation_token is not None:
            _query_params.append(("ContinuationToken", continuation_token))

        if limit is not None:
            _query_params.append(("Limit", limit))

        if keywords is not None:
            _query_params.append(("Keywords", keywords))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["Bearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/families",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
