# coding: utf-8

"""
BugProve Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 20240716
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from bugprove.internal.models.finding_summary import FindingSummary
from bugprove.internal.models.monitoring_state import MonitoringState
from bugprove.internal.models.scan_configuration import ScanConfiguration
from bugprove.internal.models.scan_status import ScanStatus
from bugprove.internal.models.upload_type import UploadType
from typing import Optional, Set
from typing_extensions import Self


class ScanResponse(BaseModel):
    """
    ScanResponse
    """  # noqa: E501

    id: StrictStr
    name: StrictStr
    created: datetime
    updated: datetime
    status: ScanStatus
    started: Optional[datetime] = None
    finished: Optional[datetime] = None
    upload_type: UploadType = Field(alias="uploadType")
    upload_checksum: StrictStr = Field(description="Base64-encoded SHA-256 hash of the file", alias="uploadChecksum")
    family_id: Optional[StrictStr] = Field(default=None, alias="familyId")
    configuration: Optional[ScanConfiguration] = None
    findings: Optional[FindingSummary] = None
    monitoring_state: MonitoringState = Field(alias="monitoringState")
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "created",
        "updated",
        "status",
        "started",
        "finished",
        "uploadType",
        "uploadChecksum",
        "familyId",
        "configuration",
        "findings",
        "monitoringState",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScanResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict["configuration"] = self.configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of findings
        if self.findings:
            _dict["findings"] = self.findings.to_dict()
        # set to None if started (nullable) is None
        # and model_fields_set contains the field
        if self.started is None and "started" in self.model_fields_set:
            _dict["started"] = None

        # set to None if finished (nullable) is None
        # and model_fields_set contains the field
        if self.finished is None and "finished" in self.model_fields_set:
            _dict["finished"] = None

        # set to None if family_id (nullable) is None
        # and model_fields_set contains the field
        if self.family_id is None and "family_id" in self.model_fields_set:
            _dict["familyId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScanResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "created": obj.get("created"),
                "updated": obj.get("updated"),
                "status": obj.get("status"),
                "started": obj.get("started"),
                "finished": obj.get("finished"),
                "uploadType": obj.get("uploadType"),
                "uploadChecksum": obj.get("uploadChecksum"),
                "familyId": obj.get("familyId"),
                "configuration": ScanConfiguration.from_dict(obj["configuration"])
                if obj.get("configuration") is not None
                else None,
                "findings": FindingSummary.from_dict(obj["findings"]) if obj.get("findings") is not None else None,
                "monitoringState": obj.get("monitoringState"),
            }
        )
        return _obj
