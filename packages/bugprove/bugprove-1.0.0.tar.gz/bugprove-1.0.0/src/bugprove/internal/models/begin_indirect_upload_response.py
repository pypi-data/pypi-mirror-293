# coding: utf-8

"""
BugProve Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 20240716
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self


class BeginIndirectUploadResponse(BaseModel):
    """
    BeginIndirectUploadResponse
    """  # noqa: E501

    scan_id: StrictStr = Field(alias="scanId")
    upload_id: StrictStr = Field(alias="uploadId")
    expiry: datetime
    signed_url: StrictStr = Field(
        description="A signed URL the actual file needs to be uploaded to with a PUT request. The request   must include the SHA-256 hash of the file (as supplied in the Checksum property of   the request) in the x-amz-checksum-sha256 header. Note the ETag header in the response,  you will need it when starting the scan.",
        alias="signedUrl",
    )
    __properties: ClassVar[List[str]] = ["scanId", "uploadId", "expiry", "signedUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BeginIndirectUploadResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BeginIndirectUploadResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "scanId": obj.get("scanId"),
                "uploadId": obj.get("uploadId"),
                "expiry": obj.get("expiry"),
                "signedUrl": obj.get("signedUrl"),
            }
        )
        return _obj
