# coding: utf-8

"""
BugProve Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 20240716
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self


class BeginMultipartIndirectUploadResponse(BaseModel):
    """
    BeginMultipartIndirectUploadResponse
    """  # noqa: E501

    scan_id: StrictStr = Field(alias="scanId")
    upload_id: StrictStr = Field(alias="uploadId")
    expiry: datetime
    part_size: StrictInt = Field(
        description="Each part in a multipart upload is the same size, except the last   part if the file size is not divisible by the part size (in which case  the last part is the size of the remaining data).",
        alias="partSize",
    )
    signed_urls: List[StrictStr] = Field(
        description="The signed URLs the parts of the file need to be uploaded to with a PUT request.   Store the ETag headers from the responses, you will need them when starting the scan.",
        alias="signedUrls",
    )
    __properties: ClassVar[List[str]] = ["scanId", "uploadId", "expiry", "partSize", "signedUrls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BeginMultipartIndirectUploadResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BeginMultipartIndirectUploadResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "scanId": obj.get("scanId"),
                "uploadId": obj.get("uploadId"),
                "expiry": obj.get("expiry"),
                "partSize": obj.get("partSize"),
                "signedUrls": obj.get("signedUrls"),
            }
        )
        return _obj
