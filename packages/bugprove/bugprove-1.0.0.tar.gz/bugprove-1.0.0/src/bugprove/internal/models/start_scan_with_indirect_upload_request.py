# coding: utf-8

"""
BugProve Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 20240716
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from bugprove.internal.models.scan_configuration import ScanConfiguration
from bugprove.internal.models.upload import Upload
from bugprove.internal.models.upload_type import UploadType
from typing import Optional, Set
from typing_extensions import Self


class StartScanWithIndirectUploadRequest(BaseModel):
    """
    StartScanWithIndirectUploadRequest
    """  # noqa: E501

    name: Annotated[str, Field(min_length=1, strict=True, max_length=140)]
    upload_type: UploadType = Field(alias="uploadType")
    family_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="familyId")
    upload: Upload
    configuration: Optional[ScanConfiguration] = None
    __properties: ClassVar[List[str]] = ["name", "uploadType", "familyId", "upload", "configuration"]

    @field_validator("family_id")
    def family_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z0-9]{13}(_[A-Z0-9]{13}){0,2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z0-9]{13}(_[A-Z0-9]{13}){0,2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartScanWithIndirectUploadRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of upload
        if self.upload:
            _dict["upload"] = self.upload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict["configuration"] = self.configuration.to_dict()
        # set to None if family_id (nullable) is None
        # and model_fields_set contains the field
        if self.family_id is None and "family_id" in self.model_fields_set:
            _dict["familyId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartScanWithIndirectUploadRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "uploadType": obj.get("uploadType"),
                "familyId": obj.get("familyId"),
                "upload": Upload.from_dict(obj["upload"]) if obj.get("upload") is not None else None,
                "configuration": ScanConfiguration.from_dict(obj["configuration"])
                if obj.get("configuration") is not None
                else None,
            }
        )
        return _obj
