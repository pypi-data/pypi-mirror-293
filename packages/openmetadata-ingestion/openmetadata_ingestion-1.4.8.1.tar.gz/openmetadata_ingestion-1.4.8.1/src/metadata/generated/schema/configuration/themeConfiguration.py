# generated by datamodel-codegen:
#   filename:  configuration/themeConfiguration.json
#   timestamp: 2024-08-29T11:04:13+00:00

from __future__ import annotations

from pydantic import BaseModel, Extra, Field, constr


class ThemeConfiguration(BaseModel):
    class Config:
        extra = Extra.forbid

    primaryColor: constr(regex=r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$|^$') = Field(
        ..., description='Primary color used in the UI, in hex code format or empty.'
    )
    errorColor: constr(regex=r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$|^$') = Field(
        ...,
        description='Color used to indicate errors in the UI, in hex code format or empty',
    )
    successColor: constr(regex=r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$|^$') = Field(
        ...,
        description='Color used to indicate success in the UI, in hex code format or empty',
    )
    warningColor: constr(regex=r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$|^$') = Field(
        ...,
        description='Color used to indicate warnings in the UI, in hex code format or empty',
    )
    infoColor: constr(regex=r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$|^$') = Field(
        ...,
        description='Color used for informational messages in the UI, in hex code format or empty',
    )
