# generated by datamodel-codegen:
#   filename:  entity/services/dashboardService.json
#   timestamp: 2024-08-29T11:04:13+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Extra, Field

from ...type import basic, entityHistory, entityReference, entityReferenceList, tagLabel
from .connections import testConnectionResult
from .connections.dashboard import (
    customDashboardConnection,
    domoDashboardConnection,
    lightdashConnection,
    lookerConnection,
    metabaseConnection,
    modeConnection,
    mstrConnection,
    powerBIConnection,
    qlikCloudConnection,
    qlikSenseConnection,
    quickSightConnection,
    redashConnection,
    supersetConnection,
    tableauConnection,
)


class DashboardServiceType(Enum):
    Superset = 'Superset'
    Looker = 'Looker'
    Tableau = 'Tableau'
    Redash = 'Redash'
    Metabase = 'Metabase'
    PowerBI = 'PowerBI'
    Mode = 'Mode'
    CustomDashboard = 'CustomDashboard'
    DomoDashboard = 'DomoDashboard'
    QuickSight = 'QuickSight'
    QlikSense = 'QlikSense'
    Lightdash = 'Lightdash'
    Mstr = 'Mstr'
    QlikCloud = 'QlikCloud'


class DashboardConnection(BaseModel):
    class Config:
        extra = Extra.forbid

    config: Optional[
        Union[
            lookerConnection.LookerConnection,
            metabaseConnection.MetabaseConnection,
            powerBIConnection.PowerBIConnection,
            redashConnection.RedashConnection,
            supersetConnection.SupersetConnection,
            tableauConnection.TableauConnection,
            modeConnection.ModeConnection,
            customDashboardConnection.CustomDashboardConnection,
            domoDashboardConnection.DomoDashboardConnection,
            quickSightConnection.QuickSightConnection,
            qlikSenseConnection.QlikSenseConnection,
            lightdashConnection.LightdashConnection,
            mstrConnection.MstrConnection,
            qlikCloudConnection.QlikCloudConnection,
        ]
    ] = None


class DashboardService(BaseModel):
    class Config:
        extra = Extra.forbid

    id: basic.Uuid = Field(
        ..., description='Unique identifier of this dashboard service instance.'
    )
    name: basic.EntityName = Field(
        ..., description='Name that identifies this dashboard service.'
    )
    fullyQualifiedName: Optional[basic.FullyQualifiedEntityName] = Field(
        None, description='FullyQualifiedName same as `name`.'
    )
    displayName: Optional[str] = Field(
        None, description='Display Name that identifies this dashboard service.'
    )
    serviceType: DashboardServiceType = Field(
        ..., description='Type of dashboard service such as Looker or Superset...'
    )
    description: Optional[basic.Markdown] = Field(
        None, description='Description of a dashboard service instance.'
    )
    connection: Optional[DashboardConnection] = None
    pipelines: Optional[entityReferenceList.EntityReferenceList] = Field(
        None, description='References to pipelines deployed for this dashboard service.'
    )
    testConnectionResult: Optional[testConnectionResult.TestConnectionResult] = Field(
        None, description='Last test connection results for this service'
    )
    tags: Optional[List[tagLabel.TagLabel]] = Field(
        None, description='Tags for this Dashboard Service.'
    )
    owner: Optional[entityReference.EntityReference] = Field(
        None, description='Owner of this dashboard service.'
    )
    version: Optional[entityHistory.EntityVersion] = Field(
        None, description='Metadata version of the entity.'
    )
    updatedAt: Optional[basic.Timestamp] = Field(
        None,
        description='Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.',
    )
    updatedBy: Optional[str] = Field(None, description='User who made the update.')
    href: Optional[basic.Href] = Field(
        None,
        description='Link to the resource corresponding to this dashboard service.',
    )
    changeDescription: Optional[entityHistory.ChangeDescription] = Field(
        None, description='Change that lead to this version of the entity.'
    )
    deleted: Optional[bool] = Field(
        False, description='When `true` indicates the entity has been soft deleted.'
    )
    dataProducts: Optional[entityReferenceList.EntityReferenceList] = Field(
        None, description='List of data products this entity is part of.'
    )
    domain: Optional[entityReference.EntityReference] = Field(
        None, description='Domain the Dashboard service belongs to.'
    )
