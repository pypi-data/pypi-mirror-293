# generated by datamodel-codegen:
#   filename:  metadataIngestion/dbtconfig/dbtS3Config.json
#   timestamp: 2024-08-29T11:04:13+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Extra, Field

from ...security.credentials import awsCredentials


class DbtConfigType(Enum):
    s3 = 's3'


class DbtPrefixConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    dbtBucketName: Optional[str] = Field(
        None,
        description='Name of the bucket where the dbt files are stored',
        title='DBT Bucket Name',
    )
    dbtObjectPrefix: Optional[str] = Field(
        None,
        description='Path of the folder where the dbt files are stored',
        title='DBT Object Prefix',
    )


class DbtS3Config(BaseModel):
    class Config:
        extra = Extra.forbid

    dbtConfigType: DbtConfigType = Field(..., description='dbt Configuration type')
    dbtSecurityConfig: awsCredentials.AWSCredentials = Field(
        ..., title='DBT S3 Security Config'
    )
    dbtPrefixConfig: Optional[DbtPrefixConfig] = Field(
        None,
        description='Details of the bucket where the dbt files are stored',
        title='DBT Prefix Config',
    )
