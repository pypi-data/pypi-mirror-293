# generated by datamodel-codegen:
#   filename:  metadataIngestion/dashboardServiceMetadataPipeline.json
#   timestamp: 2024-08-29T11:04:13+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Extra, Field

from ..type import filterPattern


class LineageInformation(BaseModel):
    dbServiceNames: Optional[List[str]] = Field(
        None,
        description='List of Database Service Names for creation of lineage',
        title='Database Service Names List',
    )


class DashboardMetadataConfigType(Enum):
    DashboardMetadata = 'DashboardMetadata'


class DashboardServiceMetadataPipeline(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[DashboardMetadataConfigType] = Field(
        DashboardMetadataConfigType.DashboardMetadata, description='Pipeline type'
    )
    lineageInformation: Optional[LineageInformation] = Field(
        None,
        description='Details required to generate Lineage',
        title='Lineage Information',
    )
    dashboardFilterPattern: Optional[filterPattern.FilterPattern] = Field(
        None,
        description='Regex to exclude or include dashboards that matches the pattern.',
        title='Dashboard Filter Pattern',
    )
    chartFilterPattern: Optional[filterPattern.FilterPattern] = Field(
        None,
        description='Regex exclude or include charts that matches the pattern.',
        title='Chart Filter Pattern',
    )
    dataModelFilterPattern: Optional[filterPattern.FilterPattern] = Field(
        None,
        description='Regex exclude or include data models that matches the pattern.',
        title='Data Model Filter Pattern',
    )
    projectFilterPattern: Optional[filterPattern.FilterPattern] = Field(
        None,
        description='Regex to exclude or include projects that matches the pattern.',
        title='Project Filter Pattern',
    )
    includeOwners: Optional[bool] = Field(
        False,
        description='Enabling a flag will replace the current owner with a new owner from the source during metadata ingestion, if the current owner is null. It is recommended to keep the flag enabled to obtain the owner information during the first metadata ingestion.',
        title='Include Current Owners',
    )
    markDeletedDashboards: Optional[bool] = Field(
        True,
        description='Optional configuration to soft delete dashboards in OpenMetadata if the source dashboards are deleted. Also, if the dashboard is deleted, all the associated entities like lineage, etc., with that dashboard will be deleted',
        title='Mark Deleted Dashboards',
    )
    markDeletedDataModels: Optional[bool] = Field(
        True,
        description='Optional configuration to soft delete data models in OpenMetadata if the source data models are deleted. Also, if the data models is deleted, all the associated entities like lineage, etc., with that data models will be deleted',
        title='Mark Deleted Data Models',
    )
    includeTags: Optional[bool] = Field(
        True,
        description='Optional configuration to toggle the tags ingestion.',
        title='Include Tags',
    )
    includeDataModels: Optional[bool] = Field(
        True,
        description='Optional configuration to toggle the ingestion of data models.',
        title='Include Data Models',
    )
    includeDraftDashboard: Optional[bool] = Field(
        True,
        description='Optional Configuration to include/exclude draft dashboards. By default it will include draft dashboards',
        title='Include Draft Dashboards',
    )
