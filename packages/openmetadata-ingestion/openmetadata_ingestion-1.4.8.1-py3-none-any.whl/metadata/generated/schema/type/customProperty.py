# generated by datamodel-codegen:
#   filename:  type/customProperty.json
#   timestamp: 2024-08-29T11:04:13+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Extra, Field

from . import basic, entityReference
from .customProperties import enumConfig


class Format(BaseModel):
    __root__: str = Field(
        ..., description='Applies to date interval, date, time format.'
    )


class EntityTypes(BaseModel):
    __root__: List[str] = Field(
        ...,
        description='Applies to Entity References. Entity Types can be used to restrict what type of entities can be configured for a entity reference.',
    )


class CustomPropertyConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    config: Optional[Union[enumConfig.EnumConfig, Format, EntityTypes]] = None


class PropertyType(BaseModel):
    __root__: entityReference.EntityReference = Field(
        ...,
        description='Reference to a property type. Only property types are allowed and entity types are not allowed as custom properties to extend an existing entity',
    )


class CustomProperty(BaseModel):
    class Config:
        extra = Extra.forbid

    name: basic.EntityName = Field(
        ...,
        description='Name of the entity property. Note a property name must be unique for an entity. Property name must follow camelCase naming adopted by openMetadata - must start with lower case with no space, underscore, or dots.',
    )
    description: basic.Markdown
    propertyType: PropertyType
    customPropertyConfig: Optional[CustomPropertyConfig] = None
