# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/obsidian2quarto.ipynb.

# %% auto 0
__all__ = ['ignore_names_copy', 'copy_vault', 'convert_md', 'convert_images', 'convert_vault', 'read_config', 'obsidian2quarto']

# %% ../nbs/obsidian2quarto.ipynb 3
import shutil
from pathlib import Path
import fastcore.xtras
import re
from functools import partial
import yaml
from fastcore.script import call_parse, Param

# %% ../nbs/obsidian2quarto.ipynb 5
def ignore_names_copy(src, names, ignore_names_re):
    return [n for n in names if ignore_names_re.match(n)]


# %% ../nbs/obsidian2quarto.ipynb 7
def copy_vault(
        vault_path: Path|str,
        target_path: Path|str,
        ignore_names: list[str] = [],
):
    """Copy the vault to the target path."""
    ignore = partial(ignore_names_copy, ignore_names_re=re.compile('|'.join(ignore_names)))
    shutil.copytree(vault_path, target_path, dirs_exist_ok=True, ignore=ignore)

# %% ../nbs/obsidian2quarto.ipynb 15
def convert_md(
        md_path: Path,
        filters: list[callable]=[]
):
    content = md_path.read_text(encoding='utf-8')
    for f in filters:
        content = f(content)
    md_path.write_text(content, encoding='utf-8')

# %% ../nbs/obsidian2quarto.ipynb 20
def convert_images(
    content: str, # the content of the md file
    image_base_path: Path, # add before images
):
    
    pattern = r'''
    \!\[\[      # Match the literal '!' followed by '[['
    .*?       # Match any character (non-greedy) between the brackets
    \]\]        # Match the literal ']]'
    '''

    matches = re.findall(pattern, content, re.VERBOSE)
    for match in matches:
        image_path = Path(match[3:-2])
        new_image_path = image_base_path / image_path.name
        markdown_image = f"![]({new_image_path.as_posix()})"
        content = content.replace(match, markdown_image)
    return content
    

# %% ../nbs/obsidian2quarto.ipynb 23
def convert_vault(
    dir_path: Path,
    convert_fn: callable,
):
    dir_path = dir_path.ls()
    for path in dir_path:
        if path.is_dir():
            convert_vault(path, convert_fn)
        elif path.suffix == ".md":
            convert_fn(path)

# %% ../nbs/obsidian2quarto.ipynb 27
def read_config(config_path: Path = Path("_quarto.yml")):
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config['obsidian2quarto']

# %% ../nbs/obsidian2quarto.ipynb 30
@call_parse
def obsidian2quarto(
    vault_path:  Param("The path to the vault", str) = ".",
):
    config = read_config(Path(vault_path) / "_quarto.yml")
    copy_vault(vault_path=vault_path, target_path=Path(vault_path).parent / "_quarto")
    convert_vault(Path(vault_path).parent / "_quarto", partial(
        convert_md, filters=[
            partial(convert_images, image_base_path=Path(config['image-base-path']))
        ]
    ))
    
