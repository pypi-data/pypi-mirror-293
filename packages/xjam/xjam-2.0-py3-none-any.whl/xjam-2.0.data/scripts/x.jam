#!python
import os
import numpy as np
from timeit        import default_timer as timer
from itertools     import permutations, product
from xjam.libjamio import get_inputfile, get_a_int, get_str_list, get_a_float, get_float_list
#-------------------------------------
get_inputfile()
#-------------------------------------
log_file='JAM.out'
def xprint(chain, salto=True, flag='a'):
    xopen = open(log_file, flag)
    if salto==True:  print(chain, file=xopen)
    if salto==False: print(chain, end = ' ', file=xopen)
    xopen.close()
#-------------------------------------
option=get_a_int('option')
if option not in [1,2,3,4,5,6,7,8]:
    print('\'option\' is not a valid number')
    exit()
num_layers=get_a_int('num_layers')
natural=isinstance(num_layers, int) and num_layers >= 1
if natural==False:
    print('\'num_layers\' is not a valid number')
    exit()
atom_list=get_str_list('atom_list')
if (option in [5,6]) and (len(atom_list) != 2):
    print('\'atom_list\' present a invalid length')
    exit()
if (option in [7,8]) and (len(atom_list) != 3):
    print('\'atom_list\' present a invalid length')
    exit()
latticep=get_a_float('latticep')
if latticep <= 0.0:
    print('\'latticep\' is not a valid number')
    exit()
z_vacuum=get_a_float('z_vacuum')
if z_vacuum <= 0.0:
    print('\'z_vacuum\' is not a valid number')
    exit()
buckling=get_float_list('buckling')
if (option in [1,2,3,4,5,6]) and (len(buckling) != 1):
    print('\'buckling\' present a invalid length')
    exit()
if (option in [7,8]) and (len(buckling) != 2):
    print('\'buckling\' present a invalid length')
    exit()
d=get_a_float('distance')
if d <= 0.0:
    print('\'distance\' is not a valid number')
    exit()
poscargen=get_str_list('poscargen')
#-------------------------------------
if   option ==  1:
    opt1 = ['+0','+j','+j']
    filasDefinidas = list(set(permutations(opt1, 3)))
elif option ==  2:
    opt2 = ['+0','+j','+k']
    filasDefinidas = list(set(permutations(opt2, 3)))
elif option ==  3:
    opt3 = ['+0','+j','-j']
    filasDefinidas = list(set(permutations(opt3, 3)))
elif option ==  4:
    opt4a= ['+0','+j','-k']
    opt4b= ['+0','-j','+k']
    filasDefinidas = list(set(permutations(opt4a, 3)))+list(set(permutations(opt4b, 3)))
elif option ==  5:
    opt5 = ['+0','*j', '(+k-k)']
    filasDefinidas = list(set(permutations(opt5, 3)))
elif option ==  6:
    opt6 = ['*j','+k', '-k']
    filasDefinidas = list(set(permutations(opt6, 3)))
elif option ==  7:
    opt7a = ['+0','*j', '(+k-l)']
    opt7b = ['+0','*j', '(-k+l)']
    filasDefinidas = list(set(permutations(opt7a, 3)))+list(set(permutations(opt7b, 3)))
elif option ==  8:
    opt8a = ['*j','+k', '-l']
    opt8b = ['*j','-k', '+l']
    filasDefinidas = list(set(permutations(opt8a, 3)))+list(set(permutations(opt8b, 3)))
#-------------------------------------
if option in [1,2,3,4]:
    from xjam.libjamstd import conv2pseudocanonic, disc_equivalents, nparray2chain, chain2nparray, build_poscarx
elif option in [5,6,7,8]:
    from xjam.libjamtdm import conv2pseudocanonic, disc_equivalents, nparray2chain, chain2nparray, build_poscarx
#-------------------------------------
filsnparray = [np.array(i) for i in filasDefinidas]
arraynorep = [np.array(i) for i in filasDefinidas]
xprint('JAM log file\n', True, 'w')
longstring_authors = """# JAM 2.0
# Joining and Arrangement of Multilayers (JAM)
# Jessica Arcudia, Filiberto Ortiz-Chi, and Gabriel Merino
#
# Departamento de Fisica Aplicada,
# Centro de Investigacion y de Estudios Avanzados, Unidad Merida,
# Km 6 Antigua Carretera a Progreso, A.P. 73, Cordemex, 97310 Merida, Yucatan, Mexico

# Cite JAM as:
# J. Arcudia, F. Ortiz-Chi, A. Sanchez-Valenzuela, A. Aspuru-Guzik, and G. Merino, (2023).
# Joining and arrangement of multilayers: A string representation for honeycomb layered materials.
# Matter, 6(5), 1503â€“1513. doi: 10.1016/j.matt.2023.02.014
"""
xprint(longstring_authors, True, 'a')

for case in range(2,num_layers+1,1):
    xprint('##n=%d' %(case))
    filejamstr='jamstrings'+str(case).zfill(3)+'.txt'
    filejamstz='sjamstrings'+str(case).zfill(3)+'.txt'
    if os.path.isfile(filejamstr):
        xprint('%s .... exist. We take it' %(filejamstr))
        cadenas = open(filejamstr,'r')
        arraynorep=[]
        for i, cadena in enumerate(cadenas):
            ichain=cadena.rstrip()
            ai=chain2nparray(ichain)
            arraynorep.append(ai)
        cadenas.close()
    else:
        start = timer()
        xprint('Generation of all possible stacks ....', False, 'a')
        if case == 2:
            nparraylist  =[np.vstack([ai, newrow]) for ai in arraynorep for newrow in filsnparray]
        else:
            nparraylistdn=[np.vstack([ai, newrow]) for ai in arraynorep for newrow in filsnparray]
            nparraylistup=[np.vstack([newrow, ai]) for ai in arraynorep for newrow in filsnparray]
        end = timer()
        xprint('TIME = %f seconds' %(end - start))

        start = timer()
        xprint('Conversion to pseudocanonical forms ..', False, 'a')
        if case == 2:
            canonicstacks=[conv2pseudocanonic(ai) for ai in nparraylist]
        else:
            nparraylistdn=[conv2pseudocanonic(ai) for ai in nparraylistdn]
            nparraylistup=[conv2pseudocanonic(ai) for ai in nparraylistup]
            canonicstacks=nparraylistdn + nparraylistup
        end = timer()
        xprint('TIME = %f seconds' %(end - start))

        start = timer()
        xprint('Discrimination of equivalent stacks ..', False, 'a')
        arraynorep = disc_equivalents(canonicstacks,option,1)
        arraynorep = disc_equivalents(arraynorep,option,2)
        end = timer()
        xprint('TIME = %f seconds' %(end - start))

    xprint('Conversion to JAM format:')
    fopen = open(filejamstr,'w')
    gopen = open(filejamstz,'w')
    for i, ai in enumerate(arraynorep):
        ichain=nparray2chain(ai)
        ichbin=ichain.replace('j', atom_list[0])
        if len(atom_list)>=2: ichbin=ichbin.replace('k', atom_list[1])
        if len(atom_list)==3: ichbin=ichbin.replace('l', atom_list[2])
        if i==0:
            xprint('%s) %s' %(str(i+1).zfill(5), ichbin))
            xprint('.\n.')
        if i==len(arraynorep)-1:
            xprint('%s) %s' %(str(i+1).zfill(5), ichbin))
        print('%s' %(ichain),file=fopen)
        print('%s' %(ichbin),file=gopen)
        if poscargen[0] == 'T':
            folder='POSCAR_'+str(case).zfill(3)+'/'
            if not os.path.exists(folder): os.system('mkdir %s' %(folder))
            file0='POSCAR_'+str(case).zfill(3)+'_'+str(i+1).zfill(6)+'.vasp'
            build_poscarx(ai,ichbin,folder+file0,z_vacuum,case,d,latticep,atom_list,buckling)
    gopen.close()
    fopen.close()
    xprint('See all JAM strings at jamstrings%s.txt\n' %(str(case).zfill(3)))
exit()
