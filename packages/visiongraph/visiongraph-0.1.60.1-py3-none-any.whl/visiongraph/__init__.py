# This file has been auto-generated by setup.py.
import os
import logging

LOGLEVEL = os.environ.get("VISIONGRAPH_LOGLEVEL", "WARNING").upper()
logging.basicConfig(level=LOGLEVEL)

from .AsyncGraphNode import AsyncGraphNode
from .BaseGraph import BaseGraph
from .GraphNode import GraphNode
from .Processable import Processable
from .VisionGraph import VisionGraph
from .VisionGraphBuilder import add_breakpoint
from .VisionGraphBuilder import create_graph
from .VisionGraphBuilder import custom
from .VisionGraphBuilder import extract
from .VisionGraphBuilder import passthrough
from .VisionGraphBuilder import sequence
from .data.Asset import Asset
from .data.LocalAsset import LocalAsset
from .data.RepositoryAsset import RepositoryAsset
from .dsp.BaseFilterNumpy import BaseFilterNumpy
from .dsp.LandmarkSmoothFilter import LandmarkSmoothFilter
from .dsp.OneEuroFilter import OneEuroFilter
from .dsp.OneEuroFilterNumpy import OneEuroFilterNumpy
from .dsp.VectorNumpySmoothFilter import VectorNumpySmoothFilter
from .estimator.BaseClassifier import BaseClassifier
from .estimator.BaseEstimator import BaseEstimator
from .estimator.BaseVisionEngine import BaseVisionEngine
from .estimator.ChainEstimator import ChainEstimator
from .estimator.ScoreThresholdEstimator import ScoreThresholdEstimator
from .estimator.VisionClassifier import VisionClassifier
from .estimator.VisionEstimator import VisionEstimator
from .estimator.calculator.UndistortionCalculator import UndistortionCalculator
from .estimator.embedding.LandmarkEmbedder import LandmarkEmbedder
from .estimator.embedding.knn.BaseKNNClassifier import BaseKNNClassifier
try:
    from .estimator.embedding.knn.FaissKNNClassifier import FaissKNNClassifier
except ModuleNotFoundError as ex:
    logging.info(f"Module FaissKNNClassifier not found")
from .estimator.engine.InferenceEngineFactory import InferenceEngine
from .estimator.engine.InferenceEngineFactory import InferenceEngineFactory
from .estimator.inpaint.BaseInpainter import BaseInpainter
try:
    from .estimator.inpaint.GMCNNInpainter import GMCNNConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module GMCNNConfig not found")
try:
    from .estimator.inpaint.GMCNNInpainter import GMCNNInpainter
except ModuleNotFoundError as ex:
    logging.info(f"Module GMCNNInpainter not found")
try:
    from .estimator.onnx.ONNXVisionEngine import ONNXVisionEngine
except ModuleNotFoundError as ex:
    logging.info(f"Module ONNXVisionEngine not found")
try:
    from .estimator.openvino.OpenVinoEngine import OpenVinoEngine
except ModuleNotFoundError as ex:
    logging.info(f"Module OpenVinoEngine not found")
from .estimator.openvino.OpenVinoObjectDetector import OpenVinoObjectDetector
from .estimator.openvino.SyncInferencePipeline import SyncInferencePipeline
try:
    from .estimator.spatial.CenterNetDetector import CenterNetConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module CenterNetConfig not found")
try:
    from .estimator.spatial.CenterNetDetector import CenterNetDetector
except ModuleNotFoundError as ex:
    logging.info(f"Module CenterNetDetector not found")
from .estimator.spatial.CrowdHumanDetector import CrowdHumanConfig
from .estimator.spatial.CrowdHumanDetector import CrowdHumanDetector
try:
    from .estimator.spatial.DETRDetector import DETRConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module DETRConfig not found")
try:
    from .estimator.spatial.DETRDetector import DETRDetector
except ModuleNotFoundError as ex:
    logging.info(f"Module DETRDetector not found")
from .estimator.spatial.InstanceSegmentationEstimator import InstanceSegmentationEstimator
from .estimator.spatial.LandmarkEstimator import LandmarkEstimator
from .estimator.spatial.ObjectDetector import ObjectDetector
from .estimator.spatial.RoiEstimator import RoiEstimator
try:
    from .estimator.spatial.SSDDetector import SSDConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module SSDConfig not found")
try:
    from .estimator.spatial.SSDDetector import SSDDetector
except ModuleNotFoundError as ex:
    logging.info(f"Module SSDDetector not found")
from .estimator.spatial.SlidingWindowEstimator import SlidingWindowEstimator
from .estimator.spatial.SpatialCascadeEstimator import SpatialCascadeEstimator
from .estimator.spatial.UltralyticsYOLODetector import UltralyticsYOLODetector
try:
    from .estimator.spatial.YOLODetector import YOLOArchitecture
except ModuleNotFoundError as ex:
    logging.info(f"Module YOLOArchitecture not found")
try:
    from .estimator.spatial.YOLODetector import YOLOConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module YOLOConfig not found")
try:
    from .estimator.spatial.YOLODetector import YOLODetector
except ModuleNotFoundError as ex:
    logging.info(f"Module YOLODetector not found")
from .estimator.spatial.YOLOXE2EDetector import YOLOXE2EDetector
from .estimator.spatial.YOLOv5Detector import YOLOv5Config
from .estimator.spatial.YOLOv5Detector import YOLOv5Detector
from .estimator.spatial.YOLOv8Detector import YOLOv8Config
from .estimator.spatial.YOLOv8Detector import YOLOv8Detector
from .estimator.spatial.YOLOv8OBBDetector import YOLOv8OBBConfig
from .estimator.spatial.YOLOv8OBBDetector import YOLOv8OBBDetector
try:
    from .estimator.spatial.camera.ArUcoCameraPoseEstimator import ArUcoCameraPoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module ArUcoCameraPoseEstimator not found")
from .estimator.spatial.camera.BoardCameraCalibrator import BoardCameraCalibrator
try:
    from .estimator.spatial.camera.ChArUcoCalibrator import ChArUcoCalibrator
except ModuleNotFoundError as ex:
    logging.info(f"Module ChArUcoCalibrator not found")
from .estimator.spatial.camera.ChessboardCalibrator import ChessboardCalibrator
try:
    from .estimator.spatial.face.AdasFaceDetector import AdasFaceConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module AdasFaceConfig not found")
try:
    from .estimator.spatial.face.AdasFaceDetector import AdasFaceDetector
except ModuleNotFoundError as ex:
    logging.info(f"Module AdasFaceDetector not found")
from .estimator.spatial.face.FaceDetector import FaceDetector
try:
    from .estimator.spatial.face.OpenVinoFaceDetector import OpenVinoFaceConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module OpenVinoFaceConfig not found")
try:
    from .estimator.spatial.face.OpenVinoFaceDetector import OpenVinoFaceDetector
except ModuleNotFoundError as ex:
    logging.info(f"Module OpenVinoFaceDetector not found")
try:
    from .estimator.spatial.face.emotion.AffectNetEmotionClassifier import AffectNetEmotionClassifier
except ModuleNotFoundError as ex:
    logging.info(f"Module AffectNetEmotionClassifier not found")
from .estimator.spatial.face.emotion.FERPlusEmotionClassifier import FERPlusEmotionClassifier
from .estimator.spatial.face.emotion.FaceEmotionEstimator import FaceEmotionEstimator
try:
    from .estimator.spatial.face.eye.EyeOpenClosedEstimator import EyeOpenClosedEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module EyeOpenClosedEstimator not found")
from .estimator.spatial.face.landmark.FaceLandmarkEstimator import FaceLandmarkEstimator
try:
    from .estimator.spatial.face.landmark.IrisDistanceCalculator import IrisDistanceCalculator
except ModuleNotFoundError as ex:
    logging.info(f"Module IrisDistanceCalculator not found")
try:
    from .estimator.spatial.face.landmark.MediaPipeFaceDetector import MediaPipeFaceDetector
except ModuleNotFoundError as ex:
    logging.info(f"Module MediaPipeFaceDetector not found")
try:
    from .estimator.spatial.face.landmark.MediaPipeFaceDetector import MediaPipeFaceModel
except ModuleNotFoundError as ex:
    logging.info(f"Module MediaPipeFaceModel not found")
try:
    from .estimator.spatial.face.landmark.RegressionLandmarkEstimator import RegressionLandmarkEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module RegressionLandmarkEstimator not found")
try:
    from .estimator.spatial.face.pose.AdasHeadPoseEstimator import AdasHeadPoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module AdasHeadPoseEstimator not found")
from .estimator.spatial.face.pose.HeadPoseEstimator import HeadPoseEstimator
from .estimator.spatial.face.recognition.FaceRecognitionEstimator import FaceRecognitionEstimator
try:
    from .estimator.spatial.face.recognition.FaceReidentificationEstimator import FaceReidentificationConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module FaceReidentificationConfig not found")
try:
    from .estimator.spatial.face.recognition.FaceReidentificationEstimator import FaceReidentificationEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module FaceReidentificationEstimator not found")
from .estimator.spatial.hand.HandDetector import FaceDetector
from .estimator.spatial.hand.landmark.HandLandmarkEstimator import HandLandmarkEstimator
try:
    from .estimator.spatial.hand.landmark.MediaPipeHandEstimator import HandModelComplexity
except ModuleNotFoundError as ex:
    logging.info(f"Module HandModelComplexity not found")
try:
    from .estimator.spatial.hand.landmark.MediaPipeHandEstimator import MediaPipeHandEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module MediaPipeHandEstimator not found")
try:
    from .estimator.spatial.hand.landmark.OpenPoseHandEstimator import OpenPoseHandEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module OpenPoseHandEstimator not found")
try:
    from .estimator.spatial.pose.AEPoseEstimator import AEPoseConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module AEPoseConfig not found")
try:
    from .estimator.spatial.pose.AEPoseEstimator import AEPoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module AEPoseEstimator not found")
try:
    from .estimator.spatial.pose.EfficientPoseEstimator import EfficientPoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module EfficientPoseEstimator not found")
try:
    from .estimator.spatial.pose.EfficientPoseEstimator import EfficientPoseEstimatorConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module EfficientPoseEstimatorConfig not found")
from .estimator.spatial.pose.KAPAOPoseEstimator import KAPAOPoseConfig
from .estimator.spatial.pose.KAPAOPoseEstimator import KAPAOPoseEstimator
try:
    from .estimator.spatial.pose.LiteHRNetEstimator import LiteHRNetConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module LiteHRNetConfig not found")
try:
    from .estimator.spatial.pose.LiteHRNetEstimator import LiteHRNetPoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module LiteHRNetPoseEstimator not found")
try:
    from .estimator.spatial.pose.LitePoseEstimator import LitePoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module LitePoseEstimator not found")
try:
    from .estimator.spatial.pose.LitePoseEstimator import LitePoseEstimatorConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module LitePoseEstimatorConfig not found")
try:
    from .estimator.spatial.pose.MediaPipeHolisticEstimator import MediaPipeHolisticEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module MediaPipeHolisticEstimator not found")
try:
    from .estimator.spatial.pose.MediaPipePoseEstimator import MediaPipePoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module MediaPipePoseEstimator not found")
try:
    from .estimator.spatial.pose.MobileHumanPoseEstimator import MobileHumanPoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module MobileHumanPoseEstimator not found")
try:
    from .estimator.spatial.pose.MobileNetV2PoseEstimator import MobileNetV2PoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module MobileNetV2PoseEstimator not found")
try:
    from .estimator.spatial.pose.MobileNetV2PoseEstimator import MobileNetV2PoseEstimatorConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module MobileNetV2PoseEstimatorConfig not found")
try:
    from .estimator.spatial.pose.MoveNetPoseEstimator import MoveNetConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module MoveNetConfig not found")
try:
    from .estimator.spatial.pose.MoveNetPoseEstimator import MoveNetPoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module MoveNetPoseEstimator not found")
try:
    from .estimator.spatial.pose.OpenPoseEstimator import OpenPoseConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module OpenPoseConfig not found")
try:
    from .estimator.spatial.pose.OpenPoseEstimator import OpenPoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module OpenPoseEstimator not found")
from .estimator.spatial.pose.PoseEstimator import PoseEstimator
try:
    from .estimator.spatial.pose.TopDownPoseEstimator import TopDownPoseEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module TopDownPoseEstimator not found")
from .estimator.spatial.pose.YOLOv8PoseEstimator import YOLOv8PoseConfig
from .estimator.spatial.pose.YOLOv8PoseEstimator import YOLOv8PoseEstimator
from .estimator.spatial.pose.__init__ import add_pose_estimation_step_choices
from .estimator.spatial.segmentation.MODNetEstimator import ModNetConfig
from .estimator.spatial.segmentation.MODNetEstimator import ModNetEstimator
try:
    from .estimator.spatial.segmentation.MaskRCNNEstimator import MaskRCNNConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module MaskRCNNConfig not found")
try:
    from .estimator.spatial.segmentation.MaskRCNNEstimator import MaskRCNNEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module MaskRCNNEstimator not found")
try:
    from .estimator.spatial.segmentation.MediaPipeSelfieSegmentation import MediaPipeSelfieSegmentation
except ModuleNotFoundError as ex:
    logging.info(f"Module MediaPipeSelfieSegmentation not found")
try:
    from .estimator.spatial.segmentation.MediaPipeSelfieSegmentation import SelfieSegmentationModel
except ModuleNotFoundError as ex:
    logging.info(f"Module SelfieSegmentationModel not found")
from .estimator.spatial.segmentation.YOLOv8SegmentationEstimator import YOLOv8SegmentationConfig
from .estimator.spatial.segmentation.YOLOv8SegmentationEstimator import YOLOv8SegmentationEstimator
try:
    from .estimator.spatial.segmentation.YolactEstimator import YolactConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module YolactConfig not found")
try:
    from .estimator.spatial.segmentation.YolactEstimator import YolcatEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module YolcatEstimator not found")
try:
    from .estimator.translation.DeblurGANv2 import DeblurGANv2
except ModuleNotFoundError as ex:
    logging.info(f"Module DeblurGANv2 not found")
try:
    from .estimator.translation.DeblurGANv2 import DeblurGANv2Config
except ModuleNotFoundError as ex:
    logging.info(f"Module DeblurGANv2Config not found")
from .estimator.translation.DepthEstimator import DepthEstimator
from .estimator.translation.MBLLENEstimator import MBLLENConfig
from .estimator.translation.MBLLENEstimator import MBLLENEstimator
try:
    from .estimator.translation.MidasDepthEstimator import MidasConfig
except ModuleNotFoundError as ex:
    logging.info(f"Module MidasConfig not found")
try:
    from .estimator.translation.MidasDepthEstimator import MidasDepthEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module MidasDepthEstimator not found")
try:
    from .input.AzureKinectInput import AzureKinectInput
except ModuleNotFoundError as ex:
    logging.info(f"Module AzureKinectInput not found")
from .input.BaseCamera import BaseCamera
from .input.BaseDepthCamera import BaseDepthCamera
from .input.BaseDepthInput import BaseDepthInput
from .input.BaseInput import BaseInput
try:
    from .input.CamGearInput import CamGearInput
except ModuleNotFoundError as ex:
    logging.info(f"Module CamGearInput not found")
try:
    from .input.DepthAIBaseInput import DepthAIBaseInput
except ModuleNotFoundError as ex:
    logging.info(f"Module DepthAIBaseInput not found")
from .input.ImageInput import ImageInput
try:
    from .input.Oak1Input import Oak1Input
except ModuleNotFoundError as ex:
    logging.info(f"Module Oak1Input not found")
try:
    from .input.OakDInput import OakDFrameAlignment
except ModuleNotFoundError as ex:
    logging.info(f"Module OakDFrameAlignment not found")
try:
    from .input.OakDInput import OakDInput
except ModuleNotFoundError as ex:
    logging.info(f"Module OakDInput not found")
try:
    from .input.RealSenseInput import RealSenseInput
except ModuleNotFoundError as ex:
    logging.info(f"Module RealSenseInput not found")
from .input.VideoCaptureInput import VideoCaptureInput
try:
    from .input.ZEDInput import ZEDCapture
except ModuleNotFoundError as ex:
    logging.info(f"Module ZEDCapture not found")
try:
    from .input.ZEDInput import ZEDInput
except ModuleNotFoundError as ex:
    logging.info(f"Module ZEDInput not found")
from .model.CameraIntrinsics import CameraIntrinsics
from .model.CameraStreamType import CameraStreamType
from .model.DepthBuffer import DepthBuffer
from .model.VisionEngineModelLayer import VisionEngineModelLayer
from .model.VisionEngineOutput import VisionEngineOutput
from .model.geometry.BoundingBox2D import BoundingBox2D
from .model.geometry.Size2D import Size2D
from .model.parameter.ArgumentConfigurable import ArgumentConfigurable
from .model.tracker.Trackable import Trackable
from .model.types.InputShapeOrder import InputShapeOrder
from .model.types.MediaPipePoseModelComplexity import PoseModelComplexity
from .model.types.ModelPrecision import ModelPrecision
from .model.types.RealSenseColorScheme import RealSenseColorScheme
from .node.ApplyNode import ApplyNode
from .node.BreakpointNode import BreakpointNode
from .node.CustomNode import CustomNode
from .node.ExtractNode import ExtractNode
from .node.PassThroughNode import PassThroughNode
from .node.SequenceNode import SequenceNode
from .output.ImagePreview import ImagePreview
from .output.fbs.FrameBufferSharingServer import FrameBufferSharingServer
try:
    from .output.fbs.SpoutServer import SpoutServer
except ModuleNotFoundError as ex:
    logging.info(f"Module SpoutServer not found")
try:
    from .output.fbs.SyphonServer import SyphonServer
except ModuleNotFoundError as ex:
    logging.info(f"Module SyphonServer not found")
from .recorder.AsyncFrameSetRecorder import AsyncFrameSetRecorder
from .recorder.BaseFrameRecorder import BaseFrameRecorder
from .recorder.CV2VideoRecorder import CV2VideoRecorder
from .recorder.FrameSetRecorder import FrameSetRecorder
try:
    from .recorder.MoviePyVideoRecorder import MoviePyVideoRecorder
except ModuleNotFoundError as ex:
    logging.info(f"Module MoviePyVideoRecorder not found")
try:
    from .recorder.VidGearVideoRecorder import VidGearVideoRecorder
except ModuleNotFoundError as ex:
    logging.info(f"Module VidGearVideoRecorder not found")
from .result.ArUcoCameraPose import ArUcoCameraPose
from .result.ArUcoMarkerDetection import ArUcoMarkerDetection
from .result.BaseResult import BaseResult
from .result.CameraPoseResult import CameraPoseResult
from .result.ClassificationResult import ClassificationResult
from .result.DepthMap import DepthMap
from .result.EmbeddingResult import EmbeddingResult
from .result.HeadPoseResult import HeadPoseResult
from .result.ImageResult import ImageResult
from .result.LandmarkEmbeddingResult import LandmarkEmbeddingResult
from .result.ResultAnnotator import ResultAnnotator
from .result.ResultDict import ResultDict
from .result.ResultList import ResultList
from .result.spatial.CrowdHumanResult import CrowdHumanResult
from .result.spatial.InstanceSegmentationResult import InstanceSegmentationResult
from .result.spatial.LandmarkDetectionResult import LandmarkDetectionResult
from .result.spatial.ObjectDetectionResult import ObjectDetectionResult
from .result.spatial.OrientedObjectDetectionResult import OrientedObjectDetectionResult
from .result.spatial.SpatialCascadeResult import SpatialCascadeResult
from .result.spatial.face.BlazeFace import BlazeFace
try:
    from .result.spatial.face.BlazeFaceMesh import BlazeFaceMesh
except ModuleNotFoundError as ex:
    logging.info(f"Module BlazeFaceMesh not found")
from .result.spatial.face.EmotionClassificationResult import EmotionClassificationResult
from .result.spatial.face.EyeOpenClosedResult import EyeOpenClosedResult
from .result.spatial.face.FaceDetectionResult import FaceDetectionResult
from .result.spatial.face.FaceLandmarkResult import FaceLandmarkResult
from .result.spatial.face.IrisDistanceResult import IrisDistanceResult
from .result.spatial.face.IrisDistanceResult import IrisParameter
from .result.spatial.face.RegressionFace import RegressionFace
try:
    from .result.spatial.hand.BlazeHand import BlazeHand
except ModuleNotFoundError as ex:
    logging.info(f"Module BlazeHand not found")
from .result.spatial.hand.HandDetectionResult import HandDetectionResult
from .result.spatial.hand.HandLandmarkResult import HandLandmarkResult
from .result.spatial.hand.Handedness import Handedness
try:
    from .result.spatial.hand.OpenPoseHand import OpenPoseHand
except ModuleNotFoundError as ex:
    logging.info(f"Module OpenPoseHand not found")
try:
    from .result.spatial.pose.BlazePose import BlazePose
except ModuleNotFoundError as ex:
    logging.info(f"Module BlazePose not found")
try:
    from .result.spatial.pose.BlazePoseSegmentation import BlazePoseSegmentation
except ModuleNotFoundError as ex:
    logging.info(f"Module BlazePoseSegmentation not found")
from .result.spatial.pose.COCOOpenPose import COCOOpenPose
from .result.spatial.pose.COCOPose import COCOPose
from .result.spatial.pose.EfficientPose import EfficientPose
try:
    from .result.spatial.pose.HolisticPose import HolisticPose
except ModuleNotFoundError as ex:
    logging.info(f"Module HolisticPose not found")
from .result.spatial.pose.MobileHumanPose import MobileHumanPose
from .result.spatial.pose.PoseLandmarkResult import PoseLandmarkResult
from .tracker.BaseObjectDetectionTracker import BaseObjectDetectionTracker
from .tracker.CentroidTracker import CentroidTracker
from .tracker.FlateTracker import FlateTracker
from .tracker.MotpyTracker import MotpyTracker
from .tracker.ObjectAssignmentSolver import ObjectAssignmentResult
from .tracker.ObjectAssignmentSolver import ObjectAssignmentSolver
from .util.ArgUtils import PipelineNodeFactory
from .util.ArgUtils import add_dict_choice_argument
from .util.ArgUtils import add_enum_choice_argument
from .util.ArgUtils import add_step_choice_argument
from .util.ArgUtils import dict_choice
from .util.ArgUtils import float_range
from .util.CodeUtils import deprecated
from .util.CollectionUtils import default_value_dict
from .util.CommonArgs import add_source_argument
from .util.DrawingUtils import draw_axis
from .util.DrawingUtils import draw_bbox
from .util.DrawingUtils import draw_landmark
from .util.DrawingUtils import draw_text
from .util.DrawingUtils import draw_text_normalized
from .util.ImageUtils import align_image
from .util.ImageUtils import apply_mask
from .util.ImageUtils import extract_roi_safe
from .util.ImageUtils import resize_and_letter_box
from .util.ImageUtils import resize_and_pad
from .util.ImageUtils import roi
from .util.ImageUtils import roi_safe
from .util.LinalgUtils import project_pixel_to_point
from .util.LinalgUtils import project_pixels_to_points
from .util.LinalgUtils import project_point_to_pixel
from .util.LinalgUtils import project_points_to_pixels
from .util.LoggingUtils import add_logging_parameter
from .util.LoggingUtils import setup_logging
from .util.MathUtils import StreamingMovingAverage
from .util.MathUtils import constrain
from .util.MathUtils import intersection_over_union
from .util.MathUtils import map_value
from .util.MathUtils import rotate_2d
from .util.MathUtils import sigmoid
from .util.MathUtils import transform_coordinates
from .util.MediaPipeUtils import mediapipe_landmarks_to_score_and_vector4d
from .util.MediaPipeUtils import mediapipe_landmarks_to_vector4d
from .util.NetworkUtils import download_file
from .util.NetworkUtils import prepare_data_file
from .util.NetworkUtils import prepare_openvino_model
from .util.OSUtils import isLinux
from .util.OSUtils import isMacOSX
from .util.OSUtils import isWindows
try:
    from .util.OpenVinoUtils import get_inference_engine_device
except ModuleNotFoundError as ex:
    logging.info(f"Module get_inference_engine_device not found")
from .util.PoseUtils import embed_pose
from .util.ResultUtils import bbox_from_landmarks
from .util.ResultUtils import extract_object_detection_roi
from .util.ResultUtils import non_maximum_suppression
from .util.TimeUtils import FPSTracer
from .util.TimeUtils import ProfileWatch
from .util.TimeUtils import Watch
from .util.TimeUtils import current_millis
from .util.VectorUtils import array_to_vector
from .util.VectorUtils import landmarks_center_by_indices
from .util.VectorUtils import lerp4d
from .util.VectorUtils import lerp_vector_2d
from .util.VectorUtils import lerp_vector_3d
from .util.VectorUtils import lerp_vector_4d
from .util.VectorUtils import list_of_vector2D
from .util.VectorUtils import list_of_vector3D
from .util.VectorUtils import list_of_vector4D
from .util.VectorUtils import vector_as_list
from .util.VectorUtils import vector_distance
from .util.VectorUtils import vector_to_array
try:
    from .dsp.OneEuroFilterNumba import OneEuroFilterNumba
except ModuleNotFoundError as ex:
    logging.info(f"Module OneEuroFilterNumba not found")
from .estimator.openvino.OpenVinoPoseEstimator import OpenVinoPoseEstimator
try:
    from .estimator.spatial.face.landmark.MediaPipeFaceMeshEstimator import MediaPipeFaceMeshEstimator
except ModuleNotFoundError as ex:
    logging.info(f"Module MediaPipeFaceMeshEstimator not found")


def __getattr__(name):
    from .model._ImportStub import _ImportStub
    logging.debug(f"{name} has not been imported!")
    stub = type(name, _ImportStub.__bases__, dict(_ImportStub.__dict__))
    stub.name = name
    return stub
