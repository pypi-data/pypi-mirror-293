import json
import os

# Root directory for pretrained models. This directory stores models that are
# pretrained and can be used directly or as a starting point for further training.
# Default: "pretrained-models"
PRETRAINED_MODELS_ROOT = os.environ.get("PRETRAINED_MODELS_ROOT", "pretrained-models")

# Root directory for finetuned models. This directory stores models that have been
# finetuned or customized from their pretrained versions.
# Default: "finetuned-models"
FINETUNED_MODELS_ROOT = os.environ.get("FINETUNED_MODELS_ROOT", "finetuned-models")

# Root directory for checkpoints. This directory is used for saving intermediate
# training checkpoints, which can be used to resume training or for evaluation.
# Default: "checkpoints"
CHECKPOINTS_ROOT = os.environ.get("CHECKPOINTS_ROOT", "checkpoints")

# Root directory for datasets. This directory stores datasets that are used for
# training, validation, and testing of models.
# Default: "data"
DATASETS_ROOT = os.environ.get("DATASETS_ROOT", "data")

# Root directory for results. This directory is used for storing outputs, such as
# predictions, evaluation results, and other artifacts generated by the models.
# Default: "results"
RESULTS_ROOT = os.environ.get("RESULTS_ROOT", "results")

# Root directory for cache. This directory is used for caching intermediate data,
# such as preprocessed datasets or other temporary files that speed up computation.
# Default: "cache"
CACHE_ROOT = os.environ.get("CACHE_ROOT", "cache")


class BaseConfig:
    """Base configuration class."""

    def save(self, path):
        """Save the configuration to a JSON file.

        Args:
            path (str): The path to save the JSON file.
        """
        self.to_json(path)

    @classmethod
    def load(cls, path):
        """Load the configuration from a JSON file.

        Args:
            path (str): The path to the JSON file.

        Returns:
            BaseConfig: The loaded configuration object.
        """
        with open(path) as f:
            return cls.from_dict(json.load(f))

    def to_dict(self):
        """Convert the configuration to a dictionary.

        Returns:
            dict: The configuration as a dictionary.
        """
        return {k: v for k, v in self.__dict__.items() if not k.startswith("__")}

    @classmethod
    def from_dict(cls, d):
        """Create a configuration object from a dictionary.

        Args:
            d (dict): The dictionary containing the configuration values.

        Returns:
            BaseConfig: The created configuration object.
        """
        config = cls()
        for k, v in d.items():
            setattr(config, k, v)
        return config

    def to_json(self, path, indent=4):
        """Save the configuration to a JSON file.

        Args:
            path (str): The path to save the JSON file.
            indent (int, optional): The indentation level for the JSON file.
        """
        with open(path, "w") as f:
            f.write(json.dumps(self.to_dict(), indent=indent))

    def items(self):
        """Get the key-value pairs of the configuration.

        Returns:
            dict_items: The key-value pairs of the configuration.
        """
        return self.__dict__.items()

    def __getitem__(self, key):
        """Get the value of a configuration key.

        Args:
            key (str): The key of the configuration.

        Returns:
            Any: The value of the configuration key.

        Raises:
            KeyError: If the key does not exist in the configuration.
        """
        if hasattr(self, key):
            return getattr(self, key)
        else:
            raise KeyError(f"'{self.__class__.__name__}' object has no key '{key}'")

    def __setitem__(self, key, value):
        """Set the value of a configuration key.

        Args:
            key (str): The key of the configuration.
            value (Any): The value to set for the configuration key.

        Raises:
            KeyError: If the key does not exist in the configuration.
        """
        if hasattr(self, key):
            setattr(self, key, value)
        else:
            raise KeyError(f"'{self.__class__.__name__}' object has no key '{key}'")

    def __getattr__(self, key):
        """Get the value of a configuration attribute.

        Args:
            key (str): The attribute of the configuration.

        Returns:
            Any: The value of the configuration attribute.

        Raises:
            AttributeError: If the attribute does not exist in the configuration.
        """
        if key in self.__dict__:
            return self.__dict__[key]
        else:
            raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{key}'")

    def __setattr__(self, key, value):
        """Set the value of a configuration attribute.

        Args:
            key (str): The attribute of the configuration.
            value (Any): The value to set for the configuration attribute.
        """
        super().__setattr__(key, value)