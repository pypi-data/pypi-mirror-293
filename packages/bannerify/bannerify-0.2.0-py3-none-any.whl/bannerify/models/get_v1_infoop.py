"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .errbadrequest import ErrBadRequestData
from .errfetchimageerror import ErrFetchImageErrorData
from bannerify import utils
from bannerify.types import BaseModel
from bannerify.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import TypedDict, Union
from typing_extensions import Annotated


class GetV1InfoRequestTypedDict(TypedDict):
    api_key: str
    

class GetV1InfoRequest(BaseModel):
    api_key: Annotated[str, pydantic.Field(alias="apiKey"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    

GetV1InfoResponseResponseBodyUnion = Union[ErrBadRequestData, ErrFetchImageErrorData]
r"""The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."""


class GetV1InfoResponseResponseBody(Exception):
    r"""The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."""
    data: GetV1InfoResponseResponseBodyUnion

    def __init__(self, data: GetV1InfoResponseResponseBodyUnion):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, GetV1InfoResponseResponseBodyUnion)


class GetV1InfoResponseBodyTypedDict(TypedDict):
    r"""Project info"""
    
    id: str
    name: str
    created_at: str
    

class GetV1InfoResponseBody(BaseModel):
    r"""Project info"""
    
    id: str
    name: str
    created_at: Annotated[str, pydantic.Field(alias="createdAt")]
    
