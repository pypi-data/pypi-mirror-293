"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from bannerify import utils
from bannerify.types import BaseModel
from enum import Enum
import pydantic
from typing import TypedDict
from typing_extensions import Annotated


class ErrNotFoundCode(str, Enum):
    r"""A machine readable error code."""
    NOT_FOUND = "NOT_FOUND"

class ErrNotFoundErrorTypedDict(TypedDict):
    code: ErrNotFoundCode
    r"""A machine readable error code."""
    docs: str
    r"""A link to our documentation with more details about this error code"""
    message: str
    r"""A human readable explanation of what went wrong"""
    request_id: str
    r"""Please always include the requestId in your error report"""
    

class ErrNotFoundError(BaseModel):
    code: ErrNotFoundCode
    r"""A machine readable error code."""
    docs: str
    r"""A link to our documentation with more details about this error code"""
    message: str
    r"""A human readable explanation of what went wrong"""
    request_id: Annotated[str, pydantic.Field(alias="requestId")]
    r"""Please always include the requestId in your error report"""
    
class ErrNotFoundData(BaseModel):
    error: ErrNotFoundError
    


class ErrNotFound(Exception):
    r"""The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web."""
    data: ErrNotFoundData

    def __init__(self, data: ErrNotFoundData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ErrNotFoundData)

