from typing import Iterable, overload

from polymat.expressiontree.operations.filtermixin import FilterMixin
from polymat.expressiontree.nodes import (
    ExpressionNode,
    SingleChildExpressionNode,
)
from polymat.expressiontree.operations.getitemmixin import GetItemMixin
from polymat.sparserepr.sparserepr import SparseRepr
from polymat.state import State
from polymat.utils.typing import FROM_TYPES
from polymat.symbol import Symbol

# The following classes are defined solely in the stub file for type checking and have no impact during code execution.

class MatrixExpression(SingleChildExpressionNode):
    def __add__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __getitem__(self, key: GetItemMixin.KEY_TYPE) -> PolynomialExpression: ...
    @overload
    def __matmul__(self, other: VectorExpression) -> VectorExpression: ...
    @overload
    def __matmul__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __mul__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __neg__(self) -> MatrixExpression: ...
    def __pow__(self, exponent: int) -> MatrixExpression: ...
    def __radd__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __rmul__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __rmatmul__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __rsub__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __sub__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __truediv__(self, other: float | int) -> MatrixExpression: ...
    def apply(self, state: State) -> tuple[State, SparseRepr]: ...
    def block_diag(self, others: Iterable[MatrixExpression]) -> MatrixExpression: ...
    def cache(self) -> MatrixExpression: ...
    def copy(self, child: ExpressionNode) -> MatrixExpression: ...
    def diff(self, variables: VariableVectorExpression) -> MatrixExpression: ...
    def eval(self, substitutions: dict[Symbol, tuple[float, ...]]) -> MatrixExpression: ...
    def h_stack(self, others: Iterable[MatrixExpression]) -> MatrixExpression: ...
    def kron(self, other: MatrixExpression) -> MatrixExpression: ...
    def linear_monomials_in(
        self, variables: VariableVectorExpression
    ) -> MonomialVectorExpression: ...
    def quadratic_monomials_in(
        self, variables: VariableVectorExpression
    ) -> MonomialVectorExpression: ...
    def rep_mat(self, n: int, m: int) -> MatrixExpression: ...
    def reshape(self, n: int, m: int) -> MatrixExpression: ...
    def slice(self, slice: tuple[tuple[int, ...], tuple[int, ...]]) -> MatrixExpression: ...
    def sum(self) -> VectorExpression: ...
    def symmetric(self) -> SymmetricMatrixExpression: ...
    def to_polynomial(self) -> PolynomialExpression: ...
    def to_variable_vector(self) -> VariableVectorExpression: ...
    def to_vector(self) -> VectorExpression: ...
    def to_monomial_vector(self) -> MonomialVectorExpression: ...
    def v_stack(self, others: Iterable[MatrixExpression]) -> MatrixExpression: ...
    @property
    def T(self) -> MatrixExpression: ...

class SymmetricMatrixExpression(MatrixExpression):
    @overload
    def __add__(self, other: SymmetricMatrixExpression) -> SymmetricMatrixExpression: ...
    @overload
    def __add__(self, other: FROM_TYPES) -> MatrixExpression: ...
    @overload
    def __matmul__(self, other: VectorExpression) -> VectorExpression: ...
    @overload
    def __matmul__(self, other: SymmetricMatrixExpression) -> SymmetricMatrixExpression: ...
    @overload
    def __matmul__(self, other: FROM_TYPES) -> MatrixExpression: ...
    @overload
    def __mul__(self, other: SymmetricMatrixExpression) -> SymmetricMatrixExpression: ...
    @overload
    def __mul__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __neg__(self) -> SymmetricMatrixExpression: ...
    def __pow__(self, exponent: int) -> SymmetricMatrixExpression: ...
    def __radd__(self, other: FROM_TYPES) -> SymmetricMatrixExpression: ...
    def __rmul__(self, other: FROM_TYPES) -> SymmetricMatrixExpression: ...
    def __rsub__(self, other: FROM_TYPES) -> SymmetricMatrixExpression: ...
    @overload
    def __sub__(self, other: SymmetricMatrixExpression) -> SymmetricMatrixExpression: ...
    @overload
    def __sub__(self, other: FROM_TYPES) -> MatrixExpression: ...
    @overload
    def block_diag(
        self, others: Iterable[SymmetricMatrixExpression]
    ) -> SymmetricMatrixExpression: ...
    @overload
    def block_diag(self, others: Iterable[MatrixExpression]) -> MatrixExpression: ...
    def cache(self) -> SymmetricMatrixExpression: ...
    def copy(self, child: ExpressionNode) -> SymmetricMatrixExpression: ...
    def diag(self) -> VectorExpression: ...
    def diff(self, variables: VariableVectorExpression) -> SymmetricMatrixExpression: ...
    def eval(
        self, substitutions: dict[Symbol, tuple[float, ...]]
    ) -> SymmetricMatrixExpression: ...
    @overload
    def kron(self, other: SymmetricMatrixExpression) -> SymmetricMatrixExpression: ...
    @overload
    def kron(self, other: MatrixExpression) -> MatrixExpression: ...
    @property
    def T(self) -> SymmetricMatrixExpression: ...
    def trace(self) -> PolynomialExpression: ...

class VectorExpression(MatrixExpression):
    def __add__(self, other: FROM_TYPES) -> VectorExpression: ...
    def __mul__(self, other: FROM_TYPES) -> VectorExpression: ...
    def __neg__(self) -> VectorExpression: ...
    def __pow__(self, exponent: int) -> VectorExpression: ...
    def __radd__(self, other: FROM_TYPES) -> VectorExpression: ...
    @overload
    def __matmul__(self, other: RowVectorExpression) -> SymmetricMatrixExpression: ...
    @overload
    def __matmul__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __rmul__(self, other: FROM_TYPES) -> VectorExpression: ...
    def __rsub__(self, other: FROM_TYPES) -> VectorExpression: ...
    def __sub__(self, other: FROM_TYPES) -> VectorExpression: ...
    def __truediv__(self, other: float | int) -> VectorExpression: ...
    def cache(self) -> VectorExpression: ...
    def combinations(self, degrees: tuple[int, ...]) -> VectorExpression: ...
    def copy(self, child: ExpressionNode) -> VectorExpression: ...
    def diag(self) -> SymmetricMatrixExpression: ...
    def diff(self, variables: VariableVectorExpression) -> VectorExpression: ...
    def eval(
        self, substitutions: dict[Symbol, tuple[float, ...]]
    ) -> VectorExpression: ...
    def filter(self, predicator: FilterMixin.PREDICATOR_TYPE) -> VectorExpression: ...
    @overload
    def kron(self, other: VectorExpression) -> VectorExpression: ...
    @overload
    def kron(self, other: MatrixExpression) -> MatrixExpression: ...
    def linear_in(
        self,
        variables: VariableVectorExpression,
        monomials: MonomialVectorExpression | None = None,
    ) -> MatrixExpression: ...
    def parametrize(self, variable: Symbol | str) -> VariableExpression: ...
    def product(self, others: Iterable[VectorExpression]) -> VectorExpression: ...
    def sum(self) -> PolynomialExpression: ...
    def v_stack(self, others: Iterable[VectorExpression]) -> VectorExpression: ...
    @property
    def T(self) -> RowVectorExpression: ...

class RowVectorExpression(MatrixExpression):
    def __add__(self, other: FROM_TYPES) -> RowVectorExpression: ...
    def __mul__(self, other: FROM_TYPES) -> RowVectorExpression: ...
    def __neg__(self) -> RowVectorExpression: ...
    def __pow__(self, exponent: int) -> RowVectorExpression: ...
    def __radd__(self, other: FROM_TYPES) -> RowVectorExpression: ...
    @overload
    def __matmul__(self, other: SymmetricMatrixExpression) -> RowVectorExpression: ...
    @overload
    def __matmul__(self, other: VectorExpression) -> PolynomialExpression: ...
    @overload
    def __matmul__(self, other: FROM_TYPES) -> MatrixExpression: ...
    def __rmul__(self, other: FROM_TYPES) -> RowVectorExpression: ...
    def __rsub__(self, other: FROM_TYPES) -> RowVectorExpression: ...
    def __sub__(self, other: FROM_TYPES) -> RowVectorExpression: ...
    def __truediv__(self, other: float | int) -> RowVectorExpression: ...
    def cache(self) -> RowVectorExpression: ...
    def copy(self, child: ExpressionNode) -> RowVectorExpression: ...
    def diff(self, variables: VariableVectorExpression) -> RowVectorExpression: ...
    def eval(
        self, substitutions: dict[Symbol, tuple[float, ...]]
    ) -> RowVectorExpression: ...
    def h_stack(self, others: Iterable[RowVectorExpression]) -> RowVectorExpression: ...
    @overload
    def kron(self, other: VectorExpression) -> RowVectorExpression: ...
    @overload
    def kron(self, other: MatrixExpression) -> MatrixExpression: ...
    def sum(self) -> PolynomialExpression: ...
    @property
    def T(self) -> VectorExpression: ...

class PolynomialExpression(VectorExpression):
    def __add__(self, other: FROM_TYPES) -> PolynomialExpression: ...
    def __mul__(self, other: FROM_TYPES) -> PolynomialExpression: ...
    def __neg__(self) -> PolynomialExpression: ...
    def __pow__(self, exponent: int) -> PolynomialExpression: ...
    def __radd__(self, other: FROM_TYPES) -> PolynomialExpression: ...
    def __rmul__(self, other: FROM_TYPES) -> PolynomialExpression: ...
    def __rsub__(self, other: FROM_TYPES) -> PolynomialExpression: ...
    def __sub__(self, other: FROM_TYPES) -> PolynomialExpression: ...
    def __truediv__(self, other: float | int) -> PolynomialExpression: ...
    def cache(self) -> PolynomialExpression: ...
    def copy(self, child: ExpressionNode) -> PolynomialExpression: ...
    def diff(self, variables: VariableVectorExpression) -> RowVectorExpression: ...
    def eval(
        self, substitutions: dict[Symbol, tuple[float, ...]]
    ) -> PolynomialExpression: ...
    def h_stack(self, others: Iterable[MatrixExpression]) -> RowVectorExpression: ...
    def quadratic_in(
        self,
        variables: VariableVectorExpression,
        monomials: MonomialVectorExpression | None = None,
    ) -> SymmetricMatrixExpression: ...
    def sum(self) -> PolynomialExpression: ...

class MonomialVectorExpression(VectorExpression):
    @overload
    def __mul__(self, other: MonomialVectorExpression) -> MonomialVectorExpression: ...
    @overload
    def __mul__(self, other: FROM_TYPES) -> VectorExpression: ...
    def __pow__(self, exponent: int) -> MonomialVectorExpression: ...
    def cache(self) -> MonomialVectorExpression: ...
    def copy(self, child: ExpressionNode) -> MonomialVectorExpression: ...
    def filter(
        self, predicator: FilterMixin.PREDICATOR_TYPE
    ) -> MonomialVectorExpression: ...
    @overload
    def product(
        self, others: Iterable[MonomialVectorExpression]
    ) -> MonomialVectorExpression: ...
    @overload
    def product(self, others: Iterable[VectorExpression]) -> VectorExpression: ...

class MonomialExpression(PolynomialExpression, MonomialVectorExpression):
    @overload
    def __mul__(self, other: MonomialExpression) -> MonomialExpression: ...
    @overload
    def __mul__(self, other: FROM_TYPES) -> PolynomialExpression: ...
    def __pow__(self, exponent: int) -> MonomialExpression: ...
    def cache(self) -> MonomialExpression: ...
    def copy(self, child: ExpressionNode) -> MonomialExpression: ...

class VariableVectorExpression(MonomialVectorExpression):
    def __pow__(self, exponent: int) -> MonomialVectorExpression: ...
    def cache(self) -> VariableVectorExpression: ...
    def combinations(self, degrees: tuple[int, ...]) -> MonomialVectorExpression: ...
    def copy(self, child: ExpressionNode) -> VariableVectorExpression: ...
    def filter(
        self, predicator: FilterMixin.PREDICATOR_TYPE
    ) -> VariableVectorExpression: ...

class VariableExpression(VariableVectorExpression):
    def cache(self) -> VariableExpression: ...
    def copy(self, child: ExpressionNode) -> VariableExpression: ...
    @property
    def symbol(self) -> Symbol: ...

class SingleDimVariableExpression(MonomialExpression, VariableExpression):
    def cache(self) -> SingleDimVariableExpression: ...
    def copy(self, child: ExpressionNode) -> SingleDimVariableExpression: ...
