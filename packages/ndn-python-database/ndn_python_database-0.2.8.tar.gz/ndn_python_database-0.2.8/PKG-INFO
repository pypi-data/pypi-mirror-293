Metadata-Version: 2.1
Name: ndn-python-database
Version: 0.2.8
Summary: An NDN Storage Library for Applications in Python 3
Home-page: https://github.com/tntech-ngin/ndn-python-database
Download-URL: https://pypi.python.org/pypi/ndn-python-database
Author: See GitHub
Author-email: sshannigrahi@tntech.edu
Maintainer: see GitHub
Maintainer-email: sshannigrahi@tntech.edu
License: Apache License 2.0
Project-URL: Bug Tracker, https://github.com/tntech-ngin/ndn-python-database/issues
Project-URL: Source Code, https://github.com/tntech-ngin/ndn-python-database
Keywords: NDN STORAGE DISK MEMORY CACHE
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Internet
Classifier: Topic :: System :: Networking
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8
Description-Content-Type: text/x-rst
License-File: LICENSE.rst
License-File: AUTHORS.rst
Requires-Dist: plyvel>=1.4.0
Requires-Dist: pymongo>=4.0.1
Requires-Dist: python-ndn>=0.4.1

ndn-python-storage
==================

This python library provides **different storage APIs** for **Named Data Networking (NDN) applications**. At first,
it was thought that only ndn-python-repo_ would need such API; but with the ever-growing NDN applications such
as variations of NDN repositories (repo, nr-archway, hydra, etc), NDN sync protocols (svs, psync, etc), and more; it is imperative that
an API is provided.

The Named Data Networking Storage Library is implemented using and simply adds to python-ndn_, nicknamed
``ndn-python-storage`` obtained by the pip library ndn-storage_.

The implementation is on our github-repo_.

There is no documentation at this moment. However, as more storage solutions are added, a documentation will be formed.

To install, please use the pip library ndn-storage_. To import, use ndn.storage like you would with ndn.encoding.

.. _ndn-python-repo: https://github.com/UCLA-IRL/ndn-python-repo
.. _python-ndn: https://github.com/named-data/python-ndn
.. _github-repo: https://github.com/justincpresley/ndn-python-storage
.. _ndn-storage: https://pypi.org/project/ndn-storage
