# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_code': 'str',
        'node_name': 'str',
        'responsible': 'PersonBaseType',
        'date_execution': 'str',
        'executor': 'UserType',
        'status_from': 'str',
        'status_to': 'str'
    }

    attribute_map = {
        'node_code': 'node_code',
        'node_name': 'node_name',
        'responsible': 'responsible',
        'date_execution': 'date_execution',
        'executor': 'executor',
        'status_from': 'status_from',
        'status_to': 'status_to'
    }

    def __init__(self, node_code=None, node_name=None, responsible=None, date_execution=None, executor=None, status_from=None, status_to=None):  # noqa: E501
        """WorkflowType - a model defined in Swagger"""  # noqa: E501
        self._node_code = None
        self._node_name = None
        self._responsible = None
        self._date_execution = None
        self._executor = None
        self._status_from = None
        self._status_to = None
        self.discriminator = None
        if node_code is not None:
            self.node_code = node_code
        if node_name is not None:
            self.node_name = node_name
        if responsible is not None:
            self.responsible = responsible
        if date_execution is not None:
            self.date_execution = date_execution
        if executor is not None:
            self.executor = executor
        if status_from is not None:
            self.status_from = status_from
        if status_to is not None:
            self.status_to = status_to

    @property
    def node_code(self):
        """Gets the node_code of this WorkflowType.  # noqa: E501

        Kód schvalovacího  uzlu (APPROVE, AUTHORIZE, REJECT, ...)  # noqa: E501

        :return: The node_code of this WorkflowType.  # noqa: E501
        :rtype: str
        """
        return self._node_code

    @node_code.setter
    def node_code(self, node_code):
        """Sets the node_code of this WorkflowType.

        Kód schvalovacího  uzlu (APPROVE, AUTHORIZE, REJECT, ...)  # noqa: E501

        :param node_code: The node_code of this WorkflowType.  # noqa: E501
        :type: str
        """

        self._node_code = node_code

    @property
    def node_name(self):
        """Gets the node_name of this WorkflowType.  # noqa: E501

        Název schvalovacího  uzlu (schválení, autorizace, ...)  # noqa: E501

        :return: The node_name of this WorkflowType.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this WorkflowType.

        Název schvalovacího  uzlu (schválení, autorizace, ...)  # noqa: E501

        :param node_name: The node_name of this WorkflowType.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def responsible(self):
        """Gets the responsible of this WorkflowType.  # noqa: E501


        :return: The responsible of this WorkflowType.  # noqa: E501
        :rtype: PersonBaseType
        """
        return self._responsible

    @responsible.setter
    def responsible(self, responsible):
        """Sets the responsible of this WorkflowType.


        :param responsible: The responsible of this WorkflowType.  # noqa: E501
        :type: PersonBaseType
        """

        self._responsible = responsible

    @property
    def date_execution(self):
        """Gets the date_execution of this WorkflowType.  # noqa: E501

        Datum provedení  # noqa: E501

        :return: The date_execution of this WorkflowType.  # noqa: E501
        :rtype: str
        """
        return self._date_execution

    @date_execution.setter
    def date_execution(self, date_execution):
        """Sets the date_execution of this WorkflowType.

        Datum provedení  # noqa: E501

        :param date_execution: The date_execution of this WorkflowType.  # noqa: E501
        :type: str
        """

        self._date_execution = date_execution

    @property
    def executor(self):
        """Gets the executor of this WorkflowType.  # noqa: E501


        :return: The executor of this WorkflowType.  # noqa: E501
        :rtype: UserType
        """
        return self._executor

    @executor.setter
    def executor(self, executor):
        """Sets the executor of this WorkflowType.


        :param executor: The executor of this WorkflowType.  # noqa: E501
        :type: UserType
        """

        self._executor = executor

    @property
    def status_from(self):
        """Gets the status_from of this WorkflowType.  # noqa: E501

        Počáteční stav  # noqa: E501

        :return: The status_from of this WorkflowType.  # noqa: E501
        :rtype: str
        """
        return self._status_from

    @status_from.setter
    def status_from(self, status_from):
        """Sets the status_from of this WorkflowType.

        Počáteční stav  # noqa: E501

        :param status_from: The status_from of this WorkflowType.  # noqa: E501
        :type: str
        """

        self._status_from = status_from

    @property
    def status_to(self):
        """Gets the status_to of this WorkflowType.  # noqa: E501

        Počáteční stav  # noqa: E501

        :return: The status_to of this WorkflowType.  # noqa: E501
        :rtype: str
        """
        return self._status_to

    @status_to.setter
    def status_to(self, status_to):
        """Sets the status_to of this WorkflowType.

        Počáteční stav  # noqa: E501

        :param status_to: The status_to of this WorkflowType.  # noqa: E501
        :type: str
        """

        self._status_to = status_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
