# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonBaseType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'pid': 'str',
        'uuid': 'str',
        'name': 'str',
        'address': 'str',
        'country': 'str',
        'main_person': 'LinkedType',
        'linked_persons': 'LinkedListType'
    }

    attribute_map = {
        'identifier': 'identifier',
        'pid': 'pid',
        'uuid': 'uuid',
        'name': 'name',
        'address': 'address',
        'country': 'country',
        'main_person': 'main_person',
        'linked_persons': 'linked_persons'
    }

    def __init__(self, identifier=None, pid=None, uuid=None, name=None, address=None, country=None, main_person=None, linked_persons=None):  # noqa: E501
        """PersonBaseType - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._pid = None
        self._uuid = None
        self._name = None
        self._address = None
        self._country = None
        self._main_person = None
        self._linked_persons = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if pid is not None:
            self.pid = pid
        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if country is not None:
            self.country = country
        if main_person is not None:
            self.main_person = main_person
        if linked_persons is not None:
            self.linked_persons = linked_persons

    @property
    def identifier(self):
        """Gets the identifier of this PersonBaseType.  # noqa: E501

        Identifikátor osoby (obvykle PID)  # noqa: E501

        :return: The identifier of this PersonBaseType.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PersonBaseType.

        Identifikátor osoby (obvykle PID)  # noqa: E501

        :param identifier: The identifier of this PersonBaseType.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def pid(self):
        """Gets the pid of this PersonBaseType.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The pid of this PersonBaseType.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this PersonBaseType.

        Unique identifier  # noqa: E501

        :param pid: The pid of this PersonBaseType.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def uuid(self):
        """Gets the uuid of this PersonBaseType.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The uuid of this PersonBaseType.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PersonBaseType.

        Unique identifier  # noqa: E501

        :param uuid: The uuid of this PersonBaseType.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this PersonBaseType.  # noqa: E501

        Název osoby  # noqa: E501

        :return: The name of this PersonBaseType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonBaseType.

        Název osoby  # noqa: E501

        :param name: The name of this PersonBaseType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this PersonBaseType.  # noqa: E501

        Adresa osoby  # noqa: E501

        :return: The address of this PersonBaseType.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PersonBaseType.

        Adresa osoby  # noqa: E501

        :param address: The address of this PersonBaseType.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def country(self):
        """Gets the country of this PersonBaseType.  # noqa: E501

        Země adresy osoby  # noqa: E501

        :return: The country of this PersonBaseType.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PersonBaseType.

        Země adresy osoby  # noqa: E501

        :param country: The country of this PersonBaseType.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def main_person(self):
        """Gets the main_person of this PersonBaseType.  # noqa: E501


        :return: The main_person of this PersonBaseType.  # noqa: E501
        :rtype: LinkedType
        """
        return self._main_person

    @main_person.setter
    def main_person(self, main_person):
        """Sets the main_person of this PersonBaseType.


        :param main_person: The main_person of this PersonBaseType.  # noqa: E501
        :type: LinkedType
        """

        self._main_person = main_person

    @property
    def linked_persons(self):
        """Gets the linked_persons of this PersonBaseType.  # noqa: E501


        :return: The linked_persons of this PersonBaseType.  # noqa: E501
        :rtype: LinkedListType
        """
        return self._linked_persons

    @linked_persons.setter
    def linked_persons(self, linked_persons):
        """Sets the linked_persons of this PersonBaseType.


        :param linked_persons: The linked_persons of this PersonBaseType.  # noqa: E501
        :type: LinkedListType
        """

        self._linked_persons = linked_persons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonBaseType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonBaseType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
