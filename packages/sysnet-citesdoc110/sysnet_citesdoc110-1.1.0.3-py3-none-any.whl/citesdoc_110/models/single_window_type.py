# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SingleWindowType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'transaction_list': 'list[str]',
        'identifier_list': 'list[str]',
        'change_json_list': 'list[str]',
        'note': 'str'
    }

    attribute_map = {
        'version': 'version',
        'transaction_list': 'transaction_list',
        'identifier_list': 'identifier_list',
        'change_json_list': 'change_json_list',
        'note': 'note'
    }

    def __init__(self, version=None, transaction_list=None, identifier_list=None, change_json_list=None, note=None):  # noqa: E501
        """SingleWindowType - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._transaction_list = None
        self._identifier_list = None
        self._change_json_list = None
        self._note = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if transaction_list is not None:
            self.transaction_list = transaction_list
        if identifier_list is not None:
            self.identifier_list = identifier_list
        if change_json_list is not None:
            self.change_json_list = change_json_list
        if note is not None:
            self.note = note

    @property
    def version(self):
        """Gets the version of this SingleWindowType.  # noqa: E501

        Verze konektoru Single Window  # noqa: E501

        :return: The version of this SingleWindowType.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SingleWindowType.

        Verze konektoru Single Window  # noqa: E501

        :param version: The version of this SingleWindowType.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def transaction_list(self):
        """Gets the transaction_list of this SingleWindowType.  # noqa: E501

        Seznam odpisových transakcí  # noqa: E501

        :return: The transaction_list of this SingleWindowType.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction_list

    @transaction_list.setter
    def transaction_list(self, transaction_list):
        """Sets the transaction_list of this SingleWindowType.

        Seznam odpisových transakcí  # noqa: E501

        :param transaction_list: The transaction_list of this SingleWindowType.  # noqa: E501
        :type: list[str]
        """

        self._transaction_list = transaction_list

    @property
    def identifier_list(self):
        """Gets the identifier_list of this SingleWindowType.  # noqa: E501

        Seznam odpisových identifikátorů  # noqa: E501

        :return: The identifier_list of this SingleWindowType.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifier_list

    @identifier_list.setter
    def identifier_list(self, identifier_list):
        """Sets the identifier_list of this SingleWindowType.

        Seznam odpisových identifikátorů  # noqa: E501

        :param identifier_list: The identifier_list of this SingleWindowType.  # noqa: E501
        :type: list[str]
        """

        self._identifier_list = identifier_list

    @property
    def change_json_list(self):
        """Gets the change_json_list of this SingleWindowType.  # noqa: E501

        Seznam odpisových změn v JSON  # noqa: E501

        :return: The change_json_list of this SingleWindowType.  # noqa: E501
        :rtype: list[str]
        """
        return self._change_json_list

    @change_json_list.setter
    def change_json_list(self, change_json_list):
        """Sets the change_json_list of this SingleWindowType.

        Seznam odpisových změn v JSON  # noqa: E501

        :param change_json_list: The change_json_list of this SingleWindowType.  # noqa: E501
        :type: list[str]
        """

        self._change_json_list = change_json_list

    @property
    def note(self):
        """Gets the note of this SingleWindowType.  # noqa: E501

        Poznámka  # noqa: E501

        :return: The note of this SingleWindowType.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SingleWindowType.

        Poznámka  # noqa: E501

        :param note: The note of this SingleWindowType.  # noqa: E501
        :type: str
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleWindowType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleWindowType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
