# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExchangedDocumentType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'IDType',
        'name': 'list[TextType]',
        'type_code': 'DocumentCodeType',
        'issue_date_time': 'datetime',
        'copy_indicator': 'bool',
        'purpose': 'TextType',
        'purpose_code': 'list[MessageFunctionCodeType]',
        'information': 'list[TextType]',
        'reference_referenced_document': 'list[ReferencedDocumentType]',
        'effective_specified_period': 'SpecifiedPeriodType',
        'issue_logistics_location': 'LogisticsLocationType',
        'first_signatory_document_authentication': 'DocumentAuthenticationType',
        'second_signatory_document_authentication': 'DocumentAuthenticationType',
        'third_signatory_document_authentication': 'DocumentAuthenticationType',
        'fourth_signatory_document_authentication': 'DocumentAuthenticationType',
        'authorized_storage': 'LogisticsLocationType',
        'documentation_surrendered_to': 'IDType',
        'documentation_surrendered_to_comment': 'TextType'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type_code': 'typeCode',
        'issue_date_time': 'issueDateTime',
        'copy_indicator': 'copyIndicator',
        'purpose': 'purpose',
        'purpose_code': 'purposeCode',
        'information': 'information',
        'reference_referenced_document': 'referenceReferencedDocument',
        'effective_specified_period': 'effectiveSpecifiedPeriod',
        'issue_logistics_location': 'issueLogisticsLocation',
        'first_signatory_document_authentication': 'firstSignatoryDocumentAuthentication',
        'second_signatory_document_authentication': 'secondSignatoryDocumentAuthentication',
        'third_signatory_document_authentication': 'thirdSignatoryDocumentAuthentication',
        'fourth_signatory_document_authentication': 'fourthSignatoryDocumentAuthentication',
        'authorized_storage': 'authorizedStorage',
        'documentation_surrendered_to': 'documentationSurrenderedTo',
        'documentation_surrendered_to_comment': 'documentationSurrenderedToComment'
    }

    def __init__(self, id=None, name=None, type_code=None, issue_date_time=None, copy_indicator=None, purpose=None, purpose_code=None, information=None, reference_referenced_document=None, effective_specified_period=None, issue_logistics_location=None, first_signatory_document_authentication=None, second_signatory_document_authentication=None, third_signatory_document_authentication=None, fourth_signatory_document_authentication=None, authorized_storage=None, documentation_surrendered_to=None, documentation_surrendered_to_comment=None):  # noqa: E501
        """ExchangedDocumentType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type_code = None
        self._issue_date_time = None
        self._copy_indicator = None
        self._purpose = None
        self._purpose_code = None
        self._information = None
        self._reference_referenced_document = None
        self._effective_specified_period = None
        self._issue_logistics_location = None
        self._first_signatory_document_authentication = None
        self._second_signatory_document_authentication = None
        self._third_signatory_document_authentication = None
        self._fourth_signatory_document_authentication = None
        self._authorized_storage = None
        self._documentation_surrendered_to = None
        self._documentation_surrendered_to_comment = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type_code is not None:
            self.type_code = type_code
        if issue_date_time is not None:
            self.issue_date_time = issue_date_time
        if copy_indicator is not None:
            self.copy_indicator = copy_indicator
        if purpose is not None:
            self.purpose = purpose
        if purpose_code is not None:
            self.purpose_code = purpose_code
        if information is not None:
            self.information = information
        if reference_referenced_document is not None:
            self.reference_referenced_document = reference_referenced_document
        if effective_specified_period is not None:
            self.effective_specified_period = effective_specified_period
        if issue_logistics_location is not None:
            self.issue_logistics_location = issue_logistics_location
        if first_signatory_document_authentication is not None:
            self.first_signatory_document_authentication = first_signatory_document_authentication
        if second_signatory_document_authentication is not None:
            self.second_signatory_document_authentication = second_signatory_document_authentication
        if third_signatory_document_authentication is not None:
            self.third_signatory_document_authentication = third_signatory_document_authentication
        if fourth_signatory_document_authentication is not None:
            self.fourth_signatory_document_authentication = fourth_signatory_document_authentication
        if authorized_storage is not None:
            self.authorized_storage = authorized_storage
        if documentation_surrendered_to is not None:
            self.documentation_surrendered_to = documentation_surrendered_to
        if documentation_surrendered_to_comment is not None:
            self.documentation_surrendered_to_comment = documentation_surrendered_to_comment

    @property
    def id(self):
        """Gets the id of this ExchangedDocumentType.  # noqa: E501


        :return: The id of this ExchangedDocumentType.  # noqa: E501
        :rtype: IDType
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExchangedDocumentType.


        :param id: The id of this ExchangedDocumentType.  # noqa: E501
        :type: IDType
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ExchangedDocumentType.  # noqa: E501


        :return: The name of this ExchangedDocumentType.  # noqa: E501
        :rtype: list[TextType]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExchangedDocumentType.


        :param name: The name of this ExchangedDocumentType.  # noqa: E501
        :type: list[TextType]
        """

        self._name = name

    @property
    def type_code(self):
        """Gets the type_code of this ExchangedDocumentType.  # noqa: E501


        :return: The type_code of this ExchangedDocumentType.  # noqa: E501
        :rtype: DocumentCodeType
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this ExchangedDocumentType.


        :param type_code: The type_code of this ExchangedDocumentType.  # noqa: E501
        :type: DocumentCodeType
        """

        self._type_code = type_code

    @property
    def issue_date_time(self):
        """Gets the issue_date_time of this ExchangedDocumentType.  # noqa: E501


        :return: The issue_date_time of this ExchangedDocumentType.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date_time

    @issue_date_time.setter
    def issue_date_time(self, issue_date_time):
        """Sets the issue_date_time of this ExchangedDocumentType.


        :param issue_date_time: The issue_date_time of this ExchangedDocumentType.  # noqa: E501
        :type: datetime
        """

        self._issue_date_time = issue_date_time

    @property
    def copy_indicator(self):
        """Gets the copy_indicator of this ExchangedDocumentType.  # noqa: E501


        :return: The copy_indicator of this ExchangedDocumentType.  # noqa: E501
        :rtype: bool
        """
        return self._copy_indicator

    @copy_indicator.setter
    def copy_indicator(self, copy_indicator):
        """Sets the copy_indicator of this ExchangedDocumentType.


        :param copy_indicator: The copy_indicator of this ExchangedDocumentType.  # noqa: E501
        :type: bool
        """

        self._copy_indicator = copy_indicator

    @property
    def purpose(self):
        """Gets the purpose of this ExchangedDocumentType.  # noqa: E501


        :return: The purpose of this ExchangedDocumentType.  # noqa: E501
        :rtype: TextType
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ExchangedDocumentType.


        :param purpose: The purpose of this ExchangedDocumentType.  # noqa: E501
        :type: TextType
        """

        self._purpose = purpose

    @property
    def purpose_code(self):
        """Gets the purpose_code of this ExchangedDocumentType.  # noqa: E501


        :return: The purpose_code of this ExchangedDocumentType.  # noqa: E501
        :rtype: list[MessageFunctionCodeType]
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this ExchangedDocumentType.


        :param purpose_code: The purpose_code of this ExchangedDocumentType.  # noqa: E501
        :type: list[MessageFunctionCodeType]
        """

        self._purpose_code = purpose_code

    @property
    def information(self):
        """Gets the information of this ExchangedDocumentType.  # noqa: E501


        :return: The information of this ExchangedDocumentType.  # noqa: E501
        :rtype: list[TextType]
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this ExchangedDocumentType.


        :param information: The information of this ExchangedDocumentType.  # noqa: E501
        :type: list[TextType]
        """

        self._information = information

    @property
    def reference_referenced_document(self):
        """Gets the reference_referenced_document of this ExchangedDocumentType.  # noqa: E501


        :return: The reference_referenced_document of this ExchangedDocumentType.  # noqa: E501
        :rtype: list[ReferencedDocumentType]
        """
        return self._reference_referenced_document

    @reference_referenced_document.setter
    def reference_referenced_document(self, reference_referenced_document):
        """Sets the reference_referenced_document of this ExchangedDocumentType.


        :param reference_referenced_document: The reference_referenced_document of this ExchangedDocumentType.  # noqa: E501
        :type: list[ReferencedDocumentType]
        """

        self._reference_referenced_document = reference_referenced_document

    @property
    def effective_specified_period(self):
        """Gets the effective_specified_period of this ExchangedDocumentType.  # noqa: E501


        :return: The effective_specified_period of this ExchangedDocumentType.  # noqa: E501
        :rtype: SpecifiedPeriodType
        """
        return self._effective_specified_period

    @effective_specified_period.setter
    def effective_specified_period(self, effective_specified_period):
        """Sets the effective_specified_period of this ExchangedDocumentType.


        :param effective_specified_period: The effective_specified_period of this ExchangedDocumentType.  # noqa: E501
        :type: SpecifiedPeriodType
        """

        self._effective_specified_period = effective_specified_period

    @property
    def issue_logistics_location(self):
        """Gets the issue_logistics_location of this ExchangedDocumentType.  # noqa: E501


        :return: The issue_logistics_location of this ExchangedDocumentType.  # noqa: E501
        :rtype: LogisticsLocationType
        """
        return self._issue_logistics_location

    @issue_logistics_location.setter
    def issue_logistics_location(self, issue_logistics_location):
        """Sets the issue_logistics_location of this ExchangedDocumentType.


        :param issue_logistics_location: The issue_logistics_location of this ExchangedDocumentType.  # noqa: E501
        :type: LogisticsLocationType
        """

        self._issue_logistics_location = issue_logistics_location

    @property
    def first_signatory_document_authentication(self):
        """Gets the first_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501


        :return: The first_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501
        :rtype: DocumentAuthenticationType
        """
        return self._first_signatory_document_authentication

    @first_signatory_document_authentication.setter
    def first_signatory_document_authentication(self, first_signatory_document_authentication):
        """Sets the first_signatory_document_authentication of this ExchangedDocumentType.


        :param first_signatory_document_authentication: The first_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501
        :type: DocumentAuthenticationType
        """

        self._first_signatory_document_authentication = first_signatory_document_authentication

    @property
    def second_signatory_document_authentication(self):
        """Gets the second_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501


        :return: The second_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501
        :rtype: DocumentAuthenticationType
        """
        return self._second_signatory_document_authentication

    @second_signatory_document_authentication.setter
    def second_signatory_document_authentication(self, second_signatory_document_authentication):
        """Sets the second_signatory_document_authentication of this ExchangedDocumentType.


        :param second_signatory_document_authentication: The second_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501
        :type: DocumentAuthenticationType
        """

        self._second_signatory_document_authentication = second_signatory_document_authentication

    @property
    def third_signatory_document_authentication(self):
        """Gets the third_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501


        :return: The third_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501
        :rtype: DocumentAuthenticationType
        """
        return self._third_signatory_document_authentication

    @third_signatory_document_authentication.setter
    def third_signatory_document_authentication(self, third_signatory_document_authentication):
        """Sets the third_signatory_document_authentication of this ExchangedDocumentType.


        :param third_signatory_document_authentication: The third_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501
        :type: DocumentAuthenticationType
        """

        self._third_signatory_document_authentication = third_signatory_document_authentication

    @property
    def fourth_signatory_document_authentication(self):
        """Gets the fourth_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501


        :return: The fourth_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501
        :rtype: DocumentAuthenticationType
        """
        return self._fourth_signatory_document_authentication

    @fourth_signatory_document_authentication.setter
    def fourth_signatory_document_authentication(self, fourth_signatory_document_authentication):
        """Sets the fourth_signatory_document_authentication of this ExchangedDocumentType.


        :param fourth_signatory_document_authentication: The fourth_signatory_document_authentication of this ExchangedDocumentType.  # noqa: E501
        :type: DocumentAuthenticationType
        """

        self._fourth_signatory_document_authentication = fourth_signatory_document_authentication

    @property
    def authorized_storage(self):
        """Gets the authorized_storage of this ExchangedDocumentType.  # noqa: E501


        :return: The authorized_storage of this ExchangedDocumentType.  # noqa: E501
        :rtype: LogisticsLocationType
        """
        return self._authorized_storage

    @authorized_storage.setter
    def authorized_storage(self, authorized_storage):
        """Sets the authorized_storage of this ExchangedDocumentType.


        :param authorized_storage: The authorized_storage of this ExchangedDocumentType.  # noqa: E501
        :type: LogisticsLocationType
        """

        self._authorized_storage = authorized_storage

    @property
    def documentation_surrendered_to(self):
        """Gets the documentation_surrendered_to of this ExchangedDocumentType.  # noqa: E501


        :return: The documentation_surrendered_to of this ExchangedDocumentType.  # noqa: E501
        :rtype: IDType
        """
        return self._documentation_surrendered_to

    @documentation_surrendered_to.setter
    def documentation_surrendered_to(self, documentation_surrendered_to):
        """Sets the documentation_surrendered_to of this ExchangedDocumentType.


        :param documentation_surrendered_to: The documentation_surrendered_to of this ExchangedDocumentType.  # noqa: E501
        :type: IDType
        """

        self._documentation_surrendered_to = documentation_surrendered_to

    @property
    def documentation_surrendered_to_comment(self):
        """Gets the documentation_surrendered_to_comment of this ExchangedDocumentType.  # noqa: E501


        :return: The documentation_surrendered_to_comment of this ExchangedDocumentType.  # noqa: E501
        :rtype: TextType
        """
        return self._documentation_surrendered_to_comment

    @documentation_surrendered_to_comment.setter
    def documentation_surrendered_to_comment(self, documentation_surrendered_to_comment):
        """Sets the documentation_surrendered_to_comment of this ExchangedDocumentType.


        :param documentation_surrendered_to_comment: The documentation_surrendered_to_comment of this ExchangedDocumentType.  # noqa: E501
        :type: TextType
        """

        self._documentation_surrendered_to_comment = documentation_surrendered_to_comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExchangedDocumentType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExchangedDocumentType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
