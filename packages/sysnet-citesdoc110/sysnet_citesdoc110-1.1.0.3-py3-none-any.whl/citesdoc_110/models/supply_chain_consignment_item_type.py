# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplyChainConsignmentItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'list[IDType]',
        'physical_logistics_shipping_marks': 'list[LogisticsShippingMarksType]',
        'origin_trade_country': 'TradeCountryType',
        'export_trade_country': 'TradeCountryType',
        'associated_referenced_document': 'list[ReferencedDocumentType]',
        'transport_logistics_package': 'list[LogisticsPackageType]',
        'included_supply_chain_trade_line_item': 'list[SupplyChainTradeLineItemType]',
        'examination_transport_event': 'list[TransportEventType]',
        'applicable_cross_border_regulatory_procedure': 'list[CrossBorderRegulatoryProcedureType]'
    }

    attribute_map = {
        'id': 'id',
        'physical_logistics_shipping_marks': 'physicalLogisticsShippingMarks',
        'origin_trade_country': 'originTradeCountry',
        'export_trade_country': 'exportTradeCountry',
        'associated_referenced_document': 'associatedReferencedDocument',
        'transport_logistics_package': 'transportLogisticsPackage',
        'included_supply_chain_trade_line_item': 'includedSupplyChainTradeLineItem',
        'examination_transport_event': 'examinationTransportEvent',
        'applicable_cross_border_regulatory_procedure': 'applicableCrossBorderRegulatoryProcedure'
    }

    def __init__(self, id=None, physical_logistics_shipping_marks=None, origin_trade_country=None, export_trade_country=None, associated_referenced_document=None, transport_logistics_package=None, included_supply_chain_trade_line_item=None, examination_transport_event=None, applicable_cross_border_regulatory_procedure=None):  # noqa: E501
        """SupplyChainConsignmentItemType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._physical_logistics_shipping_marks = None
        self._origin_trade_country = None
        self._export_trade_country = None
        self._associated_referenced_document = None
        self._transport_logistics_package = None
        self._included_supply_chain_trade_line_item = None
        self._examination_transport_event = None
        self._applicable_cross_border_regulatory_procedure = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if physical_logistics_shipping_marks is not None:
            self.physical_logistics_shipping_marks = physical_logistics_shipping_marks
        if origin_trade_country is not None:
            self.origin_trade_country = origin_trade_country
        if export_trade_country is not None:
            self.export_trade_country = export_trade_country
        if associated_referenced_document is not None:
            self.associated_referenced_document = associated_referenced_document
        if transport_logistics_package is not None:
            self.transport_logistics_package = transport_logistics_package
        if included_supply_chain_trade_line_item is not None:
            self.included_supply_chain_trade_line_item = included_supply_chain_trade_line_item
        if examination_transport_event is not None:
            self.examination_transport_event = examination_transport_event
        if applicable_cross_border_regulatory_procedure is not None:
            self.applicable_cross_border_regulatory_procedure = applicable_cross_border_regulatory_procedure

    @property
    def id(self):
        """Gets the id of this SupplyChainConsignmentItemType.  # noqa: E501


        :return: The id of this SupplyChainConsignmentItemType.  # noqa: E501
        :rtype: list[IDType]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupplyChainConsignmentItemType.


        :param id: The id of this SupplyChainConsignmentItemType.  # noqa: E501
        :type: list[IDType]
        """

        self._id = id

    @property
    def physical_logistics_shipping_marks(self):
        """Gets the physical_logistics_shipping_marks of this SupplyChainConsignmentItemType.  # noqa: E501


        :return: The physical_logistics_shipping_marks of this SupplyChainConsignmentItemType.  # noqa: E501
        :rtype: list[LogisticsShippingMarksType]
        """
        return self._physical_logistics_shipping_marks

    @physical_logistics_shipping_marks.setter
    def physical_logistics_shipping_marks(self, physical_logistics_shipping_marks):
        """Sets the physical_logistics_shipping_marks of this SupplyChainConsignmentItemType.


        :param physical_logistics_shipping_marks: The physical_logistics_shipping_marks of this SupplyChainConsignmentItemType.  # noqa: E501
        :type: list[LogisticsShippingMarksType]
        """

        self._physical_logistics_shipping_marks = physical_logistics_shipping_marks

    @property
    def origin_trade_country(self):
        """Gets the origin_trade_country of this SupplyChainConsignmentItemType.  # noqa: E501


        :return: The origin_trade_country of this SupplyChainConsignmentItemType.  # noqa: E501
        :rtype: TradeCountryType
        """
        return self._origin_trade_country

    @origin_trade_country.setter
    def origin_trade_country(self, origin_trade_country):
        """Sets the origin_trade_country of this SupplyChainConsignmentItemType.


        :param origin_trade_country: The origin_trade_country of this SupplyChainConsignmentItemType.  # noqa: E501
        :type: TradeCountryType
        """

        self._origin_trade_country = origin_trade_country

    @property
    def export_trade_country(self):
        """Gets the export_trade_country of this SupplyChainConsignmentItemType.  # noqa: E501


        :return: The export_trade_country of this SupplyChainConsignmentItemType.  # noqa: E501
        :rtype: TradeCountryType
        """
        return self._export_trade_country

    @export_trade_country.setter
    def export_trade_country(self, export_trade_country):
        """Sets the export_trade_country of this SupplyChainConsignmentItemType.


        :param export_trade_country: The export_trade_country of this SupplyChainConsignmentItemType.  # noqa: E501
        :type: TradeCountryType
        """

        self._export_trade_country = export_trade_country

    @property
    def associated_referenced_document(self):
        """Gets the associated_referenced_document of this SupplyChainConsignmentItemType.  # noqa: E501


        :return: The associated_referenced_document of this SupplyChainConsignmentItemType.  # noqa: E501
        :rtype: list[ReferencedDocumentType]
        """
        return self._associated_referenced_document

    @associated_referenced_document.setter
    def associated_referenced_document(self, associated_referenced_document):
        """Sets the associated_referenced_document of this SupplyChainConsignmentItemType.


        :param associated_referenced_document: The associated_referenced_document of this SupplyChainConsignmentItemType.  # noqa: E501
        :type: list[ReferencedDocumentType]
        """

        self._associated_referenced_document = associated_referenced_document

    @property
    def transport_logistics_package(self):
        """Gets the transport_logistics_package of this SupplyChainConsignmentItemType.  # noqa: E501


        :return: The transport_logistics_package of this SupplyChainConsignmentItemType.  # noqa: E501
        :rtype: list[LogisticsPackageType]
        """
        return self._transport_logistics_package

    @transport_logistics_package.setter
    def transport_logistics_package(self, transport_logistics_package):
        """Sets the transport_logistics_package of this SupplyChainConsignmentItemType.


        :param transport_logistics_package: The transport_logistics_package of this SupplyChainConsignmentItemType.  # noqa: E501
        :type: list[LogisticsPackageType]
        """

        self._transport_logistics_package = transport_logistics_package

    @property
    def included_supply_chain_trade_line_item(self):
        """Gets the included_supply_chain_trade_line_item of this SupplyChainConsignmentItemType.  # noqa: E501


        :return: The included_supply_chain_trade_line_item of this SupplyChainConsignmentItemType.  # noqa: E501
        :rtype: list[SupplyChainTradeLineItemType]
        """
        return self._included_supply_chain_trade_line_item

    @included_supply_chain_trade_line_item.setter
    def included_supply_chain_trade_line_item(self, included_supply_chain_trade_line_item):
        """Sets the included_supply_chain_trade_line_item of this SupplyChainConsignmentItemType.


        :param included_supply_chain_trade_line_item: The included_supply_chain_trade_line_item of this SupplyChainConsignmentItemType.  # noqa: E501
        :type: list[SupplyChainTradeLineItemType]
        """

        self._included_supply_chain_trade_line_item = included_supply_chain_trade_line_item

    @property
    def examination_transport_event(self):
        """Gets the examination_transport_event of this SupplyChainConsignmentItemType.  # noqa: E501


        :return: The examination_transport_event of this SupplyChainConsignmentItemType.  # noqa: E501
        :rtype: list[TransportEventType]
        """
        return self._examination_transport_event

    @examination_transport_event.setter
    def examination_transport_event(self, examination_transport_event):
        """Sets the examination_transport_event of this SupplyChainConsignmentItemType.


        :param examination_transport_event: The examination_transport_event of this SupplyChainConsignmentItemType.  # noqa: E501
        :type: list[TransportEventType]
        """

        self._examination_transport_event = examination_transport_event

    @property
    def applicable_cross_border_regulatory_procedure(self):
        """Gets the applicable_cross_border_regulatory_procedure of this SupplyChainConsignmentItemType.  # noqa: E501


        :return: The applicable_cross_border_regulatory_procedure of this SupplyChainConsignmentItemType.  # noqa: E501
        :rtype: list[CrossBorderRegulatoryProcedureType]
        """
        return self._applicable_cross_border_regulatory_procedure

    @applicable_cross_border_regulatory_procedure.setter
    def applicable_cross_border_regulatory_procedure(self, applicable_cross_border_regulatory_procedure):
        """Sets the applicable_cross_border_regulatory_procedure of this SupplyChainConsignmentItemType.


        :param applicable_cross_border_regulatory_procedure: The applicable_cross_border_regulatory_procedure of this SupplyChainConsignmentItemType.  # noqa: E501
        :type: list[CrossBorderRegulatoryProcedureType]
        """

        self._applicable_cross_border_regulatory_procedure = applicable_cross_border_regulatory_procedure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplyChainConsignmentItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplyChainConsignmentItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
