# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradeProductType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seller_assigned_id': 'IDType',
        'manufacturer_assigned_id': 'list[IDType]',
        'description': 'list[TextType]',
        'type_code': 'list[CodeType]',
        'common_name': 'list[TextType]',
        'scientific_name': 'list[TextType]'
    }

    attribute_map = {
        'seller_assigned_id': 'sellerAssignedID',
        'manufacturer_assigned_id': 'manufacturerAssignedID',
        'description': 'description',
        'type_code': 'typeCode',
        'common_name': 'commonName',
        'scientific_name': 'scientificName'
    }

    def __init__(self, seller_assigned_id=None, manufacturer_assigned_id=None, description=None, type_code=None, common_name=None, scientific_name=None):  # noqa: E501
        """TradeProductType - a model defined in Swagger"""  # noqa: E501
        self._seller_assigned_id = None
        self._manufacturer_assigned_id = None
        self._description = None
        self._type_code = None
        self._common_name = None
        self._scientific_name = None
        self.discriminator = None
        if seller_assigned_id is not None:
            self.seller_assigned_id = seller_assigned_id
        if manufacturer_assigned_id is not None:
            self.manufacturer_assigned_id = manufacturer_assigned_id
        if description is not None:
            self.description = description
        if type_code is not None:
            self.type_code = type_code
        if common_name is not None:
            self.common_name = common_name
        if scientific_name is not None:
            self.scientific_name = scientific_name

    @property
    def seller_assigned_id(self):
        """Gets the seller_assigned_id of this TradeProductType.  # noqa: E501


        :return: The seller_assigned_id of this TradeProductType.  # noqa: E501
        :rtype: IDType
        """
        return self._seller_assigned_id

    @seller_assigned_id.setter
    def seller_assigned_id(self, seller_assigned_id):
        """Sets the seller_assigned_id of this TradeProductType.


        :param seller_assigned_id: The seller_assigned_id of this TradeProductType.  # noqa: E501
        :type: IDType
        """

        self._seller_assigned_id = seller_assigned_id

    @property
    def manufacturer_assigned_id(self):
        """Gets the manufacturer_assigned_id of this TradeProductType.  # noqa: E501


        :return: The manufacturer_assigned_id of this TradeProductType.  # noqa: E501
        :rtype: list[IDType]
        """
        return self._manufacturer_assigned_id

    @manufacturer_assigned_id.setter
    def manufacturer_assigned_id(self, manufacturer_assigned_id):
        """Sets the manufacturer_assigned_id of this TradeProductType.


        :param manufacturer_assigned_id: The manufacturer_assigned_id of this TradeProductType.  # noqa: E501
        :type: list[IDType]
        """

        self._manufacturer_assigned_id = manufacturer_assigned_id

    @property
    def description(self):
        """Gets the description of this TradeProductType.  # noqa: E501


        :return: The description of this TradeProductType.  # noqa: E501
        :rtype: list[TextType]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TradeProductType.


        :param description: The description of this TradeProductType.  # noqa: E501
        :type: list[TextType]
        """

        self._description = description

    @property
    def type_code(self):
        """Gets the type_code of this TradeProductType.  # noqa: E501


        :return: The type_code of this TradeProductType.  # noqa: E501
        :rtype: list[CodeType]
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this TradeProductType.


        :param type_code: The type_code of this TradeProductType.  # noqa: E501
        :type: list[CodeType]
        """

        self._type_code = type_code

    @property
    def common_name(self):
        """Gets the common_name of this TradeProductType.  # noqa: E501


        :return: The common_name of this TradeProductType.  # noqa: E501
        :rtype: list[TextType]
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this TradeProductType.


        :param common_name: The common_name of this TradeProductType.  # noqa: E501
        :type: list[TextType]
        """

        self._common_name = common_name

    @property
    def scientific_name(self):
        """Gets the scientific_name of this TradeProductType.  # noqa: E501


        :return: The scientific_name of this TradeProductType.  # noqa: E501
        :rtype: list[TextType]
        """
        return self._scientific_name

    @scientific_name.setter
    def scientific_name(self, scientific_name):
        """Sets the scientific_name of this TradeProductType.


        :param scientific_name: The scientific_name of this TradeProductType.  # noqa: E501
        :type: list[TextType]
        """

        self._scientific_name = scientific_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradeProductType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeProductType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
