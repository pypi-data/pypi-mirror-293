# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrossBorderRegulatoryProcedureType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_code': 'list[CodeType]',
        'used_to_date_quota_quantity': 'QuantityType',
        'annual_quota_quantity': 'QuantityType',
        'acquisition_date_time': 'datetime',
        'previous_referenced_document': 'list[ReferencedDocumentType]'
    }

    attribute_map = {
        'category_code': 'categoryCode',
        'used_to_date_quota_quantity': 'usedToDateQuotaQuantity',
        'annual_quota_quantity': 'annualQuotaQuantity',
        'acquisition_date_time': 'acquisitionDateTime',
        'previous_referenced_document': 'previousReferencedDocument'
    }

    def __init__(self, category_code=None, used_to_date_quota_quantity=None, annual_quota_quantity=None, acquisition_date_time=None, previous_referenced_document=None):  # noqa: E501
        """CrossBorderRegulatoryProcedureType - a model defined in Swagger"""  # noqa: E501
        self._category_code = None
        self._used_to_date_quota_quantity = None
        self._annual_quota_quantity = None
        self._acquisition_date_time = None
        self._previous_referenced_document = None
        self.discriminator = None
        if category_code is not None:
            self.category_code = category_code
        if used_to_date_quota_quantity is not None:
            self.used_to_date_quota_quantity = used_to_date_quota_quantity
        if annual_quota_quantity is not None:
            self.annual_quota_quantity = annual_quota_quantity
        if acquisition_date_time is not None:
            self.acquisition_date_time = acquisition_date_time
        if previous_referenced_document is not None:
            self.previous_referenced_document = previous_referenced_document

    @property
    def category_code(self):
        """Gets the category_code of this CrossBorderRegulatoryProcedureType.  # noqa: E501


        :return: The category_code of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :rtype: list[CodeType]
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this CrossBorderRegulatoryProcedureType.


        :param category_code: The category_code of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :type: list[CodeType]
        """

        self._category_code = category_code

    @property
    def used_to_date_quota_quantity(self):
        """Gets the used_to_date_quota_quantity of this CrossBorderRegulatoryProcedureType.  # noqa: E501


        :return: The used_to_date_quota_quantity of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :rtype: QuantityType
        """
        return self._used_to_date_quota_quantity

    @used_to_date_quota_quantity.setter
    def used_to_date_quota_quantity(self, used_to_date_quota_quantity):
        """Sets the used_to_date_quota_quantity of this CrossBorderRegulatoryProcedureType.


        :param used_to_date_quota_quantity: The used_to_date_quota_quantity of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :type: QuantityType
        """

        self._used_to_date_quota_quantity = used_to_date_quota_quantity

    @property
    def annual_quota_quantity(self):
        """Gets the annual_quota_quantity of this CrossBorderRegulatoryProcedureType.  # noqa: E501


        :return: The annual_quota_quantity of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :rtype: QuantityType
        """
        return self._annual_quota_quantity

    @annual_quota_quantity.setter
    def annual_quota_quantity(self, annual_quota_quantity):
        """Sets the annual_quota_quantity of this CrossBorderRegulatoryProcedureType.


        :param annual_quota_quantity: The annual_quota_quantity of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :type: QuantityType
        """

        self._annual_quota_quantity = annual_quota_quantity

    @property
    def acquisition_date_time(self):
        """Gets the acquisition_date_time of this CrossBorderRegulatoryProcedureType.  # noqa: E501


        :return: The acquisition_date_time of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :rtype: datetime
        """
        return self._acquisition_date_time

    @acquisition_date_time.setter
    def acquisition_date_time(self, acquisition_date_time):
        """Sets the acquisition_date_time of this CrossBorderRegulatoryProcedureType.


        :param acquisition_date_time: The acquisition_date_time of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :type: datetime
        """

        self._acquisition_date_time = acquisition_date_time

    @property
    def previous_referenced_document(self):
        """Gets the previous_referenced_document of this CrossBorderRegulatoryProcedureType.  # noqa: E501


        :return: The previous_referenced_document of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :rtype: list[ReferencedDocumentType]
        """
        return self._previous_referenced_document

    @previous_referenced_document.setter
    def previous_referenced_document(self, previous_referenced_document):
        """Sets the previous_referenced_document of this CrossBorderRegulatoryProcedureType.


        :param previous_referenced_document: The previous_referenced_document of this CrossBorderRegulatoryProcedureType.  # noqa: E501
        :type: list[ReferencedDocumentType]
        """

        self._previous_referenced_document = previous_referenced_document

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrossBorderRegulatoryProcedureType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrossBorderRegulatoryProcedureType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
