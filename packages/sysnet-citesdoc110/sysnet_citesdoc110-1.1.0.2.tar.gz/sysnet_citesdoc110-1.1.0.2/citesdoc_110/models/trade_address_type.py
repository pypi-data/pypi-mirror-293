# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradeAddressType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'postcode_code': 'list[CodeType]',
        'post_office_box': 'TextType',
        'street_name': 'list[TextType]',
        'city_name': 'TextType',
        'country_id': 'CountryIDType',
        'country_name': 'list[TextType]',
        'country_sub_division_name': 'list[TextType]'
    }

    attribute_map = {
        'postcode_code': 'postcodeCode',
        'post_office_box': 'postOfficeBox',
        'street_name': 'streetName',
        'city_name': 'cityName',
        'country_id': 'countryID',
        'country_name': 'countryName',
        'country_sub_division_name': 'countrySubDivisionName'
    }

    def __init__(self, postcode_code=None, post_office_box=None, street_name=None, city_name=None, country_id=None, country_name=None, country_sub_division_name=None):  # noqa: E501
        """TradeAddressType - a model defined in Swagger"""  # noqa: E501
        self._postcode_code = None
        self._post_office_box = None
        self._street_name = None
        self._city_name = None
        self._country_id = None
        self._country_name = None
        self._country_sub_division_name = None
        self.discriminator = None
        if postcode_code is not None:
            self.postcode_code = postcode_code
        if post_office_box is not None:
            self.post_office_box = post_office_box
        if street_name is not None:
            self.street_name = street_name
        if city_name is not None:
            self.city_name = city_name
        if country_id is not None:
            self.country_id = country_id
        if country_name is not None:
            self.country_name = country_name
        if country_sub_division_name is not None:
            self.country_sub_division_name = country_sub_division_name

    @property
    def postcode_code(self):
        """Gets the postcode_code of this TradeAddressType.  # noqa: E501


        :return: The postcode_code of this TradeAddressType.  # noqa: E501
        :rtype: list[CodeType]
        """
        return self._postcode_code

    @postcode_code.setter
    def postcode_code(self, postcode_code):
        """Sets the postcode_code of this TradeAddressType.


        :param postcode_code: The postcode_code of this TradeAddressType.  # noqa: E501
        :type: list[CodeType]
        """

        self._postcode_code = postcode_code

    @property
    def post_office_box(self):
        """Gets the post_office_box of this TradeAddressType.  # noqa: E501


        :return: The post_office_box of this TradeAddressType.  # noqa: E501
        :rtype: TextType
        """
        return self._post_office_box

    @post_office_box.setter
    def post_office_box(self, post_office_box):
        """Sets the post_office_box of this TradeAddressType.


        :param post_office_box: The post_office_box of this TradeAddressType.  # noqa: E501
        :type: TextType
        """

        self._post_office_box = post_office_box

    @property
    def street_name(self):
        """Gets the street_name of this TradeAddressType.  # noqa: E501


        :return: The street_name of this TradeAddressType.  # noqa: E501
        :rtype: list[TextType]
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this TradeAddressType.


        :param street_name: The street_name of this TradeAddressType.  # noqa: E501
        :type: list[TextType]
        """

        self._street_name = street_name

    @property
    def city_name(self):
        """Gets the city_name of this TradeAddressType.  # noqa: E501


        :return: The city_name of this TradeAddressType.  # noqa: E501
        :rtype: TextType
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this TradeAddressType.


        :param city_name: The city_name of this TradeAddressType.  # noqa: E501
        :type: TextType
        """

        self._city_name = city_name

    @property
    def country_id(self):
        """Gets the country_id of this TradeAddressType.  # noqa: E501


        :return: The country_id of this TradeAddressType.  # noqa: E501
        :rtype: CountryIDType
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this TradeAddressType.


        :param country_id: The country_id of this TradeAddressType.  # noqa: E501
        :type: CountryIDType
        """

        self._country_id = country_id

    @property
    def country_name(self):
        """Gets the country_name of this TradeAddressType.  # noqa: E501


        :return: The country_name of this TradeAddressType.  # noqa: E501
        :rtype: list[TextType]
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this TradeAddressType.


        :param country_name: The country_name of this TradeAddressType.  # noqa: E501
        :type: list[TextType]
        """

        self._country_name = country_name

    @property
    def country_sub_division_name(self):
        """Gets the country_sub_division_name of this TradeAddressType.  # noqa: E501


        :return: The country_sub_division_name of this TradeAddressType.  # noqa: E501
        :rtype: list[TextType]
        """
        return self._country_sub_division_name

    @country_sub_division_name.setter
    def country_sub_division_name(self, country_sub_division_name):
        """Sets the country_sub_division_name of this TradeAddressType.


        :param country_sub_division_name: The country_sub_division_name of this TradeAddressType.  # noqa: E501
        :type: list[TextType]
        """

        self._country_sub_division_name = country_sub_division_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradeAddressType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeAddressType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
