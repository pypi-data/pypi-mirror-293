# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from citesdoc_110.models.person_base_type import PersonBaseType  # noqa: F401,E501

class PersonExtendedType(PersonBaseType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ico': 'str',
        'person_type': 'str',
        'birthdate': 'date',
        'credential': 'str',
        'credential_type': 'str',
        'phone': 'list[PhoneNumberType]',
        'email': 'list[MailAddressType]',
        'person_printable': 'str',
        'special_flags': 'list[str]'
    }
    if hasattr(PersonBaseType, "swagger_types"):
        swagger_types.update(PersonBaseType.swagger_types)

    attribute_map = {
        'ico': 'ico',
        'person_type': 'person_type',
        'birthdate': 'birthdate',
        'credential': 'credential',
        'credential_type': 'credential_type',
        'phone': 'phone',
        'email': 'email',
        'person_printable': 'person_printable',
        'special_flags': 'special_flags'
    }
    if hasattr(PersonBaseType, "attribute_map"):
        attribute_map.update(PersonBaseType.attribute_map)

    def __init__(self, ico=None, person_type=None, birthdate=None, credential=None, credential_type=None, phone=None, email=None, person_printable=None, special_flags=None, *args, **kwargs):  # noqa: E501
        """PersonExtendedType - a model defined in Swagger"""  # noqa: E501
        self._ico = None
        self._person_type = None
        self._birthdate = None
        self._credential = None
        self._credential_type = None
        self._phone = None
        self._email = None
        self._person_printable = None
        self._special_flags = None
        self.discriminator = None
        if ico is not None:
            self.ico = ico
        if person_type is not None:
            self.person_type = person_type
        if birthdate is not None:
            self.birthdate = birthdate
        if credential is not None:
            self.credential = credential
        if credential_type is not None:
            self.credential_type = credential_type
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email
        if person_printable is not None:
            self.person_printable = person_printable
        if special_flags is not None:
            self.special_flags = special_flags
        PersonBaseType.__init__(self, *args, **kwargs)

    @property
    def ico(self):
        """Gets the ico of this PersonExtendedType.  # noqa: E501

        Jiný identifikátor  # noqa: E501

        :return: The ico of this PersonExtendedType.  # noqa: E501
        :rtype: str
        """
        return self._ico

    @ico.setter
    def ico(self, ico):
        """Sets the ico of this PersonExtendedType.

        Jiný identifikátor  # noqa: E501

        :param ico: The ico of this PersonExtendedType.  # noqa: E501
        :type: str
        """

        self._ico = ico

    @property
    def person_type(self):
        """Gets the person_type of this PersonExtendedType.  # noqa: E501

        Typ osoby (zdroj CRŽP):  - legalEntity: tuzemská právnická osoba - legalEntityWithoutIco: tuzemská právnická osoba bez IČO - foreignLegalEntity: zahraniční právnická osoba - businsessNaturalPerson: tuzemská fyzická osoba podnikající - naturalPerson: tuzemská fyzická osoba nepodnikající - foreignNaturalPerson: zahraniční fyzická osoba podnikající   # noqa: E501

        :return: The person_type of this PersonExtendedType.  # noqa: E501
        :rtype: str
        """
        return self._person_type

    @person_type.setter
    def person_type(self, person_type):
        """Sets the person_type of this PersonExtendedType.

        Typ osoby (zdroj CRŽP):  - legalEntity: tuzemská právnická osoba - legalEntityWithoutIco: tuzemská právnická osoba bez IČO - foreignLegalEntity: zahraniční právnická osoba - businsessNaturalPerson: tuzemská fyzická osoba podnikající - naturalPerson: tuzemská fyzická osoba nepodnikající - foreignNaturalPerson: zahraniční fyzická osoba podnikající   # noqa: E501

        :param person_type: The person_type of this PersonExtendedType.  # noqa: E501
        :type: str
        """
        allowed_values = ["legalEntity", "legalEntityWithoutIco", "foreignLegalEntity", "naturalPerson", "businsessNaturalPerson", "foreignNaturalPerson", "", None]  # noqa: E501
        if person_type not in allowed_values:
            raise ValueError(
                "Invalid value for `person_type` ({0}), must be one of {1}"  # noqa: E501
                .format(person_type, allowed_values)
            )

        self._person_type = person_type

    @property
    def birthdate(self):
        """Gets the birthdate of this PersonExtendedType.  # noqa: E501

        Datum narození  # noqa: E501

        :return: The birthdate of this PersonExtendedType.  # noqa: E501
        :rtype: date
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this PersonExtendedType.

        Datum narození  # noqa: E501

        :param birthdate: The birthdate of this PersonExtendedType.  # noqa: E501
        :type: date
        """

        self._birthdate = birthdate

    @property
    def credential(self):
        """Gets the credential of this PersonExtendedType.  # noqa: E501

        Číslo průkazu totožnosti  # noqa: E501

        :return: The credential of this PersonExtendedType.  # noqa: E501
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this PersonExtendedType.

        Číslo průkazu totožnosti  # noqa: E501

        :param credential: The credential of this PersonExtendedType.  # noqa: E501
        :type: str
        """

        self._credential = credential

    @property
    def credential_type(self):
        """Gets the credential_type of this PersonExtendedType.  # noqa: E501

        Typ průkazu totožnosti  # noqa: E501

        :return: The credential_type of this PersonExtendedType.  # noqa: E501
        :rtype: str
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this PersonExtendedType.

        Typ průkazu totožnosti  # noqa: E501

        :param credential_type: The credential_type of this PersonExtendedType.  # noqa: E501
        :type: str
        """

        self._credential_type = credential_type

    @property
    def phone(self):
        """Gets the phone of this PersonExtendedType.  # noqa: E501

        Telefonní číslo  # noqa: E501

        :return: The phone of this PersonExtendedType.  # noqa: E501
        :rtype: list[PhoneNumberType]
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PersonExtendedType.

        Telefonní číslo  # noqa: E501

        :param phone: The phone of this PersonExtendedType.  # noqa: E501
        :type: list[PhoneNumberType]
        """

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this PersonExtendedType.  # noqa: E501

        Elektronická pošta  # noqa: E501

        :return: The email of this PersonExtendedType.  # noqa: E501
        :rtype: list[MailAddressType]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PersonExtendedType.

        Elektronická pošta  # noqa: E501

        :param email: The email of this PersonExtendedType.  # noqa: E501
        :type: list[MailAddressType]
        """

        self._email = email

    @property
    def person_printable(self):
        """Gets the person_printable of this PersonExtendedType.  # noqa: E501

        Tištitená podoba objektu  # noqa: E501

        :return: The person_printable of this PersonExtendedType.  # noqa: E501
        :rtype: str
        """
        return self._person_printable

    @person_printable.setter
    def person_printable(self, person_printable):
        """Sets the person_printable of this PersonExtendedType.

        Tištitená podoba objektu  # noqa: E501

        :param person_printable: The person_printable of this PersonExtendedType.  # noqa: E501
        :type: str
        """

        self._person_printable = person_printable

    @property
    def special_flags(self):
        """Gets the special_flags of this PersonExtendedType.  # noqa: E501

        Speciální textové značení  # noqa: E501

        :return: The special_flags of this PersonExtendedType.  # noqa: E501
        :rtype: list[str]
        """
        return self._special_flags

    @special_flags.setter
    def special_flags(self, special_flags):
        """Sets the special_flags of this PersonExtendedType.

        Speciální textové značení  # noqa: E501

        :param special_flags: The special_flags of this PersonExtendedType.  # noqa: E501
        :type: list[str]
        """

        self._special_flags = special_flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonExtendedType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonExtendedType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
