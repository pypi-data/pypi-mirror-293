# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GoodsBirthType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'birth_place': 'str',
        'birth_type': 'str',
        'birth_value': 'str',
        'birth_date': 'date'
    }

    attribute_map = {
        'birth_place': 'birth_place',
        'birth_type': 'birth_type',
        'birth_value': 'birth_value',
        'birth_date': 'birth_date'
    }

    def __init__(self, birth_place=None, birth_type=None, birth_value=None, birth_date=None):  # noqa: E501
        """GoodsBirthType - a model defined in Swagger"""  # noqa: E501
        self._birth_place = None
        self._birth_type = None
        self._birth_value = None
        self._birth_date = None
        self.discriminator = None
        if birth_place is not None:
            self.birth_place = birth_place
        if birth_type is not None:
            self.birth_type = birth_type
        if birth_value is not None:
            self.birth_value = birth_value
        if birth_date is not None:
            self.birth_date = birth_date

    @property
    def birth_place(self):
        """Gets the birth_place of this GoodsBirthType.  # noqa: E501

        místo narození  # noqa: E501

        :return: The birth_place of this GoodsBirthType.  # noqa: E501
        :rtype: str
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """Sets the birth_place of this GoodsBirthType.

        místo narození  # noqa: E501

        :param birth_place: The birth_place of this GoodsBirthType.  # noqa: E501
        :type: str
        """

        self._birth_place = birth_place

    @property
    def birth_type(self):
        """Gets the birth_type of this GoodsBirthType.  # noqa: E501

        Typ učení data narození  # noqa: E501

        :return: The birth_type of this GoodsBirthType.  # noqa: E501
        :rtype: str
        """
        return self._birth_type

    @birth_type.setter
    def birth_type(self, birth_type):
        """Sets the birth_type of this GoodsBirthType.

        Typ učení data narození  # noqa: E501

        :param birth_type: The birth_type of this GoodsBirthType.  # noqa: E501
        :type: str
        """
        allowed_values = ["DATE", "INTERVAL", "MONTH", "OTHER", "", None]  # noqa: E501
        if birth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `birth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(birth_type, allowed_values)
            )

        self._birth_type = birth_type

    @property
    def birth_value(self):
        """Gets the birth_value of this GoodsBirthType.  # noqa: E501

        Hodnota data narození, není-li DATE  # noqa: E501

        :return: The birth_value of this GoodsBirthType.  # noqa: E501
        :rtype: str
        """
        return self._birth_value

    @birth_value.setter
    def birth_value(self, birth_value):
        """Sets the birth_value of this GoodsBirthType.

        Hodnota data narození, není-li DATE  # noqa: E501

        :param birth_value: The birth_value of this GoodsBirthType.  # noqa: E501
        :type: str
        """

        self._birth_value = birth_value

    @property
    def birth_date(self):
        """Gets the birth_date of this GoodsBirthType.  # noqa: E501

        Datum narození  # noqa: E501

        :return: The birth_date of this GoodsBirthType.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this GoodsBirthType.

        Datum narození  # noqa: E501

        :param birth_date: The birth_date of this GoodsBirthType.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoodsBirthType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoodsBirthType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
