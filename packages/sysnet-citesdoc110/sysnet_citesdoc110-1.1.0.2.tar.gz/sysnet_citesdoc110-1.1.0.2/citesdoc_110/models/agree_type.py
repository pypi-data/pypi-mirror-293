# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AgreeType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'value_list': 'list[str]'
    }

    attribute_map = {
        'key': 'key',
        'value_list': 'value_list'
    }

    def __init__(self, key=None, value_list=None):  # noqa: E501
        """AgreeType - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._value_list = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if value_list is not None:
            self.value_list = value_list

    @property
    def key(self):
        """Gets the key of this AgreeType.  # noqa: E501

        Notes pole Agree (Souhlas|1, Nesouhlas|0, Jiné|X)  # noqa: E501

        :return: The key of this AgreeType.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AgreeType.

        Notes pole Agree (Souhlas|1, Nesouhlas|0, Jiné|X)  # noqa: E501

        :param key: The key of this AgreeType.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "0", "X", "", None]  # noqa: E501
        if key not in allowed_values:
            raise ValueError(
                "Invalid value for `key` ({0}), must be one of {1}"  # noqa: E501
                .format(key, allowed_values)
            )

        self._key = key

    @property
    def value_list(self):
        """Gets the value_list of this AgreeType.  # noqa: E501

        Notes pole Agree_values: <br>1. Transakce nebude mít škodlivý účinek na stav zachování dotčeného druhu ani na rozsah území, na kterém se příslušná populace daného druhu vyskytuje. <br>2. Nejsou známy žádné další okolnosti týkající se zachování dotčeného druhu, které mluví proti vydání povolení nebo potvrzení. <br>3. Místo určení, kde má být živý exemplář umístěn, je vybaveno tak, že umožňuje ochranu exempláře a řádnou péči o něj.   # noqa: E501

        :return: The value_list of this AgreeType.  # noqa: E501
        :rtype: list[str]
        """
        return self._value_list

    @value_list.setter
    def value_list(self, value_list):
        """Sets the value_list of this AgreeType.

        Notes pole Agree_values: <br>1. Transakce nebude mít škodlivý účinek na stav zachování dotčeného druhu ani na rozsah území, na kterém se příslušná populace daného druhu vyskytuje. <br>2. Nejsou známy žádné další okolnosti týkající se zachování dotčeného druhu, které mluví proti vydání povolení nebo potvrzení. <br>3. Místo určení, kde má být živý exemplář umístěn, je vybaveno tak, že umožňuje ochranu exempláře a řádnou péči o něj.   # noqa: E501

        :param value_list: The value_list of this AgreeType.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["1", "2", "3", "", None]  # noqa: E501
        if not set(value_list).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `value_list` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(value_list) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._value_list = value_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgreeType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgreeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
