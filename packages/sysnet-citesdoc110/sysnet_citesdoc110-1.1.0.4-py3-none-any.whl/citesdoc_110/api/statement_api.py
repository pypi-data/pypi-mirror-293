# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from citesdoc_110.api_client import ApiClient


class StatementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_statement(self, identifier, **kwargs):  # noqa: E501
        """Odstraní stanovisko AOPK (cruD)  # noqa: E501

        Odstraní stanovisko AOPK CITES  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statement(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_statement_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_statement_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def delete_statement_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Odstraní stanovisko AOPK (cruD)  # noqa: E501

        Odstraní stanovisko AOPK CITES  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statement_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `delete_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statement/{identifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_statement_request(self, identifier, **kwargs):  # noqa: E501
        """Odstraní žádost o stanovisko AOPK (cruD)  # noqa: E501

        Odstraní žádost o stanovisko AOPK CITES  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statement_request(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_statement_request_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_statement_request_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def delete_statement_request_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Odstraní žádost o stanovisko AOPK (cruD)  # noqa: E501

        Odstraní žádost o stanovisko AOPK CITES  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statement_request_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_statement_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `delete_statement_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/request/{identifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pdf_file_statement(self, identifier, **kwargs):  # noqa: E501
        """Vrací PDF dokument  # noqa: E501

        Vrátí PDF dokumentu CITES  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pdf_file_statement(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pdf_file_statement_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pdf_file_statement_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def get_pdf_file_statement_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Vrací PDF dokument  # noqa: E501

        Vrátí PDF dokumentu CITES  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pdf_file_statement_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pdf_file_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_pdf_file_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statement/pdf/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statement_certificate(self, identifier, **kwargs):  # noqa: E501
        """Vrací konkrétní stanovisko AOPK k výjimce (cRud)  # noqa: E501

        Vrátí stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_certificate(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: CitesDocumentStatementCertificateType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statement_certificate_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statement_certificate_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def get_statement_certificate_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Vrací konkrétní stanovisko AOPK k výjimce (cRud)  # noqa: E501

        Vrátí stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_certificate_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: CitesDocumentStatementCertificateType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statement_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_statement_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statement/certificate/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentStatementCertificateType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statement_certificate_request(self, identifier, **kwargs):  # noqa: E501
        """Vrací konkrétní žádost o stanovisko AOPK k výjimce (cRud)  # noqa: E501

        Vrátí zádost o stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_certificate_request(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: CitesDocumentStatementCertificateRequestType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statement_certificate_request_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statement_certificate_request_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def get_statement_certificate_request_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Vrací konkrétní žádost o stanovisko AOPK k výjimce (cRud)  # noqa: E501

        Vrátí zádost o stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_certificate_request_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: CitesDocumentStatementCertificateRequestType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statement_certificate_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_statement_certificate_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/request/certificate/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentStatementCertificateRequestType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statement_list(self, **kwargs):  # noqa: E501
        """Vrací seznam stanovisek AOPK podle klíče nebo kódu  # noqa: E501

        Vrátí základní metadata stanovisek  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str doc_code:
        :param str statement: předává typ stanoviska
        :param bool request: předává požadavek na žádost o dokument
        :param bool standalone: předává požadavek samostatné stanovisko
        :param str creator: Klíčové slovo pro vyhledání dokumentu podle autora
        :param str key: předává klíčové slovo pro vyhledání dokumentů. Lomítka nahrazovat podtržítkem
        :param str search: předává text pro fulltextové vyhledání dokumentů
        :param int start: První dokument na stránce
        :param int page_size: Velikost stránky při stránkovaném výstupu
        :param int page: Číslo stránky výstupu
        :return: CitesDocumentEntryListType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statement_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_statement_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_statement_list_with_http_info(self, **kwargs):  # noqa: E501
        """Vrací seznam stanovisek AOPK podle klíče nebo kódu  # noqa: E501

        Vrátí základní metadata stanovisek  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str doc_code:
        :param str statement: předává typ stanoviska
        :param bool request: předává požadavek na žádost o dokument
        :param bool standalone: předává požadavek samostatné stanovisko
        :param str creator: Klíčové slovo pro vyhledání dokumentu podle autora
        :param str key: předává klíčové slovo pro vyhledání dokumentů. Lomítka nahrazovat podtržítkem
        :param str search: předává text pro fulltextové vyhledání dokumentů
        :param int start: První dokument na stránce
        :param int page_size: Velikost stránky při stránkovaném výstupu
        :param int page: Číslo stránky výstupu
        :return: CitesDocumentEntryListType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_code', 'statement', 'request', 'standalone', 'creator', 'key', 'search', 'start', 'page_size', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statement_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_code' in params:
            query_params.append(('doc_code', params['doc_code']))  # noqa: E501
        if 'statement' in params:
            query_params.append(('statement', params['statement']))  # noqa: E501
        if 'request' in params:
            query_params.append(('request', params['request']))  # noqa: E501
        if 'standalone' in params:
            query_params.append(('standalone', params['standalone']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statement', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentEntryListType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statement_permit(self, identifier, **kwargs):  # noqa: E501
        """Vrací konkrétní stanovisko AOPK k permitu (cRud)  # noqa: E501

        Vrátí stanovisko AOPK k permitu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_permit(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: CitesDocumentStatementPermitType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statement_permit_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statement_permit_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def get_statement_permit_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Vrací konkrétní stanovisko AOPK k permitu (cRud)  # noqa: E501

        Vrátí stanovisko AOPK k permitu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_permit_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :return: CitesDocumentStatementPermitType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statement_permit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_statement_permit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statement/permit/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentStatementPermitType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statement_request_list(self, **kwargs):  # noqa: E501
        """Vrací seznam žádostí o stanoviska AOPK podle klíče nebo kódu  # noqa: E501

        Vrátí základní metadata žádostí stanovisek  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_request_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str doc_code:
        :param str statement: předává typ stanoviska
        :param bool request: předává požadavek na žádost o dokument
        :param bool standalone: předává požadavek samostatné stanovisko
        :param str creator: Klíčové slovo pro vyhledání dokumentu podle autora
        :param str key: předává klíčové slovo pro vyhledání dokumentů. Lomítka nahrazovat podtržítkem
        :param str search: předává text pro fulltextové vyhledání dokumentů
        :param int start: První dokument na stránce
        :param int page_size: Velikost stránky při stránkovaném výstupu
        :param int page: Číslo stránky výstupu
        :return: CitesDocumentEntryListType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statement_request_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_statement_request_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_statement_request_list_with_http_info(self, **kwargs):  # noqa: E501
        """Vrací seznam žádostí o stanoviska AOPK podle klíče nebo kódu  # noqa: E501

        Vrátí základní metadata žádostí stanovisek  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_request_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str doc_code:
        :param str statement: předává typ stanoviska
        :param bool request: předává požadavek na žádost o dokument
        :param bool standalone: předává požadavek samostatné stanovisko
        :param str creator: Klíčové slovo pro vyhledání dokumentu podle autora
        :param str key: předává klíčové slovo pro vyhledání dokumentů. Lomítka nahrazovat podtržítkem
        :param str search: předává text pro fulltextové vyhledání dokumentů
        :param int start: První dokument na stránce
        :param int page_size: Velikost stránky při stránkovaném výstupu
        :param int page: Číslo stránky výstupu
        :return: CitesDocumentEntryListType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_code', 'statement', 'request', 'standalone', 'creator', 'key', 'search', 'start', 'page_size', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statement_request_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_code' in params:
            query_params.append(('doc_code', params['doc_code']))  # noqa: E501
        if 'statement' in params:
            query_params.append(('statement', params['statement']))  # noqa: E501
        if 'request' in params:
            query_params.append(('request', params['request']))  # noqa: E501
        if 'standalone' in params:
            query_params.append(('standalone', params['standalone']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/request', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentEntryListType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_statement_certificate(self, **kwargs):  # noqa: E501
        """Vytvoří nové stanovisko AOPK k potvrzení o výjimce (Crud)  # noqa: E501

        Vytvoří nové stanovisko AOPK k k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_statement_certificate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CitesDocumentStatementCertificateType body:
        :return: CitesDocumentStatementCertificateType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_statement_certificate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_statement_certificate_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_statement_certificate_with_http_info(self, **kwargs):  # noqa: E501
        """Vytvoří nové stanovisko AOPK k potvrzení o výjimce (Crud)  # noqa: E501

        Vytvoří nové stanovisko AOPK k k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_statement_certificate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CitesDocumentStatementCertificateType body:
        :return: CitesDocumentStatementCertificateType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_statement_certificate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statement/certificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentStatementCertificateType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_statement_permit(self, **kwargs):  # noqa: E501
        """Vytvoří nové stanovisko AOPK k permitu (Crud)  # noqa: E501

        Vytvoří nové stanovisko AOPK k permitu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_statement_permit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CitesDocumentStatementPermitType body:
        :return: CitesDocumentStatementPermitType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_statement_permit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_statement_permit_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_statement_permit_with_http_info(self, **kwargs):  # noqa: E501
        """Vytvoří nové stanovisko AOPK k permitu (Crud)  # noqa: E501

        Vytvoří nové stanovisko AOPK k permitu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_statement_permit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CitesDocumentStatementPermitType body:
        :return: CitesDocumentStatementPermitType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_statement_permit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statement/permit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentStatementPermitType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_statement_request_certificate(self, **kwargs):  # noqa: E501
        """Vytvoří novou žádost o stanovisko AOPK k potvrzení o výjimce (Crud)  # noqa: E501

        Vytvoří novou žádost o stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_statement_request_certificate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CitesDocumentStatementCertificateRequestType body:
        :return: CitesDocumentStatementCertificateRequestType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_statement_request_certificate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_statement_request_certificate_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_statement_request_certificate_with_http_info(self, **kwargs):  # noqa: E501
        """Vytvoří novou žádost o stanovisko AOPK k potvrzení o výjimce (Crud)  # noqa: E501

        Vytvoří novou žádost o stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_statement_request_certificate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CitesDocumentStatementCertificateRequestType body:
        :return: CitesDocumentStatementCertificateRequestType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_statement_request_certificate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/request/certificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentStatementCertificateRequestType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_statement_certificate(self, identifier, **kwargs):  # noqa: E501
        """Aktualizuje stanovisko AOPK k výjimce (crUd)  # noqa: E501

        Aktualizuje stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_statement_certificate(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :param CitesDocumentStatementCertificateType body:
        :return: CitesDocumentStatementCertificateType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_statement_certificate_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.put_statement_certificate_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def put_statement_certificate_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Aktualizuje stanovisko AOPK k výjimce (crUd)  # noqa: E501

        Aktualizuje stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_statement_certificate_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :param CitesDocumentStatementCertificateType body:
        :return: CitesDocumentStatementCertificateType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_statement_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `put_statement_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statement/certificate/{identifier}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentStatementCertificateType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_statement_certificate_request(self, identifier, **kwargs):  # noqa: E501
        """Aktualizuje žádost o stanovisko AOPK k výjimce (crUd)  # noqa: E501

        Aktualizuje žádost o stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_statement_certificate_request(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :param CitesDocumentStatementCertificateRequestType body:
        :return: CitesDocumentStatementCertificateRequestType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_statement_certificate_request_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.put_statement_certificate_request_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def put_statement_certificate_request_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Aktualizuje žádost o stanovisko AOPK k výjimce (crUd)  # noqa: E501

        Aktualizuje žádost o stanovisko AOPK k výjimce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_statement_certificate_request_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :param CitesDocumentStatementCertificateRequestType body:
        :return: CitesDocumentStatementCertificateRequestType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_statement_certificate_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `put_statement_certificate_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/request/certificate/{identifier}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentStatementCertificateRequestType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_statement_permit(self, identifier, **kwargs):  # noqa: E501
        """Aktualizuje stanovisko AOPK k permitu (crUd)  # noqa: E501

        Aktualizuje stanovisko AOPK k permitu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_statement_permit(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :param CitesDocumentStatementPermitType body:
        :return: CitesDocumentStatementPermitType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_statement_permit_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.put_statement_permit_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def put_statement_permit_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Aktualizuje stanovisko AOPK k permitu (crUd)  # noqa: E501

        Aktualizuje stanovisko AOPK k permitu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_statement_permit_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifikátor dokumentu (PID nebo UNID) (required)
        :param CitesDocumentStatementPermitType body:
        :return: CitesDocumentStatementPermitType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_statement_permit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `put_statement_permit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statement/permit/{identifier}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitesDocumentStatementPermitType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
