# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CitesDocumentAdditionalType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_code': 'str',
        'additional_type': 'str',
        'date_delivered': 'datetime',
        'person_identifier': 'str',
        'person_name': 'str',
        'body': 'str',
        'issuing': 'IssuingType',
        'goods_identification_from': 'GoodsIdetificationType',
        'goods_identification_to': 'GoodsIdetificationType',
        'goods_identification_change': 'str',
        'holder_from': 'PersonBaseType',
        'holder_to': 'PersonBaseType',
        'date_checkout': 'date',
        'date_sold': 'date',
        'discard': 'str',
        'discard_comment': 'str',
        'original_document_returned': 'bool',
        'note': 'str',
        'status': 'str',
        'metadata': 'MetadataType',
        'parent': 'RelatedType',
        'workflow': 'WorkflowListType',
        'attachments': 'CitesDocumentAttachmentListType',
        'linked_list': 'LinkedListType'
    }

    attribute_map = {
        'doc_code': 'doc_code',
        'additional_type': 'additional_type',
        'date_delivered': 'date_delivered',
        'person_identifier': 'person_identifier',
        'person_name': 'person_name',
        'body': 'body',
        'issuing': 'issuing',
        'goods_identification_from': 'goods_identification_from',
        'goods_identification_to': 'goods_identification_to',
        'goods_identification_change': 'goods_identification_change',
        'holder_from': 'holder_from',
        'holder_to': 'holder_to',
        'date_checkout': 'date_checkout',
        'date_sold': 'date_sold',
        'discard': 'discard',
        'discard_comment': 'discard_comment',
        'original_document_returned': 'original_document_returned',
        'note': 'note',
        'status': 'status',
        'metadata': 'metadata',
        'parent': 'parent',
        'workflow': 'workflow',
        'attachments': 'attachments',
        'linked_list': 'linked_list'
    }

    def __init__(self, doc_code=None, additional_type=None, date_delivered=None, person_identifier=None, person_name=None, body=None, issuing=None, goods_identification_from=None, goods_identification_to=None, goods_identification_change=None, holder_from=None, holder_to=None, date_checkout=None, date_sold=None, discard=None, discard_comment=None, original_document_returned=None, note=None, status=None, metadata=None, parent=None, workflow=None, attachments=None, linked_list=None):  # noqa: E501
        """CitesDocumentAdditionalType - a model defined in Swagger"""  # noqa: E501
        self._doc_code = None
        self._additional_type = None
        self._date_delivered = None
        self._person_identifier = None
        self._person_name = None
        self._body = None
        self._issuing = None
        self._goods_identification_from = None
        self._goods_identification_to = None
        self._goods_identification_change = None
        self._holder_from = None
        self._holder_to = None
        self._date_checkout = None
        self._date_sold = None
        self._discard = None
        self._discard_comment = None
        self._original_document_returned = None
        self._note = None
        self._status = None
        self._metadata = None
        self._parent = None
        self._workflow = None
        self._attachments = None
        self._linked_list = None
        self.discriminator = None
        self.doc_code = doc_code
        if additional_type is not None:
            self.additional_type = additional_type
        if date_delivered is not None:
            self.date_delivered = date_delivered
        if person_identifier is not None:
            self.person_identifier = person_identifier
        if person_name is not None:
            self.person_name = person_name
        if body is not None:
            self.body = body
        if issuing is not None:
            self.issuing = issuing
        if goods_identification_from is not None:
            self.goods_identification_from = goods_identification_from
        if goods_identification_to is not None:
            self.goods_identification_to = goods_identification_to
        if goods_identification_change is not None:
            self.goods_identification_change = goods_identification_change
        if holder_from is not None:
            self.holder_from = holder_from
        if holder_to is not None:
            self.holder_to = holder_to
        if date_checkout is not None:
            self.date_checkout = date_checkout
        if date_sold is not None:
            self.date_sold = date_sold
        if discard is not None:
            self.discard = discard
        if discard_comment is not None:
            self.discard_comment = discard_comment
        if original_document_returned is not None:
            self.original_document_returned = original_document_returned
        if note is not None:
            self.note = note
        if status is not None:
            self.status = status
        self.metadata = metadata
        if parent is not None:
            self.parent = parent
        if workflow is not None:
            self.workflow = workflow
        if attachments is not None:
            self.attachments = attachments
        if linked_list is not None:
            self.linked_list = linked_list

    @property
    def doc_code(self):
        """Gets the doc_code of this CitesDocumentAdditionalType.  # noqa: E501

        Kód dokumentu z číselníku - vazba na formuláře PDF  # noqa: E501

        :return: The doc_code of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._doc_code

    @doc_code.setter
    def doc_code(self, doc_code):
        """Sets the doc_code of this CitesDocumentAdditionalType.

        Kód dokumentu z číselníku - vazba na formuláře PDF  # noqa: E501

        :param doc_code: The doc_code of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """
        if doc_code is None:
            raise ValueError("Invalid value for `doc_code`, must not be `None`")  # noqa: E501

        self._doc_code = doc_code

    @property
    def additional_type(self):
        """Gets the additional_type of this CitesDocumentAdditionalType.  # noqa: E501

        Typ dodatečného dokumentu z číselníku  # noqa: E501

        :return: The additional_type of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._additional_type

    @additional_type.setter
    def additional_type(self, additional_type):
        """Sets the additional_type of this CitesDocumentAdditionalType.

        Typ dodatečného dokumentu z číselníku  # noqa: E501

        :param additional_type: The additional_type of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """
        allowed_values = ["additionalRecord", "personalRecord", "holderChange", "holderCheckout", "discard", '', None]  # noqa: E501
        if additional_type not in allowed_values:
            raise ValueError(
                "Invalid value for `additional_type` ({0}), must be one of {1}"  # noqa: E501
                .format(additional_type, allowed_values)
            )

        self._additional_type = additional_type

    @property
    def date_delivered(self):
        """Gets the date_delivered of this CitesDocumentAdditionalType.  # noqa: E501

        datum doručení - DeliveredDate  # noqa: E501

        :return: The date_delivered of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: datetime
        """
        return self._date_delivered

    @date_delivered.setter
    def date_delivered(self, date_delivered):
        """Sets the date_delivered of this CitesDocumentAdditionalType.

        datum doručení - DeliveredDate  # noqa: E501

        :param date_delivered: The date_delivered of this CitesDocumentAdditionalType.  # noqa: E501
        :type: datetime
        """

        self._date_delivered = date_delivered

    @property
    def person_identifier(self):
        """Gets the person_identifier of this CitesDocumentAdditionalType.  # noqa: E501

        Identifikátor subjektu, který záznam pořídil  # noqa: E501

        :return: The person_identifier of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._person_identifier

    @person_identifier.setter
    def person_identifier(self, person_identifier):
        """Sets the person_identifier of this CitesDocumentAdditionalType.

        Identifikátor subjektu, který záznam pořídil  # noqa: E501

        :param person_identifier: The person_identifier of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """

        self._person_identifier = person_identifier

    @property
    def person_name(self):
        """Gets the person_name of this CitesDocumentAdditionalType.  # noqa: E501

        Název subjektu, který záznam pořídil  # noqa: E501

        :return: The person_name of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._person_name

    @person_name.setter
    def person_name(self, person_name):
        """Sets the person_name of this CitesDocumentAdditionalType.

        Název subjektu, který záznam pořídil  # noqa: E501

        :param person_name: The person_name of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """

        self._person_name = person_name

    @property
    def body(self):
        """Gets the body of this CitesDocumentAdditionalType.  # noqa: E501

        Obsah dodatečného dokumentu (např HTML)  # noqa: E501

        :return: The body of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CitesDocumentAdditionalType.

        Obsah dodatečného dokumentu (např HTML)  # noqa: E501

        :param body: The body of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def issuing(self):
        """Gets the issuing of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The issuing of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: IssuingType
        """
        return self._issuing

    @issuing.setter
    def issuing(self, issuing):
        """Sets the issuing of this CitesDocumentAdditionalType.


        :param issuing: The issuing of this CitesDocumentAdditionalType.  # noqa: E501
        :type: IssuingType
        """

        self._issuing = issuing

    @property
    def goods_identification_from(self):
        """Gets the goods_identification_from of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The goods_identification_from of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: GoodsIdetificationType
        """
        return self._goods_identification_from

    @goods_identification_from.setter
    def goods_identification_from(self, goods_identification_from):
        """Sets the goods_identification_from of this CitesDocumentAdditionalType.


        :param goods_identification_from: The goods_identification_from of this CitesDocumentAdditionalType.  # noqa: E501
        :type: GoodsIdetificationType
        """

        self._goods_identification_from = goods_identification_from

    @property
    def goods_identification_to(self):
        """Gets the goods_identification_to of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The goods_identification_to of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: GoodsIdetificationType
        """
        return self._goods_identification_to

    @goods_identification_to.setter
    def goods_identification_to(self, goods_identification_to):
        """Sets the goods_identification_to of this CitesDocumentAdditionalType.


        :param goods_identification_to: The goods_identification_to of this CitesDocumentAdditionalType.  # noqa: E501
        :type: GoodsIdetificationType
        """

        self._goods_identification_to = goods_identification_to

    @property
    def goods_identification_change(self):
        """Gets the goods_identification_change of this CitesDocumentAdditionalType.  # noqa: E501

        Typ změny identifikátoru (N - nový identifikátor, CH - změna identifikátoru, R - zrušení identifikátoru)   # noqa: E501

        :return: The goods_identification_change of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._goods_identification_change

    @goods_identification_change.setter
    def goods_identification_change(self, goods_identification_change):
        """Sets the goods_identification_change of this CitesDocumentAdditionalType.

        Typ změny identifikátoru (N - nový identifikátor, CH - změna identifikátoru, R - zrušení identifikátoru)   # noqa: E501

        :param goods_identification_change: The goods_identification_change of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "CH", "R", "", None]  # noqa: E501
        if goods_identification_change not in allowed_values:
            raise ValueError(
                "Invalid value for `goods_identification_change` ({0}), must be one of {1}"  # noqa: E501
                .format(goods_identification_change, allowed_values)
            )

        self._goods_identification_change = goods_identification_change

    @property
    def holder_from(self):
        """Gets the holder_from of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The holder_from of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: PersonBaseType
        """
        return self._holder_from

    @holder_from.setter
    def holder_from(self, holder_from):
        """Sets the holder_from of this CitesDocumentAdditionalType.


        :param holder_from: The holder_from of this CitesDocumentAdditionalType.  # noqa: E501
        :type: PersonBaseType
        """

        self._holder_from = holder_from

    @property
    def holder_to(self):
        """Gets the holder_to of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The holder_to of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: PersonBaseType
        """
        return self._holder_to

    @holder_to.setter
    def holder_to(self, holder_to):
        """Sets the holder_to of this CitesDocumentAdditionalType.


        :param holder_to: The holder_to of this CitesDocumentAdditionalType.  # noqa: E501
        :type: PersonBaseType
        """

        self._holder_to = holder_to

    @property
    def date_checkout(self):
        """Gets the date_checkout of this CitesDocumentAdditionalType.  # noqa: E501

        Datum odhlášení  # noqa: E501

        :return: The date_checkout of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: date
        """
        return self._date_checkout

    @date_checkout.setter
    def date_checkout(self, date_checkout):
        """Sets the date_checkout of this CitesDocumentAdditionalType.

        Datum odhlášení  # noqa: E501

        :param date_checkout: The date_checkout of this CitesDocumentAdditionalType.  # noqa: E501
        :type: date
        """

        self._date_checkout = date_checkout

    @property
    def date_sold(self):
        """Gets the date_sold of this CitesDocumentAdditionalType.  # noqa: E501

        Datum prodeje  # noqa: E501

        :return: The date_sold of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: date
        """
        return self._date_sold

    @date_sold.setter
    def date_sold(self, date_sold):
        """Sets the date_sold of this CitesDocumentAdditionalType.

        Datum prodeje  # noqa: E501

        :param date_sold: The date_sold of this CitesDocumentAdditionalType.  # noqa: E501
        :type: date
        """

        self._date_sold = date_sold

    @property
    def discard(self):
        """Gets the discard of this CitesDocumentAdditionalType.  # noqa: E501

        důvod zrušení (D - úhyn, E - vývoz, OR - jiný důvod)  # noqa: E501

        :return: The discard of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._discard

    @discard.setter
    def discard(self, discard):
        """Sets the discard of this CitesDocumentAdditionalType.

        důvod zrušení (D - úhyn, E - vývoz, OR - jiný důvod)  # noqa: E501

        :param discard: The discard of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """
        allowed_values = ["D", "E", "OR", "", None]  # noqa: E501
        if discard not in allowed_values:
            raise ValueError(
                "Invalid value for `discard` ({0}), must be one of {1}"  # noqa: E501
                .format(discard, allowed_values)
            )

        self._discard = discard

    @property
    def discard_comment(self):
        """Gets the discard_comment of this CitesDocumentAdditionalType.  # noqa: E501

        Komentář důvodu zrušení  # noqa: E501

        :return: The discard_comment of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._discard_comment

    @discard_comment.setter
    def discard_comment(self, discard_comment):
        """Sets the discard_comment of this CitesDocumentAdditionalType.

        Komentář důvodu zrušení  # noqa: E501

        :param discard_comment: The discard_comment of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """

        self._discard_comment = discard_comment

    @property
    def original_document_returned(self):
        """Gets the original_document_returned of this CitesDocumentAdditionalType.  # noqa: E501

        Originál dokladu vrácen  # noqa: E501

        :return: The original_document_returned of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: bool
        """
        return self._original_document_returned

    @original_document_returned.setter
    def original_document_returned(self, original_document_returned):
        """Sets the original_document_returned of this CitesDocumentAdditionalType.

        Originál dokladu vrácen  # noqa: E501

        :param original_document_returned: The original_document_returned of this CitesDocumentAdditionalType.  # noqa: E501
        :type: bool
        """

        self._original_document_returned = original_document_returned

    @property
    def note(self):
        """Gets the note of this CitesDocumentAdditionalType.  # noqa: E501

        Poznámky  # noqa: E501

        :return: The note of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CitesDocumentAdditionalType.

        Poznámky  # noqa: E501

        :param note: The note of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def status(self):
        """Gets the status of this CitesDocumentAdditionalType.  # noqa: E501

        Stavová informace  # noqa: E501

        :return: The status of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CitesDocumentAdditionalType.

        Stavová informace  # noqa: E501

        :param status: The status of this CitesDocumentAdditionalType.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def metadata(self):
        """Gets the metadata of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The metadata of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: MetadataType
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CitesDocumentAdditionalType.


        :param metadata: The metadata of this CitesDocumentAdditionalType.  # noqa: E501
        :type: MetadataType
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def parent(self):
        """Gets the parent of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The parent of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: RelatedType
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this CitesDocumentAdditionalType.


        :param parent: The parent of this CitesDocumentAdditionalType.  # noqa: E501
        :type: RelatedType
        """

        self._parent = parent

    @property
    def workflow(self):
        """Gets the workflow of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The workflow of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: WorkflowListType
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this CitesDocumentAdditionalType.


        :param workflow: The workflow of this CitesDocumentAdditionalType.  # noqa: E501
        :type: WorkflowListType
        """

        self._workflow = workflow

    @property
    def attachments(self):
        """Gets the attachments of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The attachments of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: CitesDocumentAttachmentListType
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this CitesDocumentAdditionalType.


        :param attachments: The attachments of this CitesDocumentAdditionalType.  # noqa: E501
        :type: CitesDocumentAttachmentListType
        """

        self._attachments = attachments

    @property
    def linked_list(self):
        """Gets the linked_list of this CitesDocumentAdditionalType.  # noqa: E501


        :return: The linked_list of this CitesDocumentAdditionalType.  # noqa: E501
        :rtype: LinkedListType
        """
        return self._linked_list

    @linked_list.setter
    def linked_list(self, linked_list):
        """Sets the linked_list of this CitesDocumentAdditionalType.


        :param linked_list: The linked_list of this CitesDocumentAdditionalType.  # noqa: E501
        :type: LinkedListType
        """

        self._linked_list = linked_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CitesDocumentAdditionalType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CitesDocumentAdditionalType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
