# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatementDocumentType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_code': 'str',
        'metadata': 'MetadataType',
        'request': 'bool',
        'statement_type': 'str',
        'status': 'str',
        'attachments': 'CitesDocumentAttachmentListType',
        'workflow': 'WorkflowListType',
        'linked_list': 'LinkedListType'
    }

    attribute_map = {
        'doc_code': 'doc_code',
        'metadata': 'metadata',
        'request': 'request',
        'statement_type': 'statement_type',
        'status': 'status',
        'attachments': 'attachments',
        'workflow': 'workflow',
        'linked_list': 'linked_list'
    }

    def __init__(self, doc_code=None, metadata=None, request=False, statement_type=None, status=None, attachments=None, workflow=None, linked_list=None):  # noqa: E501
        """StatementDocumentType - a model defined in Swagger"""  # noqa: E501
        self._doc_code = None
        self._metadata = None
        self._request = None
        self._statement_type = None
        self._status = None
        self._attachments = None
        self._workflow = None
        self._linked_list = None
        self.discriminator = None
        self.doc_code = doc_code
        self.metadata = metadata
        if request is not None:
            self.request = request
        if statement_type is not None:
            self.statement_type = statement_type
        if status is not None:
            self.status = status
        if attachments is not None:
            self.attachments = attachments
        if workflow is not None:
            self.workflow = workflow
        if linked_list is not None:
            self.linked_list = linked_list

    @property
    def doc_code(self):
        """Gets the doc_code of this StatementDocumentType.  # noqa: E501

        Kód dokumentu z číselníku - vazba na formuláře PDF  # noqa: E501

        :return: The doc_code of this StatementDocumentType.  # noqa: E501
        :rtype: str
        """
        return self._doc_code

    @doc_code.setter
    def doc_code(self, doc_code):
        """Sets the doc_code of this StatementDocumentType.

        Kód dokumentu z číselníku - vazba na formuláře PDF  # noqa: E501

        :param doc_code: The doc_code of this StatementDocumentType.  # noqa: E501
        :type: str
        """
        if doc_code is None:
            raise ValueError("Invalid value for `doc_code`, must not be `None`")  # noqa: E501

        self._doc_code = doc_code

    @property
    def metadata(self):
        """Gets the metadata of this StatementDocumentType.  # noqa: E501


        :return: The metadata of this StatementDocumentType.  # noqa: E501
        :rtype: MetadataType
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this StatementDocumentType.


        :param metadata: The metadata of this StatementDocumentType.  # noqa: E501
        :type: MetadataType
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def request(self):
        """Gets the request of this StatementDocumentType.  # noqa: E501

        Žádost o stanovisko  # noqa: E501

        :return: The request of this StatementDocumentType.  # noqa: E501
        :rtype: bool
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this StatementDocumentType.

        Žádost o stanovisko  # noqa: E501

        :param request: The request of this StatementDocumentType.  # noqa: E501
        :type: bool
        """

        self._request = request

    @property
    def statement_type(self):
        """Gets the statement_type of this StatementDocumentType.  # noqa: E501

        Typ stanoviska  # noqa: E501

        :return: The statement_type of this StatementDocumentType.  # noqa: E501
        :rtype: str
        """
        return self._statement_type

    @statement_type.setter
    def statement_type(self, statement_type):
        """Sets the statement_type of this StatementDocumentType.

        Typ stanoviska  # noqa: E501

        :param statement_type: The statement_type of this StatementDocumentType.  # noqa: E501
        :type: str
        """
        allowed_values = ["permit", "certificate"]  # noqa: E501
        if statement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `statement_type` ({0}), must be one of {1}"  # noqa: E501
                .format(statement_type, allowed_values)
            )

        self._statement_type = statement_type

    @property
    def status(self):
        """Gets the status of this StatementDocumentType.  # noqa: E501

        Aktuální stav dokumentu  # noqa: E501

        :return: The status of this StatementDocumentType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatementDocumentType.

        Aktuální stav dokumentu  # noqa: E501

        :param status: The status of this StatementDocumentType.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def attachments(self):
        """Gets the attachments of this StatementDocumentType.  # noqa: E501


        :return: The attachments of this StatementDocumentType.  # noqa: E501
        :rtype: CitesDocumentAttachmentListType
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this StatementDocumentType.


        :param attachments: The attachments of this StatementDocumentType.  # noqa: E501
        :type: CitesDocumentAttachmentListType
        """

        self._attachments = attachments

    @property
    def workflow(self):
        """Gets the workflow of this StatementDocumentType.  # noqa: E501


        :return: The workflow of this StatementDocumentType.  # noqa: E501
        :rtype: WorkflowListType
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this StatementDocumentType.


        :param workflow: The workflow of this StatementDocumentType.  # noqa: E501
        :type: WorkflowListType
        """

        self._workflow = workflow

    @property
    def linked_list(self):
        """Gets the linked_list of this StatementDocumentType.  # noqa: E501


        :return: The linked_list of this StatementDocumentType.  # noqa: E501
        :rtype: LinkedListType
        """
        return self._linked_list

    @linked_list.setter
    def linked_list(self, linked_list):
        """Sets the linked_list of this StatementDocumentType.


        :param linked_list: The linked_list of this StatementDocumentType.  # noqa: E501
        :type: LinkedListType
        """

        self._linked_list = linked_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementDocumentType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementDocumentType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
