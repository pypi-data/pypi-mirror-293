# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from citesdoc_110.models.goods_item_base_type import GoodsItemBaseType  # noqa: F401,E501

class StatementCertificateRequestItemParentType(GoodsItemBaseType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'note': 'str',
        'reference_list': 'list[str]',
        'certificate_list': 'list[str]',
        'acquisition': 'str'
    }
    if hasattr(GoodsItemBaseType, "swagger_types"):
        swagger_types.update(GoodsItemBaseType.swagger_types)

    attribute_map = {
        'note': 'note',
        'reference_list': 'reference_list',
        'certificate_list': 'certificate_list',
        'acquisition': 'acquisition'
    }
    if hasattr(GoodsItemBaseType, "attribute_map"):
        attribute_map.update(GoodsItemBaseType.attribute_map)

    def __init__(self, note=None, reference_list=None, certificate_list=None, acquisition=None, *args, **kwargs):  # noqa: E501
        """StatementCertificateRequestItemParentType - a model defined in Swagger"""  # noqa: E501
        self._note = None
        self._reference_list = None
        self._certificate_list = None
        self._acquisition = None
        self.discriminator = None
        if note is not None:
            self.note = note
        if reference_list is not None:
            self.reference_list = reference_list
        if certificate_list is not None:
            self.certificate_list = certificate_list
        if acquisition is not None:
            self.acquisition = acquisition
        GoodsItemBaseType.__init__(self, *args, **kwargs)

    @property
    def note(self):
        """Gets the note of this StatementCertificateRequestItemParentType.  # noqa: E501

        Poznámka  # noqa: E501

        :return: The note of this StatementCertificateRequestItemParentType.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this StatementCertificateRequestItemParentType.

        Poznámka  # noqa: E501

        :param note: The note of this StatementCertificateRequestItemParentType.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def reference_list(self):
        """Gets the reference_list of this StatementCertificateRequestItemParentType.  # noqa: E501

        Seznam čísel registračních listů  # noqa: E501

        :return: The reference_list of this StatementCertificateRequestItemParentType.  # noqa: E501
        :rtype: list[str]
        """
        return self._reference_list

    @reference_list.setter
    def reference_list(self, reference_list):
        """Sets the reference_list of this StatementCertificateRequestItemParentType.

        Seznam čísel registračních listů  # noqa: E501

        :param reference_list: The reference_list of this StatementCertificateRequestItemParentType.  # noqa: E501
        :type: list[str]
        """

        self._reference_list = reference_list

    @property
    def certificate_list(self):
        """Gets the certificate_list of this StatementCertificateRequestItemParentType.  # noqa: E501

        Seznam čísel potvrzení o výjimkách  # noqa: E501

        :return: The certificate_list of this StatementCertificateRequestItemParentType.  # noqa: E501
        :rtype: list[str]
        """
        return self._certificate_list

    @certificate_list.setter
    def certificate_list(self, certificate_list):
        """Sets the certificate_list of this StatementCertificateRequestItemParentType.

        Seznam čísel potvrzení o výjimkách  # noqa: E501

        :param certificate_list: The certificate_list of this StatementCertificateRequestItemParentType.  # noqa: E501
        :type: list[str]
        """

        self._certificate_list = certificate_list

    @property
    def acquisition(self):
        """Gets the acquisition of this StatementCertificateRequestItemParentType.  # noqa: E501

        Způsob získání  # noqa: E501

        :return: The acquisition of this StatementCertificateRequestItemParentType.  # noqa: E501
        :rtype: str
        """
        return self._acquisition

    @acquisition.setter
    def acquisition(self, acquisition):
        """Sets the acquisition of this StatementCertificateRequestItemParentType.

        Způsob získání  # noqa: E501

        :param acquisition: The acquisition of this StatementCertificateRequestItemParentType.  # noqa: E501
        :type: str
        """

        self._acquisition = acquisition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementCertificateRequestItemParentType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementCertificateRequestItemParentType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
