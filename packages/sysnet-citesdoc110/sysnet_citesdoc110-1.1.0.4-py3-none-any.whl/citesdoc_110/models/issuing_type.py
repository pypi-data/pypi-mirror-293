# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssuingType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issuing_authority_identifier': 'str',
        'issuing_authority': 'str',
        'issuing_signature': 'str',
        'issuing_official': 'str',
        'issuing_place': 'str',
        'date_issued': 'date',
        'issuer': 'PersonBaseType'
    }

    attribute_map = {
        'issuing_authority_identifier': 'issuing_authority_identifier',
        'issuing_authority': 'issuing_authority',
        'issuing_signature': 'issuing_signature',
        'issuing_official': 'issuing_official',
        'issuing_place': 'issuing_place',
        'date_issued': 'date_issued',
        'issuer': 'issuer'
    }

    def __init__(self, issuing_authority_identifier=None, issuing_authority=None, issuing_signature=None, issuing_official=None, issuing_place=None, date_issued=None, issuer=None):  # noqa: E501
        """IssuingType - a model defined in Swagger"""  # noqa: E501
        self._issuing_authority_identifier = None
        self._issuing_authority = None
        self._issuing_signature = None
        self._issuing_official = None
        self._issuing_place = None
        self._date_issued = None
        self._issuer = None
        self.discriminator = None
        if issuing_authority_identifier is not None:
            self.issuing_authority_identifier = issuing_authority_identifier
        if issuing_authority is not None:
            self.issuing_authority = issuing_authority
        if issuing_signature is not None:
            self.issuing_signature = issuing_signature
        if issuing_official is not None:
            self.issuing_official = issuing_official
        if issuing_place is not None:
            self.issuing_place = issuing_place
        if date_issued is not None:
            self.date_issued = date_issued
        if issuer is not None:
            self.issuer = issuer

    @property
    def issuing_authority_identifier(self):
        """Gets the issuing_authority_identifier of this IssuingType.  # noqa: E501

        Identifikátorr vydávající autorita  # noqa: E501

        :return: The issuing_authority_identifier of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._issuing_authority_identifier

    @issuing_authority_identifier.setter
    def issuing_authority_identifier(self, issuing_authority_identifier):
        """Sets the issuing_authority_identifier of this IssuingType.

        Identifikátorr vydávající autorita  # noqa: E501

        :param issuing_authority_identifier: The issuing_authority_identifier of this IssuingType.  # noqa: E501
        :type: str
        """

        self._issuing_authority_identifier = issuing_authority_identifier

    @property
    def issuing_authority(self):
        """Gets the issuing_authority of this IssuingType.  # noqa: E501

        Vydávající autorita  # noqa: E501

        :return: The issuing_authority of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._issuing_authority

    @issuing_authority.setter
    def issuing_authority(self, issuing_authority):
        """Sets the issuing_authority of this IssuingType.

        Vydávající autorita  # noqa: E501

        :param issuing_authority: The issuing_authority of this IssuingType.  # noqa: E501
        :type: str
        """

        self._issuing_authority = issuing_authority

    @property
    def issuing_signature(self):
        """Gets the issuing_signature of this IssuingType.  # noqa: E501

        Oprávněná úřední osoba  # noqa: E501

        :return: The issuing_signature of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._issuing_signature

    @issuing_signature.setter
    def issuing_signature(self, issuing_signature):
        """Sets the issuing_signature of this IssuingType.

        Oprávněná úřední osoba  # noqa: E501

        :param issuing_signature: The issuing_signature of this IssuingType.  # noqa: E501
        :type: str
        """

        self._issuing_signature = issuing_signature

    @property
    def issuing_official(self):
        """Gets the issuing_official of this IssuingType.  # noqa: E501

        Jméno vydávajícího úředníka  # noqa: E501

        :return: The issuing_official of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._issuing_official

    @issuing_official.setter
    def issuing_official(self, issuing_official):
        """Sets the issuing_official of this IssuingType.

        Jméno vydávajícího úředníka  # noqa: E501

        :param issuing_official: The issuing_official of this IssuingType.  # noqa: E501
        :type: str
        """

        self._issuing_official = issuing_official

    @property
    def issuing_place(self):
        """Gets the issuing_place of this IssuingType.  # noqa: E501

        Místo vydání  # noqa: E501

        :return: The issuing_place of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._issuing_place

    @issuing_place.setter
    def issuing_place(self, issuing_place):
        """Sets the issuing_place of this IssuingType.

        Místo vydání  # noqa: E501

        :param issuing_place: The issuing_place of this IssuingType.  # noqa: E501
        :type: str
        """

        self._issuing_place = issuing_place

    @property
    def date_issued(self):
        """Gets the date_issued of this IssuingType.  # noqa: E501

        Datum vydání (IssuingDate)  # noqa: E501

        :return: The date_issued of this IssuingType.  # noqa: E501
        :rtype: date
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this IssuingType.

        Datum vydání (IssuingDate)  # noqa: E501

        :param date_issued: The date_issued of this IssuingType.  # noqa: E501
        :type: date
        """

        self._date_issued = date_issued

    @property
    def issuer(self):
        """Gets the issuer of this IssuingType.  # noqa: E501


        :return: The issuer of this IssuingType.  # noqa: E501
        :rtype: PersonBaseType
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this IssuingType.


        :param issuer: The issuer of this IssuingType.  # noqa: E501
        :type: PersonBaseType
        """

        self._issuer = issuer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssuingType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssuingType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
