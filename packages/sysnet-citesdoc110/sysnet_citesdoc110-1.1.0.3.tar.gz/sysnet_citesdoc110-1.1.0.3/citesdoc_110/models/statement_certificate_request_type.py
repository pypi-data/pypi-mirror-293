# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatementCertificateRequestType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_no': 'str',
        'authority': 'PersonExtendedType',
        'holder': 'PersonExtendedType',
        'intent': 'str',
        'exception_type': 'str',
        'specimens': 'list[StatementCertificateRequestItemType]'
    }

    attribute_map = {
        'id_no': 'id_no',
        'authority': 'authority',
        'holder': 'holder',
        'intent': 'intent',
        'exception_type': 'exception_type',
        'specimens': 'specimens'
    }

    def __init__(self, id_no=None, authority=None, holder=None, intent=None, exception_type=None, specimens=None):  # noqa: E501
        """StatementCertificateRequestType - a model defined in Swagger"""  # noqa: E501
        self._id_no = None
        self._authority = None
        self._holder = None
        self._intent = None
        self._exception_type = None
        self._specimens = None
        self.discriminator = None
        if id_no is not None:
            self.id_no = id_no
        if authority is not None:
            self.authority = authority
        if holder is not None:
            self.holder = holder
        if intent is not None:
            self.intent = intent
        if exception_type is not None:
            self.exception_type = exception_type
        if specimens is not None:
            self.specimens = specimens

    @property
    def id_no(self):
        """Gets the id_no of this StatementCertificateRequestType.  # noqa: E501

        Číslo jednací výkonného orgánu  # noqa: E501

        :return: The id_no of this StatementCertificateRequestType.  # noqa: E501
        :rtype: str
        """
        return self._id_no

    @id_no.setter
    def id_no(self, id_no):
        """Sets the id_no of this StatementCertificateRequestType.

        Číslo jednací výkonného orgánu  # noqa: E501

        :param id_no: The id_no of this StatementCertificateRequestType.  # noqa: E501
        :type: str
        """

        self._id_no = id_no

    @property
    def authority(self):
        """Gets the authority of this StatementCertificateRequestType.  # noqa: E501


        :return: The authority of this StatementCertificateRequestType.  # noqa: E501
        :rtype: PersonExtendedType
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this StatementCertificateRequestType.


        :param authority: The authority of this StatementCertificateRequestType.  # noqa: E501
        :type: PersonExtendedType
        """

        self._authority = authority

    @property
    def holder(self):
        """Gets the holder of this StatementCertificateRequestType.  # noqa: E501


        :return: The holder of this StatementCertificateRequestType.  # noqa: E501
        :rtype: PersonExtendedType
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this StatementCertificateRequestType.


        :param holder: The holder of this StatementCertificateRequestType.  # noqa: E501
        :type: PersonExtendedType
        """

        self._holder = holder

    @property
    def intent(self):
        """Gets the intent of this StatementCertificateRequestType.  # noqa: E501

        Účel výjimky  # noqa: E501

        :return: The intent of this StatementCertificateRequestType.  # noqa: E501
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this StatementCertificateRequestType.

        Účel výjimky  # noqa: E501

        :param intent: The intent of this StatementCertificateRequestType.  # noqa: E501
        :type: str
        """
        allowed_values = ["a", "c", "d", "e", "f", "g", "h"]  # noqa: E501
        if intent not in allowed_values:
            raise ValueError(
                "Invalid value for `intent` ({0}), must be one of {1}"  # noqa: E501
                .format(intent, allowed_values)
            )

        self._intent = intent

    @property
    def exception_type(self):
        """Gets the exception_type of this StatementCertificateRequestType.  # noqa: E501

        Druh výjimky (na transakci|T, na exemplář|E)  # noqa: E501

        :return: The exception_type of this StatementCertificateRequestType.  # noqa: E501
        :rtype: str
        """
        return self._exception_type

    @exception_type.setter
    def exception_type(self, exception_type):
        """Sets the exception_type of this StatementCertificateRequestType.

        Druh výjimky (na transakci|T, na exemplář|E)  # noqa: E501

        :param exception_type: The exception_type of this StatementCertificateRequestType.  # noqa: E501
        :type: str
        """
        allowed_values = ["T", "E"]  # noqa: E501
        if exception_type not in allowed_values:
            raise ValueError(
                "Invalid value for `exception_type` ({0}), must be one of {1}"  # noqa: E501
                .format(exception_type, allowed_values)
            )

        self._exception_type = exception_type

    @property
    def specimens(self):
        """Gets the specimens of this StatementCertificateRequestType.  # noqa: E501

        Exempláře  # noqa: E501

        :return: The specimens of this StatementCertificateRequestType.  # noqa: E501
        :rtype: list[StatementCertificateRequestItemType]
        """
        return self._specimens

    @specimens.setter
    def specimens(self, specimens):
        """Sets the specimens of this StatementCertificateRequestType.

        Exempláře  # noqa: E501

        :param specimens: The specimens of this StatementCertificateRequestType.  # noqa: E501
        :type: list[StatementCertificateRequestItemType]
        """

        self._specimens = specimens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementCertificateRequestType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementCertificateRequestType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
