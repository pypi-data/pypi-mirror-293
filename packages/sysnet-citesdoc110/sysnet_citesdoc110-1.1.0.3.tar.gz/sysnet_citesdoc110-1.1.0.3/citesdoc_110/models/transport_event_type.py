# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportEventType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_occurrence_date_time': 'datetime',
        'unit_quantity': 'QuantityType',
        'occurrence_logistics_location': 'LogisticsLocationType',
        'certifying_trade_party': 'list[TradePartyType]'
    }

    attribute_map = {
        'actual_occurrence_date_time': 'actualOccurrenceDateTime',
        'unit_quantity': 'unitQuantity',
        'occurrence_logistics_location': 'occurrenceLogisticsLocation',
        'certifying_trade_party': 'certifyingTradeParty'
    }

    def __init__(self, actual_occurrence_date_time=None, unit_quantity=None, occurrence_logistics_location=None, certifying_trade_party=None):  # noqa: E501
        """TransportEventType - a model defined in Swagger"""  # noqa: E501
        self._actual_occurrence_date_time = None
        self._unit_quantity = None
        self._occurrence_logistics_location = None
        self._certifying_trade_party = None
        self.discriminator = None
        if actual_occurrence_date_time is not None:
            self.actual_occurrence_date_time = actual_occurrence_date_time
        if unit_quantity is not None:
            self.unit_quantity = unit_quantity
        if occurrence_logistics_location is not None:
            self.occurrence_logistics_location = occurrence_logistics_location
        if certifying_trade_party is not None:
            self.certifying_trade_party = certifying_trade_party

    @property
    def actual_occurrence_date_time(self):
        """Gets the actual_occurrence_date_time of this TransportEventType.  # noqa: E501


        :return: The actual_occurrence_date_time of this TransportEventType.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_occurrence_date_time

    @actual_occurrence_date_time.setter
    def actual_occurrence_date_time(self, actual_occurrence_date_time):
        """Sets the actual_occurrence_date_time of this TransportEventType.


        :param actual_occurrence_date_time: The actual_occurrence_date_time of this TransportEventType.  # noqa: E501
        :type: datetime
        """

        self._actual_occurrence_date_time = actual_occurrence_date_time

    @property
    def unit_quantity(self):
        """Gets the unit_quantity of this TransportEventType.  # noqa: E501


        :return: The unit_quantity of this TransportEventType.  # noqa: E501
        :rtype: QuantityType
        """
        return self._unit_quantity

    @unit_quantity.setter
    def unit_quantity(self, unit_quantity):
        """Sets the unit_quantity of this TransportEventType.


        :param unit_quantity: The unit_quantity of this TransportEventType.  # noqa: E501
        :type: QuantityType
        """

        self._unit_quantity = unit_quantity

    @property
    def occurrence_logistics_location(self):
        """Gets the occurrence_logistics_location of this TransportEventType.  # noqa: E501


        :return: The occurrence_logistics_location of this TransportEventType.  # noqa: E501
        :rtype: LogisticsLocationType
        """
        return self._occurrence_logistics_location

    @occurrence_logistics_location.setter
    def occurrence_logistics_location(self, occurrence_logistics_location):
        """Sets the occurrence_logistics_location of this TransportEventType.


        :param occurrence_logistics_location: The occurrence_logistics_location of this TransportEventType.  # noqa: E501
        :type: LogisticsLocationType
        """

        self._occurrence_logistics_location = occurrence_logistics_location

    @property
    def certifying_trade_party(self):
        """Gets the certifying_trade_party of this TransportEventType.  # noqa: E501


        :return: The certifying_trade_party of this TransportEventType.  # noqa: E501
        :rtype: list[TradePartyType]
        """
        return self._certifying_trade_party

    @certifying_trade_party.setter
    def certifying_trade_party(self, certifying_trade_party):
        """Sets the certifying_trade_party of this TransportEventType.


        :param certifying_trade_party: The certifying_trade_party of this TransportEventType.  # noqa: E501
        :type: list[TradePartyType]
        """

        self._certifying_trade_party = certifying_trade_party

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportEventType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportEventType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
