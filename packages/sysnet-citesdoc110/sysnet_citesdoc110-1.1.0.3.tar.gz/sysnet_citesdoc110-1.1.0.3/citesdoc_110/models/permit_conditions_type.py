# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermitConditionsType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annex_pages': 'int',
        'permit_canceled': 'str',
        'max_length': 'str',
        'photo_pages': 'int',
        'plastron': 'str',
        'karapax': 'str',
        'other': 'list[str]',
        'text': 'list[str]',
        'transaction': 'list[str]'
    }

    attribute_map = {
        'annex_pages': 'annex_pages',
        'permit_canceled': 'permit_canceled',
        'max_length': 'max_length',
        'photo_pages': 'photo_pages',
        'plastron': 'plastron',
        'karapax': 'karapax',
        'other': 'other',
        'text': 'text',
        'transaction': 'transaction'
    }

    def __init__(self, annex_pages=None, permit_canceled=None, max_length=None, photo_pages=None, plastron=None, karapax=None, other=None, text=None, transaction=None):  # noqa: E501
        """PermitConditionsType - a model defined in Swagger"""  # noqa: E501
        self._annex_pages = None
        self._permit_canceled = None
        self._max_length = None
        self._photo_pages = None
        self._plastron = None
        self._karapax = None
        self._other = None
        self._text = None
        self._transaction = None
        self.discriminator = None
        if annex_pages is not None:
            self.annex_pages = annex_pages
        if permit_canceled is not None:
            self.permit_canceled = permit_canceled
        if max_length is not None:
            self.max_length = max_length
        if photo_pages is not None:
            self.photo_pages = photo_pages
        if plastron is not None:
            self.plastron = plastron
        if karapax is not None:
            self.karapax = karapax
        if other is not None:
            self.other = other
        if text is not None:
            self.text = text
        if transaction is not None:
            self.transaction = transaction

    @property
    def annex_pages(self):
        """Gets the annex_pages of this PermitConditionsType.  # noqa: E501

        Počet stran příloh  # noqa: E501

        :return: The annex_pages of this PermitConditionsType.  # noqa: E501
        :rtype: int
        """
        return self._annex_pages

    @annex_pages.setter
    def annex_pages(self, annex_pages):
        """Sets the annex_pages of this PermitConditionsType.

        Počet stran příloh  # noqa: E501

        :param annex_pages: The annex_pages of this PermitConditionsType.  # noqa: E501
        :type: int
        """

        self._annex_pages = annex_pages

    @property
    def permit_canceled(self):
        """Gets the permit_canceled of this PermitConditionsType.  # noqa: E501

        Vydáno namísto zrušeného povolení (permit)  # noqa: E501

        :return: The permit_canceled of this PermitConditionsType.  # noqa: E501
        :rtype: str
        """
        return self._permit_canceled

    @permit_canceled.setter
    def permit_canceled(self, permit_canceled):
        """Sets the permit_canceled of this PermitConditionsType.

        Vydáno namísto zrušeného povolení (permit)  # noqa: E501

        :param permit_canceled: The permit_canceled of this PermitConditionsType.  # noqa: E501
        :type: str
        """

        self._permit_canceled = permit_canceled

    @property
    def max_length(self):
        """Gets the max_length of this PermitConditionsType.  # noqa: E501

        Maximální délka exempláře v cm  # noqa: E501

        :return: The max_length of this PermitConditionsType.  # noqa: E501
        :rtype: str
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this PermitConditionsType.

        Maximální délka exempláře v cm  # noqa: E501

        :param max_length: The max_length of this PermitConditionsType.  # noqa: E501
        :type: str
        """

        self._max_length = max_length

    @property
    def photo_pages(self):
        """Gets the photo_pages of this PermitConditionsType.  # noqa: E501

        Počet stran fotografií exemplářů  # noqa: E501

        :return: The photo_pages of this PermitConditionsType.  # noqa: E501
        :rtype: int
        """
        return self._photo_pages

    @photo_pages.setter
    def photo_pages(self, photo_pages):
        """Sets the photo_pages of this PermitConditionsType.

        Počet stran fotografií exemplářů  # noqa: E501

        :param photo_pages: The photo_pages of this PermitConditionsType.  # noqa: E501
        :type: int
        """

        self._photo_pages = photo_pages

    @property
    def plastron(self):
        """Gets the plastron of this PermitConditionsType.  # noqa: E501

        Délka plastronu v cm  # noqa: E501

        :return: The plastron of this PermitConditionsType.  # noqa: E501
        :rtype: str
        """
        return self._plastron

    @plastron.setter
    def plastron(self, plastron):
        """Sets the plastron of this PermitConditionsType.

        Délka plastronu v cm  # noqa: E501

        :param plastron: The plastron of this PermitConditionsType.  # noqa: E501
        :type: str
        """

        self._plastron = plastron

    @property
    def karapax(self):
        """Gets the karapax of this PermitConditionsType.  # noqa: E501

        Délka karapaxu v cm  # noqa: E501

        :return: The karapax of this PermitConditionsType.  # noqa: E501
        :rtype: str
        """
        return self._karapax

    @karapax.setter
    def karapax(self, karapax):
        """Sets the karapax of this PermitConditionsType.

        Délka karapaxu v cm  # noqa: E501

        :param karapax: The karapax of this PermitConditionsType.  # noqa: E501
        :type: str
        """

        self._karapax = karapax

    @property
    def other(self):
        """Gets the other of this PermitConditionsType.  # noqa: E501

        Další podmínky  # noqa: E501

        :return: The other of this PermitConditionsType.  # noqa: E501
        :rtype: list[str]
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this PermitConditionsType.

        Další podmínky  # noqa: E501

        :param other: The other of this PermitConditionsType.  # noqa: E501
        :type: list[str]
        """

        self._other = other

    @property
    def text(self):
        """Gets the text of this PermitConditionsType.  # noqa: E501

        Položky s volným textem podmínek  # noqa: E501

        :return: The text of this PermitConditionsType.  # noqa: E501
        :rtype: list[str]
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PermitConditionsType.

        Položky s volným textem podmínek  # noqa: E501

        :param text: The text of this PermitConditionsType.  # noqa: E501
        :type: list[str]
        """

        self._text = text

    @property
    def transaction(self):
        """Gets the transaction of this PermitConditionsType.  # noqa: E501

        Souhrn transakčních podmínek  # noqa: E501

        :return: The transaction of this PermitConditionsType.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this PermitConditionsType.

        Souhrn transakčních podmínek  # noqa: E501

        :param transaction: The transaction of this PermitConditionsType.  # noqa: E501
        :type: list[str]
        """

        self._transaction = transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermitConditionsType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitConditionsType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
