# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CitesDocumentXfdfType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preserve_space': 'str',
        'template_file': 'CitesDocumentXfdfTypeTemplateFile',
        'identifier': 'CitesDocumentXfdfTypeIdentifier',
        'fields': 'list[XfdfFieldType]'
    }

    attribute_map = {
        'preserve_space': 'preserve_space',
        'template_file': 'template_file',
        'identifier': 'identifier',
        'fields': 'fields'
    }

    def __init__(self, preserve_space='preserve', template_file=None, identifier=None, fields=None):  # noqa: E501
        """CitesDocumentXfdfType - a model defined in Swagger"""  # noqa: E501
        self._preserve_space = None
        self._template_file = None
        self._identifier = None
        self._fields = None
        self.discriminator = None
        if preserve_space is not None:
            self.preserve_space = preserve_space
        if template_file is not None:
            self.template_file = template_file
        if identifier is not None:
            self.identifier = identifier
        if fields is not None:
            self.fields = fields

    @property
    def preserve_space(self):
        """Gets the preserve_space of this CitesDocumentXfdfType.  # noqa: E501


        :return: The preserve_space of this CitesDocumentXfdfType.  # noqa: E501
        :rtype: str
        """
        return self._preserve_space

    @preserve_space.setter
    def preserve_space(self, preserve_space):
        """Sets the preserve_space of this CitesDocumentXfdfType.


        :param preserve_space: The preserve_space of this CitesDocumentXfdfType.  # noqa: E501
        :type: str
        """

        self._preserve_space = preserve_space

    @property
    def template_file(self):
        """Gets the template_file of this CitesDocumentXfdfType.  # noqa: E501


        :return: The template_file of this CitesDocumentXfdfType.  # noqa: E501
        :rtype: CitesDocumentXfdfTypeTemplateFile
        """
        return self._template_file

    @template_file.setter
    def template_file(self, template_file):
        """Sets the template_file of this CitesDocumentXfdfType.


        :param template_file: The template_file of this CitesDocumentXfdfType.  # noqa: E501
        :type: CitesDocumentXfdfTypeTemplateFile
        """

        self._template_file = template_file

    @property
    def identifier(self):
        """Gets the identifier of this CitesDocumentXfdfType.  # noqa: E501


        :return: The identifier of this CitesDocumentXfdfType.  # noqa: E501
        :rtype: CitesDocumentXfdfTypeIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CitesDocumentXfdfType.


        :param identifier: The identifier of this CitesDocumentXfdfType.  # noqa: E501
        :type: CitesDocumentXfdfTypeIdentifier
        """

        self._identifier = identifier

    @property
    def fields(self):
        """Gets the fields of this CitesDocumentXfdfType.  # noqa: E501


        :return: The fields of this CitesDocumentXfdfType.  # noqa: E501
        :rtype: list[XfdfFieldType]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this CitesDocumentXfdfType.


        :param fields: The fields of this CitesDocumentXfdfType.  # noqa: E501
        :type: list[XfdfFieldType]
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CitesDocumentXfdfType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CitesDocumentXfdfType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
