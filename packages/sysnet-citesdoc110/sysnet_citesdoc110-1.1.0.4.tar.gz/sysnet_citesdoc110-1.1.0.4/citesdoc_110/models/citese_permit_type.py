# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CITESEPermitType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'specified_exchanged_document_context': 'ExchangedDocumentContextType',
        'header_exchanged_document': 'ExchangedDocumentType',
        'specified_supply_chain_consignment': 'SupplyChainConsignmentType'
    }

    attribute_map = {
        'specified_exchanged_document_context': 'specifiedExchangedDocumentContext',
        'header_exchanged_document': 'headerExchangedDocument',
        'specified_supply_chain_consignment': 'specifiedSupplyChainConsignment'
    }

    def __init__(self, specified_exchanged_document_context=None, header_exchanged_document=None, specified_supply_chain_consignment=None):  # noqa: E501
        """CITESEPermitType - a model defined in Swagger"""  # noqa: E501
        self._specified_exchanged_document_context = None
        self._header_exchanged_document = None
        self._specified_supply_chain_consignment = None
        self.discriminator = None
        self.specified_exchanged_document_context = specified_exchanged_document_context
        self.header_exchanged_document = header_exchanged_document
        self.specified_supply_chain_consignment = specified_supply_chain_consignment

    @property
    def specified_exchanged_document_context(self):
        """Gets the specified_exchanged_document_context of this CITESEPermitType.  # noqa: E501


        :return: The specified_exchanged_document_context of this CITESEPermitType.  # noqa: E501
        :rtype: ExchangedDocumentContextType
        """
        return self._specified_exchanged_document_context

    @specified_exchanged_document_context.setter
    def specified_exchanged_document_context(self, specified_exchanged_document_context):
        """Sets the specified_exchanged_document_context of this CITESEPermitType.


        :param specified_exchanged_document_context: The specified_exchanged_document_context of this CITESEPermitType.  # noqa: E501
        :type: ExchangedDocumentContextType
        """
        if specified_exchanged_document_context is None:
            raise ValueError("Invalid value for `specified_exchanged_document_context`, must not be `None`")  # noqa: E501

        self._specified_exchanged_document_context = specified_exchanged_document_context

    @property
    def header_exchanged_document(self):
        """Gets the header_exchanged_document of this CITESEPermitType.  # noqa: E501


        :return: The header_exchanged_document of this CITESEPermitType.  # noqa: E501
        :rtype: ExchangedDocumentType
        """
        return self._header_exchanged_document

    @header_exchanged_document.setter
    def header_exchanged_document(self, header_exchanged_document):
        """Sets the header_exchanged_document of this CITESEPermitType.


        :param header_exchanged_document: The header_exchanged_document of this CITESEPermitType.  # noqa: E501
        :type: ExchangedDocumentType
        """
        if header_exchanged_document is None:
            raise ValueError("Invalid value for `header_exchanged_document`, must not be `None`")  # noqa: E501

        self._header_exchanged_document = header_exchanged_document

    @property
    def specified_supply_chain_consignment(self):
        """Gets the specified_supply_chain_consignment of this CITESEPermitType.  # noqa: E501


        :return: The specified_supply_chain_consignment of this CITESEPermitType.  # noqa: E501
        :rtype: SupplyChainConsignmentType
        """
        return self._specified_supply_chain_consignment

    @specified_supply_chain_consignment.setter
    def specified_supply_chain_consignment(self, specified_supply_chain_consignment):
        """Sets the specified_supply_chain_consignment of this CITESEPermitType.


        :param specified_supply_chain_consignment: The specified_supply_chain_consignment of this CITESEPermitType.  # noqa: E501
        :type: SupplyChainConsignmentType
        """
        if specified_supply_chain_consignment is None:
            raise ValueError("Invalid value for `specified_supply_chain_consignment`, must not be `None`")  # noqa: E501

        self._specified_supply_chain_consignment = specified_supply_chain_consignment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CITESEPermitType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CITESEPermitType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
