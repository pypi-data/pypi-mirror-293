# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CitesDocumentTemplateType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_code': 'str',
        'name': 'str',
        'template_type': 'str',
        'has_enclosure': 'bool',
        'template_first': 'str',
        'template_enclosure': 'str',
        'enclosure_size': 'int',
        'metadata': 'MetadataType'
    }

    attribute_map = {
        'doc_code': 'doc_code',
        'name': 'name',
        'template_type': 'template_type',
        'has_enclosure': 'has_enclosure',
        'template_first': 'template_first',
        'template_enclosure': 'template_enclosure',
        'enclosure_size': 'enclosure_size',
        'metadata': 'metadata'
    }

    def __init__(self, doc_code=None, name=None, template_type='PDF', has_enclosure=False, template_first=None, template_enclosure=None, enclosure_size=0, metadata=None):  # noqa: E501
        """CitesDocumentTemplateType - a model defined in Swagger"""  # noqa: E501
        self._doc_code = None
        self._name = None
        self._template_type = None
        self._has_enclosure = None
        self._template_first = None
        self._template_enclosure = None
        self._enclosure_size = None
        self._metadata = None
        self.discriminator = None
        if doc_code is not None:
            self.doc_code = doc_code
        if name is not None:
            self.name = name
        if template_type is not None:
            self.template_type = template_type
        if has_enclosure is not None:
            self.has_enclosure = has_enclosure
        if template_first is not None:
            self.template_first = template_first
        if template_enclosure is not None:
            self.template_enclosure = template_enclosure
        if enclosure_size is not None:
            self.enclosure_size = enclosure_size
        if metadata is not None:
            self.metadata = metadata

    @property
    def doc_code(self):
        """Gets the doc_code of this CitesDocumentTemplateType.  # noqa: E501

        Kód dokumentu z číselníku - vazba na formuláře PDF  # noqa: E501

        :return: The doc_code of this CitesDocumentTemplateType.  # noqa: E501
        :rtype: str
        """
        return self._doc_code

    @doc_code.setter
    def doc_code(self, doc_code):
        """Sets the doc_code of this CitesDocumentTemplateType.

        Kód dokumentu z číselníku - vazba na formuláře PDF  # noqa: E501

        :param doc_code: The doc_code of this CitesDocumentTemplateType.  # noqa: E501
        :type: str
        """

        self._doc_code = doc_code

    @property
    def name(self):
        """Gets the name of this CitesDocumentTemplateType.  # noqa: E501

        Název šablony  # noqa: E501

        :return: The name of this CitesDocumentTemplateType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CitesDocumentTemplateType.

        Název šablony  # noqa: E501

        :param name: The name of this CitesDocumentTemplateType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def template_type(self):
        """Gets the template_type of this CitesDocumentTemplateType.  # noqa: E501

        typ šablony  # noqa: E501

        :return: The template_type of this CitesDocumentTemplateType.  # noqa: E501
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this CitesDocumentTemplateType.

        typ šablony  # noqa: E501

        :param template_type: The template_type of this CitesDocumentTemplateType.  # noqa: E501
        :type: str
        """
        allowed_values = ["PDF", "JASPER", "", None]  # noqa: E501
        if template_type not in allowed_values:
            raise ValueError(
                "Invalid value for `template_type` ({0}), must be one of {1}"  # noqa: E501
                .format(template_type, allowed_values)
            )

        self._template_type = template_type

    @property
    def has_enclosure(self):
        """Gets the has_enclosure of this CitesDocumentTemplateType.  # noqa: E501

        dokument může mít přílohy v jiném formuláři  # noqa: E501

        :return: The has_enclosure of this CitesDocumentTemplateType.  # noqa: E501
        :rtype: bool
        """
        return self._has_enclosure

    @has_enclosure.setter
    def has_enclosure(self, has_enclosure):
        """Sets the has_enclosure of this CitesDocumentTemplateType.

        dokument může mít přílohy v jiném formuláři  # noqa: E501

        :param has_enclosure: The has_enclosure of this CitesDocumentTemplateType.  # noqa: E501
        :type: bool
        """

        self._has_enclosure = has_enclosure

    @property
    def template_first(self):
        """Gets the template_first of this CitesDocumentTemplateType.  # noqa: E501

        Nazev souboru šablony první stránky  # noqa: E501

        :return: The template_first of this CitesDocumentTemplateType.  # noqa: E501
        :rtype: str
        """
        return self._template_first

    @template_first.setter
    def template_first(self, template_first):
        """Sets the template_first of this CitesDocumentTemplateType.

        Nazev souboru šablony první stránky  # noqa: E501

        :param template_first: The template_first of this CitesDocumentTemplateType.  # noqa: E501
        :type: str
        """

        self._template_first = template_first

    @property
    def template_enclosure(self):
        """Gets the template_enclosure of this CitesDocumentTemplateType.  # noqa: E501

        Nazev souboru šablony přílohy  # noqa: E501

        :return: The template_enclosure of this CitesDocumentTemplateType.  # noqa: E501
        :rtype: str
        """
        return self._template_enclosure

    @template_enclosure.setter
    def template_enclosure(self, template_enclosure):
        """Sets the template_enclosure of this CitesDocumentTemplateType.

        Nazev souboru šablony přílohy  # noqa: E501

        :param template_enclosure: The template_enclosure of this CitesDocumentTemplateType.  # noqa: E501
        :type: str
        """

        self._template_enclosure = template_enclosure

    @property
    def enclosure_size(self):
        """Gets the enclosure_size of this CitesDocumentTemplateType.  # noqa: E501

        počet položek na příloze  # noqa: E501

        :return: The enclosure_size of this CitesDocumentTemplateType.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_size

    @enclosure_size.setter
    def enclosure_size(self, enclosure_size):
        """Sets the enclosure_size of this CitesDocumentTemplateType.

        počet položek na příloze  # noqa: E501

        :param enclosure_size: The enclosure_size of this CitesDocumentTemplateType.  # noqa: E501
        :type: int
        """

        self._enclosure_size = enclosure_size

    @property
    def metadata(self):
        """Gets the metadata of this CitesDocumentTemplateType.  # noqa: E501


        :return: The metadata of this CitesDocumentTemplateType.  # noqa: E501
        :rtype: MetadataType
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CitesDocumentTemplateType.


        :param metadata: The metadata of this CitesDocumentTemplateType.  # noqa: E501
        :type: MetadataType
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CitesDocumentTemplateType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CitesDocumentTemplateType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
