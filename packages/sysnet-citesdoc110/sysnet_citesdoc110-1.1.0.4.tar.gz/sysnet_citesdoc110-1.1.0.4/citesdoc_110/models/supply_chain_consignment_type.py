# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplyChainConsignmentType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consignor_trade_party': 'TradePartyType',
        'consignee_trade_party': 'TradePartyType',
        'transport_contract_referenced_document': 'ReferencedDocumentType',
        'examination_transport_event': 'list[TransportEventType]',
        'included_supply_chain_consignment_item': 'list[SupplyChainConsignmentItemType]',
        'country_of_export': 'TradeCountryType',
        'country_of_import': 'TradeCountryType'
    }

    attribute_map = {
        'consignor_trade_party': 'consignorTradeParty',
        'consignee_trade_party': 'consigneeTradeParty',
        'transport_contract_referenced_document': 'transportContractReferencedDocument',
        'examination_transport_event': 'examinationTransportEvent',
        'included_supply_chain_consignment_item': 'includedSupplyChainConsignmentItem',
        'country_of_export': 'countryOfExport',
        'country_of_import': 'countryOfImport'
    }

    def __init__(self, consignor_trade_party=None, consignee_trade_party=None, transport_contract_referenced_document=None, examination_transport_event=None, included_supply_chain_consignment_item=None, country_of_export=None, country_of_import=None):  # noqa: E501
        """SupplyChainConsignmentType - a model defined in Swagger"""  # noqa: E501
        self._consignor_trade_party = None
        self._consignee_trade_party = None
        self._transport_contract_referenced_document = None
        self._examination_transport_event = None
        self._included_supply_chain_consignment_item = None
        self._country_of_export = None
        self._country_of_import = None
        self.discriminator = None
        if consignor_trade_party is not None:
            self.consignor_trade_party = consignor_trade_party
        if consignee_trade_party is not None:
            self.consignee_trade_party = consignee_trade_party
        if transport_contract_referenced_document is not None:
            self.transport_contract_referenced_document = transport_contract_referenced_document
        if examination_transport_event is not None:
            self.examination_transport_event = examination_transport_event
        if included_supply_chain_consignment_item is not None:
            self.included_supply_chain_consignment_item = included_supply_chain_consignment_item
        if country_of_export is not None:
            self.country_of_export = country_of_export
        if country_of_import is not None:
            self.country_of_import = country_of_import

    @property
    def consignor_trade_party(self):
        """Gets the consignor_trade_party of this SupplyChainConsignmentType.  # noqa: E501


        :return: The consignor_trade_party of this SupplyChainConsignmentType.  # noqa: E501
        :rtype: TradePartyType
        """
        return self._consignor_trade_party

    @consignor_trade_party.setter
    def consignor_trade_party(self, consignor_trade_party):
        """Sets the consignor_trade_party of this SupplyChainConsignmentType.


        :param consignor_trade_party: The consignor_trade_party of this SupplyChainConsignmentType.  # noqa: E501
        :type: TradePartyType
        """

        self._consignor_trade_party = consignor_trade_party

    @property
    def consignee_trade_party(self):
        """Gets the consignee_trade_party of this SupplyChainConsignmentType.  # noqa: E501


        :return: The consignee_trade_party of this SupplyChainConsignmentType.  # noqa: E501
        :rtype: TradePartyType
        """
        return self._consignee_trade_party

    @consignee_trade_party.setter
    def consignee_trade_party(self, consignee_trade_party):
        """Sets the consignee_trade_party of this SupplyChainConsignmentType.


        :param consignee_trade_party: The consignee_trade_party of this SupplyChainConsignmentType.  # noqa: E501
        :type: TradePartyType
        """

        self._consignee_trade_party = consignee_trade_party

    @property
    def transport_contract_referenced_document(self):
        """Gets the transport_contract_referenced_document of this SupplyChainConsignmentType.  # noqa: E501


        :return: The transport_contract_referenced_document of this SupplyChainConsignmentType.  # noqa: E501
        :rtype: ReferencedDocumentType
        """
        return self._transport_contract_referenced_document

    @transport_contract_referenced_document.setter
    def transport_contract_referenced_document(self, transport_contract_referenced_document):
        """Sets the transport_contract_referenced_document of this SupplyChainConsignmentType.


        :param transport_contract_referenced_document: The transport_contract_referenced_document of this SupplyChainConsignmentType.  # noqa: E501
        :type: ReferencedDocumentType
        """

        self._transport_contract_referenced_document = transport_contract_referenced_document

    @property
    def examination_transport_event(self):
        """Gets the examination_transport_event of this SupplyChainConsignmentType.  # noqa: E501


        :return: The examination_transport_event of this SupplyChainConsignmentType.  # noqa: E501
        :rtype: list[TransportEventType]
        """
        return self._examination_transport_event

    @examination_transport_event.setter
    def examination_transport_event(self, examination_transport_event):
        """Sets the examination_transport_event of this SupplyChainConsignmentType.


        :param examination_transport_event: The examination_transport_event of this SupplyChainConsignmentType.  # noqa: E501
        :type: list[TransportEventType]
        """

        self._examination_transport_event = examination_transport_event

    @property
    def included_supply_chain_consignment_item(self):
        """Gets the included_supply_chain_consignment_item of this SupplyChainConsignmentType.  # noqa: E501


        :return: The included_supply_chain_consignment_item of this SupplyChainConsignmentType.  # noqa: E501
        :rtype: list[SupplyChainConsignmentItemType]
        """
        return self._included_supply_chain_consignment_item

    @included_supply_chain_consignment_item.setter
    def included_supply_chain_consignment_item(self, included_supply_chain_consignment_item):
        """Sets the included_supply_chain_consignment_item of this SupplyChainConsignmentType.


        :param included_supply_chain_consignment_item: The included_supply_chain_consignment_item of this SupplyChainConsignmentType.  # noqa: E501
        :type: list[SupplyChainConsignmentItemType]
        """

        self._included_supply_chain_consignment_item = included_supply_chain_consignment_item

    @property
    def country_of_export(self):
        """Gets the country_of_export of this SupplyChainConsignmentType.  # noqa: E501


        :return: The country_of_export of this SupplyChainConsignmentType.  # noqa: E501
        :rtype: TradeCountryType
        """
        return self._country_of_export

    @country_of_export.setter
    def country_of_export(self, country_of_export):
        """Sets the country_of_export of this SupplyChainConsignmentType.


        :param country_of_export: The country_of_export of this SupplyChainConsignmentType.  # noqa: E501
        :type: TradeCountryType
        """

        self._country_of_export = country_of_export

    @property
    def country_of_import(self):
        """Gets the country_of_import of this SupplyChainConsignmentType.  # noqa: E501


        :return: The country_of_import of this SupplyChainConsignmentType.  # noqa: E501
        :rtype: TradeCountryType
        """
        return self._country_of_import

    @country_of_import.setter
    def country_of_import(self, country_of_import):
        """Sets the country_of_import of this SupplyChainConsignmentType.


        :param country_of_import: The country_of_import of this SupplyChainConsignmentType.  # noqa: E501
        :type: TradeCountryType
        """

        self._country_of_import = country_of_import

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplyChainConsignmentType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplyChainConsignmentType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
