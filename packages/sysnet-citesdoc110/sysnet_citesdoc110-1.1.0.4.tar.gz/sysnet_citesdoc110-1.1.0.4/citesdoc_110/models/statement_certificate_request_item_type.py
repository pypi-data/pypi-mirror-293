# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from citesdoc_110.models.goods_item_base_type import GoodsItemBaseType  # noqa: F401,E501

class StatementCertificateRequestItemType(GoodsItemBaseType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'unid': 'str',
        'clones': 'int',
        'rlist': 'bool',
        'reference_list': 'list[str]',
        'parents': 'list[StatementCertificateRequestItemParentType]'
    }
    if hasattr(GoodsItemBaseType, "swagger_types"):
        swagger_types.update(GoodsItemBaseType.swagger_types)

    attribute_map = {
        'identifier': 'identifier',
        'unid': 'unid',
        'clones': 'clones',
        'rlist': 'rlist',
        'reference_list': 'reference_list',
        'parents': 'parents'
    }
    if hasattr(GoodsItemBaseType, "attribute_map"):
        attribute_map.update(GoodsItemBaseType.attribute_map)

    def __init__(self, identifier=None, unid=None, clones=0, rlist=None, reference_list=None, parents=None, *args, **kwargs):  # noqa: E501
        """StatementCertificateRequestItemType - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._unid = None
        self._clones = None
        self._rlist = None
        self._reference_list = None
        self._parents = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if unid is not None:
            self.unid = unid
        if clones is not None:
            self.clones = clones
        if rlist is not None:
            self.rlist = rlist
        if reference_list is not None:
            self.reference_list = reference_list
        if parents is not None:
            self.parents = parents
        GoodsItemBaseType.__init__(self, *args, **kwargs)

    @property
    def identifier(self):
        """Gets the identifier of this StatementCertificateRequestItemType.  # noqa: E501

        identifikátor položky  # noqa: E501

        :return: The identifier of this StatementCertificateRequestItemType.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this StatementCertificateRequestItemType.

        identifikátor položky  # noqa: E501

        :param identifier: The identifier of this StatementCertificateRequestItemType.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def unid(self):
        """Gets the unid of this StatementCertificateRequestItemType.  # noqa: E501

        Notes UNID - pro zpětnou kompatibilitu  # noqa: E501

        :return: The unid of this StatementCertificateRequestItemType.  # noqa: E501
        :rtype: str
        """
        return self._unid

    @unid.setter
    def unid(self, unid):
        """Sets the unid of this StatementCertificateRequestItemType.

        Notes UNID - pro zpětnou kompatibilitu  # noqa: E501

        :param unid: The unid of this StatementCertificateRequestItemType.  # noqa: E501
        :type: str
        """

        self._unid = unid

    @property
    def clones(self):
        """Gets the clones of this StatementCertificateRequestItemType.  # noqa: E501

        Počet klonovaných položek  # noqa: E501

        :return: The clones of this StatementCertificateRequestItemType.  # noqa: E501
        :rtype: int
        """
        return self._clones

    @clones.setter
    def clones(self, clones):
        """Sets the clones of this StatementCertificateRequestItemType.

        Počet klonovaných položek  # noqa: E501

        :param clones: The clones of this StatementCertificateRequestItemType.  # noqa: E501
        :type: int
        """

        self._clones = clones

    @property
    def rlist(self):
        """Gets the rlist of this StatementCertificateRequestItemType.  # noqa: E501

        Identifikace pomocí Registračního listu  # noqa: E501

        :return: The rlist of this StatementCertificateRequestItemType.  # noqa: E501
        :rtype: bool
        """
        return self._rlist

    @rlist.setter
    def rlist(self, rlist):
        """Sets the rlist of this StatementCertificateRequestItemType.

        Identifikace pomocí Registračního listu  # noqa: E501

        :param rlist: The rlist of this StatementCertificateRequestItemType.  # noqa: E501
        :type: bool
        """

        self._rlist = rlist

    @property
    def reference_list(self):
        """Gets the reference_list of this StatementCertificateRequestItemType.  # noqa: E501

        Seznam čísel registračních listů  # noqa: E501

        :return: The reference_list of this StatementCertificateRequestItemType.  # noqa: E501
        :rtype: list[str]
        """
        return self._reference_list

    @reference_list.setter
    def reference_list(self, reference_list):
        """Sets the reference_list of this StatementCertificateRequestItemType.

        Seznam čísel registračních listů  # noqa: E501

        :param reference_list: The reference_list of this StatementCertificateRequestItemType.  # noqa: E501
        :type: list[str]
        """

        self._reference_list = reference_list

    @property
    def parents(self):
        """Gets the parents of this StatementCertificateRequestItemType.  # noqa: E501

        Rodičovské exempláře  # noqa: E501

        :return: The parents of this StatementCertificateRequestItemType.  # noqa: E501
        :rtype: list[StatementCertificateRequestItemParentType]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this StatementCertificateRequestItemType.

        Rodičovské exempláře  # noqa: E501

        :param parents: The parents of this StatementCertificateRequestItemType.  # noqa: E501
        :type: list[StatementCertificateRequestItemParentType]
        """

        self._parents = parents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementCertificateRequestItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementCertificateRequestItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
