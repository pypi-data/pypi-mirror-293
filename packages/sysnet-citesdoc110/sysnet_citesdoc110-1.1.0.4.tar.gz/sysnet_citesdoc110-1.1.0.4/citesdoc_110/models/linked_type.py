# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LinkedType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'unid': 'str',
        'pid': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'title': 'title',
        'unid': 'unid',
        'pid': 'pid',
        'uuid': 'uuid'
    }

    def __init__(self, title=None, unid=None, pid=None, uuid=None):  # noqa: E501
        """LinkedType - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._unid = None
        self._pid = None
        self._uuid = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if unid is not None:
            self.unid = unid
        if pid is not None:
            self.pid = pid
        if uuid is not None:
            self.uuid = uuid

    @property
    def title(self):
        """Gets the title of this LinkedType.  # noqa: E501

        Název provázaného dokumentu  # noqa: E501

        :return: The title of this LinkedType.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LinkedType.

        Název provázaného dokumentu  # noqa: E501

        :param title: The title of this LinkedType.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def unid(self):
        """Gets the unid of this LinkedType.  # noqa: E501

        Domino universal ID  # noqa: E501

        :return: The unid of this LinkedType.  # noqa: E501
        :rtype: str
        """
        return self._unid

    @unid.setter
    def unid(self, unid):
        """Sets the unid of this LinkedType.

        Domino universal ID  # noqa: E501

        :param unid: The unid of this LinkedType.  # noqa: E501
        :type: str
        """

        self._unid = unid

    @property
    def pid(self):
        """Gets the pid of this LinkedType.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The pid of this LinkedType.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this LinkedType.

        Unique identifier  # noqa: E501

        :param pid: The pid of this LinkedType.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def uuid(self):
        """Gets the uuid of this LinkedType.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The uuid of this LinkedType.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this LinkedType.

        Unique identifier  # noqa: E501

        :param uuid: The uuid of this LinkedType.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkedType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkedType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
