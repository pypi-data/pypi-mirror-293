# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReferencedDocumentType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue_date_time': 'datetime',
        'type_code': 'DocumentCodeType',
        'id': 'list[IDType]',
        'name': 'list[TextType]',
        'effective_specified_period': 'SpecifiedPeriodType'
    }

    attribute_map = {
        'issue_date_time': 'issueDateTime',
        'type_code': 'typeCode',
        'id': 'id',
        'name': 'name',
        'effective_specified_period': 'effectiveSpecifiedPeriod'
    }

    def __init__(self, issue_date_time=None, type_code=None, id=None, name=None, effective_specified_period=None):  # noqa: E501
        """ReferencedDocumentType - a model defined in Swagger"""  # noqa: E501
        self._issue_date_time = None
        self._type_code = None
        self._id = None
        self._name = None
        self._effective_specified_period = None
        self.discriminator = None
        if issue_date_time is not None:
            self.issue_date_time = issue_date_time
        if type_code is not None:
            self.type_code = type_code
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if effective_specified_period is not None:
            self.effective_specified_period = effective_specified_period

    @property
    def issue_date_time(self):
        """Gets the issue_date_time of this ReferencedDocumentType.  # noqa: E501


        :return: The issue_date_time of this ReferencedDocumentType.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date_time

    @issue_date_time.setter
    def issue_date_time(self, issue_date_time):
        """Sets the issue_date_time of this ReferencedDocumentType.


        :param issue_date_time: The issue_date_time of this ReferencedDocumentType.  # noqa: E501
        :type: datetime
        """

        self._issue_date_time = issue_date_time

    @property
    def type_code(self):
        """Gets the type_code of this ReferencedDocumentType.  # noqa: E501


        :return: The type_code of this ReferencedDocumentType.  # noqa: E501
        :rtype: DocumentCodeType
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this ReferencedDocumentType.


        :param type_code: The type_code of this ReferencedDocumentType.  # noqa: E501
        :type: DocumentCodeType
        """

        self._type_code = type_code

    @property
    def id(self):
        """Gets the id of this ReferencedDocumentType.  # noqa: E501


        :return: The id of this ReferencedDocumentType.  # noqa: E501
        :rtype: list[IDType]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReferencedDocumentType.


        :param id: The id of this ReferencedDocumentType.  # noqa: E501
        :type: list[IDType]
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReferencedDocumentType.  # noqa: E501


        :return: The name of this ReferencedDocumentType.  # noqa: E501
        :rtype: list[TextType]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReferencedDocumentType.


        :param name: The name of this ReferencedDocumentType.  # noqa: E501
        :type: list[TextType]
        """

        self._name = name

    @property
    def effective_specified_period(self):
        """Gets the effective_specified_period of this ReferencedDocumentType.  # noqa: E501


        :return: The effective_specified_period of this ReferencedDocumentType.  # noqa: E501
        :rtype: SpecifiedPeriodType
        """
        return self._effective_specified_period

    @effective_specified_period.setter
    def effective_specified_period(self, effective_specified_period):
        """Sets the effective_specified_period of this ReferencedDocumentType.


        :param effective_specified_period: The effective_specified_period of this ReferencedDocumentType.  # noqa: E501
        :type: SpecifiedPeriodType
        """

        self._effective_specified_period = effective_specified_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReferencedDocumentType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReferencedDocumentType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
