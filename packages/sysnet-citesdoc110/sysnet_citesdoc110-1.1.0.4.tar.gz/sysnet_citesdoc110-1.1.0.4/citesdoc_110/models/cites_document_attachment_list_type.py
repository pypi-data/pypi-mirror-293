# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from citesdoc_110.models.base_entry_list_type import BaseEntryListType  # noqa: F401,E501

class CitesDocumentAttachmentListType(BaseEntryListType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'search': 'str',
        'category': 'str',
        'container_id': 'str',
        'entries': 'list[CitesDocumentAttachmentType]'
    }
    if hasattr(BaseEntryListType, "swagger_types"):
        swagger_types.update(BaseEntryListType.swagger_types)

    attribute_map = {
        'key': 'key',
        'search': 'search',
        'category': 'category',
        'container_id': 'container_id',
        'entries': 'entries'
    }
    if hasattr(BaseEntryListType, "attribute_map"):
        attribute_map.update(BaseEntryListType.attribute_map)

    def __init__(self, key=None, search=None, category=None, container_id=None, entries=None, *args, **kwargs):  # noqa: E501
        """CitesDocumentAttachmentListType - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._search = None
        self._category = None
        self._container_id = None
        self._entries = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if search is not None:
            self.search = search
        if category is not None:
            self.category = category
        if container_id is not None:
            self.container_id = container_id
        if entries is not None:
            self.entries = entries
        BaseEntryListType.__init__(self, *args, **kwargs)

    @property
    def key(self):
        """Gets the key of this CitesDocumentAttachmentListType.  # noqa: E501

        Může být identifikátor nebo jiný textový klíč (např. čj.)  # noqa: E501

        :return: The key of this CitesDocumentAttachmentListType.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CitesDocumentAttachmentListType.

        Může být identifikátor nebo jiný textový klíč (např. čj.)  # noqa: E501

        :param key: The key of this CitesDocumentAttachmentListType.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def search(self):
        """Gets the search of this CitesDocumentAttachmentListType.  # noqa: E501

        Text pro fulltextové vyhledávání  # noqa: E501

        :return: The search of this CitesDocumentAttachmentListType.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this CitesDocumentAttachmentListType.

        Text pro fulltextové vyhledávání  # noqa: E501

        :param search: The search of this CitesDocumentAttachmentListType.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def category(self):
        """Gets the category of this CitesDocumentAttachmentListType.  # noqa: E501

        Vrácená kategorie  # noqa: E501

        :return: The category of this CitesDocumentAttachmentListType.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CitesDocumentAttachmentListType.

        Vrácená kategorie  # noqa: E501

        :param category: The category of this CitesDocumentAttachmentListType.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def container_id(self):
        """Gets the container_id of this CitesDocumentAttachmentListType.  # noqa: E501

        Identifikátor kontejneru  # noqa: E501

        :return: The container_id of this CitesDocumentAttachmentListType.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this CitesDocumentAttachmentListType.

        Identifikátor kontejneru  # noqa: E501

        :param container_id: The container_id of this CitesDocumentAttachmentListType.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def entries(self):
        """Gets the entries of this CitesDocumentAttachmentListType.  # noqa: E501


        :return: The entries of this CitesDocumentAttachmentListType.  # noqa: E501
        :rtype: list[CitesDocumentAttachmentType]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this CitesDocumentAttachmentListType.


        :param entries: The entries of this CitesDocumentAttachmentListType.  # noqa: E501
        :type: list[CitesDocumentAttachmentType]
        """

        self._entries = entries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CitesDocumentAttachmentListType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CitesDocumentAttachmentListType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
