# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomsPermitType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate': 'str',
        'comment': 'str',
        'date_customs': 'datetime',
        'date_returned': 'datetime',
        'type_customs': 'str'
    }

    attribute_map = {
        'certificate': 'certificate',
        'comment': 'comment',
        'date_customs': 'date_customs',
        'date_returned': 'date_returned',
        'type_customs': 'type_customs'
    }

    def __init__(self, certificate=None, comment=None, date_customs=None, date_returned=None, type_customs=None):  # noqa: E501
        """CustomsPermitType - a model defined in Swagger"""  # noqa: E501
        self._certificate = None
        self._comment = None
        self._date_customs = None
        self._date_returned = None
        self._type_customs = None
        self.discriminator = None
        if certificate is not None:
            self.certificate = certificate
        if comment is not None:
            self.comment = comment
        if date_customs is not None:
            self.date_customs = date_customs
        if date_returned is not None:
            self.date_returned = date_returned
        if type_customs is not None:
            self.type_customs = type_customs

    @property
    def certificate(self):
        """Gets the certificate of this CustomsPermitType.  # noqa: E501

        Číslo celního dokladu  # noqa: E501

        :return: The certificate of this CustomsPermitType.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CustomsPermitType.

        Číslo celního dokladu  # noqa: E501

        :param certificate: The certificate of this CustomsPermitType.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def comment(self):
        """Gets the comment of this CustomsPermitType.  # noqa: E501

        Poznámka k celním údajům  # noqa: E501

        :return: The comment of this CustomsPermitType.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CustomsPermitType.

        Poznámka k celním údajům  # noqa: E501

        :param comment: The comment of this CustomsPermitType.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def date_customs(self):
        """Gets the date_customs of this CustomsPermitType.  # noqa: E501

        Datum použití permitu  # noqa: E501

        :return: The date_customs of this CustomsPermitType.  # noqa: E501
        :rtype: datetime
        """
        return self._date_customs

    @date_customs.setter
    def date_customs(self, date_customs):
        """Sets the date_customs of this CustomsPermitType.

        Datum použití permitu  # noqa: E501

        :param date_customs: The date_customs of this CustomsPermitType.  # noqa: E501
        :type: datetime
        """

        self._date_customs = date_customs

    @property
    def date_returned(self):
        """Gets the date_returned of this CustomsPermitType.  # noqa: E501

        Datum vrácení nepoužitého permitu  # noqa: E501

        :return: The date_returned of this CustomsPermitType.  # noqa: E501
        :rtype: datetime
        """
        return self._date_returned

    @date_returned.setter
    def date_returned(self, date_returned):
        """Sets the date_returned of this CustomsPermitType.

        Datum vrácení nepoužitého permitu  # noqa: E501

        :param date_returned: The date_returned of this CustomsPermitType.  # noqa: E501
        :type: datetime
        """

        self._date_returned = date_returned

    @property
    def type_customs(self):
        """Gets the type_customs of this CustomsPermitType.  # noqa: E501

        Typ celního dokladu  # noqa: E501

        :return: The type_customs of this CustomsPermitType.  # noqa: E501
        :rtype: str
        """
        return self._type_customs

    @type_customs.setter
    def type_customs(self, type_customs):
        """Sets the type_customs of this CustomsPermitType.

        Typ celního dokladu  # noqa: E501

        :param type_customs: The type_customs of this CustomsPermitType.  # noqa: E501
        :type: str
        """

        self._type_customs = type_customs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomsPermitType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomsPermitType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
