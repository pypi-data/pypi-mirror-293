# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from citesdoc_110.models.metadata_type import MetadataType  # noqa: F401,E501

class AdditionalEntryType(MetadataType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_code': 'str',
        'id_no': 'str',
        'parent': 'RelatedType',
        'date_issued': 'date'
    }
    if hasattr(MetadataType, "swagger_types"):
        swagger_types.update(MetadataType.swagger_types)

    attribute_map = {
        'doc_code': 'doc_code',
        'id_no': 'id_no',
        'parent': 'parent',
        'date_issued': 'date_issued'
    }
    if hasattr(MetadataType, "attribute_map"):
        attribute_map.update(MetadataType.attribute_map)

    def __init__(self, doc_code=None, id_no=None, parent=None, date_issued=None, *args, **kwargs):  # noqa: E501
        """AdditionalEntryType - a model defined in Swagger"""  # noqa: E501
        self._doc_code = None
        self._id_no = None
        self._parent = None
        self._date_issued = None
        self.discriminator = None
        if doc_code is not None:
            self.doc_code = doc_code
        if id_no is not None:
            self.id_no = id_no
        if parent is not None:
            self.parent = parent
        if date_issued is not None:
            self.date_issued = date_issued
        MetadataType.__init__(self, *args, **kwargs)

    @property
    def doc_code(self):
        """Gets the doc_code of this AdditionalEntryType.  # noqa: E501

        Kód dokumentu z číselníku - vazba na formuláře PDF  # noqa: E501

        :return: The doc_code of this AdditionalEntryType.  # noqa: E501
        :rtype: str
        """
        return self._doc_code

    @doc_code.setter
    def doc_code(self, doc_code):
        """Sets the doc_code of this AdditionalEntryType.

        Kód dokumentu z číselníku - vazba na formuláře PDF  # noqa: E501

        :param doc_code: The doc_code of this AdditionalEntryType.  # noqa: E501
        :type: str
        """

        self._doc_code = doc_code

    @property
    def id_no(self):
        """Gets the id_no of this AdditionalEntryType.  # noqa: E501

        Číslo dokumentu  # noqa: E501

        :return: The id_no of this AdditionalEntryType.  # noqa: E501
        :rtype: str
        """
        return self._id_no

    @id_no.setter
    def id_no(self, id_no):
        """Sets the id_no of this AdditionalEntryType.

        Číslo dokumentu  # noqa: E501

        :param id_no: The id_no of this AdditionalEntryType.  # noqa: E501
        :type: str
        """

        self._id_no = id_no

    @property
    def parent(self):
        """Gets the parent of this AdditionalEntryType.  # noqa: E501


        :return: The parent of this AdditionalEntryType.  # noqa: E501
        :rtype: RelatedType
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AdditionalEntryType.


        :param parent: The parent of this AdditionalEntryType.  # noqa: E501
        :type: RelatedType
        """

        self._parent = parent

    @property
    def date_issued(self):
        """Gets the date_issued of this AdditionalEntryType.  # noqa: E501

        Datum vydání dokumentu  # noqa: E501

        :return: The date_issued of this AdditionalEntryType.  # noqa: E501
        :rtype: date
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this AdditionalEntryType.

        Datum vydání dokumentu  # noqa: E501

        :param date_issued: The date_issued of this AdditionalEntryType.  # noqa: E501
        :type: date
        """

        self._date_issued = date_issued

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalEntryType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalEntryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
