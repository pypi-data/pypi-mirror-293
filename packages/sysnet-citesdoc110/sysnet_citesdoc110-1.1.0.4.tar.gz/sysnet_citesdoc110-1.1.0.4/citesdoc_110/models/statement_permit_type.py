# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatementPermitType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applicant': 'PersonExtendedType',
        'application': 'RelatedType',
        'agree': 'AgreeType',
        'reason': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'applicant': 'applicant',
        'application': 'application',
        'agree': 'agree',
        'reason': 'reason',
        'comment': 'comment'
    }

    def __init__(self, applicant=None, application=None, agree=None, reason=None, comment=None):  # noqa: E501
        """StatementPermitType - a model defined in Swagger"""  # noqa: E501
        self._applicant = None
        self._application = None
        self._agree = None
        self._reason = None
        self._comment = None
        self.discriminator = None
        if applicant is not None:
            self.applicant = applicant
        if application is not None:
            self.application = application
        if agree is not None:
            self.agree = agree
        if reason is not None:
            self.reason = reason
        if comment is not None:
            self.comment = comment

    @property
    def applicant(self):
        """Gets the applicant of this StatementPermitType.  # noqa: E501


        :return: The applicant of this StatementPermitType.  # noqa: E501
        :rtype: PersonExtendedType
        """
        return self._applicant

    @applicant.setter
    def applicant(self, applicant):
        """Sets the applicant of this StatementPermitType.


        :param applicant: The applicant of this StatementPermitType.  # noqa: E501
        :type: PersonExtendedType
        """

        self._applicant = applicant

    @property
    def application(self):
        """Gets the application of this StatementPermitType.  # noqa: E501


        :return: The application of this StatementPermitType.  # noqa: E501
        :rtype: RelatedType
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this StatementPermitType.


        :param application: The application of this StatementPermitType.  # noqa: E501
        :type: RelatedType
        """

        self._application = application

    @property
    def agree(self):
        """Gets the agree of this StatementPermitType.  # noqa: E501


        :return: The agree of this StatementPermitType.  # noqa: E501
        :rtype: AgreeType
        """
        return self._agree

    @agree.setter
    def agree(self, agree):
        """Sets the agree of this StatementPermitType.


        :param agree: The agree of this StatementPermitType.  # noqa: E501
        :type: AgreeType
        """

        self._agree = agree

    @property
    def reason(self):
        """Gets the reason of this StatementPermitType.  # noqa: E501

        Zdůvodnění  # noqa: E501

        :return: The reason of this StatementPermitType.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this StatementPermitType.

        Zdůvodnění  # noqa: E501

        :param reason: The reason of this StatementPermitType.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def comment(self):
        """Gets the comment of this StatementPermitType.  # noqa: E501

        Poznámka  # noqa: E501

        :return: The comment of this StatementPermitType.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this StatementPermitType.

        Poznámka  # noqa: E501

        :param comment: The comment of this StatementPermitType.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementPermitType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementPermitType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
