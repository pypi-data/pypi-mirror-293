# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplyChainTradeLineItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type_code': 'GoodsTypeCodeType',
        'type_extension_code': 'GoodsTypeExtensionCodeType',
        'specified_trade_product': 'TradeProductType',
        'eu_annex': 'str',
        'purpose': 'TextType',
        'net_mass': 'QuantityType'
    }

    attribute_map = {
        'type_code': 'typeCode',
        'type_extension_code': 'typeExtensionCode',
        'specified_trade_product': 'specifiedTradeProduct',
        'eu_annex': 'euAnnex',
        'purpose': 'purpose',
        'net_mass': 'netMass'
    }

    def __init__(self, type_code=None, type_extension_code=None, specified_trade_product=None, eu_annex=None, purpose=None, net_mass=None):  # noqa: E501
        """SupplyChainTradeLineItemType - a model defined in Swagger"""  # noqa: E501
        self._type_code = None
        self._type_extension_code = None
        self._specified_trade_product = None
        self._eu_annex = None
        self._purpose = None
        self._net_mass = None
        self.discriminator = None
        if type_code is not None:
            self.type_code = type_code
        if type_extension_code is not None:
            self.type_extension_code = type_extension_code
        if specified_trade_product is not None:
            self.specified_trade_product = specified_trade_product
        if eu_annex is not None:
            self.eu_annex = eu_annex
        if purpose is not None:
            self.purpose = purpose
        if net_mass is not None:
            self.net_mass = net_mass

    @property
    def type_code(self):
        """Gets the type_code of this SupplyChainTradeLineItemType.  # noqa: E501


        :return: The type_code of this SupplyChainTradeLineItemType.  # noqa: E501
        :rtype: GoodsTypeCodeType
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this SupplyChainTradeLineItemType.


        :param type_code: The type_code of this SupplyChainTradeLineItemType.  # noqa: E501
        :type: GoodsTypeCodeType
        """

        self._type_code = type_code

    @property
    def type_extension_code(self):
        """Gets the type_extension_code of this SupplyChainTradeLineItemType.  # noqa: E501


        :return: The type_extension_code of this SupplyChainTradeLineItemType.  # noqa: E501
        :rtype: GoodsTypeExtensionCodeType
        """
        return self._type_extension_code

    @type_extension_code.setter
    def type_extension_code(self, type_extension_code):
        """Sets the type_extension_code of this SupplyChainTradeLineItemType.


        :param type_extension_code: The type_extension_code of this SupplyChainTradeLineItemType.  # noqa: E501
        :type: GoodsTypeExtensionCodeType
        """

        self._type_extension_code = type_extension_code

    @property
    def specified_trade_product(self):
        """Gets the specified_trade_product of this SupplyChainTradeLineItemType.  # noqa: E501


        :return: The specified_trade_product of this SupplyChainTradeLineItemType.  # noqa: E501
        :rtype: TradeProductType
        """
        return self._specified_trade_product

    @specified_trade_product.setter
    def specified_trade_product(self, specified_trade_product):
        """Sets the specified_trade_product of this SupplyChainTradeLineItemType.


        :param specified_trade_product: The specified_trade_product of this SupplyChainTradeLineItemType.  # noqa: E501
        :type: TradeProductType
        """

        self._specified_trade_product = specified_trade_product

    @property
    def eu_annex(self):
        """Gets the eu_annex of this SupplyChainTradeLineItemType.  # noqa: E501


        :return: The eu_annex of this SupplyChainTradeLineItemType.  # noqa: E501
        :rtype: str
        """
        return self._eu_annex

    @eu_annex.setter
    def eu_annex(self, eu_annex):
        """Sets the eu_annex of this SupplyChainTradeLineItemType.


        :param eu_annex: The eu_annex of this SupplyChainTradeLineItemType.  # noqa: E501
        :type: str
        """

        self._eu_annex = eu_annex

    @property
    def purpose(self):
        """Gets the purpose of this SupplyChainTradeLineItemType.  # noqa: E501


        :return: The purpose of this SupplyChainTradeLineItemType.  # noqa: E501
        :rtype: TextType
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this SupplyChainTradeLineItemType.


        :param purpose: The purpose of this SupplyChainTradeLineItemType.  # noqa: E501
        :type: TextType
        """

        self._purpose = purpose

    @property
    def net_mass(self):
        """Gets the net_mass of this SupplyChainTradeLineItemType.  # noqa: E501


        :return: The net_mass of this SupplyChainTradeLineItemType.  # noqa: E501
        :rtype: QuantityType
        """
        return self._net_mass

    @net_mass.setter
    def net_mass(self, net_mass):
        """Sets the net_mass of this SupplyChainTradeLineItemType.


        :param net_mass: The net_mass of this SupplyChainTradeLineItemType.  # noqa: E501
        :type: QuantityType
        """

        self._net_mass = net_mass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplyChainTradeLineItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplyChainTradeLineItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
