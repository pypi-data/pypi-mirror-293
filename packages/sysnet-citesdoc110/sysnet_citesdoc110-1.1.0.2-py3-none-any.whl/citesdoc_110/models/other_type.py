# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OtherType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_type': 'str',
        'customs': 'str',
        'documentation': 'str',
        'documents_to_authority': 'bool',
        'documents_to_customs': 'bool',
        'consignment_note': 'str',
        'subject_permitted': 'str'
    }

    attribute_map = {
        'certificate_type': 'certificate_type',
        'customs': 'customs',
        'documentation': 'documentation',
        'documents_to_authority': 'documents_to_authority',
        'documents_to_customs': 'documents_to_customs',
        'consignment_note': 'consignment_note',
        'subject_permitted': 'subject_permitted'
    }

    def __init__(self, certificate_type=None, customs=None, documentation=None, documents_to_authority=None, documents_to_customs=None, consignment_note=None, subject_permitted=None):  # noqa: E501
        """OtherType - a model defined in Swagger"""  # noqa: E501
        self._certificate_type = None
        self._customs = None
        self._documentation = None
        self._documents_to_authority = None
        self._documents_to_customs = None
        self._consignment_note = None
        self._subject_permitted = None
        self.discriminator = None
        if certificate_type is not None:
            self.certificate_type = certificate_type
        if customs is not None:
            self.customs = customs
        if documentation is not None:
            self.documentation = documentation
        if documents_to_authority is not None:
            self.documents_to_authority = documents_to_authority
        if documents_to_customs is not None:
            self.documents_to_customs = documents_to_customs
        if consignment_note is not None:
            self.consignment_note = consignment_note
        if subject_permitted is not None:
            self.subject_permitted = subject_permitted

    @property
    def certificate_type(self):
        """Gets the certificate_type of this OtherType.  # noqa: E501

        Typ potvrzení podle číselníku:   * LEG - Potvrzení o zákonném získání   * COM - Potvrzení pro obchodní činnosti   * MOV - Potvrzení pro přemístění živých exemplářů   # noqa: E501

        :return: The certificate_type of this OtherType.  # noqa: E501
        :rtype: str
        """
        return self._certificate_type

    @certificate_type.setter
    def certificate_type(self, certificate_type):
        """Sets the certificate_type of this OtherType.

        Typ potvrzení podle číselníku:   * LEG - Potvrzení o zákonném získání   * COM - Potvrzení pro obchodní činnosti   * MOV - Potvrzení pro přemístění živých exemplářů   # noqa: E501

        :param certificate_type: The certificate_type of this OtherType.  # noqa: E501
        :type: str
        """

        self._certificate_type = certificate_type

    @property
    def customs(self):
        """Gets the customs of this OtherType.  # noqa: E501

        Celní údaje  # noqa: E501

        :return: The customs of this OtherType.  # noqa: E501
        :rtype: str
        """
        return self._customs

    @customs.setter
    def customs(self, customs):
        """Sets the customs of this OtherType.

        Celní údaje  # noqa: E501

        :param customs: The customs of this OtherType.  # noqa: E501
        :type: str
        """

        self._customs = customs

    @property
    def documentation(self):
        """Gets the documentation of this OtherType.  # noqa: E501

         Doklady k (zpětnému) vývozu ze země (zpětného) vývozu  # noqa: E501

        :return: The documentation of this OtherType.  # noqa: E501
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this OtherType.

         Doklady k (zpětnému) vývozu ze země (zpětného) vývozu  # noqa: E501

        :param documentation: The documentation of this OtherType.  # noqa: E501
        :type: str
        """

        self._documentation = documentation

    @property
    def documents_to_authority(self):
        """Gets the documents_to_authority of this OtherType.  # noqa: E501

        Doklady byly předány vydávajícímu orgánu  # noqa: E501

        :return: The documents_to_authority of this OtherType.  # noqa: E501
        :rtype: bool
        """
        return self._documents_to_authority

    @documents_to_authority.setter
    def documents_to_authority(self, documents_to_authority):
        """Sets the documents_to_authority of this OtherType.

        Doklady byly předány vydávajícímu orgánu  # noqa: E501

        :param documents_to_authority: The documents_to_authority of this OtherType.  # noqa: E501
        :type: bool
        """

        self._documents_to_authority = documents_to_authority

    @property
    def documents_to_customs(self):
        """Gets the documents_to_customs of this OtherType.  # noqa: E501

        Doklady byly předány celnímu orgánu  # noqa: E501

        :return: The documents_to_customs of this OtherType.  # noqa: E501
        :rtype: bool
        """
        return self._documents_to_customs

    @documents_to_customs.setter
    def documents_to_customs(self, documents_to_customs):
        """Sets the documents_to_customs of this OtherType.

        Doklady byly předány celnímu orgánu  # noqa: E501

        :param documents_to_customs: The documents_to_customs of this OtherType.  # noqa: E501
        :type: bool
        """

        self._documents_to_customs = documents_to_customs

    @property
    def consignment_note(self):
        """Gets the consignment_note of this OtherType.  # noqa: E501

        Nákladní/pořepravní list  # noqa: E501

        :return: The consignment_note of this OtherType.  # noqa: E501
        :rtype: str
        """
        return self._consignment_note

    @consignment_note.setter
    def consignment_note(self, consignment_note):
        """Sets the consignment_note of this OtherType.

        Nákladní/pořepravní list  # noqa: E501

        :param consignment_note: The consignment_note of this OtherType.  # noqa: E501
        :type: str
        """

        self._consignment_note = consignment_note

    @property
    def subject_permitted(self):
        """Gets the subject_permitted of this OtherType.  # noqa: E501

        Předmět povolení  # noqa: E501

        :return: The subject_permitted of this OtherType.  # noqa: E501
        :rtype: str
        """
        return self._subject_permitted

    @subject_permitted.setter
    def subject_permitted(self, subject_permitted):
        """Sets the subject_permitted of this OtherType.

        Předmět povolení  # noqa: E501

        :param subject_permitted: The subject_permitted of this OtherType.  # noqa: E501
        :type: str
        """

        self._subject_permitted = subject_permitted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OtherType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtherType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
