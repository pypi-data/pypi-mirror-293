# coding: utf-8

"""
    Dokumenty CITES

    API pro datový řadič dokumentů CITES ### Verze 1.0.0    - public   - developers  ### Verze 1.1.0    - admins   - additional   - statement   - attachments   - registration_cards   - permit   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaxonItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pid': 'str',
        'uuid': 'str',
        'id_species_plus': 'list[str]',
        'name_scientific': 'str',
        'name_common_cz': 'str',
        'name_common_en': 'str',
        'regulation_cites': 'str',
        'regulation_eu': 'str',
        'regulation_411': 'bool',
        'error': 'bool'
    }

    attribute_map = {
        'pid': 'pid',
        'uuid': 'uuid',
        'id_species_plus': 'id_species_plus',
        'name_scientific': 'name_scientific',
        'name_common_cz': 'name_common_cz',
        'name_common_en': 'name_common_en',
        'regulation_cites': 'regulation_cites',
        'regulation_eu': 'regulation_eu',
        'regulation_411': 'regulation_411',
        'error': 'error'
    }

    def __init__(self, pid=None, uuid=None, id_species_plus=None, name_scientific=None, name_common_cz=None, name_common_en=None, regulation_cites=None, regulation_eu=None, regulation_411=None, error=False):  # noqa: E501
        """TaxonItemType - a model defined in Swagger"""  # noqa: E501
        self._pid = None
        self._uuid = None
        self._id_species_plus = None
        self._name_scientific = None
        self._name_common_cz = None
        self._name_common_en = None
        self._regulation_cites = None
        self._regulation_eu = None
        self._regulation_411 = None
        self._error = None
        self.discriminator = None
        if pid is not None:
            self.pid = pid
        if uuid is not None:
            self.uuid = uuid
        if id_species_plus is not None:
            self.id_species_plus = id_species_plus
        if name_scientific is not None:
            self.name_scientific = name_scientific
        if name_common_cz is not None:
            self.name_common_cz = name_common_cz
        if name_common_en is not None:
            self.name_common_en = name_common_en
        if regulation_cites is not None:
            self.regulation_cites = regulation_cites
        if regulation_eu is not None:
            self.regulation_eu = regulation_eu
        if regulation_411 is not None:
            self.regulation_411 = regulation_411
        if error is not None:
            self.error = error

    @property
    def pid(self):
        """Gets the pid of this TaxonItemType.  # noqa: E501

        PID taxonu  # noqa: E501

        :return: The pid of this TaxonItemType.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this TaxonItemType.

        PID taxonu  # noqa: E501

        :param pid: The pid of this TaxonItemType.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def uuid(self):
        """Gets the uuid of this TaxonItemType.  # noqa: E501

        identifikátor položky zboží  # noqa: E501

        :return: The uuid of this TaxonItemType.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TaxonItemType.

        identifikátor položky zboží  # noqa: E501

        :param uuid: The uuid of this TaxonItemType.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def id_species_plus(self):
        """Gets the id_species_plus of this TaxonItemType.  # noqa: E501

        Identifikátor species+  # noqa: E501

        :return: The id_species_plus of this TaxonItemType.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_species_plus

    @id_species_plus.setter
    def id_species_plus(self, id_species_plus):
        """Sets the id_species_plus of this TaxonItemType.

        Identifikátor species+  # noqa: E501

        :param id_species_plus: The id_species_plus of this TaxonItemType.  # noqa: E501
        :type: list[str]
        """

        self._id_species_plus = id_species_plus

    @property
    def name_scientific(self):
        """Gets the name_scientific of this TaxonItemType.  # noqa: E501

        Vědecký název  # noqa: E501

        :return: The name_scientific of this TaxonItemType.  # noqa: E501
        :rtype: str
        """
        return self._name_scientific

    @name_scientific.setter
    def name_scientific(self, name_scientific):
        """Sets the name_scientific of this TaxonItemType.

        Vědecký název  # noqa: E501

        :param name_scientific: The name_scientific of this TaxonItemType.  # noqa: E501
        :type: str
        """

        self._name_scientific = name_scientific

    @property
    def name_common_cz(self):
        """Gets the name_common_cz of this TaxonItemType.  # noqa: E501

        Obecný název (česky))  # noqa: E501

        :return: The name_common_cz of this TaxonItemType.  # noqa: E501
        :rtype: str
        """
        return self._name_common_cz

    @name_common_cz.setter
    def name_common_cz(self, name_common_cz):
        """Sets the name_common_cz of this TaxonItemType.

        Obecný název (česky))  # noqa: E501

        :param name_common_cz: The name_common_cz of this TaxonItemType.  # noqa: E501
        :type: str
        """

        self._name_common_cz = name_common_cz

    @property
    def name_common_en(self):
        """Gets the name_common_en of this TaxonItemType.  # noqa: E501

        Obecný název (anglicky)  # noqa: E501

        :return: The name_common_en of this TaxonItemType.  # noqa: E501
        :rtype: str
        """
        return self._name_common_en

    @name_common_en.setter
    def name_common_en(self, name_common_en):
        """Sets the name_common_en of this TaxonItemType.

        Obecný název (anglicky)  # noqa: E501

        :param name_common_en: The name_common_en of this TaxonItemType.  # noqa: E501
        :type: str
        """

        self._name_common_en = name_common_en

    @property
    def regulation_cites(self):
        """Gets the regulation_cites of this TaxonItemType.  # noqa: E501

        Příloha CITES  # noqa: E501

        :return: The regulation_cites of this TaxonItemType.  # noqa: E501
        :rtype: str
        """
        return self._regulation_cites

    @regulation_cites.setter
    def regulation_cites(self, regulation_cites):
        """Sets the regulation_cites of this TaxonItemType.

        Příloha CITES  # noqa: E501

        :param regulation_cites: The regulation_cites of this TaxonItemType.  # noqa: E501
        :type: str
        """

        self._regulation_cites = regulation_cites

    @property
    def regulation_eu(self):
        """Gets the regulation_eu of this TaxonItemType.  # noqa: E501

        Příloha EU  # noqa: E501

        :return: The regulation_eu of this TaxonItemType.  # noqa: E501
        :rtype: str
        """
        return self._regulation_eu

    @regulation_eu.setter
    def regulation_eu(self, regulation_eu):
        """Sets the regulation_eu of this TaxonItemType.

        Příloha EU  # noqa: E501

        :param regulation_eu: The regulation_eu of this TaxonItemType.  # noqa: E501
        :type: str
        """

        self._regulation_eu = regulation_eu

    @property
    def regulation_411(self):
        """Gets the regulation_411 of this TaxonItemType.  # noqa: E501

        Zvláštní ochrana  # noqa: E501

        :return: The regulation_411 of this TaxonItemType.  # noqa: E501
        :rtype: bool
        """
        return self._regulation_411

    @regulation_411.setter
    def regulation_411(self, regulation_411):
        """Sets the regulation_411 of this TaxonItemType.

        Zvláštní ochrana  # noqa: E501

        :param regulation_411: The regulation_411 of this TaxonItemType.  # noqa: E501
        :type: bool
        """

        self._regulation_411 = regulation_411

    @property
    def error(self):
        """Gets the error of this TaxonItemType.  # noqa: E501

        Taxon error  # noqa: E501

        :return: The error of this TaxonItemType.  # noqa: E501
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TaxonItemType.

        Taxon error  # noqa: E501

        :param error: The error of this TaxonItemType.  # noqa: E501
        :type: bool
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxonItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxonItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
