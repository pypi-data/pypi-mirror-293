from dataclasses import dataclass
from eskmo.base.interface import APIReferable as APIReferable, UserReferable as UserReferable
from eskmo.base.mvtype import API_FUNCTION as API_FUNCTION
from eskmo.const.event import E_PNL_SUMMARY_NOTIFY as E_PNL_SUMMARY_NOTIFY, E_SKCOM_EXECUTE_FAIL as E_SKCOM_EXECUTE_FAIL
from eskmo.const.skcom import API_SKCOM as API_SKCOM, SKO_FUNC_SUMMARY as SKO_FUNC_SUMMARY, SKO_PNL_DAY_TRADE as SKO_PNL_DAY_TRADE, SKO_PNL_REALIZED as SKO_PNL_REALIZED, SKO_PNL_TYPES as SKO_PNL_TYPES, SKO_PNL_UNREALIZED as SKO_PNL_UNREALIZED
from eskmo.internal.user import User as User
from eskmo.skcom.function import SKO_GET_PROFIT_LOSS_GW_REPORT as SKO_GET_PROFIT_LOSS_GW_REPORT
from eskmo.skcom.handler import SkcomHandler as SkcomHandler
from eskmo.symbol.position import BALANCE_TYPE_MARGIN as BALANCE_TYPE_MARGIN, BALANCE_TYPE_NAKED_SHORT as BALANCE_TYPE_NAKED_SHORT, BALANCE_TYPE_SHORT as BALANCE_TYPE_SHORT, BALANCE_TYPE_STOCK as BALANCE_TYPE_STOCK, StockBalance as InternalStockBalance
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.updatable import Updatable as Updatable

class StockBalance(Updatable, APIReferable):
    def __init__(self, user: User, balance: InternalStockBalance) -> None: ...
    def update(self, balance: InternalStockBalance): ...
    def __getitem__(self, key): ...
    @property
    def all(self): ...
    @property
    def stock(self): ...
    @property
    def margin(self): ...
    @property
    def short(self): ...
    @property
    def daytrade_short(self): ...

class StocksBalance(APIReferable):
    def __init__(self, user: User) -> None: ...
    def add(self, symbol: str, balance: StockBalance): ...
    def __getitem__(self, key): ...

@dataclass
class PnL:
    unrealized: dict[str, dict] = ...
    realized: dict[str, dict] = ...
    daytrade: dict[str, dict] = ...
    def update(self, type: str, data: dict): ...
    def __dict__(self): ...
    def __init__(self, unrealized=..., realized=..., daytrade=...) -> None: ...

class AccountBalance(Updatable, UserReferable):
    isUpdating: bool
    def __init__(self, user: User, acconutId: str = '') -> None: ...
    def updateSummary(self, pnlType: str, balance: dict = None): ...
    def updateDetails(self, pnlType: str, balance: dict = None): ...
    @property
    def summary(self): ...
    @property
    def details(self): ...
    def update_summary(self) -> None: ...
    def update_details(self) -> None: ...
    def update(self, isAsync: bool = False): ...
    def __getitem__(self, key): ...
