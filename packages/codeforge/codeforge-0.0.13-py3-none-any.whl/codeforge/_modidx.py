# Autogenerated by nbdev

d = {
    "settings": {
        "branch": "master",
        "doc_baseurl": "/codeforge/",
        "doc_host": "https://sizhky.github.io",
        "git_url": "https://github.com/sizhky/codeforge/tree/master/",
        "lib_path": "codeforge",
    },
    "syms": {
        "codeforge.adapters": {
            "codeforge.adapters._cvat_ann_2_csv": (
                "adapters.html#_cvat_ann_2_csv",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters._get_attribute_columns": (
                "adapters.html#_get_attribute_columns",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters._get_attribute_data": (
                "adapters.html#_get_attribute_data",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters._process": (
                "adapters.html#_process",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters.b64_2_file": (
                "adapters.html#b64_2_file",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters.b64_2_np": (
                "adapters.html#b64_2_np",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters.bytes_2_file": (
                "adapters.html#bytes_2_file",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters.csvs_2_cvat": (
                "adapters.html#csvs_2_cvat",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters.cvat_2_csvs": (
                "adapters.html#cvat_2_csvs",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters.df_2_yolo": (
                "adapters.html#df_2_yolo",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters.file_2_bytes": (
                "adapters.html#file_2_bytes",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters.np_2_b64": (
                "adapters.html#np_2_b64",
                "codeforge/adapters.py",
            ),
            "codeforge.adapters.yolo_2_df": (
                "adapters.html#yolo_2_df",
                "codeforge/adapters.py",
            ),
        },
        "codeforge.bb_utils": {
            "codeforge.bb_utils.BB": (
                "bounding_boxes.html#bb",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.__add__": (
                "bounding_boxes.html#bb.__add__",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.__eq__": (
                "bounding_boxes.html#bb.__eq__",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.__getitem__": (
                "bounding_boxes.html#bb.__getitem__",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.__hash__": (
                "bounding_boxes.html#bb.__hash__",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.__init__": (
                "bounding_boxes.html#bb.__init__",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.__len__": (
                "bounding_boxes.html#bb.__len__",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.__repr__": (
                "bounding_boxes.html#bb.__repr__",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.absolute": (
                "bounding_boxes.html#bb.absolute",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.add_padding": (
                "bounding_boxes.html#bb.add_padding",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.distances": (
                "bounding_boxes.html#bb.distances",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.jitter": (
                "bounding_boxes.html#bb.jitter",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.l2": (
                "bounding_boxes.html#bb.l2",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.local_to": (
                "bounding_boxes.html#bb.local_to",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.relative": (
                "bounding_boxes.html#bb.relative",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.remap": (
                "bounding_boxes.html#bb.remap",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.BB.shrink_inplace": (
                "bounding_boxes.html#bb.shrink_inplace",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.bbfy": (
                "bounding_boxes.html#bbfy",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.bbs2df": (
                "bounding_boxes.html#bbs2df",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.combine_xyXY_to_bb": (
                "bounding_boxes.html#combine_xyxy_to_bb",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.compute_distance_matrix": (
                "bounding_boxes.html#compute_distance_matrix",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.compute_distances": (
                "bounding_boxes.html#compute_distances",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.compute_eps": (
                "bounding_boxes.html#compute_eps",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.df2bbs": (
                "bounding_boxes.html#df2bbs",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.enlarge_bbs": (
                "bounding_boxes.html#enlarge_bbs",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.iou": (
                "bounding_boxes.html#iou",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.is_absolute": (
                "bounding_boxes.html#is_absolute",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.is_relative": (
                "bounding_boxes.html#is_relative",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.isin": (
                "bounding_boxes.html#isin",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.jitter": (
                "bounding_boxes.html#jitter",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.merge_by_bb": (
                "bounding_boxes.html#merge_by_bb",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.shrink_bbs": (
                "bounding_boxes.html#shrink_bbs",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.split_bb_to_xyXY": (
                "bounding_boxes.html#split_bb_to_xyxy",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.to_absolute": (
                "bounding_boxes.html#to_absolute",
                "codeforge/bb_utils.py",
            ),
            "codeforge.bb_utils.to_relative": (
                "bounding_boxes.html#to_relative",
                "codeforge/bb_utils.py",
            ),
        },
        "codeforge.bokeh_loader": {
            "codeforge.bokeh_loader.get_bplot": (
                "bokeh_plotting.html#get_bplot",
                "codeforge/bokeh_loader.py",
            ),
            "codeforge.bokeh_loader.parse_sz": (
                "bokeh_plotting.html#parse_sz",
                "codeforge/bokeh_loader.py",
            ),
        },
        "codeforge.charts": {
            "codeforge.charts.UpSetAltair": (
                "charts.html#upsetaltair",
                "codeforge/charts.py",
            ),
            "codeforge.charts.confusion_matrix": (
                "charts.html#confusion_matrix",
                "codeforge/charts.py",
            ),
            "codeforge.charts.spider": ("charts.html#spider", "codeforge/charts.py"),
            "codeforge.charts.upsetaltair_top_level_configuration": (
                "charts.html#upsetaltair_top_level_configuration",
                "codeforge/charts.py",
            ),
        },
        "codeforge.cli": {},
        "codeforge.dates": {},
        "codeforge.decorators": {
            "codeforge.decorators.check_kwargs_not_none": (
                "decorators.html#check_kwargs_not_none",
                "codeforge/decorators.py",
            ),
            "codeforge.decorators.format": (
                "decorators.html#format",
                "codeforge/decorators.py",
            ),
            "codeforge.decorators.io": (
                "decorators.html#io",
                "codeforge/decorators.py",
            ),
            "codeforge.decorators.timeit": (
                "decorators.html#timeit",
                "codeforge/decorators.py",
            ),
            "codeforge.decorators.warn_on_fail": (
                "decorators.html#warn_on_fail",
                "codeforge/decorators.py",
            ),
        },
        "codeforge.fastcores": {},
        "codeforge.icecream": {},
        "codeforge.imgaug_loader": {
            "codeforge.imgaug_loader.bbs2imgaugbbs": (
                "imgaug_loader.html#bbs2imgaugbbs",
                "codeforge/imgaug_loader.py",
            ),
            "codeforge.imgaug_loader.bw": (
                "imgaug_loader.html#bw",
                "codeforge/imgaug_loader.py",
            ),
            "codeforge.imgaug_loader.crop": (
                "imgaug_loader.html#crop",
                "codeforge/imgaug_loader.py",
            ),
            "codeforge.imgaug_loader.do": (
                "imgaug_loader.html#do",
                "codeforge/imgaug_loader.py",
            ),
            "codeforge.imgaug_loader.get_size": (
                "imgaug_loader.html#get_size",
                "codeforge/imgaug_loader.py",
            ),
            "codeforge.imgaug_loader.imgaugbbs2bbs": (
                "imgaug_loader.html#imgaugbbs2bbs",
                "codeforge/imgaug_loader.py",
            ),
            "codeforge.imgaug_loader.pad": (
                "imgaug_loader.html#pad",
                "codeforge/imgaug_loader.py",
            ),
            "codeforge.imgaug_loader.rescale": (
                "imgaug_loader.html#rescale",
                "codeforge/imgaug_loader.py",
            ),
            "codeforge.imgaug_loader.rotate": (
                "imgaug_loader.html#rotate",
                "codeforge/imgaug_loader.py",
            ),
        },
        "codeforge.inspector": {
            "codeforge.inspector.inspect": (
                "inspector.html#inspect",
                "codeforge/inspector.py",
            )
        },
        "codeforge.interactive_show": {
            "codeforge.interactive_show.convert_to_nx": (
                "interactive_show.html#convert_to_nx",
                "codeforge/interactive_show.py",
            ),
            "codeforge.interactive_show.df2graph_nodes": (
                "interactive_show.html#df2graph_nodes",
                "codeforge/interactive_show.py",
            ),
            "codeforge.interactive_show.ishow": (
                "interactive_show.html#ishow",
                "codeforge/interactive_show.py",
            ),
            "codeforge.interactive_show.plot_graph": (
                "interactive_show.html#plot_graph",
                "codeforge/interactive_show.py",
            ),
            "codeforge.interactive_show.plot_image": (
                "interactive_show.html#plot_image",
                "codeforge/interactive_show.py",
            ),
            "codeforge.interactive_show.to_networkx": (
                "interactive_show.html#to_networkx",
                "codeforge/interactive_show.py",
            ),
            "codeforge.interactive_show.tolist": (
                "interactive_show.html#tolist",
                "codeforge/interactive_show.py",
            ),
            "codeforge.interactive_show.tonp": (
                "interactive_show.html#tonp",
                "codeforge/interactive_show.py",
            ),
            "codeforge.interactive_show.viz2": (
                "interactive_show.html#viz2",
                "codeforge/interactive_show.py",
            ),
        },
        "codeforge.ipython": {
            "codeforge.ipython.backup_all_notebooks": (
                "jupyter_notebook.html#backup_all_notebooks",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.backup_folders_of_nbs": (
                "jupyter_notebook.html#backup_folders_of_nbs",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.backup_this_notebook": (
                "jupyter_notebook.html#backup_this_notebook",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.display_dfs_side_by_side": (
                "jupyter_notebook.html#display_dfs_side_by_side",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.h1": (
                "jupyter_notebook.html#h1",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.h2": (
                "jupyter_notebook.html#h2",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.h3": (
                "jupyter_notebook.html#h3",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.h4": (
                "jupyter_notebook.html#h4",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.h5": (
                "jupyter_notebook.html#h5",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.h6": (
                "jupyter_notebook.html#h6",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.save_notebook": (
                "jupyter_notebook.html#save_notebook",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.show_big_dataframe": (
                "jupyter_notebook.html#show_big_dataframe",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.shutdown_current_notebook": (
                "jupyter_notebook.html#shutdown_current_notebook",
                "codeforge/ipython.py",
            ),
            "codeforge.ipython.store_scrap": (
                "jupyter_notebook.html#store_scrap",
                "codeforge/ipython.py",
            ),
        },
        "codeforge.load_defaults": {
            "codeforge.load_defaults.exists": (
                "load_defautls.html#exists",
                "codeforge/load_defaults.py",
            ),
            "codeforge.load_defaults.loadifexists": (
                "load_defautls.html#loadifexists",
                "codeforge/load_defaults.py",
            ),
        },
        "codeforge.loader": {},
        "codeforge.logger": {
            "codeforge.logger.RichHandler.render": (
                "logging.html#richhandler.render",
                "codeforge/logger.py",
            ),
            "codeforge.logger._logger_mode_context": (
                "logging.html#_logger_mode_context",
                "codeforge/logger.py",
            ),
            "codeforge.logger.get_console": (
                "logging.html#get_console",
                "codeforge/logger.py",
            ),
            "codeforge.logger.get_logger_level": (
                "logging.html#get_logger_level",
                "codeforge/logger.py",
            ),
            "codeforge.logger.in_logger_mode": (
                "logging.html#in_logger_mode",
                "codeforge/logger.py",
            ),
            "codeforge.logger.logger_mode": (
                "logging.html#logger_mode",
                "codeforge/logger.py",
            ),
            "codeforge.logger.notify_waiting": (
                "logging.html#notify_waiting",
                "codeforge/logger.py",
            ),
            "codeforge.logger.reset_logger": (
                "logging.html#reset_logger",
                "codeforge/logger.py",
            ),
        },
        "codeforge.markup": {
            "codeforge.markup.AttrDictDeprecated": (
                "markups.html#attrdictdeprecated",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.__contains__": (
                "markups.html#attrdictdeprecated.__contains__",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.__delitem__": (
                "markups.html#attrdictdeprecated.__delitem__",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.__dir__": (
                "markups.html#attrdictdeprecated.__dir__",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.__eq__": (
                "markups.html#attrdictdeprecated.__eq__",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.__init__": (
                "markups.html#attrdictdeprecated.__init__",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.__iter__": (
                "markups.html#attrdictdeprecated.__iter__",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.__len__": (
                "markups.html#attrdictdeprecated.__len__",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.__repr__": (
                "markups.html#attrdictdeprecated.__repr__",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated._wrap": (
                "markups.html#attrdictdeprecated._wrap",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.drop": (
                "markups.html#attrdictdeprecated.drop",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.fetch": (
                "markups.html#attrdictdeprecated.fetch",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.find_address": (
                "markups.html#attrdictdeprecated.find_address",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.get": (
                "markups.html#attrdictdeprecated.get",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.items": (
                "markups.html#attrdictdeprecated.items",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.keys": (
                "markups.html#attrdictdeprecated.keys",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.map": (
                "markups.html#attrdictdeprecated.map",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.pretty": (
                "markups.html#attrdictdeprecated.pretty",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.summary": (
                "markups.html#attrdictdeprecated.summary",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.to_dict": (
                "markups.html#attrdictdeprecated.to_dict",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.update": (
                "markups.html#attrdictdeprecated.update",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.values": (
                "markups.html#attrdictdeprecated.values",
                "codeforge/markup.py",
            ),
            "codeforge.markup.AttrDictDeprecated.write_summary": (
                "markups.html#attrdictdeprecated.write_summary",
                "codeforge/markup.py",
            ),
            "codeforge.markup._default": (
                "markups.html#_default",
                "codeforge/markup.py",
            ),
            "codeforge.markup.decompose": (
                "markups.html#decompose",
                "codeforge/markup.py",
            ),
            "codeforge.markup.hash_pandas_dataframe": (
                "markups.html#hash_pandas_dataframe",
                "codeforge/markup.py",
            ),
            "codeforge.markup.hash_tensor": (
                "markups.html#hash_tensor",
                "codeforge/markup.py",
            ),
            "codeforge.markup.isnamedtupleinstance": (
                "markups.html#isnamedtupleinstance",
                "codeforge/markup.py",
            ),
            "codeforge.markup.pretty_json": (
                "markups.html#pretty_json",
                "codeforge/markup.py",
            ),
            "codeforge.markup.read_json": (
                "markups.html#read_json",
                "codeforge/markup.py",
            ),
            "codeforge.markup.read_jsonl": (
                "markups.html#read_jsonl",
                "codeforge/markup.py",
            ),
            "codeforge.markup.read_xml": (
                "markups.html#read_xml",
                "codeforge/markup.py",
            ),
            "codeforge.markup.read_yaml": (
                "markups.html#read_yaml",
                "codeforge/markup.py",
            ),
            "codeforge.markup.unpack": ("markups.html#unpack", "codeforge/markup.py"),
            "codeforge.markup.write_json": (
                "markups.html#write_json",
                "codeforge/markup.py",
            ),
            "codeforge.markup.write_jsonl": (
                "markups.html#write_jsonl",
                "codeforge/markup.py",
            ),
            "codeforge.markup.write_xml": (
                "markups.html#write_xml",
                "codeforge/markup.py",
            ),
            "codeforge.markup.write_yaml": (
                "markups.html#write_yaml",
                "codeforge/markup.py",
            ),
        },
        "codeforge.markup2": {
            "codeforge.markup2.AttrDict": (
                "markups.html#attrdict",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__call__": (
                "markups.html#attrdict.__call__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__contains__": (
                "markups.html#attrdict.__contains__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__delitem__": (
                "markups.html#attrdict.__delitem__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__dir__": (
                "markups.html#attrdict.__dir__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__eq__": (
                "markups.html#attrdict.__eq__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__init__": (
                "markups.html#attrdict.__init__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__iter__": (
                "markups.html#attrdict.__iter__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__json__": (
                "markups.html#attrdict.__json__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__len__": (
                "markups.html#attrdict.__len__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.__repr__": (
                "markups.html#attrdict.__repr__",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict._wrap": (
                "markups.html#attrdict._wrap",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.drop": (
                "markups.html#attrdict.drop",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.fetch": (
                "markups.html#attrdict.fetch",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.fetch2": (
                "markups.html#attrdict.fetch2",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.find_address": (
                "markups.html#attrdict.find_address",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.flatten": (
                "markups.html#attrdict.flatten",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.flatten_and_make_dataframe": (
                "markups.html#attrdict.flatten_and_make_dataframe",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.get": (
                "markups.html#attrdict.get",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.items": (
                "markups.html#attrdict.items",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.keys": (
                "markups.html#attrdict.keys",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.map": (
                "markups.html#attrdict.map",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.merge_addersses": (
                "markups.html#attrdict.merge_addersses",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.pretty": (
                "markups.html#attrdict.pretty",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.print_summary": (
                "markups.html#attrdict.print_summary",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.set": (
                "markups.html#attrdict.set",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.slice": (
                "markups.html#attrdict.slice",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.summary": (
                "markups.html#attrdict.summary",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.to_dict": (
                "markups.html#attrdict.to_dict",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.trymap": (
                "markups.html#attrdict.trymap",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.update": (
                "markups.html#attrdict.update",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.values": (
                "markups.html#attrdict.values",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.write_config": (
                "markups.html#attrdict.write_config",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.AttrDict.write_summary": (
                "markups.html#attrdict.write_summary",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2._default": (
                "markups.html#_default",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.decompose": (
                "markups.html#decompose",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.hash_pandas_dataframe": (
                "markups.html#hash_pandas_dataframe",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.hash_tensor": (
                "markups.html#hash_tensor",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.is_attrdict_like": (
                "markups.html#is_attrdict_like",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.isnamedtupleinstance": (
                "markups.html#isnamedtupleinstance",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.pretty_json": (
                "markups.html#pretty_json",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.read_json": (
                "markups.html#read_json",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.read_jsonl": (
                "markups.html#read_jsonl",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.read_xml": (
                "markups.html#read_xml",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.read_yaml": (
                "markups.html#read_yaml",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.unpack": ("markups.html#unpack", "codeforge/markup2.py"),
            "codeforge.markup2.write_json": (
                "markups.html#write_json",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.write_jsonl": (
                "markups.html#write_jsonl",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.write_xml": (
                "markups.html#write_xml",
                "codeforge/markup2.py",
            ),
            "codeforge.markup2.write_yaml": (
                "markups.html#write_yaml",
                "codeforge/markup2.py",
            ),
        },
        "codeforge.misc": {
            "codeforge.misc.Timer": ("misc.html#timer", "codeforge/misc.py"),
            "codeforge.misc.Timer.__call__": (
                "misc.html#timer.__call__",
                "codeforge/misc.py",
            ),
            "codeforge.misc.Timer.__init__": (
                "misc.html#timer.__init__",
                "codeforge/misc.py",
            ),
            "codeforge.misc.io": ("misc.html#io", "codeforge/misc.py"),
            "codeforge.misc.summarize_input": (
                "misc.html#summarize_input",
                "codeforge/misc.py",
            ),
            "codeforge.misc.timeit": ("misc.html#timeit", "codeforge/misc.py"),
            "codeforge.misc.track2": ("misc.html#track2", "codeforge/misc.py"),
            "codeforge.misc.tryy": ("misc.html#tryy", "codeforge/misc.py"),
        },
        "codeforge.paths": {
            "codeforge.paths.Glob": ("paths.html#glob", "codeforge/paths.py"),
            "codeforge.paths.P.Glob": ("paths.html#p.glob", "codeforge/paths.py"),
            "codeforge.paths.P.__dir__": ("paths.html#p.__dir__", "codeforge/paths.py"),
            "codeforge.paths.P._tree": ("paths.html#p._tree", "codeforge/paths.py"),
            "codeforge.paths.P.cp": ("paths.html#p.cp", "codeforge/paths.py"),
            "codeforge.paths.P.extn": ("paths.html#p.extn", "codeforge/paths.py"),
            "codeforge.paths.P.mv": ("paths.html#p.mv", "codeforge/paths.py"),
            "codeforge.paths.P.read_file": (
                "paths.html#p.read_file",
                "codeforge/paths.py",
            ),
            "codeforge.paths.P.read_lines": (
                "paths.html#p.read_lines",
                "codeforge/paths.py",
            ),
            "codeforge.paths.P.rm": ("paths.html#p.rm", "codeforge/paths.py"),
            "codeforge.paths.P.rmtree": ("paths.html#p.rmtree", "codeforge/paths.py"),
            "codeforge.paths.P.sample": ("paths.html#p.sample", "codeforge/paths.py"),
            "codeforge.paths.P.size": ("paths.html#p.size", "codeforge/paths.py"),
            "codeforge.paths.P.sz": ("paths.html#p.sz", "codeforge/paths.py"),
            "codeforge.paths.P.write_lines": (
                "paths.html#p.write_lines",
                "codeforge/paths.py",
            ),
            "codeforge.paths.P0": ("paths.html#p0", "codeforge/paths.py"),
            "codeforge.paths.P0.__getattr__": (
                "paths.html#p0.__getattr__",
                "codeforge/paths.py",
            ),
            "codeforge.paths.P0.__init__": (
                "paths.html#p0.__init__",
                "codeforge/paths.py",
            ),
            "codeforge.paths.P0.__new__": (
                "paths.html#p0.__new__",
                "codeforge/paths.py",
            ),
            "codeforge.paths.P0.extn": ("paths.html#p0.extn", "codeforge/paths.py"),
            "codeforge.paths.P0.isfile": ("paths.html#p0.isfile", "codeforge/paths.py"),
            "codeforge.paths.P0.ls": ("paths.html#p0.ls", "codeforge/paths.py"),
            "codeforge.paths.common_items": (
                "paths.html#common_items",
                "codeforge/paths.py",
            ),
            "codeforge.paths.dumpdill": ("paths.html#dumpdill", "codeforge/paths.py"),
            "codeforge.paths.extn": ("paths.html#extn", "codeforge/paths.py"),
            "codeforge.paths.find": ("paths.html#find", "codeforge/paths.py"),
            "codeforge.paths.fname": ("paths.html#fname", "codeforge/paths.py"),
            "codeforge.paths.fname2": ("paths.html#fname2", "codeforge/paths.py"),
            "codeforge.paths.folder_structure_to_dict": (
                "paths.html#folder_structure_to_dict",
                "codeforge/paths.py",
            ),
            "codeforge.paths.folder_structure_to_json": (
                "paths.html#folder_structure_to_json",
                "codeforge/paths.py",
            ),
            "codeforge.paths.folder_summary": (
                "paths.html#folder_summary",
                "codeforge/paths.py",
            ),
            "codeforge.paths.get_fs": ("paths.html#get_fs", "codeforge/paths.py"),
            "codeforge.paths.input_to_str": (
                "paths.html#input_to_str",
                "codeforge/paths.py",
            ),
            "codeforge.paths.isdir": ("paths.html#isdir", "codeforge/paths.py"),
            "codeforge.paths.list_zip": ("paths.html#list_zip", "codeforge/paths.py"),
            "codeforge.paths.loaddill": ("paths.html#loaddill", "codeforge/paths.py"),
            "codeforge.paths.makedir": ("paths.html#makedir", "codeforge/paths.py"),
            "codeforge.paths.md5": ("paths.html#md5", "codeforge/paths.py"),
            "codeforge.paths.output_to_path": (
                "paths.html#output_to_path",
                "codeforge/paths.py",
            ),
            "codeforge.paths.parent": ("paths.html#parent", "codeforge/paths.py"),
            "codeforge.paths.process_f": ("paths.html#process_f", "codeforge/paths.py"),
            "codeforge.paths.readfile": ("paths.html#readfile", "codeforge/paths.py"),
            "codeforge.paths.readlines": ("paths.html#readlines", "codeforge/paths.py"),
            "codeforge.paths.remove_duplicates": (
                "paths.html#remove_duplicates",
                "codeforge/paths.py",
            ),
            "codeforge.paths.remove_file": (
                "paths.html#remove_file",
                "codeforge/paths.py",
            ),
            "codeforge.paths.rename_batch": (
                "paths.html#rename_batch",
                "codeforge/paths.py",
            ),
            "codeforge.paths.stem": ("paths.html#stem", "codeforge/paths.py"),
            "codeforge.paths.stems": ("paths.html#stems", "codeforge/paths.py"),
            "codeforge.paths.tree": ("paths.html#tree", "codeforge/paths.py"),
            "codeforge.paths.unzip_file": (
                "paths.html#unzip_file",
                "codeforge/paths.py",
            ),
            "codeforge.paths.writelines": (
                "paths.html#writelines",
                "codeforge/paths.py",
            ),
            "codeforge.paths.zip_files": ("paths.html#zip_files", "codeforge/paths.py"),
        },
        "codeforge.pdf_loader": {
            "codeforge.pdf_loader.PDF": ("pdf.html#pdf", "codeforge/pdf_loader.py"),
            "codeforge.pdf_loader.PDF.__getitem__": (
                "pdf.html#pdf.__getitem__",
                "codeforge/pdf_loader.py",
            ),
            "codeforge.pdf_loader.PDF.__init__": (
                "pdf.html#pdf.__init__",
                "codeforge/pdf_loader.py",
            ),
            "codeforge.pdf_loader.PDF.__len__": (
                "pdf.html#pdf.__len__",
                "codeforge/pdf_loader.py",
            ),
            "codeforge.pdf_loader.PDF.get_image": (
                "pdf.html#pdf.get_image",
                "codeforge/pdf_loader.py",
            ),
            "codeforge.pdf_loader.PDF.show": (
                "pdf.html#pdf.show",
                "codeforge/pdf_loader.py",
            ),
        },
        "codeforge.registry": {
            "codeforge.registry.parse": (
                "registry.html#parse",
                "codeforge/registry.py",
            ),
            "codeforge.registry.parse_and_resolve": (
                "registry.html#parse_and_resolve",
                "codeforge/registry.py",
            ),
            "codeforge.registry.parse_base": (
                "registry.html#parse_base",
                "codeforge/registry.py",
            ),
            "codeforge.registry.parse_string": (
                "registry.html#parse_string",
                "codeforge/registry.py",
            ),
            "codeforge.registry.tryeval": (
                "registry.html#tryeval",
                "codeforge/registry.py",
            ),
        },
        "codeforge.s3_loader": {},
        "codeforge.scp": {},
        "codeforge.sklegos": {
            "codeforge.sklegos.Cat2Num": (
                "sklegos.html#cat2num",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.Cat2Num.__init__": (
                "sklegos.html#cat2num.__init__",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.Cat2Num.fit": (
                "sklegos.html#cat2num.fit",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.Cat2Num.fit_transform": (
                "sklegos.html#cat2num.fit_transform",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.Cat2Num.transform": (
                "sklegos.html#cat2num.transform",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.GroupedPredictor.transform": (
                "sklegos.html#groupedpredictor.transform",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.ImputeMissingValues": (
                "sklegos.html#imputemissingvalues",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.ImputeMissingValues.__init__": (
                "sklegos.html#imputemissingvalues.__init__",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.ImputeMissingValues.fit": (
                "sklegos.html#imputemissingvalues.fit",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.ImputeMissingValues.fit_transform": (
                "sklegos.html#imputemissingvalues.fit_transform",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.ImputeMissingValues.transform": (
                "sklegos.html#imputemissingvalues.transform",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.LambdaTransformer": (
                "sklegos.html#lambdatransformer",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.LambdaTransformer.__init__": (
                "sklegos.html#lambdatransformer.__init__",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.LambdaTransformer.fit": (
                "sklegos.html#lambdatransformer.fit",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.LambdaTransformer.fit_transform": (
                "sklegos.html#lambdatransformer.fit_transform",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.LambdaTransformer.predict": (
                "sklegos.html#lambdatransformer.predict",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.LambdaTransformer.predict_proba": (
                "sklegos.html#lambdatransformer.predict_proba",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.LambdaTransformer.transform": (
                "sklegos.html#lambdatransformer.transform",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.MakeFrame": (
                "sklegos.html#makeframe",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.MakeFrame.__init__": (
                "sklegos.html#makeframe.__init__",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.MakeFrame.fit": (
                "sklegos.html#makeframe.fit",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.MakeFrame.predict": (
                "sklegos.html#makeframe.predict",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.MakeFrame.predict_proba": (
                "sklegos.html#makeframe.predict_proba",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.MakeFrame.transform": (
                "sklegos.html#makeframe.transform",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.SplitDateColumn": (
                "sklegos.html#splitdatecolumn",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.SplitDateColumn.__init__": (
                "sklegos.html#splitdatecolumn.__init__",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.SplitDateColumn.fit": (
                "sklegos.html#splitdatecolumn.fit",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.SplitDateColumn.predict": (
                "sklegos.html#splitdatecolumn.predict",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.SplitDateColumn.predict_proba": (
                "sklegos.html#splitdatecolumn.predict_proba",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.SplitDateColumn.transform": (
                "sklegos.html#splitdatecolumn.transform",
                "codeforge/sklegos.py",
            ),
            "codeforge.sklegos.train_test_split": (
                "sklegos.html#train_test_split",
                "codeforge/sklegos.py",
            ),
        },
        "codeforge.text_utils": {},
        "codeforge.thinc_parser.parser": {},
        "codeforge.tmp": {},
        "codeforge.torch_loader": {},
        "codeforge.trainer.capsule": {
            "codeforge.trainer.capsule.Capsule": (
                "capsule.html#capsule",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.__init__": (
                "capsule.html#capsule.__init__",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.after_predict": (
                "capsule.html#capsule.after_predict",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.after_train_batch": (
                "capsule.html#capsule.after_train_batch",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.after_validate_batch": (
                "capsule.html#capsule.after_validate_batch",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.before_predict": (
                "capsule.html#capsule.before_predict",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.before_train_batch": (
                "capsule.html#capsule.before_train_batch",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.before_validate_batch": (
                "capsule.html#capsule.before_validate_batch",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.evaluate": (
                "capsule.html#capsule.evaluate",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.fit": (
                "capsule.html#capsule.fit",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.load": (
                "capsule.html#capsule.load",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.predict_batch": (
                "capsule.html#capsule.predict_batch",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.save": (
                "capsule.html#capsule.save",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.train_batch": (
                "capsule.html#capsule.train_batch",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.Capsule.validate_batch": (
                "capsule.html#capsule.validate_batch",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.predict": (
                "capsule.html#predict",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.to": (
                "capsule.html#to",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.train": (
                "capsule.html#train",
                "codeforge/trainer/capsule.py",
            ),
            "codeforge.trainer.capsule.validate": (
                "capsule.html#validate",
                "codeforge/trainer/capsule.py",
            ),
        },
        "codeforge.trainer.config": {
            "codeforge.trainer.config.DeepLearningConfig": (
                "config.html#deeplearningconfig",
                "codeforge/trainer/config.py",
            ),
            "codeforge.trainer.config.DeepLearningConfig.__contains__": (
                "config.html#deeplearningconfig.__contains__",
                "codeforge/trainer/config.py",
            ),
            "codeforge.trainer.config.DeepLearningConfig.__getitem__": (
                "config.html#deeplearningconfig.__getitem__",
                "codeforge/trainer/config.py",
            ),
            "codeforge.trainer.config.DeepLearningConfig.__repr__": (
                "config.html#deeplearningconfig.__repr__",
                "codeforge/trainer/config.py",
            ),
            "codeforge.trainer.config.DeepLearningConfig.from_ini_file": (
                "config.html#deeplearningconfig.from_ini_file",
                "codeforge/trainer/config.py",
            ),
            "codeforge.trainer.config.DeepLearningConfig.keys": (
                "config.html#deeplearningconfig.keys",
                "codeforge/trainer/config.py",
            ),
            "codeforge.trainer.config.GenericConfig": (
                "config.html#genericconfig",
                "codeforge/trainer/config.py",
            ),
            "codeforge.trainer.config.GenericConfig.__init__": (
                "config.html#genericconfig.__init__",
                "codeforge/trainer/config.py",
            ),
            "codeforge.trainer.config.GenericConfig.from_ini_file": (
                "config.html#genericconfig.from_ini_file",
                "codeforge/trainer/config.py",
            ),
        },
        "codeforge.trainer.hooks": {},
        "codeforge.trainer.neural_graph": {},
        "codeforge.video": {},
        "codeforge.zen": {},
    },
}
