---
stages:
  - check
  - build
  - image
  - test
  - release

default:
  interruptible: false

include:
  - local: '.windows-gitlab-ci.yml'
  - local: '.macos-gitlab-ci.yml'
  - local: '.linux-gitlab-ci.yml'
  - project: 'tango-controls/gitlab-ci-templates'
    file: 'ArchiveWithSubmodules.gitlab-ci.yml'

variables:
  CPP_TANGO_VERSION: "10.0.0rc5"
  TANGO_TEST_VERSION: "3.9"
  PYTHONUNBUFFERED: "1"

.rules-wheel:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TAG'
    - if: $CI_JOB_NAME =~ /.*win:.*-wheel.*/ && $CPP_TANGO_VERSION =~ /.*dev.*/ && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: manual
      allow_failure: true
    - if: $CI_JOB_NAME =~ /.*macos:.*-wheel.*/ && $CPP_TANGO_VERSION =~ /.*dev.*/ && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: manual
      allow_failure: true

.build-wheel:
  stage: build
  artifacts:
    expire_in: 1 day
    paths:
      - dist/
  rules:
    - !reference [.rules-wheel, rules]

.test-pixi:
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - pixi info
    - pixi run install
    - pixi run check
    - pixi run pytest -v -k "test_ping or restart_server"
    - pixi run install-cpptango-and-tangotest
    - pixi run -e cpptango which TangoTest
  dependencies: [ ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: manual
      allow_failure: true

run-triage:
  stage: check
  image: ruby:3.3-slim
  tags:
    - linux
    - docker
    - amd64
  script:
    - gem install gitlab-triage
    - gitlab-triage --token $GITLAB_TRIAGE_API_TOKEN --source-id $CI_PROJECT_PATH
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

run-pre-commit:
  stage: check
  image: registry.gitlab.com/tango-controls/docker/pre-commit
  tags:
    - linux
    - docker
    - amd64
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    key: pre-commit-cache
    paths:
      - ${PRE_COMMIT_HOME}
  script:
    - pre-commit run --all-files

build-docker-image:
  stage: image
  image: docker:latest
  tags:
    - linux
    - dind
    - amd64
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - export COMMIT_TAG=$(echo $CI_COMMIT_TAG | sed --expression="s/v//g")
    - export LOWER_PROJECT_NAMESPACE=$(echo ${CI_PROJECT_NAMESPACE} | tr '[:upper:]' '[:lower:]')
    - cd .devcontainer # Minimize build context migrated to docker container
    - docker build -t $CI_REGISTRY/${LOWER_PROJECT_NAMESPACE}/$CI_PROJECT_NAME/pytango-dev:py${PYTHON_VERSION}-tango${CPP_TANGO_VERSION}-pytango${COMMIT_TAG} --build-arg PYTHON_VERSION --build-arg CPP_TANGO_VERSION -f Dockerfile .
    - docker push $CI_REGISTRY/${LOWER_PROJECT_NAMESPACE}/$CI_PROJECT_NAME/pytango-dev:py${PYTHON_VERSION}-tango${CPP_TANGO_VERSION}-pytango${COMMIT_TAG}
  parallel:
    matrix:
      - PYTHON_VERSION: ['3.9', '3.10', '3.11', '3.12']
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true

test-docs:
  # official build is on https://readthedocs.org/projects/pytango/ but we test doc generation
  stage: test
  image: sphinxdoc/sphinx:latest
  tags:
    - linux
    - docker
    - amd64
  # Avoid job to wait on wheels building
  needs: [linux:build-sdist]
  script:
    - python -m pip install -r doc/requirements.txt
    - python -m sphinx doc build/sphinx
    - echo "Documentation can be found at https://$CI_PROJECT_NAMESPACE.gitlab.io/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/build/sphinx/index.html"
  artifacts:
    expire_in: 1 day
    paths:
      - build/sphinx
  environment:
    name: Docs-dev
    url: "https://$CI_PROJECT_NAMESPACE.gitlab.io/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/build/sphinx/index.html"

release-pypi-package:
  stage: release
  image: quay.io/condaforge/miniforge3:latest
  id_tokens:
    PYPI_ID_TOKEN:
      aud: pypi
  before_script:
    - apt update && apt install -y jq curl
    - python -m pip install -U twine id
  script:
    # Retrieve the OIDC token from GitLab CI/CD, and exchange it for a PyPI API token
    # See https://docs.pypi.org/trusted-publishers/using-a-publisher/#gitlab-cicd
    - oidc_token=$(python -m id PYPI)
    - resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\":\"${oidc_token}\"}")
    - api_token=$(jq --raw-output '.token' <<< "${resp}")
    - twine upload -u __token__ -p "${api_token}" dist/pytango-*
  environment:
    name: release
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TAG'
      when: manual

release-debug-packages:
  stage: release
  variables:
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}"
    RELEASE_URL_PREFIX: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}"
    PY39_x86_64_DEBUG_WHEEL: "pytango_dbg-${CI_COMMIT_TAG}-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
    PY310_x86_64_DEBUG_WHEEL: "pytango_dbg-${CI_COMMIT_TAG}-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
    PY311_x86_64_DEBUG_WHEEL: "pytango_dbg-${CI_COMMIT_TAG}-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
    PY312_x86_64_DEBUG_WHEEL: "pytango_dbg-${CI_COMMIT_TAG}-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
    PY39_i686_DEBUG_WHEEL: "pytango_dbg-${CI_COMMIT_TAG}-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl"
    PY310_i686_DEBUG_WHEEL: "pytango_dbg-${CI_COMMIT_TAG}-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl"
    PY311_i686_DEBUG_WHEEL: "pytango_dbg-${CI_COMMIT_TAG}-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl"
    PY312_i686_DEBUG_WHEEL: "pytango_dbg-${CI_COMMIT_TAG}-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl"
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: [linux:build-wheel]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true
  before_script:
    - apk update
    - apk add curl
    - apk --no-cache add findutils
  script:
    - cd dist
    - >
      find pytango_dbg*.whl -type f -printf "\n%f\n" -exec curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file {} "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/{}" \;
  release:
    name: "Release $CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    description: "Release $CI_COMMIT_TAG"
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: "${PY39_x86_64_DEBUG_WHEEL}"
          url: "${RELEASE_URL_PREFIX}/${PY39_x86_64_DEBUG_WHEEL}"

        - name: "${PY310_x86_64_DEBUG_WHEEL}"
          url: "${RELEASE_URL_PREFIX}/${PY310_x86_64_DEBUG_WHEEL}"

        - name: "${PY311_x86_64_DEBUG_WHEEL}"
          url: "${RELEASE_URL_PREFIX}/${PY311_x86_64_DEBUG_WHEEL}"

        - name: "${PY312_x86_64_DEBUG_WHEEL}"
          url: "${RELEASE_URL_PREFIX}/${PY312_x86_64_DEBUG_WHEEL}"

        - name: "${PY39_i686_DEBUG_WHEEL}"
          url: "${RELEASE_URL_PREFIX}/${PY39_i686_DEBUG_WHEEL}"

        - name: "${PY310_i686_DEBUG_WHEEL}"
          url: "${RELEASE_URL_PREFIX}/${PY310_i686_DEBUG_WHEEL}"

        - name: "${PY311_i686_DEBUG_WHEEL}"
          url: "${RELEASE_URL_PREFIX}/${PY311_i686_DEBUG_WHEEL}"

        - name: "${PY312_i686_DEBUG_WHEEL}"
          url: "${RELEASE_URL_PREFIX}/${PY312_i686_DEBUG_WHEEL}"
