# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelerModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'created_date': 'date',
        'created_by': 'GloballyUniqueIdentifier',
        'modified_date': 'date',
        'modified_by': 'GloballyUniqueIdentifier',
        'modified_by_name': 'str',
        'modified_by_picture_id': 'str',
        'filter': 'str',
        'scenario_count': 'int',
        'cost_fields': 'list[str]',
        'benefits_fields': 'list[str]',
        'sort_field': 'str',
        'sort_direction': 'SortByDirection',
        'cost_types': 'list[GloballyUniqueIdentifier]',
        'user_list': 'list[User]',
        'inherited_user_list': 'list[User]',
        'parent_id': 'GloballyUniqueIdentifier',
        'views': 'list[ModelView]',
        'last_cost_planner_targets': 'list[ScenarioCostTarget]',
        'cascading_lookup_selections': 'list[GloballyUniqueIdentifier]',
        'cascading_lookup_field': 'GloballyUniqueIdentifier',
        'clone_operation': 'bool',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'name': 'Name',
        'description': 'Description',
        'created_date': 'CreatedDate',
        'created_by': 'CreatedBy',
        'modified_date': 'ModifiedDate',
        'modified_by': 'ModifiedBy',
        'modified_by_name': 'ModifiedByName',
        'modified_by_picture_id': 'ModifiedByPictureID',
        'filter': 'Filter',
        'scenario_count': 'ScenarioCount',
        'cost_fields': 'CostFields',
        'benefits_fields': 'BenefitsFields',
        'sort_field': 'SortField',
        'sort_direction': 'SortDirection',
        'cost_types': 'CostTypes',
        'user_list': 'UserList',
        'inherited_user_list': 'InheritedUserList',
        'parent_id': 'ParentId',
        'views': 'Views',
        'last_cost_planner_targets': 'LastCostPlannerTargets',
        'cascading_lookup_selections': 'CascadingLookupSelections',
        'cascading_lookup_field': 'CascadingLookupField',
        'clone_operation': 'CloneOperation',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, name=None, description=None, created_date=None, created_by=None, modified_date=None, modified_by=None, modified_by_name=None, modified_by_picture_id=None, filter=None, scenario_count=None, cost_fields=None, benefits_fields=None, sort_field=None, sort_direction=None, cost_types=None, user_list=None, inherited_user_list=None, parent_id=None, views=None, last_cost_planner_targets=None, cascading_lookup_selections=None, cascading_lookup_field=None, clone_operation=None, id=None, config_id=None):  # noqa: E501
        """ModelerModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._created_date = None
        self._created_by = None
        self._modified_date = None
        self._modified_by = None
        self._modified_by_name = None
        self._modified_by_picture_id = None
        self._filter = None
        self._scenario_count = None
        self._cost_fields = None
        self._benefits_fields = None
        self._sort_field = None
        self._sort_direction = None
        self._cost_types = None
        self._user_list = None
        self._inherited_user_list = None
        self._parent_id = None
        self._views = None
        self._last_cost_planner_targets = None
        self._cascading_lookup_selections = None
        self._cascading_lookup_field = None
        self._clone_operation = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if created_date is not None:
            self.created_date = created_date
        if created_by is not None:
            self.created_by = created_by
        if modified_date is not None:
            self.modified_date = modified_date
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_by_name is not None:
            self.modified_by_name = modified_by_name
        if modified_by_picture_id is not None:
            self.modified_by_picture_id = modified_by_picture_id
        if filter is not None:
            self.filter = filter
        if scenario_count is not None:
            self.scenario_count = scenario_count
        if cost_fields is not None:
            self.cost_fields = cost_fields
        if benefits_fields is not None:
            self.benefits_fields = benefits_fields
        if sort_field is not None:
            self.sort_field = sort_field
        if sort_direction is not None:
            self.sort_direction = sort_direction
        if cost_types is not None:
            self.cost_types = cost_types
        if user_list is not None:
            self.user_list = user_list
        if inherited_user_list is not None:
            self.inherited_user_list = inherited_user_list
        if parent_id is not None:
            self.parent_id = parent_id
        if views is not None:
            self.views = views
        if last_cost_planner_targets is not None:
            self.last_cost_planner_targets = last_cost_planner_targets
        if cascading_lookup_selections is not None:
            self.cascading_lookup_selections = cascading_lookup_selections
        if cascading_lookup_field is not None:
            self.cascading_lookup_field = cascading_lookup_field
        if clone_operation is not None:
            self.clone_operation = clone_operation
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def name(self):
        """Gets the name of this ModelerModel.  # noqa: E501


        :return: The name of this ModelerModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelerModel.


        :param name: The name of this ModelerModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ModelerModel.  # noqa: E501


        :return: The description of this ModelerModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelerModel.


        :param description: The description of this ModelerModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_date(self):
        """Gets the created_date of this ModelerModel.  # noqa: E501


        :return: The created_date of this ModelerModel.  # noqa: E501
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ModelerModel.


        :param created_date: The created_date of this ModelerModel.  # noqa: E501
        :type: date
        """

        self._created_date = created_date

    @property
    def created_by(self):
        """Gets the created_by of this ModelerModel.  # noqa: E501


        :return: The created_by of this ModelerModel.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ModelerModel.


        :param created_by: The created_by of this ModelerModel.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._created_by = created_by

    @property
    def modified_date(self):
        """Gets the modified_date of this ModelerModel.  # noqa: E501


        :return: The modified_date of this ModelerModel.  # noqa: E501
        :rtype: date
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ModelerModel.


        :param modified_date: The modified_date of this ModelerModel.  # noqa: E501
        :type: date
        """

        self._modified_date = modified_date

    @property
    def modified_by(self):
        """Gets the modified_by of this ModelerModel.  # noqa: E501


        :return: The modified_by of this ModelerModel.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this ModelerModel.


        :param modified_by: The modified_by of this ModelerModel.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._modified_by = modified_by

    @property
    def modified_by_name(self):
        """Gets the modified_by_name of this ModelerModel.  # noqa: E501


        :return: The modified_by_name of this ModelerModel.  # noqa: E501
        :rtype: str
        """
        return self._modified_by_name

    @modified_by_name.setter
    def modified_by_name(self, modified_by_name):
        """Sets the modified_by_name of this ModelerModel.


        :param modified_by_name: The modified_by_name of this ModelerModel.  # noqa: E501
        :type: str
        """

        self._modified_by_name = modified_by_name

    @property
    def modified_by_picture_id(self):
        """Gets the modified_by_picture_id of this ModelerModel.  # noqa: E501


        :return: The modified_by_picture_id of this ModelerModel.  # noqa: E501
        :rtype: str
        """
        return self._modified_by_picture_id

    @modified_by_picture_id.setter
    def modified_by_picture_id(self, modified_by_picture_id):
        """Sets the modified_by_picture_id of this ModelerModel.


        :param modified_by_picture_id: The modified_by_picture_id of this ModelerModel.  # noqa: E501
        :type: str
        """

        self._modified_by_picture_id = modified_by_picture_id

    @property
    def filter(self):
        """Gets the filter of this ModelerModel.  # noqa: E501


        :return: The filter of this ModelerModel.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ModelerModel.


        :param filter: The filter of this ModelerModel.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def scenario_count(self):
        """Gets the scenario_count of this ModelerModel.  # noqa: E501


        :return: The scenario_count of this ModelerModel.  # noqa: E501
        :rtype: int
        """
        return self._scenario_count

    @scenario_count.setter
    def scenario_count(self, scenario_count):
        """Sets the scenario_count of this ModelerModel.


        :param scenario_count: The scenario_count of this ModelerModel.  # noqa: E501
        :type: int
        """

        self._scenario_count = scenario_count

    @property
    def cost_fields(self):
        """Gets the cost_fields of this ModelerModel.  # noqa: E501


        :return: The cost_fields of this ModelerModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._cost_fields

    @cost_fields.setter
    def cost_fields(self, cost_fields):
        """Sets the cost_fields of this ModelerModel.


        :param cost_fields: The cost_fields of this ModelerModel.  # noqa: E501
        :type: list[str]
        """

        self._cost_fields = cost_fields

    @property
    def benefits_fields(self):
        """Gets the benefits_fields of this ModelerModel.  # noqa: E501


        :return: The benefits_fields of this ModelerModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._benefits_fields

    @benefits_fields.setter
    def benefits_fields(self, benefits_fields):
        """Sets the benefits_fields of this ModelerModel.


        :param benefits_fields: The benefits_fields of this ModelerModel.  # noqa: E501
        :type: list[str]
        """

        self._benefits_fields = benefits_fields

    @property
    def sort_field(self):
        """Gets the sort_field of this ModelerModel.  # noqa: E501


        :return: The sort_field of this ModelerModel.  # noqa: E501
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this ModelerModel.


        :param sort_field: The sort_field of this ModelerModel.  # noqa: E501
        :type: str
        """

        self._sort_field = sort_field

    @property
    def sort_direction(self):
        """Gets the sort_direction of this ModelerModel.  # noqa: E501


        :return: The sort_direction of this ModelerModel.  # noqa: E501
        :rtype: SortByDirection
        """
        return self._sort_direction

    @sort_direction.setter
    def sort_direction(self, sort_direction):
        """Sets the sort_direction of this ModelerModel.


        :param sort_direction: The sort_direction of this ModelerModel.  # noqa: E501
        :type: SortByDirection
        """

        self._sort_direction = sort_direction

    @property
    def cost_types(self):
        """Gets the cost_types of this ModelerModel.  # noqa: E501


        :return: The cost_types of this ModelerModel.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._cost_types

    @cost_types.setter
    def cost_types(self, cost_types):
        """Sets the cost_types of this ModelerModel.


        :param cost_types: The cost_types of this ModelerModel.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._cost_types = cost_types

    @property
    def user_list(self):
        """Gets the user_list of this ModelerModel.  # noqa: E501


        :return: The user_list of this ModelerModel.  # noqa: E501
        :rtype: list[User]
        """
        return self._user_list

    @user_list.setter
    def user_list(self, user_list):
        """Sets the user_list of this ModelerModel.


        :param user_list: The user_list of this ModelerModel.  # noqa: E501
        :type: list[User]
        """

        self._user_list = user_list

    @property
    def inherited_user_list(self):
        """Gets the inherited_user_list of this ModelerModel.  # noqa: E501


        :return: The inherited_user_list of this ModelerModel.  # noqa: E501
        :rtype: list[User]
        """
        return self._inherited_user_list

    @inherited_user_list.setter
    def inherited_user_list(self, inherited_user_list):
        """Sets the inherited_user_list of this ModelerModel.


        :param inherited_user_list: The inherited_user_list of this ModelerModel.  # noqa: E501
        :type: list[User]
        """

        self._inherited_user_list = inherited_user_list

    @property
    def parent_id(self):
        """Gets the parent_id of this ModelerModel.  # noqa: E501


        :return: The parent_id of this ModelerModel.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ModelerModel.


        :param parent_id: The parent_id of this ModelerModel.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._parent_id = parent_id

    @property
    def views(self):
        """Gets the views of this ModelerModel.  # noqa: E501


        :return: The views of this ModelerModel.  # noqa: E501
        :rtype: list[ModelView]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this ModelerModel.


        :param views: The views of this ModelerModel.  # noqa: E501
        :type: list[ModelView]
        """

        self._views = views

    @property
    def last_cost_planner_targets(self):
        """Gets the last_cost_planner_targets of this ModelerModel.  # noqa: E501


        :return: The last_cost_planner_targets of this ModelerModel.  # noqa: E501
        :rtype: list[ScenarioCostTarget]
        """
        return self._last_cost_planner_targets

    @last_cost_planner_targets.setter
    def last_cost_planner_targets(self, last_cost_planner_targets):
        """Sets the last_cost_planner_targets of this ModelerModel.


        :param last_cost_planner_targets: The last_cost_planner_targets of this ModelerModel.  # noqa: E501
        :type: list[ScenarioCostTarget]
        """

        self._last_cost_planner_targets = last_cost_planner_targets

    @property
    def cascading_lookup_selections(self):
        """Gets the cascading_lookup_selections of this ModelerModel.  # noqa: E501


        :return: The cascading_lookup_selections of this ModelerModel.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._cascading_lookup_selections

    @cascading_lookup_selections.setter
    def cascading_lookup_selections(self, cascading_lookup_selections):
        """Sets the cascading_lookup_selections of this ModelerModel.


        :param cascading_lookup_selections: The cascading_lookup_selections of this ModelerModel.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._cascading_lookup_selections = cascading_lookup_selections

    @property
    def cascading_lookup_field(self):
        """Gets the cascading_lookup_field of this ModelerModel.  # noqa: E501


        :return: The cascading_lookup_field of this ModelerModel.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._cascading_lookup_field

    @cascading_lookup_field.setter
    def cascading_lookup_field(self, cascading_lookup_field):
        """Sets the cascading_lookup_field of this ModelerModel.


        :param cascading_lookup_field: The cascading_lookup_field of this ModelerModel.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._cascading_lookup_field = cascading_lookup_field

    @property
    def clone_operation(self):
        """Gets the clone_operation of this ModelerModel.  # noqa: E501


        :return: The clone_operation of this ModelerModel.  # noqa: E501
        :rtype: bool
        """
        return self._clone_operation

    @clone_operation.setter
    def clone_operation(self, clone_operation):
        """Sets the clone_operation of this ModelerModel.


        :param clone_operation: The clone_operation of this ModelerModel.  # noqa: E501
        :type: bool
        """

        self._clone_operation = clone_operation

    @property
    def id(self):
        """Gets the id of this ModelerModel.  # noqa: E501


        :return: The id of this ModelerModel.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelerModel.


        :param id: The id of this ModelerModel.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this ModelerModel.  # noqa: E501


        :return: The config_id of this ModelerModel.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this ModelerModel.


        :param config_id: The config_id of this ModelerModel.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelerModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelerModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
