# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'list': 'EventList',
        'event_url': 'str',
        'integration_id': 'GloballyUniqueIdentifier',
        'strategy': 'str',
        'triggers': 'list[EventTrigger]',
        'filter': 'str',
        'type': 'EventType'
    }

    attribute_map = {
        'list': 'List',
        'event_url': 'EventUrl',
        'integration_id': 'IntegrationId',
        'strategy': 'Strategy',
        'triggers': 'Triggers',
        'filter': 'Filter',
        'type': 'Type'
    }

    def __init__(self, list=None, event_url=None, integration_id=None, strategy=None, triggers=None, filter=None, type=None):  # noqa: E501
        """EventPost - a model defined in Swagger"""  # noqa: E501
        self._list = None
        self._event_url = None
        self._integration_id = None
        self._strategy = None
        self._triggers = None
        self._filter = None
        self._type = None
        self.discriminator = None
        if list is not None:
            self.list = list
        if event_url is not None:
            self.event_url = event_url
        if integration_id is not None:
            self.integration_id = integration_id
        if strategy is not None:
            self.strategy = strategy
        if triggers is not None:
            self.triggers = triggers
        if filter is not None:
            self.filter = filter
        if type is not None:
            self.type = type

    @property
    def list(self):
        """Gets the list of this EventPost.  # noqa: E501


        :return: The list of this EventPost.  # noqa: E501
        :rtype: EventList
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this EventPost.


        :param list: The list of this EventPost.  # noqa: E501
        :type: EventList
        """

        self._list = list

    @property
    def event_url(self):
        """Gets the event_url of this EventPost.  # noqa: E501


        :return: The event_url of this EventPost.  # noqa: E501
        :rtype: str
        """
        return self._event_url

    @event_url.setter
    def event_url(self, event_url):
        """Sets the event_url of this EventPost.


        :param event_url: The event_url of this EventPost.  # noqa: E501
        :type: str
        """

        self._event_url = event_url

    @property
    def integration_id(self):
        """Gets the integration_id of this EventPost.  # noqa: E501


        :return: The integration_id of this EventPost.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this EventPost.


        :param integration_id: The integration_id of this EventPost.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._integration_id = integration_id

    @property
    def strategy(self):
        """Gets the strategy of this EventPost.  # noqa: E501


        :return: The strategy of this EventPost.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this EventPost.


        :param strategy: The strategy of this EventPost.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    @property
    def triggers(self):
        """Gets the triggers of this EventPost.  # noqa: E501


        :return: The triggers of this EventPost.  # noqa: E501
        :rtype: list[EventTrigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this EventPost.


        :param triggers: The triggers of this EventPost.  # noqa: E501
        :type: list[EventTrigger]
        """

        self._triggers = triggers

    @property
    def filter(self):
        """Gets the filter of this EventPost.  # noqa: E501


        :return: The filter of this EventPost.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this EventPost.


        :param filter: The filter of this EventPost.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def type(self):
        """Gets the type of this EventPost.  # noqa: E501


        :return: The type of this EventPost.  # noqa: E501
        :rtype: EventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventPost.


        :param type: The type of this EventPost.  # noqa: E501
        :type: EventType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
