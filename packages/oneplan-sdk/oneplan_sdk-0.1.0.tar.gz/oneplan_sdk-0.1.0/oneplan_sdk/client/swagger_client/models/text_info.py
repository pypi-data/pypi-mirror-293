# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TextInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ansi_code_page': 'int',
        'oem_code_page': 'int',
        'mac_code_page': 'int',
        'ebcdic_code_page': 'int',
        'lcid': 'int',
        'culture_name': 'str',
        'is_read_only': 'bool',
        'list_separator': 'str',
        'is_right_to_left': 'bool'
    }

    attribute_map = {
        'ansi_code_page': 'ANSICodePage',
        'oem_code_page': 'OEMCodePage',
        'mac_code_page': 'MacCodePage',
        'ebcdic_code_page': 'EBCDICCodePage',
        'lcid': 'LCID',
        'culture_name': 'CultureName',
        'is_read_only': 'IsReadOnly',
        'list_separator': 'ListSeparator',
        'is_right_to_left': 'IsRightToLeft'
    }

    def __init__(self, ansi_code_page=None, oem_code_page=None, mac_code_page=None, ebcdic_code_page=None, lcid=None, culture_name=None, is_read_only=None, list_separator=None, is_right_to_left=None):  # noqa: E501
        """TextInfo - a model defined in Swagger"""  # noqa: E501
        self._ansi_code_page = None
        self._oem_code_page = None
        self._mac_code_page = None
        self._ebcdic_code_page = None
        self._lcid = None
        self._culture_name = None
        self._is_read_only = None
        self._list_separator = None
        self._is_right_to_left = None
        self.discriminator = None
        if ansi_code_page is not None:
            self.ansi_code_page = ansi_code_page
        if oem_code_page is not None:
            self.oem_code_page = oem_code_page
        if mac_code_page is not None:
            self.mac_code_page = mac_code_page
        if ebcdic_code_page is not None:
            self.ebcdic_code_page = ebcdic_code_page
        if lcid is not None:
            self.lcid = lcid
        if culture_name is not None:
            self.culture_name = culture_name
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if list_separator is not None:
            self.list_separator = list_separator
        if is_right_to_left is not None:
            self.is_right_to_left = is_right_to_left

    @property
    def ansi_code_page(self):
        """Gets the ansi_code_page of this TextInfo.  # noqa: E501


        :return: The ansi_code_page of this TextInfo.  # noqa: E501
        :rtype: int
        """
        return self._ansi_code_page

    @ansi_code_page.setter
    def ansi_code_page(self, ansi_code_page):
        """Sets the ansi_code_page of this TextInfo.


        :param ansi_code_page: The ansi_code_page of this TextInfo.  # noqa: E501
        :type: int
        """

        self._ansi_code_page = ansi_code_page

    @property
    def oem_code_page(self):
        """Gets the oem_code_page of this TextInfo.  # noqa: E501


        :return: The oem_code_page of this TextInfo.  # noqa: E501
        :rtype: int
        """
        return self._oem_code_page

    @oem_code_page.setter
    def oem_code_page(self, oem_code_page):
        """Sets the oem_code_page of this TextInfo.


        :param oem_code_page: The oem_code_page of this TextInfo.  # noqa: E501
        :type: int
        """

        self._oem_code_page = oem_code_page

    @property
    def mac_code_page(self):
        """Gets the mac_code_page of this TextInfo.  # noqa: E501


        :return: The mac_code_page of this TextInfo.  # noqa: E501
        :rtype: int
        """
        return self._mac_code_page

    @mac_code_page.setter
    def mac_code_page(self, mac_code_page):
        """Sets the mac_code_page of this TextInfo.


        :param mac_code_page: The mac_code_page of this TextInfo.  # noqa: E501
        :type: int
        """

        self._mac_code_page = mac_code_page

    @property
    def ebcdic_code_page(self):
        """Gets the ebcdic_code_page of this TextInfo.  # noqa: E501


        :return: The ebcdic_code_page of this TextInfo.  # noqa: E501
        :rtype: int
        """
        return self._ebcdic_code_page

    @ebcdic_code_page.setter
    def ebcdic_code_page(self, ebcdic_code_page):
        """Sets the ebcdic_code_page of this TextInfo.


        :param ebcdic_code_page: The ebcdic_code_page of this TextInfo.  # noqa: E501
        :type: int
        """

        self._ebcdic_code_page = ebcdic_code_page

    @property
    def lcid(self):
        """Gets the lcid of this TextInfo.  # noqa: E501


        :return: The lcid of this TextInfo.  # noqa: E501
        :rtype: int
        """
        return self._lcid

    @lcid.setter
    def lcid(self, lcid):
        """Sets the lcid of this TextInfo.


        :param lcid: The lcid of this TextInfo.  # noqa: E501
        :type: int
        """

        self._lcid = lcid

    @property
    def culture_name(self):
        """Gets the culture_name of this TextInfo.  # noqa: E501


        :return: The culture_name of this TextInfo.  # noqa: E501
        :rtype: str
        """
        return self._culture_name

    @culture_name.setter
    def culture_name(self, culture_name):
        """Sets the culture_name of this TextInfo.


        :param culture_name: The culture_name of this TextInfo.  # noqa: E501
        :type: str
        """

        self._culture_name = culture_name

    @property
    def is_read_only(self):
        """Gets the is_read_only of this TextInfo.  # noqa: E501


        :return: The is_read_only of this TextInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this TextInfo.


        :param is_read_only: The is_read_only of this TextInfo.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def list_separator(self):
        """Gets the list_separator of this TextInfo.  # noqa: E501


        :return: The list_separator of this TextInfo.  # noqa: E501
        :rtype: str
        """
        return self._list_separator

    @list_separator.setter
    def list_separator(self, list_separator):
        """Sets the list_separator of this TextInfo.


        :param list_separator: The list_separator of this TextInfo.  # noqa: E501
        :type: str
        """

        self._list_separator = list_separator

    @property
    def is_right_to_left(self):
        """Gets the is_right_to_left of this TextInfo.  # noqa: E501


        :return: The is_right_to_left of this TextInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_right_to_left

    @is_right_to_left.setter
    def is_right_to_left(self, is_right_to_left):
        """Sets the is_right_to_left of this TextInfo.


        :param is_right_to_left: The is_right_to_left of this TextInfo.  # noqa: E501
        :type: bool
        """

        self._is_right_to_left = is_right_to_left

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TextInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
