# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkLogPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_id': 'GloballyUniqueIdentifier',
        'external_id': 'str',
        'integration_id': 'GloballyUniqueIdentifier',
        'log_date': 'date',
        'hours': 'dict(str, DecimalNumber)'
    }

    attribute_map = {
        'task_id': 'TaskId',
        'external_id': 'ExternalId',
        'integration_id': 'IntegrationId',
        'log_date': 'LogDate',
        'hours': 'Hours'
    }

    def __init__(self, task_id=None, external_id=None, integration_id=None, log_date=None, hours=None):  # noqa: E501
        """WorkLogPost - a model defined in Swagger"""  # noqa: E501
        self._task_id = None
        self._external_id = None
        self._integration_id = None
        self._log_date = None
        self._hours = None
        self.discriminator = None
        if task_id is not None:
            self.task_id = task_id
        if external_id is not None:
            self.external_id = external_id
        if integration_id is not None:
            self.integration_id = integration_id
        if log_date is not None:
            self.log_date = log_date
        if hours is not None:
            self.hours = hours

    @property
    def task_id(self):
        """Gets the task_id of this WorkLogPost.  # noqa: E501


        :return: The task_id of this WorkLogPost.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this WorkLogPost.


        :param task_id: The task_id of this WorkLogPost.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._task_id = task_id

    @property
    def external_id(self):
        """Gets the external_id of this WorkLogPost.  # noqa: E501


        :return: The external_id of this WorkLogPost.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this WorkLogPost.


        :param external_id: The external_id of this WorkLogPost.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def integration_id(self):
        """Gets the integration_id of this WorkLogPost.  # noqa: E501


        :return: The integration_id of this WorkLogPost.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this WorkLogPost.


        :param integration_id: The integration_id of this WorkLogPost.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._integration_id = integration_id

    @property
    def log_date(self):
        """Gets the log_date of this WorkLogPost.  # noqa: E501


        :return: The log_date of this WorkLogPost.  # noqa: E501
        :rtype: date
        """
        return self._log_date

    @log_date.setter
    def log_date(self, log_date):
        """Sets the log_date of this WorkLogPost.


        :param log_date: The log_date of this WorkLogPost.  # noqa: E501
        :type: date
        """

        self._log_date = log_date

    @property
    def hours(self):
        """Gets the hours of this WorkLogPost.  # noqa: E501


        :return: The hours of this WorkLogPost.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this WorkLogPost.


        :param hours: The hours of this WorkLogPost.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._hours = hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkLogPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkLogPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
