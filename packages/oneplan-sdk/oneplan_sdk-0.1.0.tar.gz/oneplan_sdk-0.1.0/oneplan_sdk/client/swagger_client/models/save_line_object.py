# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaveLineObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timesheet_line_id': 'GloballyUniqueIdentifier',
        'post_date': 'date',
        'hours': 'dict(str, DecimalNumber)',
        'fields': 'dict(str, Object)',
        'notes': 'str',
        'user_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'timesheet_line_id': 'TimesheetLineId',
        'post_date': 'PostDate',
        'hours': 'Hours',
        'fields': 'Fields',
        'notes': 'Notes',
        'user_id': 'UserId'
    }

    def __init__(self, timesheet_line_id=None, post_date=None, hours=None, fields=None, notes=None, user_id=None):  # noqa: E501
        """SaveLineObject - a model defined in Swagger"""  # noqa: E501
        self._timesheet_line_id = None
        self._post_date = None
        self._hours = None
        self._fields = None
        self._notes = None
        self._user_id = None
        self.discriminator = None
        if timesheet_line_id is not None:
            self.timesheet_line_id = timesheet_line_id
        if post_date is not None:
            self.post_date = post_date
        if hours is not None:
            self.hours = hours
        if fields is not None:
            self.fields = fields
        if notes is not None:
            self.notes = notes
        if user_id is not None:
            self.user_id = user_id

    @property
    def timesheet_line_id(self):
        """Gets the timesheet_line_id of this SaveLineObject.  # noqa: E501


        :return: The timesheet_line_id of this SaveLineObject.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._timesheet_line_id

    @timesheet_line_id.setter
    def timesheet_line_id(self, timesheet_line_id):
        """Sets the timesheet_line_id of this SaveLineObject.


        :param timesheet_line_id: The timesheet_line_id of this SaveLineObject.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._timesheet_line_id = timesheet_line_id

    @property
    def post_date(self):
        """Gets the post_date of this SaveLineObject.  # noqa: E501


        :return: The post_date of this SaveLineObject.  # noqa: E501
        :rtype: date
        """
        return self._post_date

    @post_date.setter
    def post_date(self, post_date):
        """Sets the post_date of this SaveLineObject.


        :param post_date: The post_date of this SaveLineObject.  # noqa: E501
        :type: date
        """

        self._post_date = post_date

    @property
    def hours(self):
        """Gets the hours of this SaveLineObject.  # noqa: E501


        :return: The hours of this SaveLineObject.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this SaveLineObject.


        :param hours: The hours of this SaveLineObject.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._hours = hours

    @property
    def fields(self):
        """Gets the fields of this SaveLineObject.  # noqa: E501


        :return: The fields of this SaveLineObject.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SaveLineObject.


        :param fields: The fields of this SaveLineObject.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def notes(self):
        """Gets the notes of this SaveLineObject.  # noqa: E501


        :return: The notes of this SaveLineObject.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SaveLineObject.


        :param notes: The notes of this SaveLineObject.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def user_id(self):
        """Gets the user_id of this SaveLineObject.  # noqa: E501


        :return: The user_id of this SaveLineObject.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SaveLineObject.


        :param user_id: The user_id of this SaveLineObject.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveLineObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveLineObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
