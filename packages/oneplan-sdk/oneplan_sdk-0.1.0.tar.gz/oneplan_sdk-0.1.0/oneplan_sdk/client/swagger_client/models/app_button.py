# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppButton(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'icon': 'str',
        'button_html': 'str',
        'location': 'ButtonLocation',
        'button_order': 'int',
        'dialog': 'bool',
        'parent_menu': 'str'
    }

    attribute_map = {
        'title': 'Title',
        'icon': 'Icon',
        'button_html': 'ButtonHtml',
        'location': 'Location',
        'button_order': 'ButtonOrder',
        'dialog': 'Dialog',
        'parent_menu': 'ParentMenu'
    }

    def __init__(self, title=None, icon=None, button_html=None, location=None, button_order=None, dialog=None, parent_menu=None):  # noqa: E501
        """AppButton - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._icon = None
        self._button_html = None
        self._location = None
        self._button_order = None
        self._dialog = None
        self._parent_menu = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if icon is not None:
            self.icon = icon
        if button_html is not None:
            self.button_html = button_html
        if location is not None:
            self.location = location
        if button_order is not None:
            self.button_order = button_order
        if dialog is not None:
            self.dialog = dialog
        if parent_menu is not None:
            self.parent_menu = parent_menu

    @property
    def title(self):
        """Gets the title of this AppButton.  # noqa: E501


        :return: The title of this AppButton.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AppButton.


        :param title: The title of this AppButton.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def icon(self):
        """Gets the icon of this AppButton.  # noqa: E501


        :return: The icon of this AppButton.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AppButton.


        :param icon: The icon of this AppButton.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def button_html(self):
        """Gets the button_html of this AppButton.  # noqa: E501


        :return: The button_html of this AppButton.  # noqa: E501
        :rtype: str
        """
        return self._button_html

    @button_html.setter
    def button_html(self, button_html):
        """Sets the button_html of this AppButton.


        :param button_html: The button_html of this AppButton.  # noqa: E501
        :type: str
        """

        self._button_html = button_html

    @property
    def location(self):
        """Gets the location of this AppButton.  # noqa: E501


        :return: The location of this AppButton.  # noqa: E501
        :rtype: ButtonLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AppButton.


        :param location: The location of this AppButton.  # noqa: E501
        :type: ButtonLocation
        """

        self._location = location

    @property
    def button_order(self):
        """Gets the button_order of this AppButton.  # noqa: E501


        :return: The button_order of this AppButton.  # noqa: E501
        :rtype: int
        """
        return self._button_order

    @button_order.setter
    def button_order(self, button_order):
        """Sets the button_order of this AppButton.


        :param button_order: The button_order of this AppButton.  # noqa: E501
        :type: int
        """

        self._button_order = button_order

    @property
    def dialog(self):
        """Gets the dialog of this AppButton.  # noqa: E501


        :return: The dialog of this AppButton.  # noqa: E501
        :rtype: bool
        """
        return self._dialog

    @dialog.setter
    def dialog(self, dialog):
        """Sets the dialog of this AppButton.


        :param dialog: The dialog of this AppButton.  # noqa: E501
        :type: bool
        """

        self._dialog = dialog

    @property
    def parent_menu(self):
        """Gets the parent_menu of this AppButton.  # noqa: E501


        :return: The parent_menu of this AppButton.  # noqa: E501
        :rtype: str
        """
        return self._parent_menu

    @parent_menu.setter
    def parent_menu(self, parent_menu):
        """Sets the parent_menu of this AppButton.


        :param parent_menu: The parent_menu of this AppButton.  # noqa: E501
        :type: str
        """

        self._parent_menu = parent_menu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppButton, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppButton):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
