# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'case_sensitive': 'bool',
        'is_initialized': 'bool',
        'remoting_format': 'SerializationFormat',
        'child_relations': 'list[Object]',
        'columns': 'list[Object]',
        'constraints': 'list[Object]',
        'data_set': 'DataSet',
        'default_view': 'list[Object]',
        'display_expression': 'str',
        'extended_properties': 'dict(str, Object)',
        'has_errors': 'bool',
        'locale': 'CultureInfo',
        'minimum_capacity': 'int',
        'parent_relations': 'list[Object]',
        'primary_key': 'list[DataColumn]',
        'rows': 'list[Object]',
        'table_name': 'str',
        'namespace': 'str',
        'prefix': 'str',
        'site': 'ISite',
        'container': 'IContainer',
        'design_mode': 'bool'
    }

    attribute_map = {
        'case_sensitive': 'CaseSensitive',
        'is_initialized': 'IsInitialized',
        'remoting_format': 'RemotingFormat',
        'child_relations': 'ChildRelations',
        'columns': 'Columns',
        'constraints': 'Constraints',
        'data_set': 'DataSet',
        'default_view': 'DefaultView',
        'display_expression': 'DisplayExpression',
        'extended_properties': 'ExtendedProperties',
        'has_errors': 'HasErrors',
        'locale': 'Locale',
        'minimum_capacity': 'MinimumCapacity',
        'parent_relations': 'ParentRelations',
        'primary_key': 'PrimaryKey',
        'rows': 'Rows',
        'table_name': 'TableName',
        'namespace': 'Namespace',
        'prefix': 'Prefix',
        'site': 'Site',
        'container': 'Container',
        'design_mode': 'DesignMode'
    }

    def __init__(self, case_sensitive=None, is_initialized=None, remoting_format=None, child_relations=None, columns=None, constraints=None, data_set=None, default_view=None, display_expression=None, extended_properties=None, has_errors=None, locale=None, minimum_capacity=None, parent_relations=None, primary_key=None, rows=None, table_name=None, namespace=None, prefix=None, site=None, container=None, design_mode=None):  # noqa: E501
        """DataTable - a model defined in Swagger"""  # noqa: E501
        self._case_sensitive = None
        self._is_initialized = None
        self._remoting_format = None
        self._child_relations = None
        self._columns = None
        self._constraints = None
        self._data_set = None
        self._default_view = None
        self._display_expression = None
        self._extended_properties = None
        self._has_errors = None
        self._locale = None
        self._minimum_capacity = None
        self._parent_relations = None
        self._primary_key = None
        self._rows = None
        self._table_name = None
        self._namespace = None
        self._prefix = None
        self._site = None
        self._container = None
        self._design_mode = None
        self.discriminator = None
        if case_sensitive is not None:
            self.case_sensitive = case_sensitive
        if is_initialized is not None:
            self.is_initialized = is_initialized
        if remoting_format is not None:
            self.remoting_format = remoting_format
        if child_relations is not None:
            self.child_relations = child_relations
        if columns is not None:
            self.columns = columns
        if constraints is not None:
            self.constraints = constraints
        if data_set is not None:
            self.data_set = data_set
        if default_view is not None:
            self.default_view = default_view
        if display_expression is not None:
            self.display_expression = display_expression
        if extended_properties is not None:
            self.extended_properties = extended_properties
        if has_errors is not None:
            self.has_errors = has_errors
        if locale is not None:
            self.locale = locale
        if minimum_capacity is not None:
            self.minimum_capacity = minimum_capacity
        if parent_relations is not None:
            self.parent_relations = parent_relations
        if primary_key is not None:
            self.primary_key = primary_key
        if rows is not None:
            self.rows = rows
        if table_name is not None:
            self.table_name = table_name
        if namespace is not None:
            self.namespace = namespace
        if prefix is not None:
            self.prefix = prefix
        if site is not None:
            self.site = site
        if container is not None:
            self.container = container
        if design_mode is not None:
            self.design_mode = design_mode

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this DataTable.  # noqa: E501


        :return: The case_sensitive of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this DataTable.


        :param case_sensitive: The case_sensitive of this DataTable.  # noqa: E501
        :type: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def is_initialized(self):
        """Gets the is_initialized of this DataTable.  # noqa: E501


        :return: The is_initialized of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._is_initialized

    @is_initialized.setter
    def is_initialized(self, is_initialized):
        """Sets the is_initialized of this DataTable.


        :param is_initialized: The is_initialized of this DataTable.  # noqa: E501
        :type: bool
        """

        self._is_initialized = is_initialized

    @property
    def remoting_format(self):
        """Gets the remoting_format of this DataTable.  # noqa: E501


        :return: The remoting_format of this DataTable.  # noqa: E501
        :rtype: SerializationFormat
        """
        return self._remoting_format

    @remoting_format.setter
    def remoting_format(self, remoting_format):
        """Sets the remoting_format of this DataTable.


        :param remoting_format: The remoting_format of this DataTable.  # noqa: E501
        :type: SerializationFormat
        """

        self._remoting_format = remoting_format

    @property
    def child_relations(self):
        """Gets the child_relations of this DataTable.  # noqa: E501


        :return: The child_relations of this DataTable.  # noqa: E501
        :rtype: list[Object]
        """
        return self._child_relations

    @child_relations.setter
    def child_relations(self, child_relations):
        """Sets the child_relations of this DataTable.


        :param child_relations: The child_relations of this DataTable.  # noqa: E501
        :type: list[Object]
        """

        self._child_relations = child_relations

    @property
    def columns(self):
        """Gets the columns of this DataTable.  # noqa: E501


        :return: The columns of this DataTable.  # noqa: E501
        :rtype: list[Object]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DataTable.


        :param columns: The columns of this DataTable.  # noqa: E501
        :type: list[Object]
        """

        self._columns = columns

    @property
    def constraints(self):
        """Gets the constraints of this DataTable.  # noqa: E501


        :return: The constraints of this DataTable.  # noqa: E501
        :rtype: list[Object]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this DataTable.


        :param constraints: The constraints of this DataTable.  # noqa: E501
        :type: list[Object]
        """

        self._constraints = constraints

    @property
    def data_set(self):
        """Gets the data_set of this DataTable.  # noqa: E501


        :return: The data_set of this DataTable.  # noqa: E501
        :rtype: DataSet
        """
        return self._data_set

    @data_set.setter
    def data_set(self, data_set):
        """Sets the data_set of this DataTable.


        :param data_set: The data_set of this DataTable.  # noqa: E501
        :type: DataSet
        """

        self._data_set = data_set

    @property
    def default_view(self):
        """Gets the default_view of this DataTable.  # noqa: E501


        :return: The default_view of this DataTable.  # noqa: E501
        :rtype: list[Object]
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view):
        """Sets the default_view of this DataTable.


        :param default_view: The default_view of this DataTable.  # noqa: E501
        :type: list[Object]
        """

        self._default_view = default_view

    @property
    def display_expression(self):
        """Gets the display_expression of this DataTable.  # noqa: E501


        :return: The display_expression of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._display_expression

    @display_expression.setter
    def display_expression(self, display_expression):
        """Sets the display_expression of this DataTable.


        :param display_expression: The display_expression of this DataTable.  # noqa: E501
        :type: str
        """

        self._display_expression = display_expression

    @property
    def extended_properties(self):
        """Gets the extended_properties of this DataTable.  # noqa: E501


        :return: The extended_properties of this DataTable.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this DataTable.


        :param extended_properties: The extended_properties of this DataTable.  # noqa: E501
        :type: dict(str, Object)
        """

        self._extended_properties = extended_properties

    @property
    def has_errors(self):
        """Gets the has_errors of this DataTable.  # noqa: E501


        :return: The has_errors of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._has_errors

    @has_errors.setter
    def has_errors(self, has_errors):
        """Sets the has_errors of this DataTable.


        :param has_errors: The has_errors of this DataTable.  # noqa: E501
        :type: bool
        """

        self._has_errors = has_errors

    @property
    def locale(self):
        """Gets the locale of this DataTable.  # noqa: E501


        :return: The locale of this DataTable.  # noqa: E501
        :rtype: CultureInfo
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this DataTable.


        :param locale: The locale of this DataTable.  # noqa: E501
        :type: CultureInfo
        """

        self._locale = locale

    @property
    def minimum_capacity(self):
        """Gets the minimum_capacity of this DataTable.  # noqa: E501


        :return: The minimum_capacity of this DataTable.  # noqa: E501
        :rtype: int
        """
        return self._minimum_capacity

    @minimum_capacity.setter
    def minimum_capacity(self, minimum_capacity):
        """Sets the minimum_capacity of this DataTable.


        :param minimum_capacity: The minimum_capacity of this DataTable.  # noqa: E501
        :type: int
        """

        self._minimum_capacity = minimum_capacity

    @property
    def parent_relations(self):
        """Gets the parent_relations of this DataTable.  # noqa: E501


        :return: The parent_relations of this DataTable.  # noqa: E501
        :rtype: list[Object]
        """
        return self._parent_relations

    @parent_relations.setter
    def parent_relations(self, parent_relations):
        """Sets the parent_relations of this DataTable.


        :param parent_relations: The parent_relations of this DataTable.  # noqa: E501
        :type: list[Object]
        """

        self._parent_relations = parent_relations

    @property
    def primary_key(self):
        """Gets the primary_key of this DataTable.  # noqa: E501


        :return: The primary_key of this DataTable.  # noqa: E501
        :rtype: list[DataColumn]
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this DataTable.


        :param primary_key: The primary_key of this DataTable.  # noqa: E501
        :type: list[DataColumn]
        """

        self._primary_key = primary_key

    @property
    def rows(self):
        """Gets the rows of this DataTable.  # noqa: E501


        :return: The rows of this DataTable.  # noqa: E501
        :rtype: list[Object]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this DataTable.


        :param rows: The rows of this DataTable.  # noqa: E501
        :type: list[Object]
        """

        self._rows = rows

    @property
    def table_name(self):
        """Gets the table_name of this DataTable.  # noqa: E501


        :return: The table_name of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DataTable.


        :param table_name: The table_name of this DataTable.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def namespace(self):
        """Gets the namespace of this DataTable.  # noqa: E501


        :return: The namespace of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DataTable.


        :param namespace: The namespace of this DataTable.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def prefix(self):
        """Gets the prefix of this DataTable.  # noqa: E501


        :return: The prefix of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this DataTable.


        :param prefix: The prefix of this DataTable.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def site(self):
        """Gets the site of this DataTable.  # noqa: E501


        :return: The site of this DataTable.  # noqa: E501
        :rtype: ISite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this DataTable.


        :param site: The site of this DataTable.  # noqa: E501
        :type: ISite
        """

        self._site = site

    @property
    def container(self):
        """Gets the container of this DataTable.  # noqa: E501


        :return: The container of this DataTable.  # noqa: E501
        :rtype: IContainer
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this DataTable.


        :param container: The container of this DataTable.  # noqa: E501
        :type: IContainer
        """

        self._container = container

    @property
    def design_mode(self):
        """Gets the design_mode of this DataTable.  # noqa: E501


        :return: The design_mode of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._design_mode

    @design_mode.setter
    def design_mode(self, design_mode):
        """Sets the design_mode of this DataTable.


        :param design_mode: The design_mode of this DataTable.  # noqa: E501
        :type: bool
        """

        self._design_mode = design_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
