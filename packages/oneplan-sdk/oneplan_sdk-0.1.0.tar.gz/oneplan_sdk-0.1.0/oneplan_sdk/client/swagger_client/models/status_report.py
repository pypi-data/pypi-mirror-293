# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'generation_date': 'date',
        'submit_date': 'date',
        'report_period_start': 'date',
        'report_period_end': 'date',
        'state': 'StatusReportState',
        'fields': 'dict(str, Object)',
        'tables': 'list[StatusReportTable]',
        'owners': 'list[GloballyUniqueIdentifier]',
        'approvers': 'list[GloballyUniqueIdentifier]',
        'approved_by': 'GloballyUniqueIdentifier',
        'approval_date': 'date',
        'approval_comments': 'str',
        'work_plan_id': 'GloballyUniqueIdentifier',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'generation_date': 'GenerationDate',
        'submit_date': 'SubmitDate',
        'report_period_start': 'ReportPeriodStart',
        'report_period_end': 'ReportPeriodEnd',
        'state': 'State',
        'fields': 'Fields',
        'tables': 'Tables',
        'owners': 'Owners',
        'approvers': 'Approvers',
        'approved_by': 'ApprovedBy',
        'approval_date': 'ApprovalDate',
        'approval_comments': 'ApprovalComments',
        'work_plan_id': 'WorkPlanId',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, generation_date=None, submit_date=None, report_period_start=None, report_period_end=None, state=None, fields=None, tables=None, owners=None, approvers=None, approved_by=None, approval_date=None, approval_comments=None, work_plan_id=None, id=None, config_id=None):  # noqa: E501
        """StatusReport - a model defined in Swagger"""  # noqa: E501
        self._generation_date = None
        self._submit_date = None
        self._report_period_start = None
        self._report_period_end = None
        self._state = None
        self._fields = None
        self._tables = None
        self._owners = None
        self._approvers = None
        self._approved_by = None
        self._approval_date = None
        self._approval_comments = None
        self._work_plan_id = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if generation_date is not None:
            self.generation_date = generation_date
        if submit_date is not None:
            self.submit_date = submit_date
        if report_period_start is not None:
            self.report_period_start = report_period_start
        if report_period_end is not None:
            self.report_period_end = report_period_end
        if state is not None:
            self.state = state
        if fields is not None:
            self.fields = fields
        if tables is not None:
            self.tables = tables
        if owners is not None:
            self.owners = owners
        if approvers is not None:
            self.approvers = approvers
        if approved_by is not None:
            self.approved_by = approved_by
        if approval_date is not None:
            self.approval_date = approval_date
        if approval_comments is not None:
            self.approval_comments = approval_comments
        if work_plan_id is not None:
            self.work_plan_id = work_plan_id
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def generation_date(self):
        """Gets the generation_date of this StatusReport.  # noqa: E501


        :return: The generation_date of this StatusReport.  # noqa: E501
        :rtype: date
        """
        return self._generation_date

    @generation_date.setter
    def generation_date(self, generation_date):
        """Sets the generation_date of this StatusReport.


        :param generation_date: The generation_date of this StatusReport.  # noqa: E501
        :type: date
        """

        self._generation_date = generation_date

    @property
    def submit_date(self):
        """Gets the submit_date of this StatusReport.  # noqa: E501


        :return: The submit_date of this StatusReport.  # noqa: E501
        :rtype: date
        """
        return self._submit_date

    @submit_date.setter
    def submit_date(self, submit_date):
        """Sets the submit_date of this StatusReport.


        :param submit_date: The submit_date of this StatusReport.  # noqa: E501
        :type: date
        """

        self._submit_date = submit_date

    @property
    def report_period_start(self):
        """Gets the report_period_start of this StatusReport.  # noqa: E501


        :return: The report_period_start of this StatusReport.  # noqa: E501
        :rtype: date
        """
        return self._report_period_start

    @report_period_start.setter
    def report_period_start(self, report_period_start):
        """Sets the report_period_start of this StatusReport.


        :param report_period_start: The report_period_start of this StatusReport.  # noqa: E501
        :type: date
        """

        self._report_period_start = report_period_start

    @property
    def report_period_end(self):
        """Gets the report_period_end of this StatusReport.  # noqa: E501


        :return: The report_period_end of this StatusReport.  # noqa: E501
        :rtype: date
        """
        return self._report_period_end

    @report_period_end.setter
    def report_period_end(self, report_period_end):
        """Sets the report_period_end of this StatusReport.


        :param report_period_end: The report_period_end of this StatusReport.  # noqa: E501
        :type: date
        """

        self._report_period_end = report_period_end

    @property
    def state(self):
        """Gets the state of this StatusReport.  # noqa: E501


        :return: The state of this StatusReport.  # noqa: E501
        :rtype: StatusReportState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StatusReport.


        :param state: The state of this StatusReport.  # noqa: E501
        :type: StatusReportState
        """

        self._state = state

    @property
    def fields(self):
        """Gets the fields of this StatusReport.  # noqa: E501


        :return: The fields of this StatusReport.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this StatusReport.


        :param fields: The fields of this StatusReport.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def tables(self):
        """Gets the tables of this StatusReport.  # noqa: E501


        :return: The tables of this StatusReport.  # noqa: E501
        :rtype: list[StatusReportTable]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this StatusReport.


        :param tables: The tables of this StatusReport.  # noqa: E501
        :type: list[StatusReportTable]
        """

        self._tables = tables

    @property
    def owners(self):
        """Gets the owners of this StatusReport.  # noqa: E501


        :return: The owners of this StatusReport.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this StatusReport.


        :param owners: The owners of this StatusReport.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._owners = owners

    @property
    def approvers(self):
        """Gets the approvers of this StatusReport.  # noqa: E501


        :return: The approvers of this StatusReport.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._approvers

    @approvers.setter
    def approvers(self, approvers):
        """Sets the approvers of this StatusReport.


        :param approvers: The approvers of this StatusReport.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._approvers = approvers

    @property
    def approved_by(self):
        """Gets the approved_by of this StatusReport.  # noqa: E501


        :return: The approved_by of this StatusReport.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._approved_by

    @approved_by.setter
    def approved_by(self, approved_by):
        """Sets the approved_by of this StatusReport.


        :param approved_by: The approved_by of this StatusReport.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._approved_by = approved_by

    @property
    def approval_date(self):
        """Gets the approval_date of this StatusReport.  # noqa: E501


        :return: The approval_date of this StatusReport.  # noqa: E501
        :rtype: date
        """
        return self._approval_date

    @approval_date.setter
    def approval_date(self, approval_date):
        """Sets the approval_date of this StatusReport.


        :param approval_date: The approval_date of this StatusReport.  # noqa: E501
        :type: date
        """

        self._approval_date = approval_date

    @property
    def approval_comments(self):
        """Gets the approval_comments of this StatusReport.  # noqa: E501


        :return: The approval_comments of this StatusReport.  # noqa: E501
        :rtype: str
        """
        return self._approval_comments

    @approval_comments.setter
    def approval_comments(self, approval_comments):
        """Sets the approval_comments of this StatusReport.


        :param approval_comments: The approval_comments of this StatusReport.  # noqa: E501
        :type: str
        """

        self._approval_comments = approval_comments

    @property
    def work_plan_id(self):
        """Gets the work_plan_id of this StatusReport.  # noqa: E501


        :return: The work_plan_id of this StatusReport.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_plan_id

    @work_plan_id.setter
    def work_plan_id(self, work_plan_id):
        """Sets the work_plan_id of this StatusReport.


        :param work_plan_id: The work_plan_id of this StatusReport.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_plan_id = work_plan_id

    @property
    def id(self):
        """Gets the id of this StatusReport.  # noqa: E501


        :return: The id of this StatusReport.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatusReport.


        :param id: The id of this StatusReport.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this StatusReport.  # noqa: E501


        :return: The config_id of this StatusReport.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this StatusReport.


        :param config_id: The config_id of this StatusReport.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
