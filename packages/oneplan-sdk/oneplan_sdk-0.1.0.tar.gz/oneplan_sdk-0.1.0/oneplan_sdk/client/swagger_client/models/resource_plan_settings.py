# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourcePlanSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date_range': 'date',
        'end_date_range': 'date',
        'zoom_level': 'int',
        'filters': 'str',
        'group_by': 'str',
        'fte_mode': 'int',
        'cost_type': 'str',
        'data_selection_resources': 'str',
        'data_selection_plans': 'str',
        'data_selection_lines': 'str',
        'visible_grid_columns': 'list[str]'
    }

    attribute_map = {
        'start_date_range': 'StartDateRange',
        'end_date_range': 'EndDateRange',
        'zoom_level': 'ZoomLevel',
        'filters': 'Filters',
        'group_by': 'GroupBy',
        'fte_mode': 'FTEMode',
        'cost_type': 'CostType',
        'data_selection_resources': 'DataSelection_Resources',
        'data_selection_plans': 'DataSelection_Plans',
        'data_selection_lines': 'DataSelection_Lines',
        'visible_grid_columns': 'VisibleGridColumns'
    }

    def __init__(self, start_date_range=None, end_date_range=None, zoom_level=None, filters=None, group_by=None, fte_mode=None, cost_type=None, data_selection_resources=None, data_selection_plans=None, data_selection_lines=None, visible_grid_columns=None):  # noqa: E501
        """ResourcePlanSettings - a model defined in Swagger"""  # noqa: E501
        self._start_date_range = None
        self._end_date_range = None
        self._zoom_level = None
        self._filters = None
        self._group_by = None
        self._fte_mode = None
        self._cost_type = None
        self._data_selection_resources = None
        self._data_selection_plans = None
        self._data_selection_lines = None
        self._visible_grid_columns = None
        self.discriminator = None
        if start_date_range is not None:
            self.start_date_range = start_date_range
        if end_date_range is not None:
            self.end_date_range = end_date_range
        if zoom_level is not None:
            self.zoom_level = zoom_level
        if filters is not None:
            self.filters = filters
        if group_by is not None:
            self.group_by = group_by
        if fte_mode is not None:
            self.fte_mode = fte_mode
        if cost_type is not None:
            self.cost_type = cost_type
        if data_selection_resources is not None:
            self.data_selection_resources = data_selection_resources
        if data_selection_plans is not None:
            self.data_selection_plans = data_selection_plans
        if data_selection_lines is not None:
            self.data_selection_lines = data_selection_lines
        if visible_grid_columns is not None:
            self.visible_grid_columns = visible_grid_columns

    @property
    def start_date_range(self):
        """Gets the start_date_range of this ResourcePlanSettings.  # noqa: E501


        :return: The start_date_range of this ResourcePlanSettings.  # noqa: E501
        :rtype: date
        """
        return self._start_date_range

    @start_date_range.setter
    def start_date_range(self, start_date_range):
        """Sets the start_date_range of this ResourcePlanSettings.


        :param start_date_range: The start_date_range of this ResourcePlanSettings.  # noqa: E501
        :type: date
        """

        self._start_date_range = start_date_range

    @property
    def end_date_range(self):
        """Gets the end_date_range of this ResourcePlanSettings.  # noqa: E501


        :return: The end_date_range of this ResourcePlanSettings.  # noqa: E501
        :rtype: date
        """
        return self._end_date_range

    @end_date_range.setter
    def end_date_range(self, end_date_range):
        """Sets the end_date_range of this ResourcePlanSettings.


        :param end_date_range: The end_date_range of this ResourcePlanSettings.  # noqa: E501
        :type: date
        """

        self._end_date_range = end_date_range

    @property
    def zoom_level(self):
        """Gets the zoom_level of this ResourcePlanSettings.  # noqa: E501


        :return: The zoom_level of this ResourcePlanSettings.  # noqa: E501
        :rtype: int
        """
        return self._zoom_level

    @zoom_level.setter
    def zoom_level(self, zoom_level):
        """Sets the zoom_level of this ResourcePlanSettings.


        :param zoom_level: The zoom_level of this ResourcePlanSettings.  # noqa: E501
        :type: int
        """

        self._zoom_level = zoom_level

    @property
    def filters(self):
        """Gets the filters of this ResourcePlanSettings.  # noqa: E501


        :return: The filters of this ResourcePlanSettings.  # noqa: E501
        :rtype: str
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ResourcePlanSettings.


        :param filters: The filters of this ResourcePlanSettings.  # noqa: E501
        :type: str
        """

        self._filters = filters

    @property
    def group_by(self):
        """Gets the group_by of this ResourcePlanSettings.  # noqa: E501


        :return: The group_by of this ResourcePlanSettings.  # noqa: E501
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this ResourcePlanSettings.


        :param group_by: The group_by of this ResourcePlanSettings.  # noqa: E501
        :type: str
        """

        self._group_by = group_by

    @property
    def fte_mode(self):
        """Gets the fte_mode of this ResourcePlanSettings.  # noqa: E501


        :return: The fte_mode of this ResourcePlanSettings.  # noqa: E501
        :rtype: int
        """
        return self._fte_mode

    @fte_mode.setter
    def fte_mode(self, fte_mode):
        """Sets the fte_mode of this ResourcePlanSettings.


        :param fte_mode: The fte_mode of this ResourcePlanSettings.  # noqa: E501
        :type: int
        """

        self._fte_mode = fte_mode

    @property
    def cost_type(self):
        """Gets the cost_type of this ResourcePlanSettings.  # noqa: E501


        :return: The cost_type of this ResourcePlanSettings.  # noqa: E501
        :rtype: str
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this ResourcePlanSettings.


        :param cost_type: The cost_type of this ResourcePlanSettings.  # noqa: E501
        :type: str
        """

        self._cost_type = cost_type

    @property
    def data_selection_resources(self):
        """Gets the data_selection_resources of this ResourcePlanSettings.  # noqa: E501


        :return: The data_selection_resources of this ResourcePlanSettings.  # noqa: E501
        :rtype: str
        """
        return self._data_selection_resources

    @data_selection_resources.setter
    def data_selection_resources(self, data_selection_resources):
        """Sets the data_selection_resources of this ResourcePlanSettings.


        :param data_selection_resources: The data_selection_resources of this ResourcePlanSettings.  # noqa: E501
        :type: str
        """

        self._data_selection_resources = data_selection_resources

    @property
    def data_selection_plans(self):
        """Gets the data_selection_plans of this ResourcePlanSettings.  # noqa: E501


        :return: The data_selection_plans of this ResourcePlanSettings.  # noqa: E501
        :rtype: str
        """
        return self._data_selection_plans

    @data_selection_plans.setter
    def data_selection_plans(self, data_selection_plans):
        """Sets the data_selection_plans of this ResourcePlanSettings.


        :param data_selection_plans: The data_selection_plans of this ResourcePlanSettings.  # noqa: E501
        :type: str
        """

        self._data_selection_plans = data_selection_plans

    @property
    def data_selection_lines(self):
        """Gets the data_selection_lines of this ResourcePlanSettings.  # noqa: E501


        :return: The data_selection_lines of this ResourcePlanSettings.  # noqa: E501
        :rtype: str
        """
        return self._data_selection_lines

    @data_selection_lines.setter
    def data_selection_lines(self, data_selection_lines):
        """Sets the data_selection_lines of this ResourcePlanSettings.


        :param data_selection_lines: The data_selection_lines of this ResourcePlanSettings.  # noqa: E501
        :type: str
        """

        self._data_selection_lines = data_selection_lines

    @property
    def visible_grid_columns(self):
        """Gets the visible_grid_columns of this ResourcePlanSettings.  # noqa: E501


        :return: The visible_grid_columns of this ResourcePlanSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._visible_grid_columns

    @visible_grid_columns.setter
    def visible_grid_columns(self, visible_grid_columns):
        """Sets the visible_grid_columns of this ResourcePlanSettings.


        :param visible_grid_columns: The visible_grid_columns of this ResourcePlanSettings.  # noqa: E501
        :type: list[str]
        """

        self._visible_grid_columns = visible_grid_columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourcePlanSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourcePlanSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
