# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Stopwatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timesheet_line_id': 'GloballyUniqueIdentifier',
        'task_id': 'GloballyUniqueIdentifier',
        'plan_id': 'GloballyUniqueIdentifier',
        'start_date_time': 'date',
        'total_completed_time': 'TimeInterval',
        'is_running': 'bool',
        'state': 'str',
        'last_message': 'str',
        'hours_info': 'DataRow',
        'line_info': 'DataRow'
    }

    attribute_map = {
        'timesheet_line_id': 'TimesheetLineId',
        'task_id': 'TaskId',
        'plan_id': 'PlanId',
        'start_date_time': 'StartDateTime',
        'total_completed_time': 'TotalCompletedTime',
        'is_running': 'IsRunning',
        'state': 'State',
        'last_message': 'LastMessage',
        'hours_info': 'HoursInfo',
        'line_info': 'LineInfo'
    }

    def __init__(self, timesheet_line_id=None, task_id=None, plan_id=None, start_date_time=None, total_completed_time=None, is_running=None, state=None, last_message=None, hours_info=None, line_info=None):  # noqa: E501
        """Stopwatch - a model defined in Swagger"""  # noqa: E501
        self._timesheet_line_id = None
        self._task_id = None
        self._plan_id = None
        self._start_date_time = None
        self._total_completed_time = None
        self._is_running = None
        self._state = None
        self._last_message = None
        self._hours_info = None
        self._line_info = None
        self.discriminator = None
        if timesheet_line_id is not None:
            self.timesheet_line_id = timesheet_line_id
        if task_id is not None:
            self.task_id = task_id
        if plan_id is not None:
            self.plan_id = plan_id
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if total_completed_time is not None:
            self.total_completed_time = total_completed_time
        if is_running is not None:
            self.is_running = is_running
        if state is not None:
            self.state = state
        if last_message is not None:
            self.last_message = last_message
        if hours_info is not None:
            self.hours_info = hours_info
        if line_info is not None:
            self.line_info = line_info

    @property
    def timesheet_line_id(self):
        """Gets the timesheet_line_id of this Stopwatch.  # noqa: E501


        :return: The timesheet_line_id of this Stopwatch.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._timesheet_line_id

    @timesheet_line_id.setter
    def timesheet_line_id(self, timesheet_line_id):
        """Sets the timesheet_line_id of this Stopwatch.


        :param timesheet_line_id: The timesheet_line_id of this Stopwatch.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._timesheet_line_id = timesheet_line_id

    @property
    def task_id(self):
        """Gets the task_id of this Stopwatch.  # noqa: E501


        :return: The task_id of this Stopwatch.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Stopwatch.


        :param task_id: The task_id of this Stopwatch.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._task_id = task_id

    @property
    def plan_id(self):
        """Gets the plan_id of this Stopwatch.  # noqa: E501


        :return: The plan_id of this Stopwatch.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this Stopwatch.


        :param plan_id: The plan_id of this Stopwatch.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_id = plan_id

    @property
    def start_date_time(self):
        """Gets the start_date_time of this Stopwatch.  # noqa: E501


        :return: The start_date_time of this Stopwatch.  # noqa: E501
        :rtype: date
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this Stopwatch.


        :param start_date_time: The start_date_time of this Stopwatch.  # noqa: E501
        :type: date
        """

        self._start_date_time = start_date_time

    @property
    def total_completed_time(self):
        """Gets the total_completed_time of this Stopwatch.  # noqa: E501


        :return: The total_completed_time of this Stopwatch.  # noqa: E501
        :rtype: TimeInterval
        """
        return self._total_completed_time

    @total_completed_time.setter
    def total_completed_time(self, total_completed_time):
        """Sets the total_completed_time of this Stopwatch.


        :param total_completed_time: The total_completed_time of this Stopwatch.  # noqa: E501
        :type: TimeInterval
        """

        self._total_completed_time = total_completed_time

    @property
    def is_running(self):
        """Gets the is_running of this Stopwatch.  # noqa: E501


        :return: The is_running of this Stopwatch.  # noqa: E501
        :rtype: bool
        """
        return self._is_running

    @is_running.setter
    def is_running(self, is_running):
        """Sets the is_running of this Stopwatch.


        :param is_running: The is_running of this Stopwatch.  # noqa: E501
        :type: bool
        """

        self._is_running = is_running

    @property
    def state(self):
        """Gets the state of this Stopwatch.  # noqa: E501


        :return: The state of this Stopwatch.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Stopwatch.


        :param state: The state of this Stopwatch.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def last_message(self):
        """Gets the last_message of this Stopwatch.  # noqa: E501


        :return: The last_message of this Stopwatch.  # noqa: E501
        :rtype: str
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this Stopwatch.


        :param last_message: The last_message of this Stopwatch.  # noqa: E501
        :type: str
        """

        self._last_message = last_message

    @property
    def hours_info(self):
        """Gets the hours_info of this Stopwatch.  # noqa: E501


        :return: The hours_info of this Stopwatch.  # noqa: E501
        :rtype: DataRow
        """
        return self._hours_info

    @hours_info.setter
    def hours_info(self, hours_info):
        """Sets the hours_info of this Stopwatch.


        :param hours_info: The hours_info of this Stopwatch.  # noqa: E501
        :type: DataRow
        """

        self._hours_info = hours_info

    @property
    def line_info(self):
        """Gets the line_info of this Stopwatch.  # noqa: E501


        :return: The line_info of this Stopwatch.  # noqa: E501
        :rtype: DataRow
        """
        return self._line_info

    @line_info.setter
    def line_info(self, line_info):
        """Sets the line_info of this Stopwatch.


        :param line_info: The line_info of this Stopwatch.  # noqa: E501
        :type: DataRow
        """

        self._line_info = line_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stopwatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stopwatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
