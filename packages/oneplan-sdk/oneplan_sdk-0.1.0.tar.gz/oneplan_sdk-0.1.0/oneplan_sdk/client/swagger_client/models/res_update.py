# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'ResPlanMode',
        'zoom': 'Zoom',
        'line_id': 'GloballyUniqueIdentifier',
        'cost_type': 'GloballyUniqueIdentifier',
        'values': 'dict(str, DecimalNumber)'
    }

    attribute_map = {
        'mode': 'Mode',
        'zoom': 'Zoom',
        'line_id': 'LineId',
        'cost_type': 'CostType',
        'values': 'Values'
    }

    def __init__(self, mode=None, zoom=None, line_id=None, cost_type=None, values=None):  # noqa: E501
        """ResUpdate - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._zoom = None
        self._line_id = None
        self._cost_type = None
        self._values = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if zoom is not None:
            self.zoom = zoom
        if line_id is not None:
            self.line_id = line_id
        if cost_type is not None:
            self.cost_type = cost_type
        if values is not None:
            self.values = values

    @property
    def mode(self):
        """Gets the mode of this ResUpdate.  # noqa: E501


        :return: The mode of this ResUpdate.  # noqa: E501
        :rtype: ResPlanMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ResUpdate.


        :param mode: The mode of this ResUpdate.  # noqa: E501
        :type: ResPlanMode
        """

        self._mode = mode

    @property
    def zoom(self):
        """Gets the zoom of this ResUpdate.  # noqa: E501


        :return: The zoom of this ResUpdate.  # noqa: E501
        :rtype: Zoom
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this ResUpdate.


        :param zoom: The zoom of this ResUpdate.  # noqa: E501
        :type: Zoom
        """

        self._zoom = zoom

    @property
    def line_id(self):
        """Gets the line_id of this ResUpdate.  # noqa: E501


        :return: The line_id of this ResUpdate.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._line_id

    @line_id.setter
    def line_id(self, line_id):
        """Sets the line_id of this ResUpdate.


        :param line_id: The line_id of this ResUpdate.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._line_id = line_id

    @property
    def cost_type(self):
        """Gets the cost_type of this ResUpdate.  # noqa: E501


        :return: The cost_type of this ResUpdate.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this ResUpdate.


        :param cost_type: The cost_type of this ResUpdate.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._cost_type = cost_type

    @property
    def values(self):
        """Gets the values of this ResUpdate.  # noqa: E501


        :return: The values of this ResUpdate.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ResUpdate.


        :param values: The values of this ResUpdate.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
