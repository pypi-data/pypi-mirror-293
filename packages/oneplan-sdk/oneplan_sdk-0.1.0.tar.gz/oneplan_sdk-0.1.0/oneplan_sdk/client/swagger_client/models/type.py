# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Type(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_type': 'MemberTypes',
        'declaring_method': 'MethodBase',
        'struct_layout_attribute': 'StructLayoutAttribute',
        'guid': 'GloballyUniqueIdentifier',
        'module': 'Module',
        'assembly': 'Assembly',
        'type_handle': 'RuntimeTypeHandle',
        'full_name': 'str',
        'namespace': 'str',
        'assembly_qualified_name': 'str',
        'type_initializer': 'ConstructorInfo',
        'is_nested': 'bool',
        'attributes': 'TypeAttributes',
        'generic_parameter_attributes': 'GenericParameterAttributes',
        'is_visible': 'bool',
        'is_not_public': 'bool',
        'is_public': 'bool',
        'is_nested_public': 'bool',
        'is_nested_private': 'bool',
        'is_nested_family': 'bool',
        'is_nested_assembly': 'bool',
        'is_nested_fam_and_assem': 'bool',
        'is_nested_fam_or_assem': 'bool',
        'is_auto_layout': 'bool',
        'is_layout_sequential': 'bool',
        'is_explicit_layout': 'bool',
        'is_class': 'bool',
        'is_interface': 'bool',
        'is_value_type': 'bool',
        'is_abstract': 'bool',
        'is_sealed': 'bool',
        'is_enum': 'bool',
        'is_special_name': 'bool',
        'is_import': 'bool',
        'is_serializable': 'bool',
        'is_ansi_class': 'bool',
        'is_unicode_class': 'bool',
        'is_auto_class': 'bool',
        'is_array': 'bool',
        'is_generic_type': 'bool',
        'is_generic_type_definition': 'bool',
        'is_constructed_generic_type': 'bool',
        'is_generic_parameter': 'bool',
        'generic_parameter_position': 'int',
        'contains_generic_parameters': 'bool',
        'is_by_ref': 'bool',
        'is_pointer': 'bool',
        'is_primitive': 'bool',
        'is_com_object': 'bool',
        'has_element_type': 'bool',
        'is_contextful': 'bool',
        'is_marshal_by_ref': 'bool',
        'is_security_critical': 'bool',
        'is_security_safe_critical': 'bool',
        'is_security_transparent': 'bool',
        'name': 'str',
        'custom_attributes': 'list[CustomAttributeData]',
        'metadata_token': 'int'
    }

    attribute_map = {
        'member_type': 'MemberType',
        'declaring_method': 'DeclaringMethod',
        'struct_layout_attribute': 'StructLayoutAttribute',
        'guid': 'GUID',
        'module': 'Module',
        'assembly': 'Assembly',
        'type_handle': 'TypeHandle',
        'full_name': 'FullName',
        'namespace': 'Namespace',
        'assembly_qualified_name': 'AssemblyQualifiedName',
        'type_initializer': 'TypeInitializer',
        'is_nested': 'IsNested',
        'attributes': 'Attributes',
        'generic_parameter_attributes': 'GenericParameterAttributes',
        'is_visible': 'IsVisible',
        'is_not_public': 'IsNotPublic',
        'is_public': 'IsPublic',
        'is_nested_public': 'IsNestedPublic',
        'is_nested_private': 'IsNestedPrivate',
        'is_nested_family': 'IsNestedFamily',
        'is_nested_assembly': 'IsNestedAssembly',
        'is_nested_fam_and_assem': 'IsNestedFamANDAssem',
        'is_nested_fam_or_assem': 'IsNestedFamORAssem',
        'is_auto_layout': 'IsAutoLayout',
        'is_layout_sequential': 'IsLayoutSequential',
        'is_explicit_layout': 'IsExplicitLayout',
        'is_class': 'IsClass',
        'is_interface': 'IsInterface',
        'is_value_type': 'IsValueType',
        'is_abstract': 'IsAbstract',
        'is_sealed': 'IsSealed',
        'is_enum': 'IsEnum',
        'is_special_name': 'IsSpecialName',
        'is_import': 'IsImport',
        'is_serializable': 'IsSerializable',
        'is_ansi_class': 'IsAnsiClass',
        'is_unicode_class': 'IsUnicodeClass',
        'is_auto_class': 'IsAutoClass',
        'is_array': 'IsArray',
        'is_generic_type': 'IsGenericType',
        'is_generic_type_definition': 'IsGenericTypeDefinition',
        'is_constructed_generic_type': 'IsConstructedGenericType',
        'is_generic_parameter': 'IsGenericParameter',
        'generic_parameter_position': 'GenericParameterPosition',
        'contains_generic_parameters': 'ContainsGenericParameters',
        'is_by_ref': 'IsByRef',
        'is_pointer': 'IsPointer',
        'is_primitive': 'IsPrimitive',
        'is_com_object': 'IsCOMObject',
        'has_element_type': 'HasElementType',
        'is_contextful': 'IsContextful',
        'is_marshal_by_ref': 'IsMarshalByRef',
        'is_security_critical': 'IsSecurityCritical',
        'is_security_safe_critical': 'IsSecuritySafeCritical',
        'is_security_transparent': 'IsSecurityTransparent',
        'name': 'Name',
        'custom_attributes': 'CustomAttributes',
        'metadata_token': 'MetadataToken'
    }

    def __init__(self, member_type=None, declaring_method=None, struct_layout_attribute=None, guid=None, module=None, assembly=None, type_handle=None, full_name=None, namespace=None, assembly_qualified_name=None, type_initializer=None, is_nested=None, attributes=None, generic_parameter_attributes=None, is_visible=None, is_not_public=None, is_public=None, is_nested_public=None, is_nested_private=None, is_nested_family=None, is_nested_assembly=None, is_nested_fam_and_assem=None, is_nested_fam_or_assem=None, is_auto_layout=None, is_layout_sequential=None, is_explicit_layout=None, is_class=None, is_interface=None, is_value_type=None, is_abstract=None, is_sealed=None, is_enum=None, is_special_name=None, is_import=None, is_serializable=None, is_ansi_class=None, is_unicode_class=None, is_auto_class=None, is_array=None, is_generic_type=None, is_generic_type_definition=None, is_constructed_generic_type=None, is_generic_parameter=None, generic_parameter_position=None, contains_generic_parameters=None, is_by_ref=None, is_pointer=None, is_primitive=None, is_com_object=None, has_element_type=None, is_contextful=None, is_marshal_by_ref=None, is_security_critical=None, is_security_safe_critical=None, is_security_transparent=None, name=None, custom_attributes=None, metadata_token=None):  # noqa: E501
        """Type - a model defined in Swagger"""  # noqa: E501
        self._member_type = None
        self._declaring_method = None
        self._struct_layout_attribute = None
        self._guid = None
        self._module = None
        self._assembly = None
        self._type_handle = None
        self._full_name = None
        self._namespace = None
        self._assembly_qualified_name = None
        self._type_initializer = None
        self._is_nested = None
        self._attributes = None
        self._generic_parameter_attributes = None
        self._is_visible = None
        self._is_not_public = None
        self._is_public = None
        self._is_nested_public = None
        self._is_nested_private = None
        self._is_nested_family = None
        self._is_nested_assembly = None
        self._is_nested_fam_and_assem = None
        self._is_nested_fam_or_assem = None
        self._is_auto_layout = None
        self._is_layout_sequential = None
        self._is_explicit_layout = None
        self._is_class = None
        self._is_interface = None
        self._is_value_type = None
        self._is_abstract = None
        self._is_sealed = None
        self._is_enum = None
        self._is_special_name = None
        self._is_import = None
        self._is_serializable = None
        self._is_ansi_class = None
        self._is_unicode_class = None
        self._is_auto_class = None
        self._is_array = None
        self._is_generic_type = None
        self._is_generic_type_definition = None
        self._is_constructed_generic_type = None
        self._is_generic_parameter = None
        self._generic_parameter_position = None
        self._contains_generic_parameters = None
        self._is_by_ref = None
        self._is_pointer = None
        self._is_primitive = None
        self._is_com_object = None
        self._has_element_type = None
        self._is_contextful = None
        self._is_marshal_by_ref = None
        self._is_security_critical = None
        self._is_security_safe_critical = None
        self._is_security_transparent = None
        self._name = None
        self._custom_attributes = None
        self._metadata_token = None
        self.discriminator = None
        if member_type is not None:
            self.member_type = member_type
        if declaring_method is not None:
            self.declaring_method = declaring_method
        if struct_layout_attribute is not None:
            self.struct_layout_attribute = struct_layout_attribute
        if guid is not None:
            self.guid = guid
        if module is not None:
            self.module = module
        if assembly is not None:
            self.assembly = assembly
        if type_handle is not None:
            self.type_handle = type_handle
        if full_name is not None:
            self.full_name = full_name
        if namespace is not None:
            self.namespace = namespace
        if assembly_qualified_name is not None:
            self.assembly_qualified_name = assembly_qualified_name
        if type_initializer is not None:
            self.type_initializer = type_initializer
        if is_nested is not None:
            self.is_nested = is_nested
        if attributes is not None:
            self.attributes = attributes
        if generic_parameter_attributes is not None:
            self.generic_parameter_attributes = generic_parameter_attributes
        if is_visible is not None:
            self.is_visible = is_visible
        if is_not_public is not None:
            self.is_not_public = is_not_public
        if is_public is not None:
            self.is_public = is_public
        if is_nested_public is not None:
            self.is_nested_public = is_nested_public
        if is_nested_private is not None:
            self.is_nested_private = is_nested_private
        if is_nested_family is not None:
            self.is_nested_family = is_nested_family
        if is_nested_assembly is not None:
            self.is_nested_assembly = is_nested_assembly
        if is_nested_fam_and_assem is not None:
            self.is_nested_fam_and_assem = is_nested_fam_and_assem
        if is_nested_fam_or_assem is not None:
            self.is_nested_fam_or_assem = is_nested_fam_or_assem
        if is_auto_layout is not None:
            self.is_auto_layout = is_auto_layout
        if is_layout_sequential is not None:
            self.is_layout_sequential = is_layout_sequential
        if is_explicit_layout is not None:
            self.is_explicit_layout = is_explicit_layout
        if is_class is not None:
            self.is_class = is_class
        if is_interface is not None:
            self.is_interface = is_interface
        if is_value_type is not None:
            self.is_value_type = is_value_type
        if is_abstract is not None:
            self.is_abstract = is_abstract
        if is_sealed is not None:
            self.is_sealed = is_sealed
        if is_enum is not None:
            self.is_enum = is_enum
        if is_special_name is not None:
            self.is_special_name = is_special_name
        if is_import is not None:
            self.is_import = is_import
        if is_serializable is not None:
            self.is_serializable = is_serializable
        if is_ansi_class is not None:
            self.is_ansi_class = is_ansi_class
        if is_unicode_class is not None:
            self.is_unicode_class = is_unicode_class
        if is_auto_class is not None:
            self.is_auto_class = is_auto_class
        if is_array is not None:
            self.is_array = is_array
        if is_generic_type is not None:
            self.is_generic_type = is_generic_type
        if is_generic_type_definition is not None:
            self.is_generic_type_definition = is_generic_type_definition
        if is_constructed_generic_type is not None:
            self.is_constructed_generic_type = is_constructed_generic_type
        if is_generic_parameter is not None:
            self.is_generic_parameter = is_generic_parameter
        if generic_parameter_position is not None:
            self.generic_parameter_position = generic_parameter_position
        if contains_generic_parameters is not None:
            self.contains_generic_parameters = contains_generic_parameters
        if is_by_ref is not None:
            self.is_by_ref = is_by_ref
        if is_pointer is not None:
            self.is_pointer = is_pointer
        if is_primitive is not None:
            self.is_primitive = is_primitive
        if is_com_object is not None:
            self.is_com_object = is_com_object
        if has_element_type is not None:
            self.has_element_type = has_element_type
        if is_contextful is not None:
            self.is_contextful = is_contextful
        if is_marshal_by_ref is not None:
            self.is_marshal_by_ref = is_marshal_by_ref
        if is_security_critical is not None:
            self.is_security_critical = is_security_critical
        if is_security_safe_critical is not None:
            self.is_security_safe_critical = is_security_safe_critical
        if is_security_transparent is not None:
            self.is_security_transparent = is_security_transparent
        if name is not None:
            self.name = name
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if metadata_token is not None:
            self.metadata_token = metadata_token

    @property
    def member_type(self):
        """Gets the member_type of this Type.  # noqa: E501


        :return: The member_type of this Type.  # noqa: E501
        :rtype: MemberTypes
        """
        return self._member_type

    @member_type.setter
    def member_type(self, member_type):
        """Sets the member_type of this Type.


        :param member_type: The member_type of this Type.  # noqa: E501
        :type: MemberTypes
        """

        self._member_type = member_type

    @property
    def declaring_method(self):
        """Gets the declaring_method of this Type.  # noqa: E501


        :return: The declaring_method of this Type.  # noqa: E501
        :rtype: MethodBase
        """
        return self._declaring_method

    @declaring_method.setter
    def declaring_method(self, declaring_method):
        """Sets the declaring_method of this Type.


        :param declaring_method: The declaring_method of this Type.  # noqa: E501
        :type: MethodBase
        """

        self._declaring_method = declaring_method

    @property
    def struct_layout_attribute(self):
        """Gets the struct_layout_attribute of this Type.  # noqa: E501


        :return: The struct_layout_attribute of this Type.  # noqa: E501
        :rtype: StructLayoutAttribute
        """
        return self._struct_layout_attribute

    @struct_layout_attribute.setter
    def struct_layout_attribute(self, struct_layout_attribute):
        """Sets the struct_layout_attribute of this Type.


        :param struct_layout_attribute: The struct_layout_attribute of this Type.  # noqa: E501
        :type: StructLayoutAttribute
        """

        self._struct_layout_attribute = struct_layout_attribute

    @property
    def guid(self):
        """Gets the guid of this Type.  # noqa: E501


        :return: The guid of this Type.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this Type.


        :param guid: The guid of this Type.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._guid = guid

    @property
    def module(self):
        """Gets the module of this Type.  # noqa: E501


        :return: The module of this Type.  # noqa: E501
        :rtype: Module
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this Type.


        :param module: The module of this Type.  # noqa: E501
        :type: Module
        """

        self._module = module

    @property
    def assembly(self):
        """Gets the assembly of this Type.  # noqa: E501


        :return: The assembly of this Type.  # noqa: E501
        :rtype: Assembly
        """
        return self._assembly

    @assembly.setter
    def assembly(self, assembly):
        """Sets the assembly of this Type.


        :param assembly: The assembly of this Type.  # noqa: E501
        :type: Assembly
        """

        self._assembly = assembly

    @property
    def type_handle(self):
        """Gets the type_handle of this Type.  # noqa: E501


        :return: The type_handle of this Type.  # noqa: E501
        :rtype: RuntimeTypeHandle
        """
        return self._type_handle

    @type_handle.setter
    def type_handle(self, type_handle):
        """Sets the type_handle of this Type.


        :param type_handle: The type_handle of this Type.  # noqa: E501
        :type: RuntimeTypeHandle
        """

        self._type_handle = type_handle

    @property
    def full_name(self):
        """Gets the full_name of this Type.  # noqa: E501


        :return: The full_name of this Type.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Type.


        :param full_name: The full_name of this Type.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def namespace(self):
        """Gets the namespace of this Type.  # noqa: E501


        :return: The namespace of this Type.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Type.


        :param namespace: The namespace of this Type.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def assembly_qualified_name(self):
        """Gets the assembly_qualified_name of this Type.  # noqa: E501


        :return: The assembly_qualified_name of this Type.  # noqa: E501
        :rtype: str
        """
        return self._assembly_qualified_name

    @assembly_qualified_name.setter
    def assembly_qualified_name(self, assembly_qualified_name):
        """Sets the assembly_qualified_name of this Type.


        :param assembly_qualified_name: The assembly_qualified_name of this Type.  # noqa: E501
        :type: str
        """

        self._assembly_qualified_name = assembly_qualified_name

    @property
    def type_initializer(self):
        """Gets the type_initializer of this Type.  # noqa: E501


        :return: The type_initializer of this Type.  # noqa: E501
        :rtype: ConstructorInfo
        """
        return self._type_initializer

    @type_initializer.setter
    def type_initializer(self, type_initializer):
        """Sets the type_initializer of this Type.


        :param type_initializer: The type_initializer of this Type.  # noqa: E501
        :type: ConstructorInfo
        """

        self._type_initializer = type_initializer

    @property
    def is_nested(self):
        """Gets the is_nested of this Type.  # noqa: E501


        :return: The is_nested of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_nested

    @is_nested.setter
    def is_nested(self, is_nested):
        """Sets the is_nested of this Type.


        :param is_nested: The is_nested of this Type.  # noqa: E501
        :type: bool
        """

        self._is_nested = is_nested

    @property
    def attributes(self):
        """Gets the attributes of this Type.  # noqa: E501


        :return: The attributes of this Type.  # noqa: E501
        :rtype: TypeAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Type.


        :param attributes: The attributes of this Type.  # noqa: E501
        :type: TypeAttributes
        """

        self._attributes = attributes

    @property
    def generic_parameter_attributes(self):
        """Gets the generic_parameter_attributes of this Type.  # noqa: E501


        :return: The generic_parameter_attributes of this Type.  # noqa: E501
        :rtype: GenericParameterAttributes
        """
        return self._generic_parameter_attributes

    @generic_parameter_attributes.setter
    def generic_parameter_attributes(self, generic_parameter_attributes):
        """Sets the generic_parameter_attributes of this Type.


        :param generic_parameter_attributes: The generic_parameter_attributes of this Type.  # noqa: E501
        :type: GenericParameterAttributes
        """

        self._generic_parameter_attributes = generic_parameter_attributes

    @property
    def is_visible(self):
        """Gets the is_visible of this Type.  # noqa: E501


        :return: The is_visible of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this Type.


        :param is_visible: The is_visible of this Type.  # noqa: E501
        :type: bool
        """

        self._is_visible = is_visible

    @property
    def is_not_public(self):
        """Gets the is_not_public of this Type.  # noqa: E501


        :return: The is_not_public of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_not_public

    @is_not_public.setter
    def is_not_public(self, is_not_public):
        """Sets the is_not_public of this Type.


        :param is_not_public: The is_not_public of this Type.  # noqa: E501
        :type: bool
        """

        self._is_not_public = is_not_public

    @property
    def is_public(self):
        """Gets the is_public of this Type.  # noqa: E501


        :return: The is_public of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this Type.


        :param is_public: The is_public of this Type.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_nested_public(self):
        """Gets the is_nested_public of this Type.  # noqa: E501


        :return: The is_nested_public of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_nested_public

    @is_nested_public.setter
    def is_nested_public(self, is_nested_public):
        """Sets the is_nested_public of this Type.


        :param is_nested_public: The is_nested_public of this Type.  # noqa: E501
        :type: bool
        """

        self._is_nested_public = is_nested_public

    @property
    def is_nested_private(self):
        """Gets the is_nested_private of this Type.  # noqa: E501


        :return: The is_nested_private of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_nested_private

    @is_nested_private.setter
    def is_nested_private(self, is_nested_private):
        """Sets the is_nested_private of this Type.


        :param is_nested_private: The is_nested_private of this Type.  # noqa: E501
        :type: bool
        """

        self._is_nested_private = is_nested_private

    @property
    def is_nested_family(self):
        """Gets the is_nested_family of this Type.  # noqa: E501


        :return: The is_nested_family of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_nested_family

    @is_nested_family.setter
    def is_nested_family(self, is_nested_family):
        """Sets the is_nested_family of this Type.


        :param is_nested_family: The is_nested_family of this Type.  # noqa: E501
        :type: bool
        """

        self._is_nested_family = is_nested_family

    @property
    def is_nested_assembly(self):
        """Gets the is_nested_assembly of this Type.  # noqa: E501


        :return: The is_nested_assembly of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_nested_assembly

    @is_nested_assembly.setter
    def is_nested_assembly(self, is_nested_assembly):
        """Sets the is_nested_assembly of this Type.


        :param is_nested_assembly: The is_nested_assembly of this Type.  # noqa: E501
        :type: bool
        """

        self._is_nested_assembly = is_nested_assembly

    @property
    def is_nested_fam_and_assem(self):
        """Gets the is_nested_fam_and_assem of this Type.  # noqa: E501


        :return: The is_nested_fam_and_assem of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_nested_fam_and_assem

    @is_nested_fam_and_assem.setter
    def is_nested_fam_and_assem(self, is_nested_fam_and_assem):
        """Sets the is_nested_fam_and_assem of this Type.


        :param is_nested_fam_and_assem: The is_nested_fam_and_assem of this Type.  # noqa: E501
        :type: bool
        """

        self._is_nested_fam_and_assem = is_nested_fam_and_assem

    @property
    def is_nested_fam_or_assem(self):
        """Gets the is_nested_fam_or_assem of this Type.  # noqa: E501


        :return: The is_nested_fam_or_assem of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_nested_fam_or_assem

    @is_nested_fam_or_assem.setter
    def is_nested_fam_or_assem(self, is_nested_fam_or_assem):
        """Sets the is_nested_fam_or_assem of this Type.


        :param is_nested_fam_or_assem: The is_nested_fam_or_assem of this Type.  # noqa: E501
        :type: bool
        """

        self._is_nested_fam_or_assem = is_nested_fam_or_assem

    @property
    def is_auto_layout(self):
        """Gets the is_auto_layout of this Type.  # noqa: E501


        :return: The is_auto_layout of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_layout

    @is_auto_layout.setter
    def is_auto_layout(self, is_auto_layout):
        """Sets the is_auto_layout of this Type.


        :param is_auto_layout: The is_auto_layout of this Type.  # noqa: E501
        :type: bool
        """

        self._is_auto_layout = is_auto_layout

    @property
    def is_layout_sequential(self):
        """Gets the is_layout_sequential of this Type.  # noqa: E501


        :return: The is_layout_sequential of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_layout_sequential

    @is_layout_sequential.setter
    def is_layout_sequential(self, is_layout_sequential):
        """Sets the is_layout_sequential of this Type.


        :param is_layout_sequential: The is_layout_sequential of this Type.  # noqa: E501
        :type: bool
        """

        self._is_layout_sequential = is_layout_sequential

    @property
    def is_explicit_layout(self):
        """Gets the is_explicit_layout of this Type.  # noqa: E501


        :return: The is_explicit_layout of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_explicit_layout

    @is_explicit_layout.setter
    def is_explicit_layout(self, is_explicit_layout):
        """Sets the is_explicit_layout of this Type.


        :param is_explicit_layout: The is_explicit_layout of this Type.  # noqa: E501
        :type: bool
        """

        self._is_explicit_layout = is_explicit_layout

    @property
    def is_class(self):
        """Gets the is_class of this Type.  # noqa: E501


        :return: The is_class of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_class

    @is_class.setter
    def is_class(self, is_class):
        """Sets the is_class of this Type.


        :param is_class: The is_class of this Type.  # noqa: E501
        :type: bool
        """

        self._is_class = is_class

    @property
    def is_interface(self):
        """Gets the is_interface of this Type.  # noqa: E501


        :return: The is_interface of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_interface

    @is_interface.setter
    def is_interface(self, is_interface):
        """Sets the is_interface of this Type.


        :param is_interface: The is_interface of this Type.  # noqa: E501
        :type: bool
        """

        self._is_interface = is_interface

    @property
    def is_value_type(self):
        """Gets the is_value_type of this Type.  # noqa: E501


        :return: The is_value_type of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_value_type

    @is_value_type.setter
    def is_value_type(self, is_value_type):
        """Sets the is_value_type of this Type.


        :param is_value_type: The is_value_type of this Type.  # noqa: E501
        :type: bool
        """

        self._is_value_type = is_value_type

    @property
    def is_abstract(self):
        """Gets the is_abstract of this Type.  # noqa: E501


        :return: The is_abstract of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_abstract

    @is_abstract.setter
    def is_abstract(self, is_abstract):
        """Sets the is_abstract of this Type.


        :param is_abstract: The is_abstract of this Type.  # noqa: E501
        :type: bool
        """

        self._is_abstract = is_abstract

    @property
    def is_sealed(self):
        """Gets the is_sealed of this Type.  # noqa: E501


        :return: The is_sealed of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_sealed

    @is_sealed.setter
    def is_sealed(self, is_sealed):
        """Sets the is_sealed of this Type.


        :param is_sealed: The is_sealed of this Type.  # noqa: E501
        :type: bool
        """

        self._is_sealed = is_sealed

    @property
    def is_enum(self):
        """Gets the is_enum of this Type.  # noqa: E501


        :return: The is_enum of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_enum

    @is_enum.setter
    def is_enum(self, is_enum):
        """Sets the is_enum of this Type.


        :param is_enum: The is_enum of this Type.  # noqa: E501
        :type: bool
        """

        self._is_enum = is_enum

    @property
    def is_special_name(self):
        """Gets the is_special_name of this Type.  # noqa: E501


        :return: The is_special_name of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_special_name

    @is_special_name.setter
    def is_special_name(self, is_special_name):
        """Sets the is_special_name of this Type.


        :param is_special_name: The is_special_name of this Type.  # noqa: E501
        :type: bool
        """

        self._is_special_name = is_special_name

    @property
    def is_import(self):
        """Gets the is_import of this Type.  # noqa: E501


        :return: The is_import of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_import

    @is_import.setter
    def is_import(self, is_import):
        """Sets the is_import of this Type.


        :param is_import: The is_import of this Type.  # noqa: E501
        :type: bool
        """

        self._is_import = is_import

    @property
    def is_serializable(self):
        """Gets the is_serializable of this Type.  # noqa: E501


        :return: The is_serializable of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_serializable

    @is_serializable.setter
    def is_serializable(self, is_serializable):
        """Sets the is_serializable of this Type.


        :param is_serializable: The is_serializable of this Type.  # noqa: E501
        :type: bool
        """

        self._is_serializable = is_serializable

    @property
    def is_ansi_class(self):
        """Gets the is_ansi_class of this Type.  # noqa: E501


        :return: The is_ansi_class of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_ansi_class

    @is_ansi_class.setter
    def is_ansi_class(self, is_ansi_class):
        """Sets the is_ansi_class of this Type.


        :param is_ansi_class: The is_ansi_class of this Type.  # noqa: E501
        :type: bool
        """

        self._is_ansi_class = is_ansi_class

    @property
    def is_unicode_class(self):
        """Gets the is_unicode_class of this Type.  # noqa: E501


        :return: The is_unicode_class of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_unicode_class

    @is_unicode_class.setter
    def is_unicode_class(self, is_unicode_class):
        """Sets the is_unicode_class of this Type.


        :param is_unicode_class: The is_unicode_class of this Type.  # noqa: E501
        :type: bool
        """

        self._is_unicode_class = is_unicode_class

    @property
    def is_auto_class(self):
        """Gets the is_auto_class of this Type.  # noqa: E501


        :return: The is_auto_class of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_class

    @is_auto_class.setter
    def is_auto_class(self, is_auto_class):
        """Sets the is_auto_class of this Type.


        :param is_auto_class: The is_auto_class of this Type.  # noqa: E501
        :type: bool
        """

        self._is_auto_class = is_auto_class

    @property
    def is_array(self):
        """Gets the is_array of this Type.  # noqa: E501


        :return: The is_array of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_array

    @is_array.setter
    def is_array(self, is_array):
        """Sets the is_array of this Type.


        :param is_array: The is_array of this Type.  # noqa: E501
        :type: bool
        """

        self._is_array = is_array

    @property
    def is_generic_type(self):
        """Gets the is_generic_type of this Type.  # noqa: E501


        :return: The is_generic_type of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_generic_type

    @is_generic_type.setter
    def is_generic_type(self, is_generic_type):
        """Sets the is_generic_type of this Type.


        :param is_generic_type: The is_generic_type of this Type.  # noqa: E501
        :type: bool
        """

        self._is_generic_type = is_generic_type

    @property
    def is_generic_type_definition(self):
        """Gets the is_generic_type_definition of this Type.  # noqa: E501


        :return: The is_generic_type_definition of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_generic_type_definition

    @is_generic_type_definition.setter
    def is_generic_type_definition(self, is_generic_type_definition):
        """Sets the is_generic_type_definition of this Type.


        :param is_generic_type_definition: The is_generic_type_definition of this Type.  # noqa: E501
        :type: bool
        """

        self._is_generic_type_definition = is_generic_type_definition

    @property
    def is_constructed_generic_type(self):
        """Gets the is_constructed_generic_type of this Type.  # noqa: E501


        :return: The is_constructed_generic_type of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_constructed_generic_type

    @is_constructed_generic_type.setter
    def is_constructed_generic_type(self, is_constructed_generic_type):
        """Sets the is_constructed_generic_type of this Type.


        :param is_constructed_generic_type: The is_constructed_generic_type of this Type.  # noqa: E501
        :type: bool
        """

        self._is_constructed_generic_type = is_constructed_generic_type

    @property
    def is_generic_parameter(self):
        """Gets the is_generic_parameter of this Type.  # noqa: E501


        :return: The is_generic_parameter of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_generic_parameter

    @is_generic_parameter.setter
    def is_generic_parameter(self, is_generic_parameter):
        """Sets the is_generic_parameter of this Type.


        :param is_generic_parameter: The is_generic_parameter of this Type.  # noqa: E501
        :type: bool
        """

        self._is_generic_parameter = is_generic_parameter

    @property
    def generic_parameter_position(self):
        """Gets the generic_parameter_position of this Type.  # noqa: E501


        :return: The generic_parameter_position of this Type.  # noqa: E501
        :rtype: int
        """
        return self._generic_parameter_position

    @generic_parameter_position.setter
    def generic_parameter_position(self, generic_parameter_position):
        """Sets the generic_parameter_position of this Type.


        :param generic_parameter_position: The generic_parameter_position of this Type.  # noqa: E501
        :type: int
        """

        self._generic_parameter_position = generic_parameter_position

    @property
    def contains_generic_parameters(self):
        """Gets the contains_generic_parameters of this Type.  # noqa: E501


        :return: The contains_generic_parameters of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._contains_generic_parameters

    @contains_generic_parameters.setter
    def contains_generic_parameters(self, contains_generic_parameters):
        """Sets the contains_generic_parameters of this Type.


        :param contains_generic_parameters: The contains_generic_parameters of this Type.  # noqa: E501
        :type: bool
        """

        self._contains_generic_parameters = contains_generic_parameters

    @property
    def is_by_ref(self):
        """Gets the is_by_ref of this Type.  # noqa: E501


        :return: The is_by_ref of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_by_ref

    @is_by_ref.setter
    def is_by_ref(self, is_by_ref):
        """Sets the is_by_ref of this Type.


        :param is_by_ref: The is_by_ref of this Type.  # noqa: E501
        :type: bool
        """

        self._is_by_ref = is_by_ref

    @property
    def is_pointer(self):
        """Gets the is_pointer of this Type.  # noqa: E501


        :return: The is_pointer of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_pointer

    @is_pointer.setter
    def is_pointer(self, is_pointer):
        """Sets the is_pointer of this Type.


        :param is_pointer: The is_pointer of this Type.  # noqa: E501
        :type: bool
        """

        self._is_pointer = is_pointer

    @property
    def is_primitive(self):
        """Gets the is_primitive of this Type.  # noqa: E501


        :return: The is_primitive of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_primitive

    @is_primitive.setter
    def is_primitive(self, is_primitive):
        """Sets the is_primitive of this Type.


        :param is_primitive: The is_primitive of this Type.  # noqa: E501
        :type: bool
        """

        self._is_primitive = is_primitive

    @property
    def is_com_object(self):
        """Gets the is_com_object of this Type.  # noqa: E501


        :return: The is_com_object of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_com_object

    @is_com_object.setter
    def is_com_object(self, is_com_object):
        """Sets the is_com_object of this Type.


        :param is_com_object: The is_com_object of this Type.  # noqa: E501
        :type: bool
        """

        self._is_com_object = is_com_object

    @property
    def has_element_type(self):
        """Gets the has_element_type of this Type.  # noqa: E501


        :return: The has_element_type of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._has_element_type

    @has_element_type.setter
    def has_element_type(self, has_element_type):
        """Sets the has_element_type of this Type.


        :param has_element_type: The has_element_type of this Type.  # noqa: E501
        :type: bool
        """

        self._has_element_type = has_element_type

    @property
    def is_contextful(self):
        """Gets the is_contextful of this Type.  # noqa: E501


        :return: The is_contextful of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_contextful

    @is_contextful.setter
    def is_contextful(self, is_contextful):
        """Sets the is_contextful of this Type.


        :param is_contextful: The is_contextful of this Type.  # noqa: E501
        :type: bool
        """

        self._is_contextful = is_contextful

    @property
    def is_marshal_by_ref(self):
        """Gets the is_marshal_by_ref of this Type.  # noqa: E501


        :return: The is_marshal_by_ref of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_marshal_by_ref

    @is_marshal_by_ref.setter
    def is_marshal_by_ref(self, is_marshal_by_ref):
        """Sets the is_marshal_by_ref of this Type.


        :param is_marshal_by_ref: The is_marshal_by_ref of this Type.  # noqa: E501
        :type: bool
        """

        self._is_marshal_by_ref = is_marshal_by_ref

    @property
    def is_security_critical(self):
        """Gets the is_security_critical of this Type.  # noqa: E501


        :return: The is_security_critical of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_critical

    @is_security_critical.setter
    def is_security_critical(self, is_security_critical):
        """Sets the is_security_critical of this Type.


        :param is_security_critical: The is_security_critical of this Type.  # noqa: E501
        :type: bool
        """

        self._is_security_critical = is_security_critical

    @property
    def is_security_safe_critical(self):
        """Gets the is_security_safe_critical of this Type.  # noqa: E501


        :return: The is_security_safe_critical of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_safe_critical

    @is_security_safe_critical.setter
    def is_security_safe_critical(self, is_security_safe_critical):
        """Sets the is_security_safe_critical of this Type.


        :param is_security_safe_critical: The is_security_safe_critical of this Type.  # noqa: E501
        :type: bool
        """

        self._is_security_safe_critical = is_security_safe_critical

    @property
    def is_security_transparent(self):
        """Gets the is_security_transparent of this Type.  # noqa: E501


        :return: The is_security_transparent of this Type.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_transparent

    @is_security_transparent.setter
    def is_security_transparent(self, is_security_transparent):
        """Sets the is_security_transparent of this Type.


        :param is_security_transparent: The is_security_transparent of this Type.  # noqa: E501
        :type: bool
        """

        self._is_security_transparent = is_security_transparent

    @property
    def name(self):
        """Gets the name of this Type.  # noqa: E501


        :return: The name of this Type.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Type.


        :param name: The name of this Type.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Type.  # noqa: E501


        :return: The custom_attributes of this Type.  # noqa: E501
        :rtype: list[CustomAttributeData]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Type.


        :param custom_attributes: The custom_attributes of this Type.  # noqa: E501
        :type: list[CustomAttributeData]
        """

        self._custom_attributes = custom_attributes

    @property
    def metadata_token(self):
        """Gets the metadata_token of this Type.  # noqa: E501


        :return: The metadata_token of this Type.  # noqa: E501
        :rtype: int
        """
        return self._metadata_token

    @metadata_token.setter
    def metadata_token(self, metadata_token):
        """Sets the metadata_token of this Type.


        :param metadata_token: The metadata_token of this Type.  # noqa: E501
        :type: int
        """

        self._metadata_token = metadata_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Type, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Type):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
