# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CostRevenueTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_id': 'GloballyUniqueIdentifier',
        'duration': 'DecimalNumber',
        'effort': 'DecimalNumber',
        'start': 'date',
        'end': 'date',
        'resources': 'list[CostRevenueTaskAssignment]'
    }

    attribute_map = {
        'task_id': 'TaskId',
        'duration': 'Duration',
        'effort': 'Effort',
        'start': 'Start',
        'end': 'End',
        'resources': 'Resources'
    }

    def __init__(self, task_id=None, duration=None, effort=None, start=None, end=None, resources=None):  # noqa: E501
        """CostRevenueTask - a model defined in Swagger"""  # noqa: E501
        self._task_id = None
        self._duration = None
        self._effort = None
        self._start = None
        self._end = None
        self._resources = None
        self.discriminator = None
        if task_id is not None:
            self.task_id = task_id
        if duration is not None:
            self.duration = duration
        if effort is not None:
            self.effort = effort
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if resources is not None:
            self.resources = resources

    @property
    def task_id(self):
        """Gets the task_id of this CostRevenueTask.  # noqa: E501


        :return: The task_id of this CostRevenueTask.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this CostRevenueTask.


        :param task_id: The task_id of this CostRevenueTask.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._task_id = task_id

    @property
    def duration(self):
        """Gets the duration of this CostRevenueTask.  # noqa: E501


        :return: The duration of this CostRevenueTask.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CostRevenueTask.


        :param duration: The duration of this CostRevenueTask.  # noqa: E501
        :type: DecimalNumber
        """

        self._duration = duration

    @property
    def effort(self):
        """Gets the effort of this CostRevenueTask.  # noqa: E501


        :return: The effort of this CostRevenueTask.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._effort

    @effort.setter
    def effort(self, effort):
        """Sets the effort of this CostRevenueTask.


        :param effort: The effort of this CostRevenueTask.  # noqa: E501
        :type: DecimalNumber
        """

        self._effort = effort

    @property
    def start(self):
        """Gets the start of this CostRevenueTask.  # noqa: E501


        :return: The start of this CostRevenueTask.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CostRevenueTask.


        :param start: The start of this CostRevenueTask.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this CostRevenueTask.  # noqa: E501


        :return: The end of this CostRevenueTask.  # noqa: E501
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this CostRevenueTask.


        :param end: The end of this CostRevenueTask.  # noqa: E501
        :type: date
        """

        self._end = end

    @property
    def resources(self):
        """Gets the resources of this CostRevenueTask.  # noqa: E501


        :return: The resources of this CostRevenueTask.  # noqa: E501
        :rtype: list[CostRevenueTaskAssignment]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this CostRevenueTask.


        :param resources: The resources of this CostRevenueTask.  # noqa: E501
        :type: list[CostRevenueTaskAssignment]
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CostRevenueTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CostRevenueTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
