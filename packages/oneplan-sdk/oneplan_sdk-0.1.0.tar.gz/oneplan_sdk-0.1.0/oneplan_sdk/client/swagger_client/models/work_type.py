# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'GloballyUniqueIdentifier',
        'name': 'str',
        'list_type': 'WorkListType',
        'allowed_parents': 'list[GloballyUniqueIdentifier]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'list_type': 'ListType',
        'allowed_parents': 'AllowedParents'
    }

    def __init__(self, id=None, name=None, list_type=None, allowed_parents=None):  # noqa: E501
        """WorkType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._list_type = None
        self._allowed_parents = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if list_type is not None:
            self.list_type = list_type
        if allowed_parents is not None:
            self.allowed_parents = allowed_parents

    @property
    def id(self):
        """Gets the id of this WorkType.  # noqa: E501


        :return: The id of this WorkType.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkType.


        :param id: The id of this WorkType.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WorkType.  # noqa: E501


        :return: The name of this WorkType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkType.


        :param name: The name of this WorkType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def list_type(self):
        """Gets the list_type of this WorkType.  # noqa: E501


        :return: The list_type of this WorkType.  # noqa: E501
        :rtype: WorkListType
        """
        return self._list_type

    @list_type.setter
    def list_type(self, list_type):
        """Sets the list_type of this WorkType.


        :param list_type: The list_type of this WorkType.  # noqa: E501
        :type: WorkListType
        """

        self._list_type = list_type

    @property
    def allowed_parents(self):
        """Gets the allowed_parents of this WorkType.  # noqa: E501


        :return: The allowed_parents of this WorkType.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._allowed_parents

    @allowed_parents.setter
    def allowed_parents(self, allowed_parents):
        """Sets the allowed_parents of this WorkType.


        :param allowed_parents: The allowed_parents of this WorkType.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._allowed_parents = allowed_parents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
