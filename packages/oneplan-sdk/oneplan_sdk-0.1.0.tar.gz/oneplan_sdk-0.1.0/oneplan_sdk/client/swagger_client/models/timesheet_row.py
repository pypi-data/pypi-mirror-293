# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimesheetRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timesheet_line_id': 'GloballyUniqueIdentifier',
        'timesheet_id': 'GloballyUniqueIdentifier',
        'row_total': 'DecimalNumber',
        'row_progress': 'DecimalNumber',
        'submitted': 'bool',
        'time_approved': 'int',
        'plan_approved': 'int',
        'plan': 'WorkPlan',
        'task': 'WorkPlanTask',
        'fields': 'dict(str, Object)',
        'data': 'list[TimesheetRowDate]'
    }

    attribute_map = {
        'timesheet_line_id': 'TimesheetLineId',
        'timesheet_id': 'TimesheetId',
        'row_total': 'RowTotal',
        'row_progress': 'RowProgress',
        'submitted': 'Submitted',
        'time_approved': 'TimeApproved',
        'plan_approved': 'PlanApproved',
        'plan': 'Plan',
        'task': 'Task',
        'fields': 'Fields',
        'data': 'Data'
    }

    def __init__(self, timesheet_line_id=None, timesheet_id=None, row_total=None, row_progress=None, submitted=None, time_approved=None, plan_approved=None, plan=None, task=None, fields=None, data=None):  # noqa: E501
        """TimesheetRow - a model defined in Swagger"""  # noqa: E501
        self._timesheet_line_id = None
        self._timesheet_id = None
        self._row_total = None
        self._row_progress = None
        self._submitted = None
        self._time_approved = None
        self._plan_approved = None
        self._plan = None
        self._task = None
        self._fields = None
        self._data = None
        self.discriminator = None
        if timesheet_line_id is not None:
            self.timesheet_line_id = timesheet_line_id
        if timesheet_id is not None:
            self.timesheet_id = timesheet_id
        if row_total is not None:
            self.row_total = row_total
        if row_progress is not None:
            self.row_progress = row_progress
        if submitted is not None:
            self.submitted = submitted
        if time_approved is not None:
            self.time_approved = time_approved
        if plan_approved is not None:
            self.plan_approved = plan_approved
        if plan is not None:
            self.plan = plan
        if task is not None:
            self.task = task
        if fields is not None:
            self.fields = fields
        if data is not None:
            self.data = data

    @property
    def timesheet_line_id(self):
        """Gets the timesheet_line_id of this TimesheetRow.  # noqa: E501


        :return: The timesheet_line_id of this TimesheetRow.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._timesheet_line_id

    @timesheet_line_id.setter
    def timesheet_line_id(self, timesheet_line_id):
        """Sets the timesheet_line_id of this TimesheetRow.


        :param timesheet_line_id: The timesheet_line_id of this TimesheetRow.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._timesheet_line_id = timesheet_line_id

    @property
    def timesheet_id(self):
        """Gets the timesheet_id of this TimesheetRow.  # noqa: E501


        :return: The timesheet_id of this TimesheetRow.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._timesheet_id

    @timesheet_id.setter
    def timesheet_id(self, timesheet_id):
        """Sets the timesheet_id of this TimesheetRow.


        :param timesheet_id: The timesheet_id of this TimesheetRow.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._timesheet_id = timesheet_id

    @property
    def row_total(self):
        """Gets the row_total of this TimesheetRow.  # noqa: E501


        :return: The row_total of this TimesheetRow.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._row_total

    @row_total.setter
    def row_total(self, row_total):
        """Sets the row_total of this TimesheetRow.


        :param row_total: The row_total of this TimesheetRow.  # noqa: E501
        :type: DecimalNumber
        """

        self._row_total = row_total

    @property
    def row_progress(self):
        """Gets the row_progress of this TimesheetRow.  # noqa: E501


        :return: The row_progress of this TimesheetRow.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._row_progress

    @row_progress.setter
    def row_progress(self, row_progress):
        """Sets the row_progress of this TimesheetRow.


        :param row_progress: The row_progress of this TimesheetRow.  # noqa: E501
        :type: DecimalNumber
        """

        self._row_progress = row_progress

    @property
    def submitted(self):
        """Gets the submitted of this TimesheetRow.  # noqa: E501


        :return: The submitted of this TimesheetRow.  # noqa: E501
        :rtype: bool
        """
        return self._submitted

    @submitted.setter
    def submitted(self, submitted):
        """Sets the submitted of this TimesheetRow.


        :param submitted: The submitted of this TimesheetRow.  # noqa: E501
        :type: bool
        """

        self._submitted = submitted

    @property
    def time_approved(self):
        """Gets the time_approved of this TimesheetRow.  # noqa: E501


        :return: The time_approved of this TimesheetRow.  # noqa: E501
        :rtype: int
        """
        return self._time_approved

    @time_approved.setter
    def time_approved(self, time_approved):
        """Sets the time_approved of this TimesheetRow.


        :param time_approved: The time_approved of this TimesheetRow.  # noqa: E501
        :type: int
        """

        self._time_approved = time_approved

    @property
    def plan_approved(self):
        """Gets the plan_approved of this TimesheetRow.  # noqa: E501


        :return: The plan_approved of this TimesheetRow.  # noqa: E501
        :rtype: int
        """
        return self._plan_approved

    @plan_approved.setter
    def plan_approved(self, plan_approved):
        """Sets the plan_approved of this TimesheetRow.


        :param plan_approved: The plan_approved of this TimesheetRow.  # noqa: E501
        :type: int
        """

        self._plan_approved = plan_approved

    @property
    def plan(self):
        """Gets the plan of this TimesheetRow.  # noqa: E501


        :return: The plan of this TimesheetRow.  # noqa: E501
        :rtype: WorkPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this TimesheetRow.


        :param plan: The plan of this TimesheetRow.  # noqa: E501
        :type: WorkPlan
        """

        self._plan = plan

    @property
    def task(self):
        """Gets the task of this TimesheetRow.  # noqa: E501


        :return: The task of this TimesheetRow.  # noqa: E501
        :rtype: WorkPlanTask
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TimesheetRow.


        :param task: The task of this TimesheetRow.  # noqa: E501
        :type: WorkPlanTask
        """

        self._task = task

    @property
    def fields(self):
        """Gets the fields of this TimesheetRow.  # noqa: E501


        :return: The fields of this TimesheetRow.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TimesheetRow.


        :param fields: The fields of this TimesheetRow.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def data(self):
        """Gets the data of this TimesheetRow.  # noqa: E501


        :return: The data of this TimesheetRow.  # noqa: E501
        :rtype: list[TimesheetRowDate]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TimesheetRow.


        :param data: The data of this TimesheetRow.  # noqa: E501
        :type: list[TimesheetRowDate]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimesheetRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimesheetRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
