# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamMemberRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'removed': 'bool',
        'resource_id': 'GloballyUniqueIdentifier',
        'resource_allocation': 'DecimalNumber',
        'allocation_type': 'AllocationTypes'
    }

    attribute_map = {
        'removed': 'Removed',
        'resource_id': 'ResourceId',
        'resource_allocation': 'ResourceAllocation',
        'allocation_type': 'AllocationType'
    }

    def __init__(self, removed=None, resource_id=None, resource_allocation=None, allocation_type=None):  # noqa: E501
        """TeamMemberRequest - a model defined in Swagger"""  # noqa: E501
        self._removed = None
        self._resource_id = None
        self._resource_allocation = None
        self._allocation_type = None
        self.discriminator = None
        if removed is not None:
            self.removed = removed
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_allocation is not None:
            self.resource_allocation = resource_allocation
        if allocation_type is not None:
            self.allocation_type = allocation_type

    @property
    def removed(self):
        """Gets the removed of this TeamMemberRequest.  # noqa: E501


        :return: The removed of this TeamMemberRequest.  # noqa: E501
        :rtype: bool
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this TeamMemberRequest.


        :param removed: The removed of this TeamMemberRequest.  # noqa: E501
        :type: bool
        """

        self._removed = removed

    @property
    def resource_id(self):
        """Gets the resource_id of this TeamMemberRequest.  # noqa: E501


        :return: The resource_id of this TeamMemberRequest.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this TeamMemberRequest.


        :param resource_id: The resource_id of this TeamMemberRequest.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._resource_id = resource_id

    @property
    def resource_allocation(self):
        """Gets the resource_allocation of this TeamMemberRequest.  # noqa: E501


        :return: The resource_allocation of this TeamMemberRequest.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._resource_allocation

    @resource_allocation.setter
    def resource_allocation(self, resource_allocation):
        """Sets the resource_allocation of this TeamMemberRequest.


        :param resource_allocation: The resource_allocation of this TeamMemberRequest.  # noqa: E501
        :type: DecimalNumber
        """

        self._resource_allocation = resource_allocation

    @property
    def allocation_type(self):
        """Gets the allocation_type of this TeamMemberRequest.  # noqa: E501


        :return: The allocation_type of this TeamMemberRequest.  # noqa: E501
        :rtype: AllocationTypes
        """
        return self._allocation_type

    @allocation_type.setter
    def allocation_type(self, allocation_type):
        """Sets the allocation_type of this TeamMemberRequest.


        :param allocation_type: The allocation_type of this TeamMemberRequest.  # noqa: E501
        :type: AllocationTypes
        """

        self._allocation_type = allocation_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamMemberRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamMemberRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
