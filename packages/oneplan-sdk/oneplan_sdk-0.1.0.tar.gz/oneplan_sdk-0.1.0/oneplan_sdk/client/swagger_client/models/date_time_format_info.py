# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DateTimeFormatInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'am_designator': 'str',
        'calendar': 'Calendar',
        'date_separator': 'str',
        'first_day_of_week': 'DayOfWeek',
        'calendar_week_rule': 'CalendarWeekRule',
        'full_date_time_pattern': 'str',
        'long_date_pattern': 'str',
        'long_time_pattern': 'str',
        'month_day_pattern': 'str',
        'pm_designator': 'str',
        'rfc1123_pattern': 'str',
        'short_date_pattern': 'str',
        'short_time_pattern': 'str',
        'sortable_date_time_pattern': 'str',
        'time_separator': 'str',
        'universal_sortable_date_time_pattern': 'str',
        'year_month_pattern': 'str',
        'abbreviated_day_names': 'list[str]',
        'shortest_day_names': 'list[str]',
        'day_names': 'list[str]',
        'abbreviated_month_names': 'list[str]',
        'month_names': 'list[str]',
        'is_read_only': 'bool',
        'native_calendar_name': 'str',
        'abbreviated_month_genitive_names': 'list[str]',
        'month_genitive_names': 'list[str]'
    }

    attribute_map = {
        'am_designator': 'AMDesignator',
        'calendar': 'Calendar',
        'date_separator': 'DateSeparator',
        'first_day_of_week': 'FirstDayOfWeek',
        'calendar_week_rule': 'CalendarWeekRule',
        'full_date_time_pattern': 'FullDateTimePattern',
        'long_date_pattern': 'LongDatePattern',
        'long_time_pattern': 'LongTimePattern',
        'month_day_pattern': 'MonthDayPattern',
        'pm_designator': 'PMDesignator',
        'rfc1123_pattern': 'RFC1123Pattern',
        'short_date_pattern': 'ShortDatePattern',
        'short_time_pattern': 'ShortTimePattern',
        'sortable_date_time_pattern': 'SortableDateTimePattern',
        'time_separator': 'TimeSeparator',
        'universal_sortable_date_time_pattern': 'UniversalSortableDateTimePattern',
        'year_month_pattern': 'YearMonthPattern',
        'abbreviated_day_names': 'AbbreviatedDayNames',
        'shortest_day_names': 'ShortestDayNames',
        'day_names': 'DayNames',
        'abbreviated_month_names': 'AbbreviatedMonthNames',
        'month_names': 'MonthNames',
        'is_read_only': 'IsReadOnly',
        'native_calendar_name': 'NativeCalendarName',
        'abbreviated_month_genitive_names': 'AbbreviatedMonthGenitiveNames',
        'month_genitive_names': 'MonthGenitiveNames'
    }

    def __init__(self, am_designator=None, calendar=None, date_separator=None, first_day_of_week=None, calendar_week_rule=None, full_date_time_pattern=None, long_date_pattern=None, long_time_pattern=None, month_day_pattern=None, pm_designator=None, rfc1123_pattern=None, short_date_pattern=None, short_time_pattern=None, sortable_date_time_pattern=None, time_separator=None, universal_sortable_date_time_pattern=None, year_month_pattern=None, abbreviated_day_names=None, shortest_day_names=None, day_names=None, abbreviated_month_names=None, month_names=None, is_read_only=None, native_calendar_name=None, abbreviated_month_genitive_names=None, month_genitive_names=None):  # noqa: E501
        """DateTimeFormatInfo - a model defined in Swagger"""  # noqa: E501
        self._am_designator = None
        self._calendar = None
        self._date_separator = None
        self._first_day_of_week = None
        self._calendar_week_rule = None
        self._full_date_time_pattern = None
        self._long_date_pattern = None
        self._long_time_pattern = None
        self._month_day_pattern = None
        self._pm_designator = None
        self._rfc1123_pattern = None
        self._short_date_pattern = None
        self._short_time_pattern = None
        self._sortable_date_time_pattern = None
        self._time_separator = None
        self._universal_sortable_date_time_pattern = None
        self._year_month_pattern = None
        self._abbreviated_day_names = None
        self._shortest_day_names = None
        self._day_names = None
        self._abbreviated_month_names = None
        self._month_names = None
        self._is_read_only = None
        self._native_calendar_name = None
        self._abbreviated_month_genitive_names = None
        self._month_genitive_names = None
        self.discriminator = None
        if am_designator is not None:
            self.am_designator = am_designator
        if calendar is not None:
            self.calendar = calendar
        if date_separator is not None:
            self.date_separator = date_separator
        if first_day_of_week is not None:
            self.first_day_of_week = first_day_of_week
        if calendar_week_rule is not None:
            self.calendar_week_rule = calendar_week_rule
        if full_date_time_pattern is not None:
            self.full_date_time_pattern = full_date_time_pattern
        if long_date_pattern is not None:
            self.long_date_pattern = long_date_pattern
        if long_time_pattern is not None:
            self.long_time_pattern = long_time_pattern
        if month_day_pattern is not None:
            self.month_day_pattern = month_day_pattern
        if pm_designator is not None:
            self.pm_designator = pm_designator
        if rfc1123_pattern is not None:
            self.rfc1123_pattern = rfc1123_pattern
        if short_date_pattern is not None:
            self.short_date_pattern = short_date_pattern
        if short_time_pattern is not None:
            self.short_time_pattern = short_time_pattern
        if sortable_date_time_pattern is not None:
            self.sortable_date_time_pattern = sortable_date_time_pattern
        if time_separator is not None:
            self.time_separator = time_separator
        if universal_sortable_date_time_pattern is not None:
            self.universal_sortable_date_time_pattern = universal_sortable_date_time_pattern
        if year_month_pattern is not None:
            self.year_month_pattern = year_month_pattern
        if abbreviated_day_names is not None:
            self.abbreviated_day_names = abbreviated_day_names
        if shortest_day_names is not None:
            self.shortest_day_names = shortest_day_names
        if day_names is not None:
            self.day_names = day_names
        if abbreviated_month_names is not None:
            self.abbreviated_month_names = abbreviated_month_names
        if month_names is not None:
            self.month_names = month_names
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if native_calendar_name is not None:
            self.native_calendar_name = native_calendar_name
        if abbreviated_month_genitive_names is not None:
            self.abbreviated_month_genitive_names = abbreviated_month_genitive_names
        if month_genitive_names is not None:
            self.month_genitive_names = month_genitive_names

    @property
    def am_designator(self):
        """Gets the am_designator of this DateTimeFormatInfo.  # noqa: E501


        :return: The am_designator of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._am_designator

    @am_designator.setter
    def am_designator(self, am_designator):
        """Sets the am_designator of this DateTimeFormatInfo.


        :param am_designator: The am_designator of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._am_designator = am_designator

    @property
    def calendar(self):
        """Gets the calendar of this DateTimeFormatInfo.  # noqa: E501


        :return: The calendar of this DateTimeFormatInfo.  # noqa: E501
        :rtype: Calendar
        """
        return self._calendar

    @calendar.setter
    def calendar(self, calendar):
        """Sets the calendar of this DateTimeFormatInfo.


        :param calendar: The calendar of this DateTimeFormatInfo.  # noqa: E501
        :type: Calendar
        """

        self._calendar = calendar

    @property
    def date_separator(self):
        """Gets the date_separator of this DateTimeFormatInfo.  # noqa: E501


        :return: The date_separator of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._date_separator

    @date_separator.setter
    def date_separator(self, date_separator):
        """Sets the date_separator of this DateTimeFormatInfo.


        :param date_separator: The date_separator of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._date_separator = date_separator

    @property
    def first_day_of_week(self):
        """Gets the first_day_of_week of this DateTimeFormatInfo.  # noqa: E501


        :return: The first_day_of_week of this DateTimeFormatInfo.  # noqa: E501
        :rtype: DayOfWeek
        """
        return self._first_day_of_week

    @first_day_of_week.setter
    def first_day_of_week(self, first_day_of_week):
        """Sets the first_day_of_week of this DateTimeFormatInfo.


        :param first_day_of_week: The first_day_of_week of this DateTimeFormatInfo.  # noqa: E501
        :type: DayOfWeek
        """

        self._first_day_of_week = first_day_of_week

    @property
    def calendar_week_rule(self):
        """Gets the calendar_week_rule of this DateTimeFormatInfo.  # noqa: E501


        :return: The calendar_week_rule of this DateTimeFormatInfo.  # noqa: E501
        :rtype: CalendarWeekRule
        """
        return self._calendar_week_rule

    @calendar_week_rule.setter
    def calendar_week_rule(self, calendar_week_rule):
        """Sets the calendar_week_rule of this DateTimeFormatInfo.


        :param calendar_week_rule: The calendar_week_rule of this DateTimeFormatInfo.  # noqa: E501
        :type: CalendarWeekRule
        """

        self._calendar_week_rule = calendar_week_rule

    @property
    def full_date_time_pattern(self):
        """Gets the full_date_time_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The full_date_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._full_date_time_pattern

    @full_date_time_pattern.setter
    def full_date_time_pattern(self, full_date_time_pattern):
        """Sets the full_date_time_pattern of this DateTimeFormatInfo.


        :param full_date_time_pattern: The full_date_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._full_date_time_pattern = full_date_time_pattern

    @property
    def long_date_pattern(self):
        """Gets the long_date_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The long_date_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._long_date_pattern

    @long_date_pattern.setter
    def long_date_pattern(self, long_date_pattern):
        """Sets the long_date_pattern of this DateTimeFormatInfo.


        :param long_date_pattern: The long_date_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._long_date_pattern = long_date_pattern

    @property
    def long_time_pattern(self):
        """Gets the long_time_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The long_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._long_time_pattern

    @long_time_pattern.setter
    def long_time_pattern(self, long_time_pattern):
        """Sets the long_time_pattern of this DateTimeFormatInfo.


        :param long_time_pattern: The long_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._long_time_pattern = long_time_pattern

    @property
    def month_day_pattern(self):
        """Gets the month_day_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The month_day_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._month_day_pattern

    @month_day_pattern.setter
    def month_day_pattern(self, month_day_pattern):
        """Sets the month_day_pattern of this DateTimeFormatInfo.


        :param month_day_pattern: The month_day_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._month_day_pattern = month_day_pattern

    @property
    def pm_designator(self):
        """Gets the pm_designator of this DateTimeFormatInfo.  # noqa: E501


        :return: The pm_designator of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._pm_designator

    @pm_designator.setter
    def pm_designator(self, pm_designator):
        """Sets the pm_designator of this DateTimeFormatInfo.


        :param pm_designator: The pm_designator of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._pm_designator = pm_designator

    @property
    def rfc1123_pattern(self):
        """Gets the rfc1123_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The rfc1123_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._rfc1123_pattern

    @rfc1123_pattern.setter
    def rfc1123_pattern(self, rfc1123_pattern):
        """Sets the rfc1123_pattern of this DateTimeFormatInfo.


        :param rfc1123_pattern: The rfc1123_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._rfc1123_pattern = rfc1123_pattern

    @property
    def short_date_pattern(self):
        """Gets the short_date_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The short_date_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._short_date_pattern

    @short_date_pattern.setter
    def short_date_pattern(self, short_date_pattern):
        """Sets the short_date_pattern of this DateTimeFormatInfo.


        :param short_date_pattern: The short_date_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._short_date_pattern = short_date_pattern

    @property
    def short_time_pattern(self):
        """Gets the short_time_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The short_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._short_time_pattern

    @short_time_pattern.setter
    def short_time_pattern(self, short_time_pattern):
        """Sets the short_time_pattern of this DateTimeFormatInfo.


        :param short_time_pattern: The short_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._short_time_pattern = short_time_pattern

    @property
    def sortable_date_time_pattern(self):
        """Gets the sortable_date_time_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The sortable_date_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._sortable_date_time_pattern

    @sortable_date_time_pattern.setter
    def sortable_date_time_pattern(self, sortable_date_time_pattern):
        """Sets the sortable_date_time_pattern of this DateTimeFormatInfo.


        :param sortable_date_time_pattern: The sortable_date_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._sortable_date_time_pattern = sortable_date_time_pattern

    @property
    def time_separator(self):
        """Gets the time_separator of this DateTimeFormatInfo.  # noqa: E501


        :return: The time_separator of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._time_separator

    @time_separator.setter
    def time_separator(self, time_separator):
        """Sets the time_separator of this DateTimeFormatInfo.


        :param time_separator: The time_separator of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._time_separator = time_separator

    @property
    def universal_sortable_date_time_pattern(self):
        """Gets the universal_sortable_date_time_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The universal_sortable_date_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._universal_sortable_date_time_pattern

    @universal_sortable_date_time_pattern.setter
    def universal_sortable_date_time_pattern(self, universal_sortable_date_time_pattern):
        """Sets the universal_sortable_date_time_pattern of this DateTimeFormatInfo.


        :param universal_sortable_date_time_pattern: The universal_sortable_date_time_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._universal_sortable_date_time_pattern = universal_sortable_date_time_pattern

    @property
    def year_month_pattern(self):
        """Gets the year_month_pattern of this DateTimeFormatInfo.  # noqa: E501


        :return: The year_month_pattern of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._year_month_pattern

    @year_month_pattern.setter
    def year_month_pattern(self, year_month_pattern):
        """Sets the year_month_pattern of this DateTimeFormatInfo.


        :param year_month_pattern: The year_month_pattern of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._year_month_pattern = year_month_pattern

    @property
    def abbreviated_day_names(self):
        """Gets the abbreviated_day_names of this DateTimeFormatInfo.  # noqa: E501


        :return: The abbreviated_day_names of this DateTimeFormatInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._abbreviated_day_names

    @abbreviated_day_names.setter
    def abbreviated_day_names(self, abbreviated_day_names):
        """Sets the abbreviated_day_names of this DateTimeFormatInfo.


        :param abbreviated_day_names: The abbreviated_day_names of this DateTimeFormatInfo.  # noqa: E501
        :type: list[str]
        """

        self._abbreviated_day_names = abbreviated_day_names

    @property
    def shortest_day_names(self):
        """Gets the shortest_day_names of this DateTimeFormatInfo.  # noqa: E501


        :return: The shortest_day_names of this DateTimeFormatInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._shortest_day_names

    @shortest_day_names.setter
    def shortest_day_names(self, shortest_day_names):
        """Sets the shortest_day_names of this DateTimeFormatInfo.


        :param shortest_day_names: The shortest_day_names of this DateTimeFormatInfo.  # noqa: E501
        :type: list[str]
        """

        self._shortest_day_names = shortest_day_names

    @property
    def day_names(self):
        """Gets the day_names of this DateTimeFormatInfo.  # noqa: E501


        :return: The day_names of this DateTimeFormatInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._day_names

    @day_names.setter
    def day_names(self, day_names):
        """Sets the day_names of this DateTimeFormatInfo.


        :param day_names: The day_names of this DateTimeFormatInfo.  # noqa: E501
        :type: list[str]
        """

        self._day_names = day_names

    @property
    def abbreviated_month_names(self):
        """Gets the abbreviated_month_names of this DateTimeFormatInfo.  # noqa: E501


        :return: The abbreviated_month_names of this DateTimeFormatInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._abbreviated_month_names

    @abbreviated_month_names.setter
    def abbreviated_month_names(self, abbreviated_month_names):
        """Sets the abbreviated_month_names of this DateTimeFormatInfo.


        :param abbreviated_month_names: The abbreviated_month_names of this DateTimeFormatInfo.  # noqa: E501
        :type: list[str]
        """

        self._abbreviated_month_names = abbreviated_month_names

    @property
    def month_names(self):
        """Gets the month_names of this DateTimeFormatInfo.  # noqa: E501


        :return: The month_names of this DateTimeFormatInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._month_names

    @month_names.setter
    def month_names(self, month_names):
        """Sets the month_names of this DateTimeFormatInfo.


        :param month_names: The month_names of this DateTimeFormatInfo.  # noqa: E501
        :type: list[str]
        """

        self._month_names = month_names

    @property
    def is_read_only(self):
        """Gets the is_read_only of this DateTimeFormatInfo.  # noqa: E501


        :return: The is_read_only of this DateTimeFormatInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this DateTimeFormatInfo.


        :param is_read_only: The is_read_only of this DateTimeFormatInfo.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def native_calendar_name(self):
        """Gets the native_calendar_name of this DateTimeFormatInfo.  # noqa: E501


        :return: The native_calendar_name of this DateTimeFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._native_calendar_name

    @native_calendar_name.setter
    def native_calendar_name(self, native_calendar_name):
        """Sets the native_calendar_name of this DateTimeFormatInfo.


        :param native_calendar_name: The native_calendar_name of this DateTimeFormatInfo.  # noqa: E501
        :type: str
        """

        self._native_calendar_name = native_calendar_name

    @property
    def abbreviated_month_genitive_names(self):
        """Gets the abbreviated_month_genitive_names of this DateTimeFormatInfo.  # noqa: E501


        :return: The abbreviated_month_genitive_names of this DateTimeFormatInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._abbreviated_month_genitive_names

    @abbreviated_month_genitive_names.setter
    def abbreviated_month_genitive_names(self, abbreviated_month_genitive_names):
        """Sets the abbreviated_month_genitive_names of this DateTimeFormatInfo.


        :param abbreviated_month_genitive_names: The abbreviated_month_genitive_names of this DateTimeFormatInfo.  # noqa: E501
        :type: list[str]
        """

        self._abbreviated_month_genitive_names = abbreviated_month_genitive_names

    @property
    def month_genitive_names(self):
        """Gets the month_genitive_names of this DateTimeFormatInfo.  # noqa: E501


        :return: The month_genitive_names of this DateTimeFormatInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._month_genitive_names

    @month_genitive_names.setter
    def month_genitive_names(self, month_genitive_names):
        """Sets the month_genitive_names of this DateTimeFormatInfo.


        :param month_genitive_names: The month_genitive_names of this DateTimeFormatInfo.  # noqa: E501
        :type: list[str]
        """

        self._month_genitive_names = month_genitive_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DateTimeFormatInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateTimeFormatInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
