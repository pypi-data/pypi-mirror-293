# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notfication_template_id': 'GloballyUniqueIdentifier',
        'notification_content': 'str',
        'notification_subject': 'str',
        'from_user_id': 'GloballyUniqueIdentifier',
        'to_user_id': 'GloballyUniqueIdentifier',
        'planner_id': 'GloballyUniqueIdentifier',
        'notification_time': 'date',
        'read': 'bool',
        'processed': 'bool',
        'params': 'dict(str, str)',
        'complete': 'bool',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'notfication_template_id': 'NotficationTemplateId',
        'notification_content': 'NotificationContent',
        'notification_subject': 'NotificationSubject',
        'from_user_id': 'FromUserId',
        'to_user_id': 'ToUserId',
        'planner_id': 'PlannerId',
        'notification_time': 'NotificationTime',
        'read': 'Read',
        'processed': 'Processed',
        'params': 'Params',
        'complete': 'Complete',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, notfication_template_id=None, notification_content=None, notification_subject=None, from_user_id=None, to_user_id=None, planner_id=None, notification_time=None, read=None, processed=None, params=None, complete=None, id=None, config_id=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501
        self._notfication_template_id = None
        self._notification_content = None
        self._notification_subject = None
        self._from_user_id = None
        self._to_user_id = None
        self._planner_id = None
        self._notification_time = None
        self._read = None
        self._processed = None
        self._params = None
        self._complete = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if notfication_template_id is not None:
            self.notfication_template_id = notfication_template_id
        if notification_content is not None:
            self.notification_content = notification_content
        if notification_subject is not None:
            self.notification_subject = notification_subject
        if from_user_id is not None:
            self.from_user_id = from_user_id
        if to_user_id is not None:
            self.to_user_id = to_user_id
        if planner_id is not None:
            self.planner_id = planner_id
        if notification_time is not None:
            self.notification_time = notification_time
        if read is not None:
            self.read = read
        if processed is not None:
            self.processed = processed
        if params is not None:
            self.params = params
        if complete is not None:
            self.complete = complete
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def notfication_template_id(self):
        """Gets the notfication_template_id of this Notification.  # noqa: E501


        :return: The notfication_template_id of this Notification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._notfication_template_id

    @notfication_template_id.setter
    def notfication_template_id(self, notfication_template_id):
        """Sets the notfication_template_id of this Notification.


        :param notfication_template_id: The notfication_template_id of this Notification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._notfication_template_id = notfication_template_id

    @property
    def notification_content(self):
        """Gets the notification_content of this Notification.  # noqa: E501


        :return: The notification_content of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._notification_content

    @notification_content.setter
    def notification_content(self, notification_content):
        """Sets the notification_content of this Notification.


        :param notification_content: The notification_content of this Notification.  # noqa: E501
        :type: str
        """

        self._notification_content = notification_content

    @property
    def notification_subject(self):
        """Gets the notification_subject of this Notification.  # noqa: E501


        :return: The notification_subject of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._notification_subject

    @notification_subject.setter
    def notification_subject(self, notification_subject):
        """Sets the notification_subject of this Notification.


        :param notification_subject: The notification_subject of this Notification.  # noqa: E501
        :type: str
        """

        self._notification_subject = notification_subject

    @property
    def from_user_id(self):
        """Gets the from_user_id of this Notification.  # noqa: E501


        :return: The from_user_id of this Notification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._from_user_id

    @from_user_id.setter
    def from_user_id(self, from_user_id):
        """Sets the from_user_id of this Notification.


        :param from_user_id: The from_user_id of this Notification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._from_user_id = from_user_id

    @property
    def to_user_id(self):
        """Gets the to_user_id of this Notification.  # noqa: E501


        :return: The to_user_id of this Notification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._to_user_id

    @to_user_id.setter
    def to_user_id(self, to_user_id):
        """Sets the to_user_id of this Notification.


        :param to_user_id: The to_user_id of this Notification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._to_user_id = to_user_id

    @property
    def planner_id(self):
        """Gets the planner_id of this Notification.  # noqa: E501


        :return: The planner_id of this Notification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._planner_id

    @planner_id.setter
    def planner_id(self, planner_id):
        """Sets the planner_id of this Notification.


        :param planner_id: The planner_id of this Notification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._planner_id = planner_id

    @property
    def notification_time(self):
        """Gets the notification_time of this Notification.  # noqa: E501


        :return: The notification_time of this Notification.  # noqa: E501
        :rtype: date
        """
        return self._notification_time

    @notification_time.setter
    def notification_time(self, notification_time):
        """Sets the notification_time of this Notification.


        :param notification_time: The notification_time of this Notification.  # noqa: E501
        :type: date
        """

        self._notification_time = notification_time

    @property
    def read(self):
        """Gets the read of this Notification.  # noqa: E501


        :return: The read of this Notification.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Notification.


        :param read: The read of this Notification.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def processed(self):
        """Gets the processed of this Notification.  # noqa: E501


        :return: The processed of this Notification.  # noqa: E501
        :rtype: bool
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this Notification.


        :param processed: The processed of this Notification.  # noqa: E501
        :type: bool
        """

        self._processed = processed

    @property
    def params(self):
        """Gets the params of this Notification.  # noqa: E501


        :return: The params of this Notification.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Notification.


        :param params: The params of this Notification.  # noqa: E501
        :type: dict(str, str)
        """

        self._params = params

    @property
    def complete(self):
        """Gets the complete of this Notification.  # noqa: E501


        :return: The complete of this Notification.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this Notification.


        :param complete: The complete of this Notification.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def id(self):
        """Gets the id of this Notification.  # noqa: E501


        :return: The id of this Notification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.


        :param id: The id of this Notification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this Notification.  # noqa: E501


        :return: The config_id of this Notification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this Notification.


        :param config_id: The config_id of this Notification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
