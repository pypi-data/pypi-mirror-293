# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntegratedSystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id': 'GloballyUniqueIdentifier',
        'item_url': 'str',
        'item_id': 'str',
        'transaction_id': 'GloballyUniqueIdentifier',
        'last_export': 'date',
        'last_import': 'date',
        'integration_version': 'int',
        'properties': 'dict(str, Object)'
    }

    attribute_map = {
        'integration_id': 'IntegrationId',
        'item_url': 'ItemUrl',
        'item_id': 'ItemId',
        'transaction_id': 'TransactionId',
        'last_export': 'LastExport',
        'last_import': 'LastImport',
        'integration_version': 'IntegrationVersion',
        'properties': 'Properties'
    }

    def __init__(self, integration_id=None, item_url=None, item_id=None, transaction_id=None, last_export=None, last_import=None, integration_version=None, properties=None):  # noqa: E501
        """IntegratedSystem - a model defined in Swagger"""  # noqa: E501
        self._integration_id = None
        self._item_url = None
        self._item_id = None
        self._transaction_id = None
        self._last_export = None
        self._last_import = None
        self._integration_version = None
        self._properties = None
        self.discriminator = None
        if integration_id is not None:
            self.integration_id = integration_id
        if item_url is not None:
            self.item_url = item_url
        if item_id is not None:
            self.item_id = item_id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if last_export is not None:
            self.last_export = last_export
        if last_import is not None:
            self.last_import = last_import
        if integration_version is not None:
            self.integration_version = integration_version
        if properties is not None:
            self.properties = properties

    @property
    def integration_id(self):
        """Gets the integration_id of this IntegratedSystem.  # noqa: E501


        :return: The integration_id of this IntegratedSystem.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this IntegratedSystem.


        :param integration_id: The integration_id of this IntegratedSystem.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._integration_id = integration_id

    @property
    def item_url(self):
        """Gets the item_url of this IntegratedSystem.  # noqa: E501


        :return: The item_url of this IntegratedSystem.  # noqa: E501
        :rtype: str
        """
        return self._item_url

    @item_url.setter
    def item_url(self, item_url):
        """Sets the item_url of this IntegratedSystem.


        :param item_url: The item_url of this IntegratedSystem.  # noqa: E501
        :type: str
        """

        self._item_url = item_url

    @property
    def item_id(self):
        """Gets the item_id of this IntegratedSystem.  # noqa: E501


        :return: The item_id of this IntegratedSystem.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this IntegratedSystem.


        :param item_id: The item_id of this IntegratedSystem.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this IntegratedSystem.  # noqa: E501


        :return: The transaction_id of this IntegratedSystem.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this IntegratedSystem.


        :param transaction_id: The transaction_id of this IntegratedSystem.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._transaction_id = transaction_id

    @property
    def last_export(self):
        """Gets the last_export of this IntegratedSystem.  # noqa: E501


        :return: The last_export of this IntegratedSystem.  # noqa: E501
        :rtype: date
        """
        return self._last_export

    @last_export.setter
    def last_export(self, last_export):
        """Sets the last_export of this IntegratedSystem.


        :param last_export: The last_export of this IntegratedSystem.  # noqa: E501
        :type: date
        """

        self._last_export = last_export

    @property
    def last_import(self):
        """Gets the last_import of this IntegratedSystem.  # noqa: E501


        :return: The last_import of this IntegratedSystem.  # noqa: E501
        :rtype: date
        """
        return self._last_import

    @last_import.setter
    def last_import(self, last_import):
        """Sets the last_import of this IntegratedSystem.


        :param last_import: The last_import of this IntegratedSystem.  # noqa: E501
        :type: date
        """

        self._last_import = last_import

    @property
    def integration_version(self):
        """Gets the integration_version of this IntegratedSystem.  # noqa: E501


        :return: The integration_version of this IntegratedSystem.  # noqa: E501
        :rtype: int
        """
        return self._integration_version

    @integration_version.setter
    def integration_version(self, integration_version):
        """Sets the integration_version of this IntegratedSystem.


        :param integration_version: The integration_version of this IntegratedSystem.  # noqa: E501
        :type: int
        """

        self._integration_version = integration_version

    @property
    def properties(self):
        """Gets the properties of this IntegratedSystem.  # noqa: E501


        :return: The properties of this IntegratedSystem.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this IntegratedSystem.


        :param properties: The properties of this IntegratedSystem.  # noqa: E501
        :type: dict(str, Object)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegratedSystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegratedSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
