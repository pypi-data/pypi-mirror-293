# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkPlanTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_type_id': 'GloballyUniqueIdentifier',
        'name': 'str',
        'created': 'date',
        'modified': 'date',
        'author': 'str',
        'editor': 'str',
        'assigned_to': 'list[GloballyUniqueIdentifier]',
        'assignments': 'list[TaskAssignment]',
        'parent_id': 'GloballyUniqueIdentifier',
        'work_type_parent_id': 'GloballyUniqueIdentifier',
        'work_type_index': 'int',
        'fields': 'dict(str, Object)',
        'index': 'int',
        'complete': 'bool',
        'comments': 'list[TaskComment]',
        'start_date': 'date',
        'due_date': 'date',
        'task_schedule_type': 'TaskType',
        'status_update': 'StatusUpdateClass',
        'last_comment': 'date',
        'is_scheduled': 'bool',
        'integration': 'TaskIntegrationInfo',
        'work_plan_id': 'GloballyUniqueIdentifier',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'work_type_id': 'WorkTypeId',
        'name': 'Name',
        'created': 'Created',
        'modified': 'Modified',
        'author': 'Author',
        'editor': 'Editor',
        'assigned_to': 'AssignedTo',
        'assignments': 'Assignments',
        'parent_id': 'ParentId',
        'work_type_parent_id': 'WorkTypeParentId',
        'work_type_index': 'WorkTypeIndex',
        'fields': 'Fields',
        'index': 'Index',
        'complete': 'Complete',
        'comments': 'Comments',
        'start_date': 'StartDate',
        'due_date': 'DueDate',
        'task_schedule_type': 'TaskScheduleType',
        'status_update': 'StatusUpdate',
        'last_comment': 'LastComment',
        'is_scheduled': 'IsScheduled',
        'integration': 'Integration',
        'work_plan_id': 'WorkPlanId',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, work_type_id=None, name=None, created=None, modified=None, author=None, editor=None, assigned_to=None, assignments=None, parent_id=None, work_type_parent_id=None, work_type_index=None, fields=None, index=None, complete=None, comments=None, start_date=None, due_date=None, task_schedule_type=None, status_update=None, last_comment=None, is_scheduled=None, integration=None, work_plan_id=None, id=None, config_id=None):  # noqa: E501
        """WorkPlanTask - a model defined in Swagger"""  # noqa: E501
        self._work_type_id = None
        self._name = None
        self._created = None
        self._modified = None
        self._author = None
        self._editor = None
        self._assigned_to = None
        self._assignments = None
        self._parent_id = None
        self._work_type_parent_id = None
        self._work_type_index = None
        self._fields = None
        self._index = None
        self._complete = None
        self._comments = None
        self._start_date = None
        self._due_date = None
        self._task_schedule_type = None
        self._status_update = None
        self._last_comment = None
        self._is_scheduled = None
        self._integration = None
        self._work_plan_id = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if work_type_id is not None:
            self.work_type_id = work_type_id
        if name is not None:
            self.name = name
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if author is not None:
            self.author = author
        if editor is not None:
            self.editor = editor
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if assignments is not None:
            self.assignments = assignments
        if parent_id is not None:
            self.parent_id = parent_id
        if work_type_parent_id is not None:
            self.work_type_parent_id = work_type_parent_id
        if work_type_index is not None:
            self.work_type_index = work_type_index
        if fields is not None:
            self.fields = fields
        if index is not None:
            self.index = index
        if complete is not None:
            self.complete = complete
        if comments is not None:
            self.comments = comments
        if start_date is not None:
            self.start_date = start_date
        if due_date is not None:
            self.due_date = due_date
        if task_schedule_type is not None:
            self.task_schedule_type = task_schedule_type
        if status_update is not None:
            self.status_update = status_update
        if last_comment is not None:
            self.last_comment = last_comment
        if is_scheduled is not None:
            self.is_scheduled = is_scheduled
        if integration is not None:
            self.integration = integration
        if work_plan_id is not None:
            self.work_plan_id = work_plan_id
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def work_type_id(self):
        """Gets the work_type_id of this WorkPlanTask.  # noqa: E501


        :return: The work_type_id of this WorkPlanTask.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_type_id

    @work_type_id.setter
    def work_type_id(self, work_type_id):
        """Sets the work_type_id of this WorkPlanTask.


        :param work_type_id: The work_type_id of this WorkPlanTask.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_type_id = work_type_id

    @property
    def name(self):
        """Gets the name of this WorkPlanTask.  # noqa: E501


        :return: The name of this WorkPlanTask.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkPlanTask.


        :param name: The name of this WorkPlanTask.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created(self):
        """Gets the created of this WorkPlanTask.  # noqa: E501


        :return: The created of this WorkPlanTask.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WorkPlanTask.


        :param created: The created of this WorkPlanTask.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this WorkPlanTask.  # noqa: E501


        :return: The modified of this WorkPlanTask.  # noqa: E501
        :rtype: date
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this WorkPlanTask.


        :param modified: The modified of this WorkPlanTask.  # noqa: E501
        :type: date
        """

        self._modified = modified

    @property
    def author(self):
        """Gets the author of this WorkPlanTask.  # noqa: E501


        :return: The author of this WorkPlanTask.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this WorkPlanTask.


        :param author: The author of this WorkPlanTask.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def editor(self):
        """Gets the editor of this WorkPlanTask.  # noqa: E501


        :return: The editor of this WorkPlanTask.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this WorkPlanTask.


        :param editor: The editor of this WorkPlanTask.  # noqa: E501
        :type: str
        """

        self._editor = editor

    @property
    def assigned_to(self):
        """Gets the assigned_to of this WorkPlanTask.  # noqa: E501


        :return: The assigned_to of this WorkPlanTask.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this WorkPlanTask.


        :param assigned_to: The assigned_to of this WorkPlanTask.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._assigned_to = assigned_to

    @property
    def assignments(self):
        """Gets the assignments of this WorkPlanTask.  # noqa: E501


        :return: The assignments of this WorkPlanTask.  # noqa: E501
        :rtype: list[TaskAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this WorkPlanTask.


        :param assignments: The assignments of this WorkPlanTask.  # noqa: E501
        :type: list[TaskAssignment]
        """

        self._assignments = assignments

    @property
    def parent_id(self):
        """Gets the parent_id of this WorkPlanTask.  # noqa: E501


        :return: The parent_id of this WorkPlanTask.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this WorkPlanTask.


        :param parent_id: The parent_id of this WorkPlanTask.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._parent_id = parent_id

    @property
    def work_type_parent_id(self):
        """Gets the work_type_parent_id of this WorkPlanTask.  # noqa: E501


        :return: The work_type_parent_id of this WorkPlanTask.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_type_parent_id

    @work_type_parent_id.setter
    def work_type_parent_id(self, work_type_parent_id):
        """Sets the work_type_parent_id of this WorkPlanTask.


        :param work_type_parent_id: The work_type_parent_id of this WorkPlanTask.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_type_parent_id = work_type_parent_id

    @property
    def work_type_index(self):
        """Gets the work_type_index of this WorkPlanTask.  # noqa: E501


        :return: The work_type_index of this WorkPlanTask.  # noqa: E501
        :rtype: int
        """
        return self._work_type_index

    @work_type_index.setter
    def work_type_index(self, work_type_index):
        """Sets the work_type_index of this WorkPlanTask.


        :param work_type_index: The work_type_index of this WorkPlanTask.  # noqa: E501
        :type: int
        """

        self._work_type_index = work_type_index

    @property
    def fields(self):
        """Gets the fields of this WorkPlanTask.  # noqa: E501


        :return: The fields of this WorkPlanTask.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this WorkPlanTask.


        :param fields: The fields of this WorkPlanTask.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def index(self):
        """Gets the index of this WorkPlanTask.  # noqa: E501


        :return: The index of this WorkPlanTask.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this WorkPlanTask.


        :param index: The index of this WorkPlanTask.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def complete(self):
        """Gets the complete of this WorkPlanTask.  # noqa: E501


        :return: The complete of this WorkPlanTask.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this WorkPlanTask.


        :param complete: The complete of this WorkPlanTask.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def comments(self):
        """Gets the comments of this WorkPlanTask.  # noqa: E501


        :return: The comments of this WorkPlanTask.  # noqa: E501
        :rtype: list[TaskComment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WorkPlanTask.


        :param comments: The comments of this WorkPlanTask.  # noqa: E501
        :type: list[TaskComment]
        """

        self._comments = comments

    @property
    def start_date(self):
        """Gets the start_date of this WorkPlanTask.  # noqa: E501


        :return: The start_date of this WorkPlanTask.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this WorkPlanTask.


        :param start_date: The start_date of this WorkPlanTask.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def due_date(self):
        """Gets the due_date of this WorkPlanTask.  # noqa: E501


        :return: The due_date of this WorkPlanTask.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this WorkPlanTask.


        :param due_date: The due_date of this WorkPlanTask.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def task_schedule_type(self):
        """Gets the task_schedule_type of this WorkPlanTask.  # noqa: E501


        :return: The task_schedule_type of this WorkPlanTask.  # noqa: E501
        :rtype: TaskType
        """
        return self._task_schedule_type

    @task_schedule_type.setter
    def task_schedule_type(self, task_schedule_type):
        """Sets the task_schedule_type of this WorkPlanTask.


        :param task_schedule_type: The task_schedule_type of this WorkPlanTask.  # noqa: E501
        :type: TaskType
        """

        self._task_schedule_type = task_schedule_type

    @property
    def status_update(self):
        """Gets the status_update of this WorkPlanTask.  # noqa: E501


        :return: The status_update of this WorkPlanTask.  # noqa: E501
        :rtype: StatusUpdateClass
        """
        return self._status_update

    @status_update.setter
    def status_update(self, status_update):
        """Sets the status_update of this WorkPlanTask.


        :param status_update: The status_update of this WorkPlanTask.  # noqa: E501
        :type: StatusUpdateClass
        """

        self._status_update = status_update

    @property
    def last_comment(self):
        """Gets the last_comment of this WorkPlanTask.  # noqa: E501


        :return: The last_comment of this WorkPlanTask.  # noqa: E501
        :rtype: date
        """
        return self._last_comment

    @last_comment.setter
    def last_comment(self, last_comment):
        """Sets the last_comment of this WorkPlanTask.


        :param last_comment: The last_comment of this WorkPlanTask.  # noqa: E501
        :type: date
        """

        self._last_comment = last_comment

    @property
    def is_scheduled(self):
        """Gets the is_scheduled of this WorkPlanTask.  # noqa: E501


        :return: The is_scheduled of this WorkPlanTask.  # noqa: E501
        :rtype: bool
        """
        return self._is_scheduled

    @is_scheduled.setter
    def is_scheduled(self, is_scheduled):
        """Sets the is_scheduled of this WorkPlanTask.


        :param is_scheduled: The is_scheduled of this WorkPlanTask.  # noqa: E501
        :type: bool
        """

        self._is_scheduled = is_scheduled

    @property
    def integration(self):
        """Gets the integration of this WorkPlanTask.  # noqa: E501


        :return: The integration of this WorkPlanTask.  # noqa: E501
        :rtype: TaskIntegrationInfo
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """Sets the integration of this WorkPlanTask.


        :param integration: The integration of this WorkPlanTask.  # noqa: E501
        :type: TaskIntegrationInfo
        """

        self._integration = integration

    @property
    def work_plan_id(self):
        """Gets the work_plan_id of this WorkPlanTask.  # noqa: E501


        :return: The work_plan_id of this WorkPlanTask.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_plan_id

    @work_plan_id.setter
    def work_plan_id(self, work_plan_id):
        """Sets the work_plan_id of this WorkPlanTask.


        :param work_plan_id: The work_plan_id of this WorkPlanTask.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_plan_id = work_plan_id

    @property
    def id(self):
        """Gets the id of this WorkPlanTask.  # noqa: E501


        :return: The id of this WorkPlanTask.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkPlanTask.


        :param id: The id of this WorkPlanTask.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this WorkPlanTask.  # noqa: E501


        :return: The config_id of this WorkPlanTask.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this WorkPlanTask.


        :param config_id: The config_id of this WorkPlanTask.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkPlanTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkPlanTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
