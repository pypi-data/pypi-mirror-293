# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'GloballyUniqueIdentifier',
        'plan_id': 'GloballyUniqueIdentifier',
        'resource_id': 'GloballyUniqueIdentifier',
        'report_id': 'GloballyUniqueIdentifier',
        'event_time': 'date',
        'processed': 'bool',
        'message': 'str',
        'values': 'dict(str, Object)',
        'accesstoken': 'str',
        'base_class': 'str',
        'base_class_json': 'str',
        'sequence_number': 'int',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'event_id': 'EventId',
        'plan_id': 'PlanId',
        'resource_id': 'ResourceId',
        'report_id': 'ReportId',
        'event_time': 'EventTime',
        'processed': 'Processed',
        'message': 'Message',
        'values': 'Values',
        'accesstoken': 'accesstoken',
        'base_class': 'BaseClass',
        'base_class_json': 'BaseClassJSON',
        'sequence_number': 'SequenceNumber',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, event_id=None, plan_id=None, resource_id=None, report_id=None, event_time=None, processed=None, message=None, values=None, accesstoken=None, base_class=None, base_class_json=None, sequence_number=None, id=None, config_id=None):  # noqa: E501
        """EventAction - a model defined in Swagger"""  # noqa: E501
        self._event_id = None
        self._plan_id = None
        self._resource_id = None
        self._report_id = None
        self._event_time = None
        self._processed = None
        self._message = None
        self._values = None
        self._accesstoken = None
        self._base_class = None
        self._base_class_json = None
        self._sequence_number = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if event_id is not None:
            self.event_id = event_id
        if plan_id is not None:
            self.plan_id = plan_id
        if resource_id is not None:
            self.resource_id = resource_id
        if report_id is not None:
            self.report_id = report_id
        if event_time is not None:
            self.event_time = event_time
        if processed is not None:
            self.processed = processed
        if message is not None:
            self.message = message
        if values is not None:
            self.values = values
        if accesstoken is not None:
            self.accesstoken = accesstoken
        if base_class is not None:
            self.base_class = base_class
        if base_class_json is not None:
            self.base_class_json = base_class_json
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def event_id(self):
        """Gets the event_id of this EventAction.  # noqa: E501


        :return: The event_id of this EventAction.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EventAction.


        :param event_id: The event_id of this EventAction.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._event_id = event_id

    @property
    def plan_id(self):
        """Gets the plan_id of this EventAction.  # noqa: E501


        :return: The plan_id of this EventAction.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this EventAction.


        :param plan_id: The plan_id of this EventAction.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_id = plan_id

    @property
    def resource_id(self):
        """Gets the resource_id of this EventAction.  # noqa: E501


        :return: The resource_id of this EventAction.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this EventAction.


        :param resource_id: The resource_id of this EventAction.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._resource_id = resource_id

    @property
    def report_id(self):
        """Gets the report_id of this EventAction.  # noqa: E501


        :return: The report_id of this EventAction.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this EventAction.


        :param report_id: The report_id of this EventAction.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._report_id = report_id

    @property
    def event_time(self):
        """Gets the event_time of this EventAction.  # noqa: E501


        :return: The event_time of this EventAction.  # noqa: E501
        :rtype: date
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this EventAction.


        :param event_time: The event_time of this EventAction.  # noqa: E501
        :type: date
        """

        self._event_time = event_time

    @property
    def processed(self):
        """Gets the processed of this EventAction.  # noqa: E501


        :return: The processed of this EventAction.  # noqa: E501
        :rtype: bool
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this EventAction.


        :param processed: The processed of this EventAction.  # noqa: E501
        :type: bool
        """

        self._processed = processed

    @property
    def message(self):
        """Gets the message of this EventAction.  # noqa: E501


        :return: The message of this EventAction.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventAction.


        :param message: The message of this EventAction.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def values(self):
        """Gets the values of this EventAction.  # noqa: E501


        :return: The values of this EventAction.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this EventAction.


        :param values: The values of this EventAction.  # noqa: E501
        :type: dict(str, Object)
        """

        self._values = values

    @property
    def accesstoken(self):
        """Gets the accesstoken of this EventAction.  # noqa: E501


        :return: The accesstoken of this EventAction.  # noqa: E501
        :rtype: str
        """
        return self._accesstoken

    @accesstoken.setter
    def accesstoken(self, accesstoken):
        """Sets the accesstoken of this EventAction.


        :param accesstoken: The accesstoken of this EventAction.  # noqa: E501
        :type: str
        """

        self._accesstoken = accesstoken

    @property
    def base_class(self):
        """Gets the base_class of this EventAction.  # noqa: E501


        :return: The base_class of this EventAction.  # noqa: E501
        :rtype: str
        """
        return self._base_class

    @base_class.setter
    def base_class(self, base_class):
        """Sets the base_class of this EventAction.


        :param base_class: The base_class of this EventAction.  # noqa: E501
        :type: str
        """

        self._base_class = base_class

    @property
    def base_class_json(self):
        """Gets the base_class_json of this EventAction.  # noqa: E501


        :return: The base_class_json of this EventAction.  # noqa: E501
        :rtype: str
        """
        return self._base_class_json

    @base_class_json.setter
    def base_class_json(self, base_class_json):
        """Sets the base_class_json of this EventAction.


        :param base_class_json: The base_class_json of this EventAction.  # noqa: E501
        :type: str
        """

        self._base_class_json = base_class_json

    @property
    def sequence_number(self):
        """Gets the sequence_number of this EventAction.  # noqa: E501


        :return: The sequence_number of this EventAction.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this EventAction.


        :param sequence_number: The sequence_number of this EventAction.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def id(self):
        """Gets the id of this EventAction.  # noqa: E501


        :return: The id of this EventAction.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventAction.


        :param id: The id of this EventAction.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this EventAction.  # noqa: E501


        :return: The config_id of this EventAction.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this EventAction.


        :param config_id: The config_id of this EventAction.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
