# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FindPlansRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'TableFilter',
        'max_items': 'int',
        'sort': 'str',
        'sort_direction': 'str'
    }

    attribute_map = {
        'filter': 'Filter',
        'max_items': 'MaxItems',
        'sort': 'Sort',
        'sort_direction': 'SortDirection'
    }

    def __init__(self, filter=None, max_items=None, sort=None, sort_direction=None):  # noqa: E501
        """FindPlansRequest - a model defined in Swagger"""  # noqa: E501
        self._filter = None
        self._max_items = None
        self._sort = None
        self._sort_direction = None
        self.discriminator = None
        if filter is not None:
            self.filter = filter
        if max_items is not None:
            self.max_items = max_items
        if sort is not None:
            self.sort = sort
        if sort_direction is not None:
            self.sort_direction = sort_direction

    @property
    def filter(self):
        """Gets the filter of this FindPlansRequest.  # noqa: E501


        :return: The filter of this FindPlansRequest.  # noqa: E501
        :rtype: TableFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this FindPlansRequest.


        :param filter: The filter of this FindPlansRequest.  # noqa: E501
        :type: TableFilter
        """

        self._filter = filter

    @property
    def max_items(self):
        """Gets the max_items of this FindPlansRequest.  # noqa: E501


        :return: The max_items of this FindPlansRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this FindPlansRequest.


        :param max_items: The max_items of this FindPlansRequest.  # noqa: E501
        :type: int
        """

        self._max_items = max_items

    @property
    def sort(self):
        """Gets the sort of this FindPlansRequest.  # noqa: E501


        :return: The sort of this FindPlansRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this FindPlansRequest.


        :param sort: The sort of this FindPlansRequest.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def sort_direction(self):
        """Gets the sort_direction of this FindPlansRequest.  # noqa: E501


        :return: The sort_direction of this FindPlansRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_direction

    @sort_direction.setter
    def sort_direction(self, sort_direction):
        """Sets the sort_direction of this FindPlansRequest.


        :param sort_direction: The sort_direction of this FindPlansRequest.  # noqa: E501
        :type: str
        """

        self._sort_direction = sort_direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FindPlansRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindPlansRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
