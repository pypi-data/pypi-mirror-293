# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusUpdateClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_replacements': 'dict(str, GloballyUniqueIdentifier)',
        'has_updates': 'bool',
        'modified': 'date',
        'editor': 'str',
        'fields': 'dict(str, Object)',
        'calc_fields': 'dict(str, Object)',
        'state': 'StatusUpdateState',
        'approve_reject_by': 'str',
        'approve_reject_date': 'date'
    }

    attribute_map = {
        'resource_replacements': 'ResourceReplacements',
        'has_updates': 'HasUpdates',
        'modified': 'Modified',
        'editor': 'Editor',
        'fields': 'Fields',
        'calc_fields': 'CalcFields',
        'state': 'State',
        'approve_reject_by': 'ApproveRejectBy',
        'approve_reject_date': 'ApproveRejectDate'
    }

    def __init__(self, resource_replacements=None, has_updates=None, modified=None, editor=None, fields=None, calc_fields=None, state=None, approve_reject_by=None, approve_reject_date=None):  # noqa: E501
        """StatusUpdateClass - a model defined in Swagger"""  # noqa: E501
        self._resource_replacements = None
        self._has_updates = None
        self._modified = None
        self._editor = None
        self._fields = None
        self._calc_fields = None
        self._state = None
        self._approve_reject_by = None
        self._approve_reject_date = None
        self.discriminator = None
        if resource_replacements is not None:
            self.resource_replacements = resource_replacements
        if has_updates is not None:
            self.has_updates = has_updates
        if modified is not None:
            self.modified = modified
        if editor is not None:
            self.editor = editor
        if fields is not None:
            self.fields = fields
        if calc_fields is not None:
            self.calc_fields = calc_fields
        if state is not None:
            self.state = state
        if approve_reject_by is not None:
            self.approve_reject_by = approve_reject_by
        if approve_reject_date is not None:
            self.approve_reject_date = approve_reject_date

    @property
    def resource_replacements(self):
        """Gets the resource_replacements of this StatusUpdateClass.  # noqa: E501


        :return: The resource_replacements of this StatusUpdateClass.  # noqa: E501
        :rtype: dict(str, GloballyUniqueIdentifier)
        """
        return self._resource_replacements

    @resource_replacements.setter
    def resource_replacements(self, resource_replacements):
        """Sets the resource_replacements of this StatusUpdateClass.


        :param resource_replacements: The resource_replacements of this StatusUpdateClass.  # noqa: E501
        :type: dict(str, GloballyUniqueIdentifier)
        """

        self._resource_replacements = resource_replacements

    @property
    def has_updates(self):
        """Gets the has_updates of this StatusUpdateClass.  # noqa: E501


        :return: The has_updates of this StatusUpdateClass.  # noqa: E501
        :rtype: bool
        """
        return self._has_updates

    @has_updates.setter
    def has_updates(self, has_updates):
        """Sets the has_updates of this StatusUpdateClass.


        :param has_updates: The has_updates of this StatusUpdateClass.  # noqa: E501
        :type: bool
        """

        self._has_updates = has_updates

    @property
    def modified(self):
        """Gets the modified of this StatusUpdateClass.  # noqa: E501


        :return: The modified of this StatusUpdateClass.  # noqa: E501
        :rtype: date
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this StatusUpdateClass.


        :param modified: The modified of this StatusUpdateClass.  # noqa: E501
        :type: date
        """

        self._modified = modified

    @property
    def editor(self):
        """Gets the editor of this StatusUpdateClass.  # noqa: E501


        :return: The editor of this StatusUpdateClass.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this StatusUpdateClass.


        :param editor: The editor of this StatusUpdateClass.  # noqa: E501
        :type: str
        """

        self._editor = editor

    @property
    def fields(self):
        """Gets the fields of this StatusUpdateClass.  # noqa: E501


        :return: The fields of this StatusUpdateClass.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this StatusUpdateClass.


        :param fields: The fields of this StatusUpdateClass.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def calc_fields(self):
        """Gets the calc_fields of this StatusUpdateClass.  # noqa: E501


        :return: The calc_fields of this StatusUpdateClass.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._calc_fields

    @calc_fields.setter
    def calc_fields(self, calc_fields):
        """Sets the calc_fields of this StatusUpdateClass.


        :param calc_fields: The calc_fields of this StatusUpdateClass.  # noqa: E501
        :type: dict(str, Object)
        """

        self._calc_fields = calc_fields

    @property
    def state(self):
        """Gets the state of this StatusUpdateClass.  # noqa: E501


        :return: The state of this StatusUpdateClass.  # noqa: E501
        :rtype: StatusUpdateState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StatusUpdateClass.


        :param state: The state of this StatusUpdateClass.  # noqa: E501
        :type: StatusUpdateState
        """

        self._state = state

    @property
    def approve_reject_by(self):
        """Gets the approve_reject_by of this StatusUpdateClass.  # noqa: E501


        :return: The approve_reject_by of this StatusUpdateClass.  # noqa: E501
        :rtype: str
        """
        return self._approve_reject_by

    @approve_reject_by.setter
    def approve_reject_by(self, approve_reject_by):
        """Sets the approve_reject_by of this StatusUpdateClass.


        :param approve_reject_by: The approve_reject_by of this StatusUpdateClass.  # noqa: E501
        :type: str
        """

        self._approve_reject_by = approve_reject_by

    @property
    def approve_reject_date(self):
        """Gets the approve_reject_date of this StatusUpdateClass.  # noqa: E501


        :return: The approve_reject_date of this StatusUpdateClass.  # noqa: E501
        :rtype: date
        """
        return self._approve_reject_date

    @approve_reject_date.setter
    def approve_reject_date(self, approve_reject_date):
        """Sets the approve_reject_date of this StatusUpdateClass.


        :param approve_reject_date: The approve_reject_date of this StatusUpdateClass.  # noqa: E501
        :type: date
        """

        self._approve_reject_date = approve_reject_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusUpdateClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusUpdateClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
