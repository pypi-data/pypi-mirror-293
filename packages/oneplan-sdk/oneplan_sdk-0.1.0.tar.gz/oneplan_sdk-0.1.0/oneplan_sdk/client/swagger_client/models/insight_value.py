# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'insight_id': 'GloballyUniqueIdentifier',
        'category_id': 'GloballyUniqueIdentifier',
        'level': 'InsightLevel',
        'is_compliance': 'bool',
        'result_text': 'str',
        'details': 'list[str]',
        'details_text': 'list[str]',
        'result': 'bool',
        'result_value': 'dict(str, Object)',
        'snoozed': 'bool'
    }

    attribute_map = {
        'insight_id': 'InsightId',
        'category_id': 'CategoryId',
        'level': 'Level',
        'is_compliance': 'IsCompliance',
        'result_text': 'ResultText',
        'details': 'Details',
        'details_text': 'DetailsText',
        'result': 'Result',
        'result_value': 'ResultValue',
        'snoozed': 'Snoozed'
    }

    def __init__(self, insight_id=None, category_id=None, level=None, is_compliance=None, result_text=None, details=None, details_text=None, result=None, result_value=None, snoozed=None):  # noqa: E501
        """InsightValue - a model defined in Swagger"""  # noqa: E501
        self._insight_id = None
        self._category_id = None
        self._level = None
        self._is_compliance = None
        self._result_text = None
        self._details = None
        self._details_text = None
        self._result = None
        self._result_value = None
        self._snoozed = None
        self.discriminator = None
        if insight_id is not None:
            self.insight_id = insight_id
        if category_id is not None:
            self.category_id = category_id
        if level is not None:
            self.level = level
        if is_compliance is not None:
            self.is_compliance = is_compliance
        if result_text is not None:
            self.result_text = result_text
        if details is not None:
            self.details = details
        if details_text is not None:
            self.details_text = details_text
        if result is not None:
            self.result = result
        if result_value is not None:
            self.result_value = result_value
        if snoozed is not None:
            self.snoozed = snoozed

    @property
    def insight_id(self):
        """Gets the insight_id of this InsightValue.  # noqa: E501


        :return: The insight_id of this InsightValue.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._insight_id

    @insight_id.setter
    def insight_id(self, insight_id):
        """Sets the insight_id of this InsightValue.


        :param insight_id: The insight_id of this InsightValue.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._insight_id = insight_id

    @property
    def category_id(self):
        """Gets the category_id of this InsightValue.  # noqa: E501


        :return: The category_id of this InsightValue.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this InsightValue.


        :param category_id: The category_id of this InsightValue.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._category_id = category_id

    @property
    def level(self):
        """Gets the level of this InsightValue.  # noqa: E501


        :return: The level of this InsightValue.  # noqa: E501
        :rtype: InsightLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this InsightValue.


        :param level: The level of this InsightValue.  # noqa: E501
        :type: InsightLevel
        """

        self._level = level

    @property
    def is_compliance(self):
        """Gets the is_compliance of this InsightValue.  # noqa: E501


        :return: The is_compliance of this InsightValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_compliance

    @is_compliance.setter
    def is_compliance(self, is_compliance):
        """Sets the is_compliance of this InsightValue.


        :param is_compliance: The is_compliance of this InsightValue.  # noqa: E501
        :type: bool
        """

        self._is_compliance = is_compliance

    @property
    def result_text(self):
        """Gets the result_text of this InsightValue.  # noqa: E501


        :return: The result_text of this InsightValue.  # noqa: E501
        :rtype: str
        """
        return self._result_text

    @result_text.setter
    def result_text(self, result_text):
        """Sets the result_text of this InsightValue.


        :param result_text: The result_text of this InsightValue.  # noqa: E501
        :type: str
        """

        self._result_text = result_text

    @property
    def details(self):
        """Gets the details of this InsightValue.  # noqa: E501


        :return: The details of this InsightValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this InsightValue.


        :param details: The details of this InsightValue.  # noqa: E501
        :type: list[str]
        """

        self._details = details

    @property
    def details_text(self):
        """Gets the details_text of this InsightValue.  # noqa: E501


        :return: The details_text of this InsightValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._details_text

    @details_text.setter
    def details_text(self, details_text):
        """Sets the details_text of this InsightValue.


        :param details_text: The details_text of this InsightValue.  # noqa: E501
        :type: list[str]
        """

        self._details_text = details_text

    @property
    def result(self):
        """Gets the result of this InsightValue.  # noqa: E501


        :return: The result of this InsightValue.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InsightValue.


        :param result: The result of this InsightValue.  # noqa: E501
        :type: bool
        """

        self._result = result

    @property
    def result_value(self):
        """Gets the result_value of this InsightValue.  # noqa: E501


        :return: The result_value of this InsightValue.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._result_value

    @result_value.setter
    def result_value(self, result_value):
        """Sets the result_value of this InsightValue.


        :param result_value: The result_value of this InsightValue.  # noqa: E501
        :type: dict(str, Object)
        """

        self._result_value = result_value

    @property
    def snoozed(self):
        """Gets the snoozed of this InsightValue.  # noqa: E501


        :return: The snoozed of this InsightValue.  # noqa: E501
        :rtype: bool
        """
        return self._snoozed

    @snoozed.setter
    def snoozed(self, snoozed):
        """Sets the snoozed of this InsightValue.


        :param snoozed: The snoozed of this InsightValue.  # noqa: E501
        :type: bool
        """

        self._snoozed = snoozed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InsightValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
