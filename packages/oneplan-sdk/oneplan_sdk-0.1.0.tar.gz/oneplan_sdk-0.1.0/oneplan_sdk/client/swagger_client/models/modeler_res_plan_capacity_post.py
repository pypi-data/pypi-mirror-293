# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelerResPlanCapacityPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ignore_plan': 'GloballyUniqueIdentifier',
        'zoom': 'Zoom',
        'start': 'date',
        'end': 'date',
        'cost_type': 'GloballyUniqueIdentifier',
        'plans': 'list[GetResourcePostPlan]',
        'search_field': 'str',
        'search_value': 'str',
        'group_by': 'str',
        'resources_data_selection': 'str',
        'plan_data_selection': 'str',
        'lines_data_selection': 'str'
    }

    attribute_map = {
        'ignore_plan': 'IgnorePlan',
        'zoom': 'Zoom',
        'start': 'Start',
        'end': 'End',
        'cost_type': 'CostType',
        'plans': 'Plans',
        'search_field': 'SearchField',
        'search_value': 'SearchValue',
        'group_by': 'GroupBy',
        'resources_data_selection': 'ResourcesDataSelection',
        'plan_data_selection': 'PlanDataSelection',
        'lines_data_selection': 'LinesDataSelection'
    }

    def __init__(self, ignore_plan=None, zoom=None, start=None, end=None, cost_type=None, plans=None, search_field=None, search_value=None, group_by=None, resources_data_selection=None, plan_data_selection=None, lines_data_selection=None):  # noqa: E501
        """ModelerResPlanCapacityPost - a model defined in Swagger"""  # noqa: E501
        self._ignore_plan = None
        self._zoom = None
        self._start = None
        self._end = None
        self._cost_type = None
        self._plans = None
        self._search_field = None
        self._search_value = None
        self._group_by = None
        self._resources_data_selection = None
        self._plan_data_selection = None
        self._lines_data_selection = None
        self.discriminator = None
        if ignore_plan is not None:
            self.ignore_plan = ignore_plan
        if zoom is not None:
            self.zoom = zoom
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if cost_type is not None:
            self.cost_type = cost_type
        if plans is not None:
            self.plans = plans
        if search_field is not None:
            self.search_field = search_field
        if search_value is not None:
            self.search_value = search_value
        if group_by is not None:
            self.group_by = group_by
        if resources_data_selection is not None:
            self.resources_data_selection = resources_data_selection
        if plan_data_selection is not None:
            self.plan_data_selection = plan_data_selection
        if lines_data_selection is not None:
            self.lines_data_selection = lines_data_selection

    @property
    def ignore_plan(self):
        """Gets the ignore_plan of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The ignore_plan of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._ignore_plan

    @ignore_plan.setter
    def ignore_plan(self, ignore_plan):
        """Sets the ignore_plan of this ModelerResPlanCapacityPost.


        :param ignore_plan: The ignore_plan of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._ignore_plan = ignore_plan

    @property
    def zoom(self):
        """Gets the zoom of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The zoom of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: Zoom
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this ModelerResPlanCapacityPost.


        :param zoom: The zoom of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: Zoom
        """

        self._zoom = zoom

    @property
    def start(self):
        """Gets the start of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The start of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ModelerResPlanCapacityPost.


        :param start: The start of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The end of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ModelerResPlanCapacityPost.


        :param end: The end of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: date
        """

        self._end = end

    @property
    def cost_type(self):
        """Gets the cost_type of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The cost_type of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this ModelerResPlanCapacityPost.


        :param cost_type: The cost_type of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._cost_type = cost_type

    @property
    def plans(self):
        """Gets the plans of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The plans of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: list[GetResourcePostPlan]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this ModelerResPlanCapacityPost.


        :param plans: The plans of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: list[GetResourcePostPlan]
        """

        self._plans = plans

    @property
    def search_field(self):
        """Gets the search_field of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The search_field of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: str
        """
        return self._search_field

    @search_field.setter
    def search_field(self, search_field):
        """Sets the search_field of this ModelerResPlanCapacityPost.


        :param search_field: The search_field of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: str
        """

        self._search_field = search_field

    @property
    def search_value(self):
        """Gets the search_value of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The search_value of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: str
        """
        return self._search_value

    @search_value.setter
    def search_value(self, search_value):
        """Sets the search_value of this ModelerResPlanCapacityPost.


        :param search_value: The search_value of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: str
        """

        self._search_value = search_value

    @property
    def group_by(self):
        """Gets the group_by of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The group_by of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this ModelerResPlanCapacityPost.


        :param group_by: The group_by of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: str
        """

        self._group_by = group_by

    @property
    def resources_data_selection(self):
        """Gets the resources_data_selection of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The resources_data_selection of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: str
        """
        return self._resources_data_selection

    @resources_data_selection.setter
    def resources_data_selection(self, resources_data_selection):
        """Sets the resources_data_selection of this ModelerResPlanCapacityPost.


        :param resources_data_selection: The resources_data_selection of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: str
        """

        self._resources_data_selection = resources_data_selection

    @property
    def plan_data_selection(self):
        """Gets the plan_data_selection of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The plan_data_selection of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: str
        """
        return self._plan_data_selection

    @plan_data_selection.setter
    def plan_data_selection(self, plan_data_selection):
        """Sets the plan_data_selection of this ModelerResPlanCapacityPost.


        :param plan_data_selection: The plan_data_selection of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: str
        """

        self._plan_data_selection = plan_data_selection

    @property
    def lines_data_selection(self):
        """Gets the lines_data_selection of this ModelerResPlanCapacityPost.  # noqa: E501


        :return: The lines_data_selection of this ModelerResPlanCapacityPost.  # noqa: E501
        :rtype: str
        """
        return self._lines_data_selection

    @lines_data_selection.setter
    def lines_data_selection(self, lines_data_selection):
        """Sets the lines_data_selection of this ModelerResPlanCapacityPost.


        :param lines_data_selection: The lines_data_selection of this ModelerResPlanCapacityPost.  # noqa: E501
        :type: str
        """

        self._lines_data_selection = lines_data_selection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelerResPlanCapacityPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelerResPlanCapacityPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
