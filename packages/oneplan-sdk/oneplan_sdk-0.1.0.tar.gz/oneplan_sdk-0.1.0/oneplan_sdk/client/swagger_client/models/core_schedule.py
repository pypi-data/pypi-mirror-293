# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoreSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'relation_id': 'GloballyUniqueIdentifier',
        'name': 'str',
        'function': 'CoreScheduleFunction',
        'schedule': 'Schedule',
        'log': 'list[CoreScheduleLog]',
        'last_state': 'bool',
        'last_message': 'str',
        'percent_complete': 'DecimalNumber',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'relation_id': 'RelationId',
        'name': 'Name',
        'function': 'Function',
        'schedule': 'Schedule',
        'log': 'Log',
        'last_state': 'LastState',
        'last_message': 'LastMessage',
        'percent_complete': 'PercentComplete',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, relation_id=None, name=None, function=None, schedule=None, log=None, last_state=None, last_message=None, percent_complete=None, id=None, config_id=None):  # noqa: E501
        """CoreSchedule - a model defined in Swagger"""  # noqa: E501
        self._relation_id = None
        self._name = None
        self._function = None
        self._schedule = None
        self._log = None
        self._last_state = None
        self._last_message = None
        self._percent_complete = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if relation_id is not None:
            self.relation_id = relation_id
        if name is not None:
            self.name = name
        if function is not None:
            self.function = function
        if schedule is not None:
            self.schedule = schedule
        if log is not None:
            self.log = log
        if last_state is not None:
            self.last_state = last_state
        if last_message is not None:
            self.last_message = last_message
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def relation_id(self):
        """Gets the relation_id of this CoreSchedule.  # noqa: E501


        :return: The relation_id of this CoreSchedule.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._relation_id

    @relation_id.setter
    def relation_id(self, relation_id):
        """Sets the relation_id of this CoreSchedule.


        :param relation_id: The relation_id of this CoreSchedule.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._relation_id = relation_id

    @property
    def name(self):
        """Gets the name of this CoreSchedule.  # noqa: E501


        :return: The name of this CoreSchedule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CoreSchedule.


        :param name: The name of this CoreSchedule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def function(self):
        """Gets the function of this CoreSchedule.  # noqa: E501


        :return: The function of this CoreSchedule.  # noqa: E501
        :rtype: CoreScheduleFunction
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this CoreSchedule.


        :param function: The function of this CoreSchedule.  # noqa: E501
        :type: CoreScheduleFunction
        """

        self._function = function

    @property
    def schedule(self):
        """Gets the schedule of this CoreSchedule.  # noqa: E501


        :return: The schedule of this CoreSchedule.  # noqa: E501
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CoreSchedule.


        :param schedule: The schedule of this CoreSchedule.  # noqa: E501
        :type: Schedule
        """

        self._schedule = schedule

    @property
    def log(self):
        """Gets the log of this CoreSchedule.  # noqa: E501


        :return: The log of this CoreSchedule.  # noqa: E501
        :rtype: list[CoreScheduleLog]
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this CoreSchedule.


        :param log: The log of this CoreSchedule.  # noqa: E501
        :type: list[CoreScheduleLog]
        """

        self._log = log

    @property
    def last_state(self):
        """Gets the last_state of this CoreSchedule.  # noqa: E501


        :return: The last_state of this CoreSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._last_state

    @last_state.setter
    def last_state(self, last_state):
        """Sets the last_state of this CoreSchedule.


        :param last_state: The last_state of this CoreSchedule.  # noqa: E501
        :type: bool
        """

        self._last_state = last_state

    @property
    def last_message(self):
        """Gets the last_message of this CoreSchedule.  # noqa: E501


        :return: The last_message of this CoreSchedule.  # noqa: E501
        :rtype: str
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this CoreSchedule.


        :param last_message: The last_message of this CoreSchedule.  # noqa: E501
        :type: str
        """

        self._last_message = last_message

    @property
    def percent_complete(self):
        """Gets the percent_complete of this CoreSchedule.  # noqa: E501


        :return: The percent_complete of this CoreSchedule.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this CoreSchedule.


        :param percent_complete: The percent_complete of this CoreSchedule.  # noqa: E501
        :type: DecimalNumber
        """

        self._percent_complete = percent_complete

    @property
    def id(self):
        """Gets the id of this CoreSchedule.  # noqa: E501


        :return: The id of this CoreSchedule.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CoreSchedule.


        :param id: The id of this CoreSchedule.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this CoreSchedule.  # noqa: E501


        :return: The config_id of this CoreSchedule.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this CoreSchedule.


        :param config_id: The config_id of this CoreSchedule.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
