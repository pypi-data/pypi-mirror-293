# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Calendar(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_supported_date_time': 'date',
        'max_supported_date_time': 'date',
        'algorithm_type': 'CalendarAlgorithmType',
        'is_read_only': 'bool',
        'eras': 'list[int]',
        'two_digit_year_max': 'int'
    }

    attribute_map = {
        'min_supported_date_time': 'MinSupportedDateTime',
        'max_supported_date_time': 'MaxSupportedDateTime',
        'algorithm_type': 'AlgorithmType',
        'is_read_only': 'IsReadOnly',
        'eras': 'Eras',
        'two_digit_year_max': 'TwoDigitYearMax'
    }

    def __init__(self, min_supported_date_time=None, max_supported_date_time=None, algorithm_type=None, is_read_only=None, eras=None, two_digit_year_max=None):  # noqa: E501
        """Calendar - a model defined in Swagger"""  # noqa: E501
        self._min_supported_date_time = None
        self._max_supported_date_time = None
        self._algorithm_type = None
        self._is_read_only = None
        self._eras = None
        self._two_digit_year_max = None
        self.discriminator = None
        if min_supported_date_time is not None:
            self.min_supported_date_time = min_supported_date_time
        if max_supported_date_time is not None:
            self.max_supported_date_time = max_supported_date_time
        if algorithm_type is not None:
            self.algorithm_type = algorithm_type
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if eras is not None:
            self.eras = eras
        if two_digit_year_max is not None:
            self.two_digit_year_max = two_digit_year_max

    @property
    def min_supported_date_time(self):
        """Gets the min_supported_date_time of this Calendar.  # noqa: E501


        :return: The min_supported_date_time of this Calendar.  # noqa: E501
        :rtype: date
        """
        return self._min_supported_date_time

    @min_supported_date_time.setter
    def min_supported_date_time(self, min_supported_date_time):
        """Sets the min_supported_date_time of this Calendar.


        :param min_supported_date_time: The min_supported_date_time of this Calendar.  # noqa: E501
        :type: date
        """

        self._min_supported_date_time = min_supported_date_time

    @property
    def max_supported_date_time(self):
        """Gets the max_supported_date_time of this Calendar.  # noqa: E501


        :return: The max_supported_date_time of this Calendar.  # noqa: E501
        :rtype: date
        """
        return self._max_supported_date_time

    @max_supported_date_time.setter
    def max_supported_date_time(self, max_supported_date_time):
        """Sets the max_supported_date_time of this Calendar.


        :param max_supported_date_time: The max_supported_date_time of this Calendar.  # noqa: E501
        :type: date
        """

        self._max_supported_date_time = max_supported_date_time

    @property
    def algorithm_type(self):
        """Gets the algorithm_type of this Calendar.  # noqa: E501


        :return: The algorithm_type of this Calendar.  # noqa: E501
        :rtype: CalendarAlgorithmType
        """
        return self._algorithm_type

    @algorithm_type.setter
    def algorithm_type(self, algorithm_type):
        """Sets the algorithm_type of this Calendar.


        :param algorithm_type: The algorithm_type of this Calendar.  # noqa: E501
        :type: CalendarAlgorithmType
        """

        self._algorithm_type = algorithm_type

    @property
    def is_read_only(self):
        """Gets the is_read_only of this Calendar.  # noqa: E501


        :return: The is_read_only of this Calendar.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this Calendar.


        :param is_read_only: The is_read_only of this Calendar.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def eras(self):
        """Gets the eras of this Calendar.  # noqa: E501


        :return: The eras of this Calendar.  # noqa: E501
        :rtype: list[int]
        """
        return self._eras

    @eras.setter
    def eras(self, eras):
        """Sets the eras of this Calendar.


        :param eras: The eras of this Calendar.  # noqa: E501
        :type: list[int]
        """

        self._eras = eras

    @property
    def two_digit_year_max(self):
        """Gets the two_digit_year_max of this Calendar.  # noqa: E501


        :return: The two_digit_year_max of this Calendar.  # noqa: E501
        :rtype: int
        """
        return self._two_digit_year_max

    @two_digit_year_max.setter
    def two_digit_year_max(self, two_digit_year_max):
        """Sets the two_digit_year_max of this Calendar.


        :param two_digit_year_max: The two_digit_year_max of this Calendar.  # noqa: E501
        :type: int
        """

        self._two_digit_year_max = two_digit_year_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Calendar, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Calendar):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
