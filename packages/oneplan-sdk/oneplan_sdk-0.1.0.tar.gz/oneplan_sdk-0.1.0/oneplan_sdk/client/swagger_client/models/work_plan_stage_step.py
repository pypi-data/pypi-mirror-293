# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkPlanStageStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step_id': 'GloballyUniqueIdentifier',
        'step_name': 'str',
        'start': 'date',
        'end': 'date',
        'step_starter': 'GloballyUniqueIdentifier',
        'step_approver': 'GloballyUniqueIdentifier',
        'approval_state': 'ProcessState',
        'step_state': 'WorkPlanStageStepState',
        'comments': 'str'
    }

    attribute_map = {
        'step_id': 'StepId',
        'step_name': 'StepName',
        'start': 'Start',
        'end': 'End',
        'step_starter': 'StepStarter',
        'step_approver': 'StepApprover',
        'approval_state': 'ApprovalState',
        'step_state': 'StepState',
        'comments': 'Comments'
    }

    def __init__(self, step_id=None, step_name=None, start=None, end=None, step_starter=None, step_approver=None, approval_state=None, step_state=None, comments=None):  # noqa: E501
        """WorkPlanStageStep - a model defined in Swagger"""  # noqa: E501
        self._step_id = None
        self._step_name = None
        self._start = None
        self._end = None
        self._step_starter = None
        self._step_approver = None
        self._approval_state = None
        self._step_state = None
        self._comments = None
        self.discriminator = None
        if step_id is not None:
            self.step_id = step_id
        if step_name is not None:
            self.step_name = step_name
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if step_starter is not None:
            self.step_starter = step_starter
        if step_approver is not None:
            self.step_approver = step_approver
        if approval_state is not None:
            self.approval_state = approval_state
        if step_state is not None:
            self.step_state = step_state
        if comments is not None:
            self.comments = comments

    @property
    def step_id(self):
        """Gets the step_id of this WorkPlanStageStep.  # noqa: E501


        :return: The step_id of this WorkPlanStageStep.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this WorkPlanStageStep.


        :param step_id: The step_id of this WorkPlanStageStep.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._step_id = step_id

    @property
    def step_name(self):
        """Gets the step_name of this WorkPlanStageStep.  # noqa: E501


        :return: The step_name of this WorkPlanStageStep.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this WorkPlanStageStep.


        :param step_name: The step_name of this WorkPlanStageStep.  # noqa: E501
        :type: str
        """

        self._step_name = step_name

    @property
    def start(self):
        """Gets the start of this WorkPlanStageStep.  # noqa: E501


        :return: The start of this WorkPlanStageStep.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this WorkPlanStageStep.


        :param start: The start of this WorkPlanStageStep.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this WorkPlanStageStep.  # noqa: E501


        :return: The end of this WorkPlanStageStep.  # noqa: E501
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this WorkPlanStageStep.


        :param end: The end of this WorkPlanStageStep.  # noqa: E501
        :type: date
        """

        self._end = end

    @property
    def step_starter(self):
        """Gets the step_starter of this WorkPlanStageStep.  # noqa: E501


        :return: The step_starter of this WorkPlanStageStep.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._step_starter

    @step_starter.setter
    def step_starter(self, step_starter):
        """Sets the step_starter of this WorkPlanStageStep.


        :param step_starter: The step_starter of this WorkPlanStageStep.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._step_starter = step_starter

    @property
    def step_approver(self):
        """Gets the step_approver of this WorkPlanStageStep.  # noqa: E501


        :return: The step_approver of this WorkPlanStageStep.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._step_approver

    @step_approver.setter
    def step_approver(self, step_approver):
        """Sets the step_approver of this WorkPlanStageStep.


        :param step_approver: The step_approver of this WorkPlanStageStep.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._step_approver = step_approver

    @property
    def approval_state(self):
        """Gets the approval_state of this WorkPlanStageStep.  # noqa: E501


        :return: The approval_state of this WorkPlanStageStep.  # noqa: E501
        :rtype: ProcessState
        """
        return self._approval_state

    @approval_state.setter
    def approval_state(self, approval_state):
        """Sets the approval_state of this WorkPlanStageStep.


        :param approval_state: The approval_state of this WorkPlanStageStep.  # noqa: E501
        :type: ProcessState
        """

        self._approval_state = approval_state

    @property
    def step_state(self):
        """Gets the step_state of this WorkPlanStageStep.  # noqa: E501


        :return: The step_state of this WorkPlanStageStep.  # noqa: E501
        :rtype: WorkPlanStageStepState
        """
        return self._step_state

    @step_state.setter
    def step_state(self, step_state):
        """Sets the step_state of this WorkPlanStageStep.


        :param step_state: The step_state of this WorkPlanStageStep.  # noqa: E501
        :type: WorkPlanStageStepState
        """

        self._step_state = step_state

    @property
    def comments(self):
        """Gets the comments of this WorkPlanStageStep.  # noqa: E501


        :return: The comments of this WorkPlanStageStep.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WorkPlanStageStep.


        :param comments: The comments of this WorkPlanStageStep.  # noqa: E501
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkPlanStageStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkPlanStageStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
