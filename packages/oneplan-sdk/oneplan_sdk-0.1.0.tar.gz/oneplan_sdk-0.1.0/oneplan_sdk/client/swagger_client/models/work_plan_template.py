# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkPlanTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'folder': 'str',
        'order': 'int',
        'name': 'str',
        'description': 'str',
        'image_url': 'str',
        'category': 'str',
        'work_types': 'str',
        'is_online': 'bool',
        'planner_type_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'id': 'Id',
        'folder': 'Folder',
        'order': 'Order',
        'name': 'Name',
        'description': 'Description',
        'image_url': 'ImageUrl',
        'category': 'Category',
        'work_types': 'WorkTypes',
        'is_online': 'IsOnline',
        'planner_type_id': 'PlannerTypeId'
    }

    def __init__(self, id=None, folder=None, order=None, name=None, description=None, image_url=None, category=None, work_types=None, is_online=None, planner_type_id=None):  # noqa: E501
        """WorkPlanTemplate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._folder = None
        self._order = None
        self._name = None
        self._description = None
        self._image_url = None
        self._category = None
        self._work_types = None
        self._is_online = None
        self._planner_type_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if folder is not None:
            self.folder = folder
        if order is not None:
            self.order = order
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if image_url is not None:
            self.image_url = image_url
        if category is not None:
            self.category = category
        if work_types is not None:
            self.work_types = work_types
        if is_online is not None:
            self.is_online = is_online
        if planner_type_id is not None:
            self.planner_type_id = planner_type_id

    @property
    def id(self):
        """Gets the id of this WorkPlanTemplate.  # noqa: E501


        :return: The id of this WorkPlanTemplate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkPlanTemplate.


        :param id: The id of this WorkPlanTemplate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def folder(self):
        """Gets the folder of this WorkPlanTemplate.  # noqa: E501


        :return: The folder of this WorkPlanTemplate.  # noqa: E501
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this WorkPlanTemplate.


        :param folder: The folder of this WorkPlanTemplate.  # noqa: E501
        :type: str
        """

        self._folder = folder

    @property
    def order(self):
        """Gets the order of this WorkPlanTemplate.  # noqa: E501


        :return: The order of this WorkPlanTemplate.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this WorkPlanTemplate.


        :param order: The order of this WorkPlanTemplate.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def name(self):
        """Gets the name of this WorkPlanTemplate.  # noqa: E501


        :return: The name of this WorkPlanTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkPlanTemplate.


        :param name: The name of this WorkPlanTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this WorkPlanTemplate.  # noqa: E501


        :return: The description of this WorkPlanTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkPlanTemplate.


        :param description: The description of this WorkPlanTemplate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image_url(self):
        """Gets the image_url of this WorkPlanTemplate.  # noqa: E501


        :return: The image_url of this WorkPlanTemplate.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this WorkPlanTemplate.


        :param image_url: The image_url of this WorkPlanTemplate.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def category(self):
        """Gets the category of this WorkPlanTemplate.  # noqa: E501


        :return: The category of this WorkPlanTemplate.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this WorkPlanTemplate.


        :param category: The category of this WorkPlanTemplate.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def work_types(self):
        """Gets the work_types of this WorkPlanTemplate.  # noqa: E501


        :return: The work_types of this WorkPlanTemplate.  # noqa: E501
        :rtype: str
        """
        return self._work_types

    @work_types.setter
    def work_types(self, work_types):
        """Sets the work_types of this WorkPlanTemplate.


        :param work_types: The work_types of this WorkPlanTemplate.  # noqa: E501
        :type: str
        """

        self._work_types = work_types

    @property
    def is_online(self):
        """Gets the is_online of this WorkPlanTemplate.  # noqa: E501


        :return: The is_online of this WorkPlanTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this WorkPlanTemplate.


        :param is_online: The is_online of this WorkPlanTemplate.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    @property
    def planner_type_id(self):
        """Gets the planner_type_id of this WorkPlanTemplate.  # noqa: E501


        :return: The planner_type_id of this WorkPlanTemplate.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._planner_type_id

    @planner_type_id.setter
    def planner_type_id(self, planner_type_id):
        """Sets the planner_type_id of this WorkPlanTemplate.


        :param planner_type_id: The planner_type_id of this WorkPlanTemplate.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._planner_type_id = planner_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkPlanTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkPlanTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
