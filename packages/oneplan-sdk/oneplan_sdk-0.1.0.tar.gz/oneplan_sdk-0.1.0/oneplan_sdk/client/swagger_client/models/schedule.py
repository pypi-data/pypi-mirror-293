# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_type': 'ScheduleTypeEnum',
        'enabled': 'bool',
        'days': 'DaysClass',
        'hour': 'int',
        'day_of_month': 'int',
        'last_run': 'date',
        'offset': 'int',
        'period_days': 'int',
        'next_run': 'date',
        'start_on': 'date',
        'status': 'ScheduleStatus',
        'cron_error': 'str'
    }

    attribute_map = {
        'schedule_type': 'ScheduleType',
        'enabled': 'Enabled',
        'days': 'Days',
        'hour': 'Hour',
        'day_of_month': 'DayOfMonth',
        'last_run': 'LastRun',
        'offset': 'Offset',
        'period_days': 'PeriodDays',
        'next_run': 'NextRun',
        'start_on': 'StartOn',
        'status': 'Status',
        'cron_error': 'CronError'
    }

    def __init__(self, schedule_type=None, enabled=None, days=None, hour=None, day_of_month=None, last_run=None, offset=None, period_days=None, next_run=None, start_on=None, status=None, cron_error=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501
        self._schedule_type = None
        self._enabled = None
        self._days = None
        self._hour = None
        self._day_of_month = None
        self._last_run = None
        self._offset = None
        self._period_days = None
        self._next_run = None
        self._start_on = None
        self._status = None
        self._cron_error = None
        self.discriminator = None
        if schedule_type is not None:
            self.schedule_type = schedule_type
        if enabled is not None:
            self.enabled = enabled
        if days is not None:
            self.days = days
        if hour is not None:
            self.hour = hour
        if day_of_month is not None:
            self.day_of_month = day_of_month
        if last_run is not None:
            self.last_run = last_run
        if offset is not None:
            self.offset = offset
        if period_days is not None:
            self.period_days = period_days
        if next_run is not None:
            self.next_run = next_run
        if start_on is not None:
            self.start_on = start_on
        if status is not None:
            self.status = status
        if cron_error is not None:
            self.cron_error = cron_error

    @property
    def schedule_type(self):
        """Gets the schedule_type of this Schedule.  # noqa: E501


        :return: The schedule_type of this Schedule.  # noqa: E501
        :rtype: ScheduleTypeEnum
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this Schedule.


        :param schedule_type: The schedule_type of this Schedule.  # noqa: E501
        :type: ScheduleTypeEnum
        """

        self._schedule_type = schedule_type

    @property
    def enabled(self):
        """Gets the enabled of this Schedule.  # noqa: E501


        :return: The enabled of this Schedule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Schedule.


        :param enabled: The enabled of this Schedule.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def days(self):
        """Gets the days of this Schedule.  # noqa: E501


        :return: The days of this Schedule.  # noqa: E501
        :rtype: DaysClass
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this Schedule.


        :param days: The days of this Schedule.  # noqa: E501
        :type: DaysClass
        """

        self._days = days

    @property
    def hour(self):
        """Gets the hour of this Schedule.  # noqa: E501


        :return: The hour of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this Schedule.


        :param hour: The hour of this Schedule.  # noqa: E501
        :type: int
        """

        self._hour = hour

    @property
    def day_of_month(self):
        """Gets the day_of_month of this Schedule.  # noqa: E501


        :return: The day_of_month of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this Schedule.


        :param day_of_month: The day_of_month of this Schedule.  # noqa: E501
        :type: int
        """

        self._day_of_month = day_of_month

    @property
    def last_run(self):
        """Gets the last_run of this Schedule.  # noqa: E501


        :return: The last_run of this Schedule.  # noqa: E501
        :rtype: date
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this Schedule.


        :param last_run: The last_run of this Schedule.  # noqa: E501
        :type: date
        """

        self._last_run = last_run

    @property
    def offset(self):
        """Gets the offset of this Schedule.  # noqa: E501


        :return: The offset of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Schedule.


        :param offset: The offset of this Schedule.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def period_days(self):
        """Gets the period_days of this Schedule.  # noqa: E501


        :return: The period_days of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._period_days

    @period_days.setter
    def period_days(self, period_days):
        """Sets the period_days of this Schedule.


        :param period_days: The period_days of this Schedule.  # noqa: E501
        :type: int
        """

        self._period_days = period_days

    @property
    def next_run(self):
        """Gets the next_run of this Schedule.  # noqa: E501


        :return: The next_run of this Schedule.  # noqa: E501
        :rtype: date
        """
        return self._next_run

    @next_run.setter
    def next_run(self, next_run):
        """Sets the next_run of this Schedule.


        :param next_run: The next_run of this Schedule.  # noqa: E501
        :type: date
        """

        self._next_run = next_run

    @property
    def start_on(self):
        """Gets the start_on of this Schedule.  # noqa: E501


        :return: The start_on of this Schedule.  # noqa: E501
        :rtype: date
        """
        return self._start_on

    @start_on.setter
    def start_on(self, start_on):
        """Sets the start_on of this Schedule.


        :param start_on: The start_on of this Schedule.  # noqa: E501
        :type: date
        """

        self._start_on = start_on

    @property
    def status(self):
        """Gets the status of this Schedule.  # noqa: E501


        :return: The status of this Schedule.  # noqa: E501
        :rtype: ScheduleStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Schedule.


        :param status: The status of this Schedule.  # noqa: E501
        :type: ScheduleStatus
        """

        self._status = status

    @property
    def cron_error(self):
        """Gets the cron_error of this Schedule.  # noqa: E501


        :return: The cron_error of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._cron_error

    @cron_error.setter
    def cron_error(self, cron_error):
        """Sets the cron_error of this Schedule.


        :param cron_error: The cron_error of this Schedule.  # noqa: E501
        :type: str
        """

        self._cron_error = cron_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
