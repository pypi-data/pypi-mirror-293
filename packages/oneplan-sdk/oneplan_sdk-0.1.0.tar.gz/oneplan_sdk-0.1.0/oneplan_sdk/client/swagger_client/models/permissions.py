# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Permissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'global_permission_settings': 'GlobalPermissions',
        'plan_permissions': 'PlanPermissions',
        'hidden_left_navigation': 'list[str]',
        'hidden_plan_navigation': 'list[str]',
        'hidden_areas': 'list[GloballyUniqueIdentifier]'
    }

    attribute_map = {
        'global_permission_settings': 'GlobalPermissionSettings',
        'plan_permissions': 'PlanPermissions',
        'hidden_left_navigation': 'HiddenLeftNavigation',
        'hidden_plan_navigation': 'HiddenPlanNavigation',
        'hidden_areas': 'HiddenAreas'
    }

    def __init__(self, global_permission_settings=None, plan_permissions=None, hidden_left_navigation=None, hidden_plan_navigation=None, hidden_areas=None):  # noqa: E501
        """Permissions - a model defined in Swagger"""  # noqa: E501
        self._global_permission_settings = None
        self._plan_permissions = None
        self._hidden_left_navigation = None
        self._hidden_plan_navigation = None
        self._hidden_areas = None
        self.discriminator = None
        if global_permission_settings is not None:
            self.global_permission_settings = global_permission_settings
        if plan_permissions is not None:
            self.plan_permissions = plan_permissions
        if hidden_left_navigation is not None:
            self.hidden_left_navigation = hidden_left_navigation
        if hidden_plan_navigation is not None:
            self.hidden_plan_navigation = hidden_plan_navigation
        if hidden_areas is not None:
            self.hidden_areas = hidden_areas

    @property
    def global_permission_settings(self):
        """Gets the global_permission_settings of this Permissions.  # noqa: E501


        :return: The global_permission_settings of this Permissions.  # noqa: E501
        :rtype: GlobalPermissions
        """
        return self._global_permission_settings

    @global_permission_settings.setter
    def global_permission_settings(self, global_permission_settings):
        """Sets the global_permission_settings of this Permissions.


        :param global_permission_settings: The global_permission_settings of this Permissions.  # noqa: E501
        :type: GlobalPermissions
        """

        self._global_permission_settings = global_permission_settings

    @property
    def plan_permissions(self):
        """Gets the plan_permissions of this Permissions.  # noqa: E501


        :return: The plan_permissions of this Permissions.  # noqa: E501
        :rtype: PlanPermissions
        """
        return self._plan_permissions

    @plan_permissions.setter
    def plan_permissions(self, plan_permissions):
        """Sets the plan_permissions of this Permissions.


        :param plan_permissions: The plan_permissions of this Permissions.  # noqa: E501
        :type: PlanPermissions
        """

        self._plan_permissions = plan_permissions

    @property
    def hidden_left_navigation(self):
        """Gets the hidden_left_navigation of this Permissions.  # noqa: E501


        :return: The hidden_left_navigation of this Permissions.  # noqa: E501
        :rtype: list[str]
        """
        return self._hidden_left_navigation

    @hidden_left_navigation.setter
    def hidden_left_navigation(self, hidden_left_navigation):
        """Sets the hidden_left_navigation of this Permissions.


        :param hidden_left_navigation: The hidden_left_navigation of this Permissions.  # noqa: E501
        :type: list[str]
        """

        self._hidden_left_navigation = hidden_left_navigation

    @property
    def hidden_plan_navigation(self):
        """Gets the hidden_plan_navigation of this Permissions.  # noqa: E501


        :return: The hidden_plan_navigation of this Permissions.  # noqa: E501
        :rtype: list[str]
        """
        return self._hidden_plan_navigation

    @hidden_plan_navigation.setter
    def hidden_plan_navigation(self, hidden_plan_navigation):
        """Sets the hidden_plan_navigation of this Permissions.


        :param hidden_plan_navigation: The hidden_plan_navigation of this Permissions.  # noqa: E501
        :type: list[str]
        """

        self._hidden_plan_navigation = hidden_plan_navigation

    @property
    def hidden_areas(self):
        """Gets the hidden_areas of this Permissions.  # noqa: E501


        :return: The hidden_areas of this Permissions.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._hidden_areas

    @hidden_areas.setter
    def hidden_areas(self, hidden_areas):
        """Sets the hidden_areas of this Permissions.


        :param hidden_areas: The hidden_areas of this Permissions.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._hidden_areas = hidden_areas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Permissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
