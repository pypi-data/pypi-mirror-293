# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecentPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'plan': 'WorkPlan',
        'last_accessed': 'date',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'name': 'Name',
        'plan': 'Plan',
        'last_accessed': 'LastAccessed',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, name=None, plan=None, last_accessed=None, id=None, config_id=None):  # noqa: E501
        """RecentPlan - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._plan = None
        self._last_accessed = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if plan is not None:
            self.plan = plan
        if last_accessed is not None:
            self.last_accessed = last_accessed
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def name(self):
        """Gets the name of this RecentPlan.  # noqa: E501


        :return: The name of this RecentPlan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecentPlan.


        :param name: The name of this RecentPlan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this RecentPlan.  # noqa: E501


        :return: The plan of this RecentPlan.  # noqa: E501
        :rtype: WorkPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this RecentPlan.


        :param plan: The plan of this RecentPlan.  # noqa: E501
        :type: WorkPlan
        """

        self._plan = plan

    @property
    def last_accessed(self):
        """Gets the last_accessed of this RecentPlan.  # noqa: E501


        :return: The last_accessed of this RecentPlan.  # noqa: E501
        :rtype: date
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this RecentPlan.


        :param last_accessed: The last_accessed of this RecentPlan.  # noqa: E501
        :type: date
        """

        self._last_accessed = last_accessed

    @property
    def id(self):
        """Gets the id of this RecentPlan.  # noqa: E501


        :return: The id of this RecentPlan.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecentPlan.


        :param id: The id of this RecentPlan.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this RecentPlan.  # noqa: E501


        :return: The config_id of this RecentPlan.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this RecentPlan.


        :param config_id: The config_id of this RecentPlan.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecentPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecentPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
