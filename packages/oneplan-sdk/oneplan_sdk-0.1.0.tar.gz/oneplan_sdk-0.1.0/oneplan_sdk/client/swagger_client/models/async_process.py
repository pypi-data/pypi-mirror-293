# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AsyncProcess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_id': 'GloballyUniqueIdentifier',
        'input_values': 'dict(str, Object)',
        'percent_complete': 'DecimalNumber',
        'state': 'AsyncProcessState',
        'status': 'AsyncProcessStatus',
        'last_message': 'str',
        'async_class': 'str',
        'access_token': 'str',
        'sequence_number': 'int',
        'start_date': 'date',
        'queue_date': 'date',
        'user_id': 'GloballyUniqueIdentifier',
        'in_blob': 'bool',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'plan_id': 'PlanId',
        'input_values': 'InputValues',
        'percent_complete': 'PercentComplete',
        'state': 'State',
        'status': 'Status',
        'last_message': 'LastMessage',
        'async_class': 'AsyncClass',
        'access_token': 'accessToken',
        'sequence_number': 'SequenceNumber',
        'start_date': 'StartDate',
        'queue_date': 'QueueDate',
        'user_id': 'UserId',
        'in_blob': 'InBlob',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, plan_id=None, input_values=None, percent_complete=None, state=None, status=None, last_message=None, async_class=None, access_token=None, sequence_number=None, start_date=None, queue_date=None, user_id=None, in_blob=None, id=None, config_id=None):  # noqa: E501
        """AsyncProcess - a model defined in Swagger"""  # noqa: E501
        self._plan_id = None
        self._input_values = None
        self._percent_complete = None
        self._state = None
        self._status = None
        self._last_message = None
        self._async_class = None
        self._access_token = None
        self._sequence_number = None
        self._start_date = None
        self._queue_date = None
        self._user_id = None
        self._in_blob = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if plan_id is not None:
            self.plan_id = plan_id
        if input_values is not None:
            self.input_values = input_values
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if last_message is not None:
            self.last_message = last_message
        if async_class is not None:
            self.async_class = async_class
        if access_token is not None:
            self.access_token = access_token
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if start_date is not None:
            self.start_date = start_date
        if queue_date is not None:
            self.queue_date = queue_date
        if user_id is not None:
            self.user_id = user_id
        if in_blob is not None:
            self.in_blob = in_blob
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def plan_id(self):
        """Gets the plan_id of this AsyncProcess.  # noqa: E501


        :return: The plan_id of this AsyncProcess.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this AsyncProcess.


        :param plan_id: The plan_id of this AsyncProcess.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_id = plan_id

    @property
    def input_values(self):
        """Gets the input_values of this AsyncProcess.  # noqa: E501


        :return: The input_values of this AsyncProcess.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._input_values

    @input_values.setter
    def input_values(self, input_values):
        """Sets the input_values of this AsyncProcess.


        :param input_values: The input_values of this AsyncProcess.  # noqa: E501
        :type: dict(str, Object)
        """

        self._input_values = input_values

    @property
    def percent_complete(self):
        """Gets the percent_complete of this AsyncProcess.  # noqa: E501


        :return: The percent_complete of this AsyncProcess.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this AsyncProcess.


        :param percent_complete: The percent_complete of this AsyncProcess.  # noqa: E501
        :type: DecimalNumber
        """

        self._percent_complete = percent_complete

    @property
    def state(self):
        """Gets the state of this AsyncProcess.  # noqa: E501


        :return: The state of this AsyncProcess.  # noqa: E501
        :rtype: AsyncProcessState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AsyncProcess.


        :param state: The state of this AsyncProcess.  # noqa: E501
        :type: AsyncProcessState
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this AsyncProcess.  # noqa: E501


        :return: The status of this AsyncProcess.  # noqa: E501
        :rtype: AsyncProcessStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AsyncProcess.


        :param status: The status of this AsyncProcess.  # noqa: E501
        :type: AsyncProcessStatus
        """

        self._status = status

    @property
    def last_message(self):
        """Gets the last_message of this AsyncProcess.  # noqa: E501


        :return: The last_message of this AsyncProcess.  # noqa: E501
        :rtype: str
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this AsyncProcess.


        :param last_message: The last_message of this AsyncProcess.  # noqa: E501
        :type: str
        """

        self._last_message = last_message

    @property
    def async_class(self):
        """Gets the async_class of this AsyncProcess.  # noqa: E501


        :return: The async_class of this AsyncProcess.  # noqa: E501
        :rtype: str
        """
        return self._async_class

    @async_class.setter
    def async_class(self, async_class):
        """Sets the async_class of this AsyncProcess.


        :param async_class: The async_class of this AsyncProcess.  # noqa: E501
        :type: str
        """

        self._async_class = async_class

    @property
    def access_token(self):
        """Gets the access_token of this AsyncProcess.  # noqa: E501


        :return: The access_token of this AsyncProcess.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AsyncProcess.


        :param access_token: The access_token of this AsyncProcess.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def sequence_number(self):
        """Gets the sequence_number of this AsyncProcess.  # noqa: E501


        :return: The sequence_number of this AsyncProcess.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this AsyncProcess.


        :param sequence_number: The sequence_number of this AsyncProcess.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def start_date(self):
        """Gets the start_date of this AsyncProcess.  # noqa: E501


        :return: The start_date of this AsyncProcess.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AsyncProcess.


        :param start_date: The start_date of this AsyncProcess.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def queue_date(self):
        """Gets the queue_date of this AsyncProcess.  # noqa: E501


        :return: The queue_date of this AsyncProcess.  # noqa: E501
        :rtype: date
        """
        return self._queue_date

    @queue_date.setter
    def queue_date(self, queue_date):
        """Sets the queue_date of this AsyncProcess.


        :param queue_date: The queue_date of this AsyncProcess.  # noqa: E501
        :type: date
        """

        self._queue_date = queue_date

    @property
    def user_id(self):
        """Gets the user_id of this AsyncProcess.  # noqa: E501


        :return: The user_id of this AsyncProcess.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AsyncProcess.


        :param user_id: The user_id of this AsyncProcess.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._user_id = user_id

    @property
    def in_blob(self):
        """Gets the in_blob of this AsyncProcess.  # noqa: E501


        :return: The in_blob of this AsyncProcess.  # noqa: E501
        :rtype: bool
        """
        return self._in_blob

    @in_blob.setter
    def in_blob(self, in_blob):
        """Sets the in_blob of this AsyncProcess.


        :param in_blob: The in_blob of this AsyncProcess.  # noqa: E501
        :type: bool
        """

        self._in_blob = in_blob

    @property
    def id(self):
        """Gets the id of this AsyncProcess.  # noqa: E501


        :return: The id of this AsyncProcess.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AsyncProcess.


        :param id: The id of this AsyncProcess.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this AsyncProcess.  # noqa: E501


        :return: The config_id of this AsyncProcess.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this AsyncProcess.


        :param config_id: The config_id of this AsyncProcess.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsyncProcess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsyncProcess):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
