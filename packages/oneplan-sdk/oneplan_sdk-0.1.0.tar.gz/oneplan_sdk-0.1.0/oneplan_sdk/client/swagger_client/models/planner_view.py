# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlannerView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'GloballyUniqueIdentifier',
        'work_type': 'GloballyUniqueIdentifier',
        'name': 'str',
        'columns': 'list[str]',
        'fixed_columns': 'list[str]',
        'fixed_width': 'int',
        'sorter': 'PlannerViewSort',
        'filter': 'str',
        'filter_options': 'str',
        'show_dependencies': 'bool',
        'default': 'bool',
        'show_gantt': 'bool',
        'show_timeline': 'bool',
        'show_resource_plan': 'bool',
        'show_resource_usage': 'bool',
        'show_board': 'bool',
        'states': 'list[Object]',
        'group_by': 'list[str]',
        'grouping_events': 'list[ViewGroupingEvent]'
    }

    attribute_map = {
        'id': 'Id',
        'work_type': 'WorkType',
        'name': 'Name',
        'columns': 'Columns',
        'fixed_columns': 'FixedColumns',
        'fixed_width': 'FixedWidth',
        'sorter': 'Sorter',
        'filter': 'Filter',
        'filter_options': 'FilterOptions',
        'show_dependencies': 'ShowDependencies',
        'default': 'Default',
        'show_gantt': 'ShowGantt',
        'show_timeline': 'ShowTimeline',
        'show_resource_plan': 'ShowResourcePlan',
        'show_resource_usage': 'ShowResourceUsage',
        'show_board': 'ShowBoard',
        'states': 'States',
        'group_by': 'GroupBy',
        'grouping_events': 'GroupingEvents'
    }

    def __init__(self, id=None, work_type=None, name=None, columns=None, fixed_columns=None, fixed_width=None, sorter=None, filter=None, filter_options=None, show_dependencies=None, default=None, show_gantt=None, show_timeline=None, show_resource_plan=None, show_resource_usage=None, show_board=None, states=None, group_by=None, grouping_events=None):  # noqa: E501
        """PlannerView - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._work_type = None
        self._name = None
        self._columns = None
        self._fixed_columns = None
        self._fixed_width = None
        self._sorter = None
        self._filter = None
        self._filter_options = None
        self._show_dependencies = None
        self._default = None
        self._show_gantt = None
        self._show_timeline = None
        self._show_resource_plan = None
        self._show_resource_usage = None
        self._show_board = None
        self._states = None
        self._group_by = None
        self._grouping_events = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if work_type is not None:
            self.work_type = work_type
        if name is not None:
            self.name = name
        if columns is not None:
            self.columns = columns
        if fixed_columns is not None:
            self.fixed_columns = fixed_columns
        if fixed_width is not None:
            self.fixed_width = fixed_width
        if sorter is not None:
            self.sorter = sorter
        if filter is not None:
            self.filter = filter
        if filter_options is not None:
            self.filter_options = filter_options
        if show_dependencies is not None:
            self.show_dependencies = show_dependencies
        if default is not None:
            self.default = default
        if show_gantt is not None:
            self.show_gantt = show_gantt
        if show_timeline is not None:
            self.show_timeline = show_timeline
        if show_resource_plan is not None:
            self.show_resource_plan = show_resource_plan
        if show_resource_usage is not None:
            self.show_resource_usage = show_resource_usage
        if show_board is not None:
            self.show_board = show_board
        if states is not None:
            self.states = states
        if group_by is not None:
            self.group_by = group_by
        if grouping_events is not None:
            self.grouping_events = grouping_events

    @property
    def id(self):
        """Gets the id of this PlannerView.  # noqa: E501


        :return: The id of this PlannerView.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlannerView.


        :param id: The id of this PlannerView.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def work_type(self):
        """Gets the work_type of this PlannerView.  # noqa: E501


        :return: The work_type of this PlannerView.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_type

    @work_type.setter
    def work_type(self, work_type):
        """Sets the work_type of this PlannerView.


        :param work_type: The work_type of this PlannerView.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_type = work_type

    @property
    def name(self):
        """Gets the name of this PlannerView.  # noqa: E501


        :return: The name of this PlannerView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlannerView.


        :param name: The name of this PlannerView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def columns(self):
        """Gets the columns of this PlannerView.  # noqa: E501


        :return: The columns of this PlannerView.  # noqa: E501
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this PlannerView.


        :param columns: The columns of this PlannerView.  # noqa: E501
        :type: list[str]
        """

        self._columns = columns

    @property
    def fixed_columns(self):
        """Gets the fixed_columns of this PlannerView.  # noqa: E501


        :return: The fixed_columns of this PlannerView.  # noqa: E501
        :rtype: list[str]
        """
        return self._fixed_columns

    @fixed_columns.setter
    def fixed_columns(self, fixed_columns):
        """Sets the fixed_columns of this PlannerView.


        :param fixed_columns: The fixed_columns of this PlannerView.  # noqa: E501
        :type: list[str]
        """

        self._fixed_columns = fixed_columns

    @property
    def fixed_width(self):
        """Gets the fixed_width of this PlannerView.  # noqa: E501


        :return: The fixed_width of this PlannerView.  # noqa: E501
        :rtype: int
        """
        return self._fixed_width

    @fixed_width.setter
    def fixed_width(self, fixed_width):
        """Sets the fixed_width of this PlannerView.


        :param fixed_width: The fixed_width of this PlannerView.  # noqa: E501
        :type: int
        """

        self._fixed_width = fixed_width

    @property
    def sorter(self):
        """Gets the sorter of this PlannerView.  # noqa: E501


        :return: The sorter of this PlannerView.  # noqa: E501
        :rtype: PlannerViewSort
        """
        return self._sorter

    @sorter.setter
    def sorter(self, sorter):
        """Sets the sorter of this PlannerView.


        :param sorter: The sorter of this PlannerView.  # noqa: E501
        :type: PlannerViewSort
        """

        self._sorter = sorter

    @property
    def filter(self):
        """Gets the filter of this PlannerView.  # noqa: E501


        :return: The filter of this PlannerView.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this PlannerView.


        :param filter: The filter of this PlannerView.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def filter_options(self):
        """Gets the filter_options of this PlannerView.  # noqa: E501


        :return: The filter_options of this PlannerView.  # noqa: E501
        :rtype: str
        """
        return self._filter_options

    @filter_options.setter
    def filter_options(self, filter_options):
        """Sets the filter_options of this PlannerView.


        :param filter_options: The filter_options of this PlannerView.  # noqa: E501
        :type: str
        """

        self._filter_options = filter_options

    @property
    def show_dependencies(self):
        """Gets the show_dependencies of this PlannerView.  # noqa: E501


        :return: The show_dependencies of this PlannerView.  # noqa: E501
        :rtype: bool
        """
        return self._show_dependencies

    @show_dependencies.setter
    def show_dependencies(self, show_dependencies):
        """Sets the show_dependencies of this PlannerView.


        :param show_dependencies: The show_dependencies of this PlannerView.  # noqa: E501
        :type: bool
        """

        self._show_dependencies = show_dependencies

    @property
    def default(self):
        """Gets the default of this PlannerView.  # noqa: E501


        :return: The default of this PlannerView.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this PlannerView.


        :param default: The default of this PlannerView.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def show_gantt(self):
        """Gets the show_gantt of this PlannerView.  # noqa: E501


        :return: The show_gantt of this PlannerView.  # noqa: E501
        :rtype: bool
        """
        return self._show_gantt

    @show_gantt.setter
    def show_gantt(self, show_gantt):
        """Sets the show_gantt of this PlannerView.


        :param show_gantt: The show_gantt of this PlannerView.  # noqa: E501
        :type: bool
        """

        self._show_gantt = show_gantt

    @property
    def show_timeline(self):
        """Gets the show_timeline of this PlannerView.  # noqa: E501


        :return: The show_timeline of this PlannerView.  # noqa: E501
        :rtype: bool
        """
        return self._show_timeline

    @show_timeline.setter
    def show_timeline(self, show_timeline):
        """Sets the show_timeline of this PlannerView.


        :param show_timeline: The show_timeline of this PlannerView.  # noqa: E501
        :type: bool
        """

        self._show_timeline = show_timeline

    @property
    def show_resource_plan(self):
        """Gets the show_resource_plan of this PlannerView.  # noqa: E501


        :return: The show_resource_plan of this PlannerView.  # noqa: E501
        :rtype: bool
        """
        return self._show_resource_plan

    @show_resource_plan.setter
    def show_resource_plan(self, show_resource_plan):
        """Sets the show_resource_plan of this PlannerView.


        :param show_resource_plan: The show_resource_plan of this PlannerView.  # noqa: E501
        :type: bool
        """

        self._show_resource_plan = show_resource_plan

    @property
    def show_resource_usage(self):
        """Gets the show_resource_usage of this PlannerView.  # noqa: E501


        :return: The show_resource_usage of this PlannerView.  # noqa: E501
        :rtype: bool
        """
        return self._show_resource_usage

    @show_resource_usage.setter
    def show_resource_usage(self, show_resource_usage):
        """Sets the show_resource_usage of this PlannerView.


        :param show_resource_usage: The show_resource_usage of this PlannerView.  # noqa: E501
        :type: bool
        """

        self._show_resource_usage = show_resource_usage

    @property
    def show_board(self):
        """Gets the show_board of this PlannerView.  # noqa: E501


        :return: The show_board of this PlannerView.  # noqa: E501
        :rtype: bool
        """
        return self._show_board

    @show_board.setter
    def show_board(self, show_board):
        """Sets the show_board of this PlannerView.


        :param show_board: The show_board of this PlannerView.  # noqa: E501
        :type: bool
        """

        self._show_board = show_board

    @property
    def states(self):
        """Gets the states of this PlannerView.  # noqa: E501


        :return: The states of this PlannerView.  # noqa: E501
        :rtype: list[Object]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this PlannerView.


        :param states: The states of this PlannerView.  # noqa: E501
        :type: list[Object]
        """

        self._states = states

    @property
    def group_by(self):
        """Gets the group_by of this PlannerView.  # noqa: E501


        :return: The group_by of this PlannerView.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this PlannerView.


        :param group_by: The group_by of this PlannerView.  # noqa: E501
        :type: list[str]
        """

        self._group_by = group_by

    @property
    def grouping_events(self):
        """Gets the grouping_events of this PlannerView.  # noqa: E501


        :return: The grouping_events of this PlannerView.  # noqa: E501
        :rtype: list[ViewGroupingEvent]
        """
        return self._grouping_events

    @grouping_events.setter
    def grouping_events(self, grouping_events):
        """Sets the grouping_events of this PlannerView.


        :param grouping_events: The grouping_events of this PlannerView.  # noqa: E501
        :type: list[ViewGroupingEvent]
        """

        self._grouping_events = grouping_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlannerView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlannerView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
