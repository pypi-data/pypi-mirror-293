# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'section': 'str',
        'name': 'str',
        'description': 'str',
        'display_name': 'str',
        'type': 'PropertyType',
        'field_list': 'str',
        'field_type_filter': 'str',
        'choices': 'list[str]',
        'current_value': 'Object',
        'advanced': 'bool',
        'no_dups': 'bool',
        'required': 'bool',
        'sub_properties': 'list[AppProperty]'
    }

    attribute_map = {
        'section': 'Section',
        'name': 'Name',
        'description': 'Description',
        'display_name': 'DisplayName',
        'type': 'Type',
        'field_list': 'FieldList',
        'field_type_filter': 'FieldTypeFilter',
        'choices': 'Choices',
        'current_value': 'CurrentValue',
        'advanced': 'Advanced',
        'no_dups': 'NoDups',
        'required': 'Required',
        'sub_properties': 'SubProperties'
    }

    def __init__(self, section=None, name=None, description=None, display_name=None, type=None, field_list=None, field_type_filter=None, choices=None, current_value=None, advanced=None, no_dups=None, required=None, sub_properties=None):  # noqa: E501
        """AppProperty - a model defined in Swagger"""  # noqa: E501
        self._section = None
        self._name = None
        self._description = None
        self._display_name = None
        self._type = None
        self._field_list = None
        self._field_type_filter = None
        self._choices = None
        self._current_value = None
        self._advanced = None
        self._no_dups = None
        self._required = None
        self._sub_properties = None
        self.discriminator = None
        if section is not None:
            self.section = section
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if type is not None:
            self.type = type
        if field_list is not None:
            self.field_list = field_list
        if field_type_filter is not None:
            self.field_type_filter = field_type_filter
        if choices is not None:
            self.choices = choices
        if current_value is not None:
            self.current_value = current_value
        if advanced is not None:
            self.advanced = advanced
        if no_dups is not None:
            self.no_dups = no_dups
        if required is not None:
            self.required = required
        if sub_properties is not None:
            self.sub_properties = sub_properties

    @property
    def section(self):
        """Gets the section of this AppProperty.  # noqa: E501


        :return: The section of this AppProperty.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this AppProperty.


        :param section: The section of this AppProperty.  # noqa: E501
        :type: str
        """

        self._section = section

    @property
    def name(self):
        """Gets the name of this AppProperty.  # noqa: E501


        :return: The name of this AppProperty.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppProperty.


        :param name: The name of this AppProperty.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AppProperty.  # noqa: E501


        :return: The description of this AppProperty.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppProperty.


        :param description: The description of this AppProperty.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this AppProperty.  # noqa: E501


        :return: The display_name of this AppProperty.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppProperty.


        :param display_name: The display_name of this AppProperty.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def type(self):
        """Gets the type of this AppProperty.  # noqa: E501


        :return: The type of this AppProperty.  # noqa: E501
        :rtype: PropertyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AppProperty.


        :param type: The type of this AppProperty.  # noqa: E501
        :type: PropertyType
        """

        self._type = type

    @property
    def field_list(self):
        """Gets the field_list of this AppProperty.  # noqa: E501


        :return: The field_list of this AppProperty.  # noqa: E501
        :rtype: str
        """
        return self._field_list

    @field_list.setter
    def field_list(self, field_list):
        """Sets the field_list of this AppProperty.


        :param field_list: The field_list of this AppProperty.  # noqa: E501
        :type: str
        """

        self._field_list = field_list

    @property
    def field_type_filter(self):
        """Gets the field_type_filter of this AppProperty.  # noqa: E501


        :return: The field_type_filter of this AppProperty.  # noqa: E501
        :rtype: str
        """
        return self._field_type_filter

    @field_type_filter.setter
    def field_type_filter(self, field_type_filter):
        """Sets the field_type_filter of this AppProperty.


        :param field_type_filter: The field_type_filter of this AppProperty.  # noqa: E501
        :type: str
        """

        self._field_type_filter = field_type_filter

    @property
    def choices(self):
        """Gets the choices of this AppProperty.  # noqa: E501


        :return: The choices of this AppProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this AppProperty.


        :param choices: The choices of this AppProperty.  # noqa: E501
        :type: list[str]
        """

        self._choices = choices

    @property
    def current_value(self):
        """Gets the current_value of this AppProperty.  # noqa: E501


        :return: The current_value of this AppProperty.  # noqa: E501
        :rtype: Object
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this AppProperty.


        :param current_value: The current_value of this AppProperty.  # noqa: E501
        :type: Object
        """

        self._current_value = current_value

    @property
    def advanced(self):
        """Gets the advanced of this AppProperty.  # noqa: E501


        :return: The advanced of this AppProperty.  # noqa: E501
        :rtype: bool
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this AppProperty.


        :param advanced: The advanced of this AppProperty.  # noqa: E501
        :type: bool
        """

        self._advanced = advanced

    @property
    def no_dups(self):
        """Gets the no_dups of this AppProperty.  # noqa: E501


        :return: The no_dups of this AppProperty.  # noqa: E501
        :rtype: bool
        """
        return self._no_dups

    @no_dups.setter
    def no_dups(self, no_dups):
        """Sets the no_dups of this AppProperty.


        :param no_dups: The no_dups of this AppProperty.  # noqa: E501
        :type: bool
        """

        self._no_dups = no_dups

    @property
    def required(self):
        """Gets the required of this AppProperty.  # noqa: E501


        :return: The required of this AppProperty.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this AppProperty.


        :param required: The required of this AppProperty.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def sub_properties(self):
        """Gets the sub_properties of this AppProperty.  # noqa: E501


        :return: The sub_properties of this AppProperty.  # noqa: E501
        :rtype: list[AppProperty]
        """
        return self._sub_properties

    @sub_properties.setter
    def sub_properties(self, sub_properties):
        """Sets the sub_properties of this AppProperty.


        :param sub_properties: The sub_properties of this AppProperty.  # noqa: E501
        :type: list[AppProperty]
        """

        self._sub_properties = sub_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
