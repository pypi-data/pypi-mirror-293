# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_id': 'GloballyUniqueIdentifier',
        'object_type': 'InsightObjectType',
        'values': 'list[InsightValue]',
        'compliance': 'DecimalNumber',
        'as_of_date': 'date',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'object_id': 'ObjectId',
        'object_type': 'ObjectType',
        'values': 'Values',
        'compliance': 'Compliance',
        'as_of_date': 'AsOfDate',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, object_id=None, object_type=None, values=None, compliance=None, as_of_date=None, id=None, config_id=None):  # noqa: E501
        """InsightResult - a model defined in Swagger"""  # noqa: E501
        self._object_id = None
        self._object_type = None
        self._values = None
        self._compliance = None
        self._as_of_date = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if object_id is not None:
            self.object_id = object_id
        if object_type is not None:
            self.object_type = object_type
        if values is not None:
            self.values = values
        if compliance is not None:
            self.compliance = compliance
        if as_of_date is not None:
            self.as_of_date = as_of_date
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def object_id(self):
        """Gets the object_id of this InsightResult.  # noqa: E501


        :return: The object_id of this InsightResult.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this InsightResult.


        :param object_id: The object_id of this InsightResult.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this InsightResult.  # noqa: E501


        :return: The object_type of this InsightResult.  # noqa: E501
        :rtype: InsightObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this InsightResult.


        :param object_type: The object_type of this InsightResult.  # noqa: E501
        :type: InsightObjectType
        """

        self._object_type = object_type

    @property
    def values(self):
        """Gets the values of this InsightResult.  # noqa: E501


        :return: The values of this InsightResult.  # noqa: E501
        :rtype: list[InsightValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this InsightResult.


        :param values: The values of this InsightResult.  # noqa: E501
        :type: list[InsightValue]
        """

        self._values = values

    @property
    def compliance(self):
        """Gets the compliance of this InsightResult.  # noqa: E501


        :return: The compliance of this InsightResult.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this InsightResult.


        :param compliance: The compliance of this InsightResult.  # noqa: E501
        :type: DecimalNumber
        """

        self._compliance = compliance

    @property
    def as_of_date(self):
        """Gets the as_of_date of this InsightResult.  # noqa: E501


        :return: The as_of_date of this InsightResult.  # noqa: E501
        :rtype: date
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this InsightResult.


        :param as_of_date: The as_of_date of this InsightResult.  # noqa: E501
        :type: date
        """

        self._as_of_date = as_of_date

    @property
    def id(self):
        """Gets the id of this InsightResult.  # noqa: E501


        :return: The id of this InsightResult.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InsightResult.


        :param id: The id of this InsightResult.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this InsightResult.  # noqa: E501


        :return: The config_id of this InsightResult.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this InsightResult.


        :param config_id: The config_id of this InsightResult.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InsightResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
