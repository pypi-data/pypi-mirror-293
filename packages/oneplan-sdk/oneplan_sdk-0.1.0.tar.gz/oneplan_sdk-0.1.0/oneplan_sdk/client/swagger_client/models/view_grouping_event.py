# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ViewGroupingEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'GloballyUniqueIdentifier',
        'view_id': 'GloballyUniqueIdentifier',
        'name': 'str',
        'estimated_start': 'date',
        'estimated_end': 'date'
    }

    attribute_map = {
        'id': 'Id',
        'view_id': 'ViewId',
        'name': 'Name',
        'estimated_start': 'EstimatedStart',
        'estimated_end': 'EstimatedEnd'
    }

    def __init__(self, id=None, view_id=None, name=None, estimated_start=None, estimated_end=None):  # noqa: E501
        """ViewGroupingEvent - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._view_id = None
        self._name = None
        self._estimated_start = None
        self._estimated_end = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if view_id is not None:
            self.view_id = view_id
        if name is not None:
            self.name = name
        if estimated_start is not None:
            self.estimated_start = estimated_start
        if estimated_end is not None:
            self.estimated_end = estimated_end

    @property
    def id(self):
        """Gets the id of this ViewGroupingEvent.  # noqa: E501


        :return: The id of this ViewGroupingEvent.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ViewGroupingEvent.


        :param id: The id of this ViewGroupingEvent.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def view_id(self):
        """Gets the view_id of this ViewGroupingEvent.  # noqa: E501


        :return: The view_id of this ViewGroupingEvent.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this ViewGroupingEvent.


        :param view_id: The view_id of this ViewGroupingEvent.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._view_id = view_id

    @property
    def name(self):
        """Gets the name of this ViewGroupingEvent.  # noqa: E501


        :return: The name of this ViewGroupingEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ViewGroupingEvent.


        :param name: The name of this ViewGroupingEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def estimated_start(self):
        """Gets the estimated_start of this ViewGroupingEvent.  # noqa: E501


        :return: The estimated_start of this ViewGroupingEvent.  # noqa: E501
        :rtype: date
        """
        return self._estimated_start

    @estimated_start.setter
    def estimated_start(self, estimated_start):
        """Sets the estimated_start of this ViewGroupingEvent.


        :param estimated_start: The estimated_start of this ViewGroupingEvent.  # noqa: E501
        :type: date
        """

        self._estimated_start = estimated_start

    @property
    def estimated_end(self):
        """Gets the estimated_end of this ViewGroupingEvent.  # noqa: E501


        :return: The estimated_end of this ViewGroupingEvent.  # noqa: E501
        :rtype: date
        """
        return self._estimated_end

    @estimated_end.setter
    def estimated_end(self, estimated_end):
        """Sets the estimated_end of this ViewGroupingEvent.


        :param estimated_end: The estimated_end of this ViewGroupingEvent.  # noqa: E501
        :type: date
        """

        self._estimated_end = estimated_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ViewGroupingEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewGroupingEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
