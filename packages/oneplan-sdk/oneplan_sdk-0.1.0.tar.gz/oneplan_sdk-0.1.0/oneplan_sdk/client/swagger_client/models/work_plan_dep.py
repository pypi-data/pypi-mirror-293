# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkPlanDep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phantom_id': 'str',
        'work_plan_id': 'GloballyUniqueIdentifier',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier',
        '_from': 'GloballyUniqueIdentifier',
        'to': 'GloballyUniqueIdentifier',
        'type': 'int',
        'lag': 'int',
        'lag_unit': 'str',
        'bidirectional': 'bool'
    }

    attribute_map = {
        'phantom_id': '$PhantomId',
        'work_plan_id': 'WorkPlanId',
        'id': 'id',
        'config_id': 'ConfigId',
        '_from': 'From',
        'to': 'To',
        'type': 'Type',
        'lag': 'Lag',
        'lag_unit': 'LagUnit',
        'bidirectional': 'Bidirectional'
    }

    def __init__(self, phantom_id=None, work_plan_id=None, id=None, config_id=None, _from=None, to=None, type=None, lag=None, lag_unit=None, bidirectional=None):  # noqa: E501
        """WorkPlanDep - a model defined in Swagger"""  # noqa: E501
        self._phantom_id = None
        self._work_plan_id = None
        self._id = None
        self._config_id = None
        self.__from = None
        self._to = None
        self._type = None
        self._lag = None
        self._lag_unit = None
        self._bidirectional = None
        self.discriminator = None
        if phantom_id is not None:
            self.phantom_id = phantom_id
        if work_plan_id is not None:
            self.work_plan_id = work_plan_id
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if type is not None:
            self.type = type
        if lag is not None:
            self.lag = lag
        if lag_unit is not None:
            self.lag_unit = lag_unit
        if bidirectional is not None:
            self.bidirectional = bidirectional

    @property
    def phantom_id(self):
        """Gets the phantom_id of this WorkPlanDep.  # noqa: E501


        :return: The phantom_id of this WorkPlanDep.  # noqa: E501
        :rtype: str
        """
        return self._phantom_id

    @phantom_id.setter
    def phantom_id(self, phantom_id):
        """Sets the phantom_id of this WorkPlanDep.


        :param phantom_id: The phantom_id of this WorkPlanDep.  # noqa: E501
        :type: str
        """

        self._phantom_id = phantom_id

    @property
    def work_plan_id(self):
        """Gets the work_plan_id of this WorkPlanDep.  # noqa: E501


        :return: The work_plan_id of this WorkPlanDep.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_plan_id

    @work_plan_id.setter
    def work_plan_id(self, work_plan_id):
        """Sets the work_plan_id of this WorkPlanDep.


        :param work_plan_id: The work_plan_id of this WorkPlanDep.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_plan_id = work_plan_id

    @property
    def id(self):
        """Gets the id of this WorkPlanDep.  # noqa: E501


        :return: The id of this WorkPlanDep.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkPlanDep.


        :param id: The id of this WorkPlanDep.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this WorkPlanDep.  # noqa: E501


        :return: The config_id of this WorkPlanDep.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this WorkPlanDep.


        :param config_id: The config_id of this WorkPlanDep.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    @property
    def _from(self):
        """Gets the _from of this WorkPlanDep.  # noqa: E501


        :return: The _from of this WorkPlanDep.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this WorkPlanDep.


        :param _from: The _from of this WorkPlanDep.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this WorkPlanDep.  # noqa: E501


        :return: The to of this WorkPlanDep.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this WorkPlanDep.


        :param to: The to of this WorkPlanDep.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this WorkPlanDep.  # noqa: E501


        :return: The type of this WorkPlanDep.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkPlanDep.


        :param type: The type of this WorkPlanDep.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def lag(self):
        """Gets the lag of this WorkPlanDep.  # noqa: E501


        :return: The lag of this WorkPlanDep.  # noqa: E501
        :rtype: int
        """
        return self._lag

    @lag.setter
    def lag(self, lag):
        """Sets the lag of this WorkPlanDep.


        :param lag: The lag of this WorkPlanDep.  # noqa: E501
        :type: int
        """

        self._lag = lag

    @property
    def lag_unit(self):
        """Gets the lag_unit of this WorkPlanDep.  # noqa: E501


        :return: The lag_unit of this WorkPlanDep.  # noqa: E501
        :rtype: str
        """
        return self._lag_unit

    @lag_unit.setter
    def lag_unit(self, lag_unit):
        """Sets the lag_unit of this WorkPlanDep.


        :param lag_unit: The lag_unit of this WorkPlanDep.  # noqa: E501
        :type: str
        """

        self._lag_unit = lag_unit

    @property
    def bidirectional(self):
        """Gets the bidirectional of this WorkPlanDep.  # noqa: E501


        :return: The bidirectional of this WorkPlanDep.  # noqa: E501
        :rtype: bool
        """
        return self._bidirectional

    @bidirectional.setter
    def bidirectional(self, bidirectional):
        """Sets the bidirectional of this WorkPlanDep.


        :param bidirectional: The bidirectional of this WorkPlanDep.  # noqa: E501
        :type: bool
        """

        self._bidirectional = bidirectional

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkPlanDep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkPlanDep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
