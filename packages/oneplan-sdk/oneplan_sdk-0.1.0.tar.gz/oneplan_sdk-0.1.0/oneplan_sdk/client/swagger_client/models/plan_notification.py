# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_scope': 'NotificationScope',
        'plan_type': 'GloballyUniqueIdentifier',
        'trigger_type': 'PlanNotificationTrigger',
        'on_field': 'GloballyUniqueIdentifier',
        'field_name': 'str',
        'matching_value': 'str',
        'when_object': 'WhenObject',
        'filter': 'str',
        'email_receiver_type': 'PlanNotificationReceiver',
        'email_receiver_field_selection': 'GloballyUniqueIdentifier',
        'email_receiver_field_selection_name': 'str',
        'email_receiver_shared_with_levels': 'list[AccessLevel]',
        'email_receiver_users_selection': 'list[GloballyUniqueIdentifier]',
        'email_receiver_teams_selection': 'list[GloballyUniqueIdentifier]',
        'email_subject': 'str',
        'email_fields_sent': 'dict(str, GloballyUniqueIdentifier)',
        'email_body': 'str',
        'user_id': 'GloballyUniqueIdentifier',
        'plan_id': 'GloballyUniqueIdentifier',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'notification_scope': 'NotificationScope',
        'plan_type': 'PlanType',
        'trigger_type': 'TriggerType',
        'on_field': 'OnField',
        'field_name': 'FieldName',
        'matching_value': 'MatchingValue',
        'when_object': 'WhenObject',
        'filter': 'Filter',
        'email_receiver_type': 'EmailReceiverType',
        'email_receiver_field_selection': 'EmailReceiverFieldSelection',
        'email_receiver_field_selection_name': 'EmailReceiverFieldSelectionName',
        'email_receiver_shared_with_levels': 'EmailReceiverSharedWithLevels',
        'email_receiver_users_selection': 'EmailReceiverUsersSelection',
        'email_receiver_teams_selection': 'EmailReceiverTeamsSelection',
        'email_subject': 'EmailSubject',
        'email_fields_sent': 'EmailFieldsSent',
        'email_body': 'EmailBody',
        'user_id': 'UserId',
        'plan_id': 'PlanId',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, notification_scope=None, plan_type=None, trigger_type=None, on_field=None, field_name=None, matching_value=None, when_object=None, filter=None, email_receiver_type=None, email_receiver_field_selection=None, email_receiver_field_selection_name=None, email_receiver_shared_with_levels=None, email_receiver_users_selection=None, email_receiver_teams_selection=None, email_subject=None, email_fields_sent=None, email_body=None, user_id=None, plan_id=None, id=None, config_id=None):  # noqa: E501
        """PlanNotification - a model defined in Swagger"""  # noqa: E501
        self._notification_scope = None
        self._plan_type = None
        self._trigger_type = None
        self._on_field = None
        self._field_name = None
        self._matching_value = None
        self._when_object = None
        self._filter = None
        self._email_receiver_type = None
        self._email_receiver_field_selection = None
        self._email_receiver_field_selection_name = None
        self._email_receiver_shared_with_levels = None
        self._email_receiver_users_selection = None
        self._email_receiver_teams_selection = None
        self._email_subject = None
        self._email_fields_sent = None
        self._email_body = None
        self._user_id = None
        self._plan_id = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if notification_scope is not None:
            self.notification_scope = notification_scope
        if plan_type is not None:
            self.plan_type = plan_type
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if on_field is not None:
            self.on_field = on_field
        if field_name is not None:
            self.field_name = field_name
        if matching_value is not None:
            self.matching_value = matching_value
        if when_object is not None:
            self.when_object = when_object
        if filter is not None:
            self.filter = filter
        if email_receiver_type is not None:
            self.email_receiver_type = email_receiver_type
        if email_receiver_field_selection is not None:
            self.email_receiver_field_selection = email_receiver_field_selection
        if email_receiver_field_selection_name is not None:
            self.email_receiver_field_selection_name = email_receiver_field_selection_name
        if email_receiver_shared_with_levels is not None:
            self.email_receiver_shared_with_levels = email_receiver_shared_with_levels
        if email_receiver_users_selection is not None:
            self.email_receiver_users_selection = email_receiver_users_selection
        if email_receiver_teams_selection is not None:
            self.email_receiver_teams_selection = email_receiver_teams_selection
        if email_subject is not None:
            self.email_subject = email_subject
        if email_fields_sent is not None:
            self.email_fields_sent = email_fields_sent
        if email_body is not None:
            self.email_body = email_body
        if user_id is not None:
            self.user_id = user_id
        if plan_id is not None:
            self.plan_id = plan_id
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def notification_scope(self):
        """Gets the notification_scope of this PlanNotification.  # noqa: E501


        :return: The notification_scope of this PlanNotification.  # noqa: E501
        :rtype: NotificationScope
        """
        return self._notification_scope

    @notification_scope.setter
    def notification_scope(self, notification_scope):
        """Sets the notification_scope of this PlanNotification.


        :param notification_scope: The notification_scope of this PlanNotification.  # noqa: E501
        :type: NotificationScope
        """

        self._notification_scope = notification_scope

    @property
    def plan_type(self):
        """Gets the plan_type of this PlanNotification.  # noqa: E501


        :return: The plan_type of this PlanNotification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this PlanNotification.


        :param plan_type: The plan_type of this PlanNotification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_type = plan_type

    @property
    def trigger_type(self):
        """Gets the trigger_type of this PlanNotification.  # noqa: E501


        :return: The trigger_type of this PlanNotification.  # noqa: E501
        :rtype: PlanNotificationTrigger
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this PlanNotification.


        :param trigger_type: The trigger_type of this PlanNotification.  # noqa: E501
        :type: PlanNotificationTrigger
        """

        self._trigger_type = trigger_type

    @property
    def on_field(self):
        """Gets the on_field of this PlanNotification.  # noqa: E501


        :return: The on_field of this PlanNotification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._on_field

    @on_field.setter
    def on_field(self, on_field):
        """Sets the on_field of this PlanNotification.


        :param on_field: The on_field of this PlanNotification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._on_field = on_field

    @property
    def field_name(self):
        """Gets the field_name of this PlanNotification.  # noqa: E501


        :return: The field_name of this PlanNotification.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this PlanNotification.


        :param field_name: The field_name of this PlanNotification.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def matching_value(self):
        """Gets the matching_value of this PlanNotification.  # noqa: E501


        :return: The matching_value of this PlanNotification.  # noqa: E501
        :rtype: str
        """
        return self._matching_value

    @matching_value.setter
    def matching_value(self, matching_value):
        """Sets the matching_value of this PlanNotification.


        :param matching_value: The matching_value of this PlanNotification.  # noqa: E501
        :type: str
        """

        self._matching_value = matching_value

    @property
    def when_object(self):
        """Gets the when_object of this PlanNotification.  # noqa: E501


        :return: The when_object of this PlanNotification.  # noqa: E501
        :rtype: WhenObject
        """
        return self._when_object

    @when_object.setter
    def when_object(self, when_object):
        """Sets the when_object of this PlanNotification.


        :param when_object: The when_object of this PlanNotification.  # noqa: E501
        :type: WhenObject
        """

        self._when_object = when_object

    @property
    def filter(self):
        """Gets the filter of this PlanNotification.  # noqa: E501


        :return: The filter of this PlanNotification.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this PlanNotification.


        :param filter: The filter of this PlanNotification.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def email_receiver_type(self):
        """Gets the email_receiver_type of this PlanNotification.  # noqa: E501


        :return: The email_receiver_type of this PlanNotification.  # noqa: E501
        :rtype: PlanNotificationReceiver
        """
        return self._email_receiver_type

    @email_receiver_type.setter
    def email_receiver_type(self, email_receiver_type):
        """Sets the email_receiver_type of this PlanNotification.


        :param email_receiver_type: The email_receiver_type of this PlanNotification.  # noqa: E501
        :type: PlanNotificationReceiver
        """

        self._email_receiver_type = email_receiver_type

    @property
    def email_receiver_field_selection(self):
        """Gets the email_receiver_field_selection of this PlanNotification.  # noqa: E501


        :return: The email_receiver_field_selection of this PlanNotification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._email_receiver_field_selection

    @email_receiver_field_selection.setter
    def email_receiver_field_selection(self, email_receiver_field_selection):
        """Sets the email_receiver_field_selection of this PlanNotification.


        :param email_receiver_field_selection: The email_receiver_field_selection of this PlanNotification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._email_receiver_field_selection = email_receiver_field_selection

    @property
    def email_receiver_field_selection_name(self):
        """Gets the email_receiver_field_selection_name of this PlanNotification.  # noqa: E501


        :return: The email_receiver_field_selection_name of this PlanNotification.  # noqa: E501
        :rtype: str
        """
        return self._email_receiver_field_selection_name

    @email_receiver_field_selection_name.setter
    def email_receiver_field_selection_name(self, email_receiver_field_selection_name):
        """Sets the email_receiver_field_selection_name of this PlanNotification.


        :param email_receiver_field_selection_name: The email_receiver_field_selection_name of this PlanNotification.  # noqa: E501
        :type: str
        """

        self._email_receiver_field_selection_name = email_receiver_field_selection_name

    @property
    def email_receiver_shared_with_levels(self):
        """Gets the email_receiver_shared_with_levels of this PlanNotification.  # noqa: E501


        :return: The email_receiver_shared_with_levels of this PlanNotification.  # noqa: E501
        :rtype: list[AccessLevel]
        """
        return self._email_receiver_shared_with_levels

    @email_receiver_shared_with_levels.setter
    def email_receiver_shared_with_levels(self, email_receiver_shared_with_levels):
        """Sets the email_receiver_shared_with_levels of this PlanNotification.


        :param email_receiver_shared_with_levels: The email_receiver_shared_with_levels of this PlanNotification.  # noqa: E501
        :type: list[AccessLevel]
        """

        self._email_receiver_shared_with_levels = email_receiver_shared_with_levels

    @property
    def email_receiver_users_selection(self):
        """Gets the email_receiver_users_selection of this PlanNotification.  # noqa: E501


        :return: The email_receiver_users_selection of this PlanNotification.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._email_receiver_users_selection

    @email_receiver_users_selection.setter
    def email_receiver_users_selection(self, email_receiver_users_selection):
        """Sets the email_receiver_users_selection of this PlanNotification.


        :param email_receiver_users_selection: The email_receiver_users_selection of this PlanNotification.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._email_receiver_users_selection = email_receiver_users_selection

    @property
    def email_receiver_teams_selection(self):
        """Gets the email_receiver_teams_selection of this PlanNotification.  # noqa: E501


        :return: The email_receiver_teams_selection of this PlanNotification.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._email_receiver_teams_selection

    @email_receiver_teams_selection.setter
    def email_receiver_teams_selection(self, email_receiver_teams_selection):
        """Sets the email_receiver_teams_selection of this PlanNotification.


        :param email_receiver_teams_selection: The email_receiver_teams_selection of this PlanNotification.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._email_receiver_teams_selection = email_receiver_teams_selection

    @property
    def email_subject(self):
        """Gets the email_subject of this PlanNotification.  # noqa: E501


        :return: The email_subject of this PlanNotification.  # noqa: E501
        :rtype: str
        """
        return self._email_subject

    @email_subject.setter
    def email_subject(self, email_subject):
        """Sets the email_subject of this PlanNotification.


        :param email_subject: The email_subject of this PlanNotification.  # noqa: E501
        :type: str
        """

        self._email_subject = email_subject

    @property
    def email_fields_sent(self):
        """Gets the email_fields_sent of this PlanNotification.  # noqa: E501


        :return: The email_fields_sent of this PlanNotification.  # noqa: E501
        :rtype: dict(str, GloballyUniqueIdentifier)
        """
        return self._email_fields_sent

    @email_fields_sent.setter
    def email_fields_sent(self, email_fields_sent):
        """Sets the email_fields_sent of this PlanNotification.


        :param email_fields_sent: The email_fields_sent of this PlanNotification.  # noqa: E501
        :type: dict(str, GloballyUniqueIdentifier)
        """

        self._email_fields_sent = email_fields_sent

    @property
    def email_body(self):
        """Gets the email_body of this PlanNotification.  # noqa: E501


        :return: The email_body of this PlanNotification.  # noqa: E501
        :rtype: str
        """
        return self._email_body

    @email_body.setter
    def email_body(self, email_body):
        """Sets the email_body of this PlanNotification.


        :param email_body: The email_body of this PlanNotification.  # noqa: E501
        :type: str
        """

        self._email_body = email_body

    @property
    def user_id(self):
        """Gets the user_id of this PlanNotification.  # noqa: E501


        :return: The user_id of this PlanNotification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PlanNotification.


        :param user_id: The user_id of this PlanNotification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._user_id = user_id

    @property
    def plan_id(self):
        """Gets the plan_id of this PlanNotification.  # noqa: E501


        :return: The plan_id of this PlanNotification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlanNotification.


        :param plan_id: The plan_id of this PlanNotification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_id = plan_id

    @property
    def id(self):
        """Gets the id of this PlanNotification.  # noqa: E501


        :return: The id of this PlanNotification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanNotification.


        :param id: The id of this PlanNotification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this PlanNotification.  # noqa: E501


        :return: The config_id of this PlanNotification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this PlanNotification.


        :param config_id: The config_id of this PlanNotification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
