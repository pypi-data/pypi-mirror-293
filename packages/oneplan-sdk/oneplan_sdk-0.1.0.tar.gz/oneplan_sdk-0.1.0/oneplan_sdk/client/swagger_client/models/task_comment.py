# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskComment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'GloballyUniqueIdentifier',
        'upn': 'GloballyUniqueIdentifier',
        'post_date': 'date',
        'comment': 'str',
        'cc': 'list[GloballyUniqueIdentifier]',
        'users': 'list[GloballyUniqueIdentifier]'
    }

    attribute_map = {
        'id': 'Id',
        'upn': 'UPN',
        'post_date': 'PostDate',
        'comment': 'Comment',
        'cc': 'CC',
        'users': 'Users'
    }

    def __init__(self, id=None, upn=None, post_date=None, comment=None, cc=None, users=None):  # noqa: E501
        """TaskComment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._upn = None
        self._post_date = None
        self._comment = None
        self._cc = None
        self._users = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if upn is not None:
            self.upn = upn
        if post_date is not None:
            self.post_date = post_date
        if comment is not None:
            self.comment = comment
        if cc is not None:
            self.cc = cc
        if users is not None:
            self.users = users

    @property
    def id(self):
        """Gets the id of this TaskComment.  # noqa: E501


        :return: The id of this TaskComment.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskComment.


        :param id: The id of this TaskComment.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def upn(self):
        """Gets the upn of this TaskComment.  # noqa: E501


        :return: The upn of this TaskComment.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._upn

    @upn.setter
    def upn(self, upn):
        """Sets the upn of this TaskComment.


        :param upn: The upn of this TaskComment.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._upn = upn

    @property
    def post_date(self):
        """Gets the post_date of this TaskComment.  # noqa: E501


        :return: The post_date of this TaskComment.  # noqa: E501
        :rtype: date
        """
        return self._post_date

    @post_date.setter
    def post_date(self, post_date):
        """Sets the post_date of this TaskComment.


        :param post_date: The post_date of this TaskComment.  # noqa: E501
        :type: date
        """

        self._post_date = post_date

    @property
    def comment(self):
        """Gets the comment of this TaskComment.  # noqa: E501


        :return: The comment of this TaskComment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TaskComment.


        :param comment: The comment of this TaskComment.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def cc(self):
        """Gets the cc of this TaskComment.  # noqa: E501


        :return: The cc of this TaskComment.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this TaskComment.


        :param cc: The cc of this TaskComment.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._cc = cc

    @property
    def users(self):
        """Gets the users of this TaskComment.  # noqa: E501


        :return: The users of this TaskComment.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this TaskComment.


        :param users: The users of this TaskComment.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskComment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskComment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
