# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_id': 'GloballyUniqueIdentifier',
        'resource_name': 'str',
        'user_id': 'GloballyUniqueIdentifier',
        'auth_key': 'str',
        'action': 'str',
        'timestamp': 'date',
        'updated_field_values': 'dict(str, Object)',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'resource_id': 'ResourceId',
        'resource_name': 'ResourceName',
        'user_id': 'UserId',
        'auth_key': 'AuthKey',
        'action': 'Action',
        'timestamp': 'Timestamp',
        'updated_field_values': 'UpdatedFieldValues',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, resource_id=None, resource_name=None, user_id=None, auth_key=None, action=None, timestamp=None, updated_field_values=None, id=None, config_id=None):  # noqa: E501
        """AuditResource - a model defined in Swagger"""  # noqa: E501
        self._resource_id = None
        self._resource_name = None
        self._user_id = None
        self._auth_key = None
        self._action = None
        self._timestamp = None
        self._updated_field_values = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name
        if user_id is not None:
            self.user_id = user_id
        if auth_key is not None:
            self.auth_key = auth_key
        if action is not None:
            self.action = action
        if timestamp is not None:
            self.timestamp = timestamp
        if updated_field_values is not None:
            self.updated_field_values = updated_field_values
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def resource_id(self):
        """Gets the resource_id of this AuditResource.  # noqa: E501


        :return: The resource_id of this AuditResource.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AuditResource.


        :param resource_id: The resource_id of this AuditResource.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this AuditResource.  # noqa: E501


        :return: The resource_name of this AuditResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this AuditResource.


        :param resource_name: The resource_name of this AuditResource.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def user_id(self):
        """Gets the user_id of this AuditResource.  # noqa: E501


        :return: The user_id of this AuditResource.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditResource.


        :param user_id: The user_id of this AuditResource.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._user_id = user_id

    @property
    def auth_key(self):
        """Gets the auth_key of this AuditResource.  # noqa: E501


        :return: The auth_key of this AuditResource.  # noqa: E501
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this AuditResource.


        :param auth_key: The auth_key of this AuditResource.  # noqa: E501
        :type: str
        """

        self._auth_key = auth_key

    @property
    def action(self):
        """Gets the action of this AuditResource.  # noqa: E501


        :return: The action of this AuditResource.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditResource.


        :param action: The action of this AuditResource.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditResource.  # noqa: E501


        :return: The timestamp of this AuditResource.  # noqa: E501
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditResource.


        :param timestamp: The timestamp of this AuditResource.  # noqa: E501
        :type: date
        """

        self._timestamp = timestamp

    @property
    def updated_field_values(self):
        """Gets the updated_field_values of this AuditResource.  # noqa: E501


        :return: The updated_field_values of this AuditResource.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._updated_field_values

    @updated_field_values.setter
    def updated_field_values(self, updated_field_values):
        """Sets the updated_field_values of this AuditResource.


        :param updated_field_values: The updated_field_values of this AuditResource.  # noqa: E501
        :type: dict(str, Object)
        """

        self._updated_field_values = updated_field_values

    @property
    def id(self):
        """Gets the id of this AuditResource.  # noqa: E501


        :return: The id of this AuditResource.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditResource.


        :param id: The id of this AuditResource.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this AuditResource.  # noqa: E501


        :return: The config_id of this AuditResource.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this AuditResource.


        :param config_id: The config_id of this AuditResource.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
