# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oneplan_sdk.client.swagger_client.api_client import ApiClient


class StatusReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def statusreports_id_approve_post(self, id, comments, **kwargs):  # noqa: E501
        """statusreports_id_approve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_approve_post(id, comments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param str comments: (required)
        :return: StatusReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_id_approve_post_with_http_info(id, comments, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_id_approve_post_with_http_info(id, comments, **kwargs)  # noqa: E501
            return data

    def statusreports_id_approve_post_with_http_info(self, id, comments, **kwargs):  # noqa: E501
        """statusreports_id_approve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_approve_post_with_http_info(id, comments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param str comments: (required)
        :return: StatusReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_id_approve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `statusreports_id_approve_post`")  # noqa: E501
        # verify the required parameter 'comments' is set
        if ('comments' not in params or
                params['comments'] is None):
            raise ValueError("Missing the required parameter `comments` when calling `statusreports_id_approve_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'comments' in params:
            query_params.append(('Comments', params['comments']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/{id}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_id_delete(self, id, **kwargs):  # noqa: E501
        """statusreports_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def statusreports_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """statusreports_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `statusreports_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_id_doc_get(self, id, **kwargs):  # noqa: E501
        """statusreports_id_doc_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_doc_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_id_doc_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_id_doc_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def statusreports_id_doc_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """statusreports_id_doc_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_doc_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_id_doc_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `statusreports_id_doc_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/{id}/doc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_id_pdf_get(self, id, **kwargs):  # noqa: E501
        """statusreports_id_pdf_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_pdf_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_id_pdf_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_id_pdf_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def statusreports_id_pdf_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """statusreports_id_pdf_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_pdf_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_id_pdf_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `statusreports_id_pdf_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/{id}/pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_id_ppt_get(self, id, **kwargs):  # noqa: E501
        """statusreports_id_ppt_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_ppt_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_id_ppt_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_id_ppt_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def statusreports_id_ppt_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """statusreports_id_ppt_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_ppt_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_id_ppt_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `statusreports_id_ppt_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/{id}/ppt', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_id_recall_post(self, id, **kwargs):  # noqa: E501
        """statusreports_id_recall_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_recall_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: StatusReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_id_recall_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_id_recall_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def statusreports_id_recall_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """statusreports_id_recall_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_recall_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: StatusReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_id_recall_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `statusreports_id_recall_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/{id}/recall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_id_reject_post(self, id, comments, **kwargs):  # noqa: E501
        """statusreports_id_reject_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_reject_post(id, comments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param str comments: (required)
        :return: StatusReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_id_reject_post_with_http_info(id, comments, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_id_reject_post_with_http_info(id, comments, **kwargs)  # noqa: E501
            return data

    def statusreports_id_reject_post_with_http_info(self, id, comments, **kwargs):  # noqa: E501
        """statusreports_id_reject_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_reject_post_with_http_info(id, comments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param str comments: (required)
        :return: StatusReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_id_reject_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `statusreports_id_reject_post`")  # noqa: E501
        # verify the required parameter 'comments' is set
        if ('comments' not in params or
                params['comments'] is None):
            raise ValueError("Missing the required parameter `comments` when calling `statusreports_id_reject_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'comments' in params:
            query_params.append(('Comments', params['comments']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/{id}/reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_id_submit_post(self, id, **kwargs):  # noqa: E501
        """statusreports_id_submit_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_submit_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: StatusReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_id_submit_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_id_submit_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def statusreports_id_submit_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """statusreports_id_submit_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_id_submit_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: StatusReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_id_submit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `statusreports_id_submit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/{id}/submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_my_get(self, states, **kwargs):  # noqa: E501
        """statusreports_my_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_my_get(states, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StatusReportState states: (required)
        :return: list[StatusReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_my_get_with_http_info(states, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_my_get_with_http_info(states, **kwargs)  # noqa: E501
            return data

    def statusreports_my_get_with_http_info(self, states, **kwargs):  # noqa: E501
        """statusreports_my_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_my_get_with_http_info(states, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StatusReportState states: (required)
        :return: list[StatusReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['states']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_my_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'states' is set
        if ('states' not in params or
                params['states'] is None):
            raise ValueError("Missing the required parameter `states` when calling `statusreports_my_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'states' in params:
            query_params.append(('States', params['states']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/my', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StatusReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_mysubmit_get(self, **kwargs):  # noqa: E501
        """statusreports_mysubmit_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_mysubmit_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[StatusReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_mysubmit_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_mysubmit_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def statusreports_mysubmit_get_with_http_info(self, **kwargs):  # noqa: E501
        """statusreports_mysubmit_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_mysubmit_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[StatusReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_mysubmit_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/mysubmit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StatusReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statusreports_plan_id_get(self, plan_id, report_id, **kwargs):  # noqa: E501
        """statusreports_plan_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_plan_id_get(plan_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param GloballyUniqueIdentifier report_id: (required)
        :return: StatusReportInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statusreports_plan_id_get_with_http_info(plan_id, report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.statusreports_plan_id_get_with_http_info(plan_id, report_id, **kwargs)  # noqa: E501
            return data

    def statusreports_plan_id_get_with_http_info(self, plan_id, report_id, **kwargs):  # noqa: E501
        """statusreports_plan_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statusreports_plan_id_get_with_http_info(plan_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param GloballyUniqueIdentifier report_id: (required)
        :return: StatusReportInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statusreports_plan_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `statusreports_plan_id_get`")  # noqa: E501
        # verify the required parameter 'report_id' is set
        if ('report_id' not in params or
                params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `statusreports_plan_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'report_id' in params:
            query_params.append(('ReportId', params['report_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/statusreports/{PlanId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusReportInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
