# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oneplan_sdk.client.swagger_client.api_client import ApiClient


class CostApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cost_externalimport_post(self, body, **kwargs):  # noqa: E501
        """cost_externalimport_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cost_externalimport_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportPlanCostObject body: (required)
        :return: ImportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cost_externalimport_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cost_externalimport_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cost_externalimport_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """cost_externalimport_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cost_externalimport_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportPlanCostObject body: (required)
        :return: ImportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cost_externalimport_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cost_externalimport_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/cost/externalimport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImportResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cost_id_copy_post(self, id, cost_type_to, cost_type_from, start, end, **kwargs):  # noqa: E501
        """cost_id_copy_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cost_id_copy_post(id, cost_type_to, cost_type_from, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier cost_type_to: (required)
        :param GloballyUniqueIdentifier cost_type_from: (required)
        :param date start: (required)
        :param date end: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cost_id_copy_post_with_http_info(id, cost_type_to, cost_type_from, start, end, **kwargs)  # noqa: E501
        else:
            (data) = self.cost_id_copy_post_with_http_info(id, cost_type_to, cost_type_from, start, end, **kwargs)  # noqa: E501
            return data

    def cost_id_copy_post_with_http_info(self, id, cost_type_to, cost_type_from, start, end, **kwargs):  # noqa: E501
        """cost_id_copy_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cost_id_copy_post_with_http_info(id, cost_type_to, cost_type_from, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier cost_type_to: (required)
        :param GloballyUniqueIdentifier cost_type_from: (required)
        :param date start: (required)
        :param date end: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'cost_type_to', 'cost_type_from', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cost_id_copy_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cost_id_copy_post`")  # noqa: E501
        # verify the required parameter 'cost_type_to' is set
        if ('cost_type_to' not in params or
                params['cost_type_to'] is None):
            raise ValueError("Missing the required parameter `cost_type_to` when calling `cost_id_copy_post`")  # noqa: E501
        # verify the required parameter 'cost_type_from' is set
        if ('cost_type_from' not in params or
                params['cost_type_from'] is None):
            raise ValueError("Missing the required parameter `cost_type_from` when calling `cost_id_copy_post`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `cost_id_copy_post`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `cost_id_copy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cost_type_to' in params:
            query_params.append(('CostTypeTo', params['cost_type_to']))  # noqa: E501
        if 'cost_type_from' in params:
            query_params.append(('CostTypeFrom', params['cost_type_from']))  # noqa: E501
        if 'start' in params:
            query_params.append(('Start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('End', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/cost/{id}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cost_id_detail_post(self, id, index, cost_category, cost_type, **kwargs):  # noqa: E501
        """cost_id_detail_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cost_id_detail_post(id, index, cost_category, cost_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param int index: (required)
        :param GloballyUniqueIdentifier cost_category: (required)
        :param GloballyUniqueIdentifier cost_type: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cost_id_detail_post_with_http_info(id, index, cost_category, cost_type, **kwargs)  # noqa: E501
        else:
            (data) = self.cost_id_detail_post_with_http_info(id, index, cost_category, cost_type, **kwargs)  # noqa: E501
            return data

    def cost_id_detail_post_with_http_info(self, id, index, cost_category, cost_type, **kwargs):  # noqa: E501
        """cost_id_detail_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cost_id_detail_post_with_http_info(id, index, cost_category, cost_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param int index: (required)
        :param GloballyUniqueIdentifier cost_category: (required)
        :param GloballyUniqueIdentifier cost_type: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'index', 'cost_category', 'cost_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cost_id_detail_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cost_id_detail_post`")  # noqa: E501
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `cost_id_detail_post`")  # noqa: E501
        # verify the required parameter 'cost_category' is set
        if ('cost_category' not in params or
                params['cost_category'] is None):
            raise ValueError("Missing the required parameter `cost_category` when calling `cost_id_detail_post`")  # noqa: E501
        # verify the required parameter 'cost_type' is set
        if ('cost_type' not in params or
                params['cost_type'] is None):
            raise ValueError("Missing the required parameter `cost_type` when calling `cost_id_detail_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'index' in params:
            query_params.append(('Index', params['index']))  # noqa: E501
        if 'cost_category' in params:
            query_params.append(('CostCategory', params['cost_category']))  # noqa: E501
        if 'cost_type' in params:
            query_params.append(('CostType', params['cost_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/cost/{id}/detail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cost_tree_get(self, **kwargs):  # noqa: E501
        """cost_tree_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cost_tree_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cost_tree_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cost_tree_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def cost_tree_get_with_http_info(self, **kwargs):  # noqa: E501
        """cost_tree_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cost_tree_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cost_tree_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/cost/tree', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
