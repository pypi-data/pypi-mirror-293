# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oneplan_sdk.client.swagger_client.api_client import ApiClient


class AuditApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def audit_financials_post(self, body, **kwargs):  # noqa: E501
        """audit_financials_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_financials_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditFinancialPlansQuery body: (required)
        :return: list[AuditFinancialPlans]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audit_financials_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.audit_financials_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def audit_financials_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """audit_financials_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_financials_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditFinancialPlansQuery body: (required)
        :return: list[AuditFinancialPlans]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audit_financials_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `audit_financials_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/audit/financials', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditFinancialPlans]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audit_plan_post(self, body, **kwargs):  # noqa: E501
        """audit_plan_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_plan_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditPlansQuery body: (required)
        :return: list[AuditPlans]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audit_plan_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.audit_plan_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def audit_plan_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """audit_plan_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_plan_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditPlansQuery body: (required)
        :return: list[AuditPlans]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audit_plan_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `audit_plan_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/audit/plan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditPlans]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audit_plans_deleted_post(self, body, **kwargs):  # noqa: E501
        """audit_plans_deleted_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_plans_deleted_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditPlansQuery body: (required)
        :return: list[AuditPlans]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audit_plans_deleted_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.audit_plans_deleted_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def audit_plans_deleted_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """audit_plans_deleted_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_plans_deleted_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditPlansQuery body: (required)
        :return: list[AuditPlans]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audit_plans_deleted_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `audit_plans_deleted_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/audit/plans/deleted', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditPlans]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audit_resource_post(self, body, **kwargs):  # noqa: E501
        """audit_resource_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_resource_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditResourceQuery body: (required)
        :return: list[AuditResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audit_resource_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.audit_resource_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def audit_resource_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """audit_resource_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_resource_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditResourceQuery body: (required)
        :return: list[AuditResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audit_resource_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `audit_resource_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/audit/resource', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audit_resources_deleted_post(self, body, **kwargs):  # noqa: E501
        """audit_resources_deleted_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_resources_deleted_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditResourceQuery body: (required)
        :return: list[AuditResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audit_resources_deleted_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.audit_resources_deleted_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def audit_resources_deleted_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """audit_resources_deleted_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_resources_deleted_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditResourceQuery body: (required)
        :return: list[AuditResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audit_resources_deleted_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `audit_resources_deleted_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/audit/resources/deleted', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audit_resources_plan_id_post(self, body, plan_id, **kwargs):  # noqa: E501
        """audit_resources_plan_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_resources_plan_id_post(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditResourcePlansQuery body: (required)
        :param str plan_id: (required)
        :return: list[AuditResourcePlans]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audit_resources_plan_id_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.audit_resources_plan_id_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
            return data

    def audit_resources_plan_id_post_with_http_info(self, body, plan_id, **kwargs):  # noqa: E501
        """audit_resources_plan_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_resources_plan_id_post_with_http_info(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditResourcePlansQuery body: (required)
        :param str plan_id: (required)
        :return: list[AuditResourcePlans]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audit_resources_plan_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `audit_resources_plan_id_post`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `audit_resources_plan_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/audit/resources/{planId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditResourcePlans]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audit_sharedwith_plan_id_post(self, body, plan_id, **kwargs):  # noqa: E501
        """audit_sharedwith_plan_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_sharedwith_plan_id_post(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditSharedWithQuery body: (required)
        :param str plan_id: (required)
        :return: list[AuditSharedWith]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audit_sharedwith_plan_id_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.audit_sharedwith_plan_id_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
            return data

    def audit_sharedwith_plan_id_post_with_http_info(self, body, plan_id, **kwargs):  # noqa: E501
        """audit_sharedwith_plan_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_sharedwith_plan_id_post_with_http_info(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditSharedWithQuery body: (required)
        :param str plan_id: (required)
        :return: list[AuditSharedWith]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audit_sharedwith_plan_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `audit_sharedwith_plan_id_post`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `audit_sharedwith_plan_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/audit/sharedwith/{planId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditSharedWith]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audit_tasks_post(self, body, **kwargs):  # noqa: E501
        """audit_tasks_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_tasks_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditTasksQuery body: (required)
        :return: list[AuditTasks]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audit_tasks_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.audit_tasks_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def audit_tasks_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """audit_tasks_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audit_tasks_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditTasksQuery body: (required)
        :return: list[AuditTasks]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audit_tasks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `audit_tasks_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/audit/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditTasks]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
