# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oneplan_sdk.client.swagger_client.api_client import ApiClient


class ResPlanApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def modeler_resplan_capacitychart_post(self, body, **kwargs):  # noqa: E501
        """modeler_resplan_capacitychart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modeler_resplan_capacitychart_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelerResPlanCapacityPost body: (required)
        :return: list[dict(str, Object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modeler_resplan_capacitychart_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.modeler_resplan_capacitychart_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def modeler_resplan_capacitychart_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """modeler_resplan_capacitychart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modeler_resplan_capacitychart_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelerResPlanCapacityPost body: (required)
        :return: list[dict(str, Object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modeler_resplan_capacitychart_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modeler_resplan_capacitychart_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/modeler/resplan/capacitychart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[dict(str, Object)]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_capacitychart_post(self, body, **kwargs):  # noqa: E501
        """resplan_capacitychart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_capacitychart_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CandidatesPost body: (required)
        :return: list[dict(str, Object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_capacitychart_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_capacitychart_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def resplan_capacitychart_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """resplan_capacitychart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_capacitychart_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CandidatesPost body: (required)
        :return: list[dict(str, Object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_capacitychart_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resplan_capacitychart_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/capacitychart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[dict(str, Object)]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_externalimport_post(self, body, **kwargs):  # noqa: E501
        """resplan_externalimport_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_externalimport_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportResPlanObject body: (required)
        :return: ImportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_externalimport_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_externalimport_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def resplan_externalimport_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """resplan_externalimport_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_externalimport_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportResPlanObject body: (required)
        :return: ImportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_externalimport_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resplan_externalimport_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/externalimport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImportResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_id_addresource_post(self, body, replacing, id, **kwargs):  # noqa: E501
        """resplan_id_addresource_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_addresource_post(body, replacing, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddResourcePost body: (required)
        :param GloballyUniqueIdentifier replacing: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool res_mode:
        :return: list[dict(str, Object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_id_addresource_post_with_http_info(body, replacing, id, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_id_addresource_post_with_http_info(body, replacing, id, **kwargs)  # noqa: E501
            return data

    def resplan_id_addresource_post_with_http_info(self, body, replacing, id, **kwargs):  # noqa: E501
        """resplan_id_addresource_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_addresource_post_with_http_info(body, replacing, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddResourcePost body: (required)
        :param GloballyUniqueIdentifier replacing: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool res_mode:
        :return: list[dict(str, Object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'replacing', 'id', 'res_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_id_addresource_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resplan_id_addresource_post`")  # noqa: E501
        # verify the required parameter 'replacing' is set
        if ('replacing' not in params or
                params['replacing'] is None):
            raise ValueError("Missing the required parameter `replacing` when calling `resplan_id_addresource_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resplan_id_addresource_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'replacing' in params:
            query_params.append(('Replacing', params['replacing']))  # noqa: E501
        if 'res_mode' in params:
            query_params.append(('ResMode', params['res_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{id}/addresource', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[dict(str, Object)]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_id_allocate_post(self, body, id, **kwargs):  # noqa: E501
        """resplan_id_allocate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_allocate_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AllocationPost body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool res_mode:
        :return: dict(str, dict(str, Object))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_id_allocate_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_id_allocate_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def resplan_id_allocate_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """resplan_id_allocate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_allocate_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AllocationPost body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool res_mode:
        :return: dict(str, dict(str, Object))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'res_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_id_allocate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resplan_id_allocate_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resplan_id_allocate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'res_mode' in params:
            query_params.append(('ResMode', params['res_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{id}/allocate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, dict(str, Object))',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_id_capacity_get(self, id, start, end, zoom, **kwargs):  # noqa: E501
        """resplan_id_capacity_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_capacity_get(id, start, end, zoom, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param date start: (required)
        :param date end: (required)
        :param Zoom zoom: (required)
        :return: list[ResourceCapacity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_id_capacity_get_with_http_info(id, start, end, zoom, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_id_capacity_get_with_http_info(id, start, end, zoom, **kwargs)  # noqa: E501
            return data

    def resplan_id_capacity_get_with_http_info(self, id, start, end, zoom, **kwargs):  # noqa: E501
        """resplan_id_capacity_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_capacity_get_with_http_info(id, start, end, zoom, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param date start: (required)
        :param date end: (required)
        :param Zoom zoom: (required)
        :return: list[ResourceCapacity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start', 'end', 'zoom']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_id_capacity_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resplan_id_capacity_get`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `resplan_id_capacity_get`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `resplan_id_capacity_get`")  # noqa: E501
        # verify the required parameter 'zoom' is set
        if ('zoom' not in params or
                params['zoom'] is None):
            raise ValueError("Missing the required parameter `zoom` when calling `resplan_id_capacity_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('Start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('End', params['end']))  # noqa: E501
        if 'zoom' in params:
            query_params.append(('zoom', params['zoom']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{id}/capacity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceCapacity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_id_copy_post(self, body, id, **kwargs):  # noqa: E501
        """resplan_id_copy_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_copy_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourcePlanCopy body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_id_copy_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_id_copy_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def resplan_id_copy_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """resplan_id_copy_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_copy_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourcePlanCopy body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_id_copy_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resplan_id_copy_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resplan_id_copy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{id}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_id_lineid_delete(self, id, lineid, **kwargs):  # noqa: E501
        """resplan_id_lineid_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_lineid_delete(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier lineid: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_id_lineid_delete_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_id_lineid_delete_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def resplan_id_lineid_delete_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """resplan_id_lineid_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_lineid_delete_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier lineid: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_id_lineid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resplan_id_lineid_delete`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `resplan_id_lineid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{id}/{lineid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_id_post(self, body, id, **kwargs):  # noqa: E501
        """resplan_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResUpdate body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool res_mode:
        :return: dict(str, dict(str, Object))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_id_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_id_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def resplan_id_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """resplan_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResUpdate body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool res_mode:
        :return: dict(str, dict(str, Object))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'res_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resplan_id_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resplan_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'res_mode' in params:
            query_params.append(('ResMode', params['res_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, dict(str, Object))',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_id_replaceresource_post(self, body, id, **kwargs):  # noqa: E501
        """resplan_id_replaceresource_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_replaceresource_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReplaceResourcePost body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool res_mode:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_id_replaceresource_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_id_replaceresource_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def resplan_id_replaceresource_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """resplan_id_replaceresource_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_id_replaceresource_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReplaceResourcePost body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool res_mode:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'res_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_id_replaceresource_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resplan_id_replaceresource_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resplan_id_replaceresource_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'res_mode' in params:
            query_params.append(('ResMode', params['res_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{id}/replaceresource', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_line_id_comment_get(self, line_id, **kwargs):  # noqa: E501
        """resplan_line_id_comment_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_line_id_comment_get(line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier line_id: (required)
        :return: CommentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_line_id_comment_get_with_http_info(line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_line_id_comment_get_with_http_info(line_id, **kwargs)  # noqa: E501
            return data

    def resplan_line_id_comment_get_with_http_info(self, line_id, **kwargs):  # noqa: E501
        """resplan_line_id_comment_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_line_id_comment_get_with_http_info(line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier line_id: (required)
        :return: CommentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['line_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_line_id_comment_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling `resplan_line_id_comment_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'line_id' in params:
            path_params['LineId'] = params['line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{LineId}/comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_line_id_comment_id_delete(self, line_id, id, **kwargs):  # noqa: E501
        """resplan_line_id_comment_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_line_id_comment_id_delete(line_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier line_id: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_line_id_comment_id_delete_with_http_info(line_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_line_id_comment_id_delete_with_http_info(line_id, id, **kwargs)  # noqa: E501
            return data

    def resplan_line_id_comment_id_delete_with_http_info(self, line_id, id, **kwargs):  # noqa: E501
        """resplan_line_id_comment_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_line_id_comment_id_delete_with_http_info(line_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier line_id: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['line_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_line_id_comment_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling `resplan_line_id_comment_id_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resplan_line_id_comment_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'line_id' in params:
            path_params['LineId'] = params['line_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{LineId}/comment/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_line_id_comment_post(self, body, line_id, **kwargs):  # noqa: E501
        """resplan_line_id_comment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_line_id_comment_post(body, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentPost body: (required)
        :param GloballyUniqueIdentifier line_id: (required)
        :return: TaskComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_line_id_comment_post_with_http_info(body, line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_line_id_comment_post_with_http_info(body, line_id, **kwargs)  # noqa: E501
            return data

    def resplan_line_id_comment_post_with_http_info(self, body, line_id, **kwargs):  # noqa: E501
        """resplan_line_id_comment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_line_id_comment_post_with_http_info(body, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentPost body: (required)
        :param GloballyUniqueIdentifier line_id: (required)
        :return: TaskComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'line_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_line_id_comment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resplan_line_id_comment_post`")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling `resplan_line_id_comment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'line_id' in params:
            path_params['LineId'] = params['line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{LineId}/comment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskComment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resplan_line_id_reallocate_post(self, line_id, **kwargs):  # noqa: E501
        """resplan_line_id_reallocate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_line_id_reallocate_post(line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier line_id: (required)
        :param bool res_mode:
        :return: dict(str, dict(str, Object))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resplan_line_id_reallocate_post_with_http_info(line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resplan_line_id_reallocate_post_with_http_info(line_id, **kwargs)  # noqa: E501
            return data

    def resplan_line_id_reallocate_post_with_http_info(self, line_id, **kwargs):  # noqa: E501
        """resplan_line_id_reallocate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resplan_line_id_reallocate_post_with_http_info(line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier line_id: (required)
        :param bool res_mode:
        :return: dict(str, dict(str, Object))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['line_id', 'res_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resplan_line_id_reallocate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling `resplan_line_id_reallocate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'line_id' in params:
            path_params['LineId'] = params['line_id']  # noqa: E501

        query_params = []
        if 'res_mode' in params:
            query_params.append(('ResMode', params['res_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/resplan/{LineId}/reallocate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, dict(str, Object))',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
