# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkLogResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'task_found': 'bool',
        'new_row': 'bool',
        'total_used_hours': 'DecimalNumber',
        'period_found': 'bool',
        'period_closed': 'bool'
    }

    attribute_map = {
        'success': 'Success',
        'task_found': 'TaskFound',
        'new_row': 'NewRow',
        'total_used_hours': 'TotalUsedHours',
        'period_found': 'PeriodFound',
        'period_closed': 'PeriodClosed'
    }

    def __init__(self, success=None, task_found=None, new_row=None, total_used_hours=None, period_found=None, period_closed=None):  # noqa: E501
        """WorkLogResponse - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._task_found = None
        self._new_row = None
        self._total_used_hours = None
        self._period_found = None
        self._period_closed = None
        self.discriminator = None
        if success is not None:
            self.success = success
        if task_found is not None:
            self.task_found = task_found
        if new_row is not None:
            self.new_row = new_row
        if total_used_hours is not None:
            self.total_used_hours = total_used_hours
        if period_found is not None:
            self.period_found = period_found
        if period_closed is not None:
            self.period_closed = period_closed

    @property
    def success(self):
        """Gets the success of this WorkLogResponse.  # noqa: E501


        :return: The success of this WorkLogResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this WorkLogResponse.


        :param success: The success of this WorkLogResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def task_found(self):
        """Gets the task_found of this WorkLogResponse.  # noqa: E501


        :return: The task_found of this WorkLogResponse.  # noqa: E501
        :rtype: bool
        """
        return self._task_found

    @task_found.setter
    def task_found(self, task_found):
        """Sets the task_found of this WorkLogResponse.


        :param task_found: The task_found of this WorkLogResponse.  # noqa: E501
        :type: bool
        """

        self._task_found = task_found

    @property
    def new_row(self):
        """Gets the new_row of this WorkLogResponse.  # noqa: E501


        :return: The new_row of this WorkLogResponse.  # noqa: E501
        :rtype: bool
        """
        return self._new_row

    @new_row.setter
    def new_row(self, new_row):
        """Sets the new_row of this WorkLogResponse.


        :param new_row: The new_row of this WorkLogResponse.  # noqa: E501
        :type: bool
        """

        self._new_row = new_row

    @property
    def total_used_hours(self):
        """Gets the total_used_hours of this WorkLogResponse.  # noqa: E501


        :return: The total_used_hours of this WorkLogResponse.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._total_used_hours

    @total_used_hours.setter
    def total_used_hours(self, total_used_hours):
        """Sets the total_used_hours of this WorkLogResponse.


        :param total_used_hours: The total_used_hours of this WorkLogResponse.  # noqa: E501
        :type: DecimalNumber
        """

        self._total_used_hours = total_used_hours

    @property
    def period_found(self):
        """Gets the period_found of this WorkLogResponse.  # noqa: E501


        :return: The period_found of this WorkLogResponse.  # noqa: E501
        :rtype: bool
        """
        return self._period_found

    @period_found.setter
    def period_found(self, period_found):
        """Sets the period_found of this WorkLogResponse.


        :param period_found: The period_found of this WorkLogResponse.  # noqa: E501
        :type: bool
        """

        self._period_found = period_found

    @property
    def period_closed(self):
        """Gets the period_closed of this WorkLogResponse.  # noqa: E501


        :return: The period_closed of this WorkLogResponse.  # noqa: E501
        :rtype: bool
        """
        return self._period_closed

    @period_closed.setter
    def period_closed(self, period_closed):
        """Sets the period_closed of this WorkLogResponse.


        :param period_closed: The period_closed of this WorkLogResponse.  # noqa: E501
        :type: bool
        """

        self._period_closed = period_closed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkLogResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkLogResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
