# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkPlanVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_plan_id': 'GloballyUniqueIdentifier',
        'version_name': 'str',
        'version_time': 'date',
        'version_number': 'int',
        'name': 'str',
        'archived': 'bool',
        'author': 'GloballyUniqueIdentifier',
        'created': 'date',
        'modified': 'date',
        'editor': 'GloballyUniqueIdentifier',
        'planner_type_id': 'GloballyUniqueIdentifier',
        'parent_plan_id': 'GloballyUniqueIdentifier',
        'portfolio_parent_id': 'GloballyUniqueIdentifier',
        'portfolio_order': 'int',
        'user_list': 'list[UserAccess]',
        'inherit_user_list': 'list[UserAccess]',
        'team_list': 'list[TeamAccess]',
        'inherit_team_list': 'list[TeamAccess]',
        'fields': 'dict(str, Object)',
        'summary_fields': 'dict(str, Object)',
        'folder': 'bool',
        'fragment': 'bool',
        'fragment_info': 'FragmentInfo',
        'hidden': 'bool',
        'comments': 'list[TaskComment]',
        'last_comment': 'date',
        'date_sets': 'list[PlanDateSet]',
        'integrations': 'list[IntegratedSystem]',
        'snapshots': 'list[FieldSnapshot]',
        'sub_plans': 'list[GloballyUniqueIdentifier]',
        'plan_number': 'str',
        'rate_tables': 'list[PlanRateTable]',
        'splits': 'list[LookupSplit]',
        'lock_info': 'PlanLockInfo',
        'last_location': 'str',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'work_plan_id': 'WorkPlanId',
        'version_name': 'VersionName',
        'version_time': 'VersionTime',
        'version_number': 'VersionNumber',
        'name': 'Name',
        'archived': 'Archived',
        'author': 'Author',
        'created': 'Created',
        'modified': 'Modified',
        'editor': 'Editor',
        'planner_type_id': 'PlannerTypeId',
        'parent_plan_id': 'ParentPlanId',
        'portfolio_parent_id': 'PortfolioParentId',
        'portfolio_order': 'PortfolioOrder',
        'user_list': 'UserList',
        'inherit_user_list': 'InheritUserList',
        'team_list': 'TeamList',
        'inherit_team_list': 'InheritTeamList',
        'fields': 'Fields',
        'summary_fields': 'SummaryFields',
        'folder': 'Folder',
        'fragment': 'Fragment',
        'fragment_info': 'FragmentInfo',
        'hidden': 'Hidden',
        'comments': 'Comments',
        'last_comment': 'LastComment',
        'date_sets': 'DateSets',
        'integrations': 'Integrations',
        'snapshots': 'Snapshots',
        'sub_plans': 'SubPlans',
        'plan_number': 'PlanNumber',
        'rate_tables': 'RateTables',
        'splits': 'Splits',
        'lock_info': 'LockInfo',
        'last_location': 'LastLocation',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, work_plan_id=None, version_name=None, version_time=None, version_number=None, name=None, archived=None, author=None, created=None, modified=None, editor=None, planner_type_id=None, parent_plan_id=None, portfolio_parent_id=None, portfolio_order=None, user_list=None, inherit_user_list=None, team_list=None, inherit_team_list=None, fields=None, summary_fields=None, folder=None, fragment=None, fragment_info=None, hidden=None, comments=None, last_comment=None, date_sets=None, integrations=None, snapshots=None, sub_plans=None, plan_number=None, rate_tables=None, splits=None, lock_info=None, last_location=None, id=None, config_id=None):  # noqa: E501
        """WorkPlanVersion - a model defined in Swagger"""  # noqa: E501
        self._work_plan_id = None
        self._version_name = None
        self._version_time = None
        self._version_number = None
        self._name = None
        self._archived = None
        self._author = None
        self._created = None
        self._modified = None
        self._editor = None
        self._planner_type_id = None
        self._parent_plan_id = None
        self._portfolio_parent_id = None
        self._portfolio_order = None
        self._user_list = None
        self._inherit_user_list = None
        self._team_list = None
        self._inherit_team_list = None
        self._fields = None
        self._summary_fields = None
        self._folder = None
        self._fragment = None
        self._fragment_info = None
        self._hidden = None
        self._comments = None
        self._last_comment = None
        self._date_sets = None
        self._integrations = None
        self._snapshots = None
        self._sub_plans = None
        self._plan_number = None
        self._rate_tables = None
        self._splits = None
        self._lock_info = None
        self._last_location = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if work_plan_id is not None:
            self.work_plan_id = work_plan_id
        if version_name is not None:
            self.version_name = version_name
        if version_time is not None:
            self.version_time = version_time
        if version_number is not None:
            self.version_number = version_number
        if name is not None:
            self.name = name
        if archived is not None:
            self.archived = archived
        if author is not None:
            self.author = author
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if editor is not None:
            self.editor = editor
        if planner_type_id is not None:
            self.planner_type_id = planner_type_id
        if parent_plan_id is not None:
            self.parent_plan_id = parent_plan_id
        if portfolio_parent_id is not None:
            self.portfolio_parent_id = portfolio_parent_id
        if portfolio_order is not None:
            self.portfolio_order = portfolio_order
        if user_list is not None:
            self.user_list = user_list
        if inherit_user_list is not None:
            self.inherit_user_list = inherit_user_list
        if team_list is not None:
            self.team_list = team_list
        if inherit_team_list is not None:
            self.inherit_team_list = inherit_team_list
        if fields is not None:
            self.fields = fields
        if summary_fields is not None:
            self.summary_fields = summary_fields
        if folder is not None:
            self.folder = folder
        if fragment is not None:
            self.fragment = fragment
        if fragment_info is not None:
            self.fragment_info = fragment_info
        if hidden is not None:
            self.hidden = hidden
        if comments is not None:
            self.comments = comments
        if last_comment is not None:
            self.last_comment = last_comment
        if date_sets is not None:
            self.date_sets = date_sets
        if integrations is not None:
            self.integrations = integrations
        if snapshots is not None:
            self.snapshots = snapshots
        if sub_plans is not None:
            self.sub_plans = sub_plans
        if plan_number is not None:
            self.plan_number = plan_number
        if rate_tables is not None:
            self.rate_tables = rate_tables
        if splits is not None:
            self.splits = splits
        if lock_info is not None:
            self.lock_info = lock_info
        if last_location is not None:
            self.last_location = last_location
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def work_plan_id(self):
        """Gets the work_plan_id of this WorkPlanVersion.  # noqa: E501


        :return: The work_plan_id of this WorkPlanVersion.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_plan_id

    @work_plan_id.setter
    def work_plan_id(self, work_plan_id):
        """Sets the work_plan_id of this WorkPlanVersion.


        :param work_plan_id: The work_plan_id of this WorkPlanVersion.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_plan_id = work_plan_id

    @property
    def version_name(self):
        """Gets the version_name of this WorkPlanVersion.  # noqa: E501


        :return: The version_name of this WorkPlanVersion.  # noqa: E501
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this WorkPlanVersion.


        :param version_name: The version_name of this WorkPlanVersion.  # noqa: E501
        :type: str
        """

        self._version_name = version_name

    @property
    def version_time(self):
        """Gets the version_time of this WorkPlanVersion.  # noqa: E501


        :return: The version_time of this WorkPlanVersion.  # noqa: E501
        :rtype: date
        """
        return self._version_time

    @version_time.setter
    def version_time(self, version_time):
        """Sets the version_time of this WorkPlanVersion.


        :param version_time: The version_time of this WorkPlanVersion.  # noqa: E501
        :type: date
        """

        self._version_time = version_time

    @property
    def version_number(self):
        """Gets the version_number of this WorkPlanVersion.  # noqa: E501


        :return: The version_number of this WorkPlanVersion.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this WorkPlanVersion.


        :param version_number: The version_number of this WorkPlanVersion.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    @property
    def name(self):
        """Gets the name of this WorkPlanVersion.  # noqa: E501


        :return: The name of this WorkPlanVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkPlanVersion.


        :param name: The name of this WorkPlanVersion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def archived(self):
        """Gets the archived of this WorkPlanVersion.  # noqa: E501


        :return: The archived of this WorkPlanVersion.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this WorkPlanVersion.


        :param archived: The archived of this WorkPlanVersion.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def author(self):
        """Gets the author of this WorkPlanVersion.  # noqa: E501


        :return: The author of this WorkPlanVersion.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this WorkPlanVersion.


        :param author: The author of this WorkPlanVersion.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._author = author

    @property
    def created(self):
        """Gets the created of this WorkPlanVersion.  # noqa: E501


        :return: The created of this WorkPlanVersion.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WorkPlanVersion.


        :param created: The created of this WorkPlanVersion.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this WorkPlanVersion.  # noqa: E501


        :return: The modified of this WorkPlanVersion.  # noqa: E501
        :rtype: date
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this WorkPlanVersion.


        :param modified: The modified of this WorkPlanVersion.  # noqa: E501
        :type: date
        """

        self._modified = modified

    @property
    def editor(self):
        """Gets the editor of this WorkPlanVersion.  # noqa: E501


        :return: The editor of this WorkPlanVersion.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this WorkPlanVersion.


        :param editor: The editor of this WorkPlanVersion.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._editor = editor

    @property
    def planner_type_id(self):
        """Gets the planner_type_id of this WorkPlanVersion.  # noqa: E501


        :return: The planner_type_id of this WorkPlanVersion.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._planner_type_id

    @planner_type_id.setter
    def planner_type_id(self, planner_type_id):
        """Sets the planner_type_id of this WorkPlanVersion.


        :param planner_type_id: The planner_type_id of this WorkPlanVersion.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._planner_type_id = planner_type_id

    @property
    def parent_plan_id(self):
        """Gets the parent_plan_id of this WorkPlanVersion.  # noqa: E501


        :return: The parent_plan_id of this WorkPlanVersion.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._parent_plan_id

    @parent_plan_id.setter
    def parent_plan_id(self, parent_plan_id):
        """Sets the parent_plan_id of this WorkPlanVersion.


        :param parent_plan_id: The parent_plan_id of this WorkPlanVersion.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._parent_plan_id = parent_plan_id

    @property
    def portfolio_parent_id(self):
        """Gets the portfolio_parent_id of this WorkPlanVersion.  # noqa: E501


        :return: The portfolio_parent_id of this WorkPlanVersion.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._portfolio_parent_id

    @portfolio_parent_id.setter
    def portfolio_parent_id(self, portfolio_parent_id):
        """Sets the portfolio_parent_id of this WorkPlanVersion.


        :param portfolio_parent_id: The portfolio_parent_id of this WorkPlanVersion.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._portfolio_parent_id = portfolio_parent_id

    @property
    def portfolio_order(self):
        """Gets the portfolio_order of this WorkPlanVersion.  # noqa: E501


        :return: The portfolio_order of this WorkPlanVersion.  # noqa: E501
        :rtype: int
        """
        return self._portfolio_order

    @portfolio_order.setter
    def portfolio_order(self, portfolio_order):
        """Sets the portfolio_order of this WorkPlanVersion.


        :param portfolio_order: The portfolio_order of this WorkPlanVersion.  # noqa: E501
        :type: int
        """

        self._portfolio_order = portfolio_order

    @property
    def user_list(self):
        """Gets the user_list of this WorkPlanVersion.  # noqa: E501


        :return: The user_list of this WorkPlanVersion.  # noqa: E501
        :rtype: list[UserAccess]
        """
        return self._user_list

    @user_list.setter
    def user_list(self, user_list):
        """Sets the user_list of this WorkPlanVersion.


        :param user_list: The user_list of this WorkPlanVersion.  # noqa: E501
        :type: list[UserAccess]
        """

        self._user_list = user_list

    @property
    def inherit_user_list(self):
        """Gets the inherit_user_list of this WorkPlanVersion.  # noqa: E501


        :return: The inherit_user_list of this WorkPlanVersion.  # noqa: E501
        :rtype: list[UserAccess]
        """
        return self._inherit_user_list

    @inherit_user_list.setter
    def inherit_user_list(self, inherit_user_list):
        """Sets the inherit_user_list of this WorkPlanVersion.


        :param inherit_user_list: The inherit_user_list of this WorkPlanVersion.  # noqa: E501
        :type: list[UserAccess]
        """

        self._inherit_user_list = inherit_user_list

    @property
    def team_list(self):
        """Gets the team_list of this WorkPlanVersion.  # noqa: E501


        :return: The team_list of this WorkPlanVersion.  # noqa: E501
        :rtype: list[TeamAccess]
        """
        return self._team_list

    @team_list.setter
    def team_list(self, team_list):
        """Sets the team_list of this WorkPlanVersion.


        :param team_list: The team_list of this WorkPlanVersion.  # noqa: E501
        :type: list[TeamAccess]
        """

        self._team_list = team_list

    @property
    def inherit_team_list(self):
        """Gets the inherit_team_list of this WorkPlanVersion.  # noqa: E501


        :return: The inherit_team_list of this WorkPlanVersion.  # noqa: E501
        :rtype: list[TeamAccess]
        """
        return self._inherit_team_list

    @inherit_team_list.setter
    def inherit_team_list(self, inherit_team_list):
        """Sets the inherit_team_list of this WorkPlanVersion.


        :param inherit_team_list: The inherit_team_list of this WorkPlanVersion.  # noqa: E501
        :type: list[TeamAccess]
        """

        self._inherit_team_list = inherit_team_list

    @property
    def fields(self):
        """Gets the fields of this WorkPlanVersion.  # noqa: E501


        :return: The fields of this WorkPlanVersion.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this WorkPlanVersion.


        :param fields: The fields of this WorkPlanVersion.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def summary_fields(self):
        """Gets the summary_fields of this WorkPlanVersion.  # noqa: E501


        :return: The summary_fields of this WorkPlanVersion.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._summary_fields

    @summary_fields.setter
    def summary_fields(self, summary_fields):
        """Sets the summary_fields of this WorkPlanVersion.


        :param summary_fields: The summary_fields of this WorkPlanVersion.  # noqa: E501
        :type: dict(str, Object)
        """

        self._summary_fields = summary_fields

    @property
    def folder(self):
        """Gets the folder of this WorkPlanVersion.  # noqa: E501


        :return: The folder of this WorkPlanVersion.  # noqa: E501
        :rtype: bool
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this WorkPlanVersion.


        :param folder: The folder of this WorkPlanVersion.  # noqa: E501
        :type: bool
        """

        self._folder = folder

    @property
    def fragment(self):
        """Gets the fragment of this WorkPlanVersion.  # noqa: E501


        :return: The fragment of this WorkPlanVersion.  # noqa: E501
        :rtype: bool
        """
        return self._fragment

    @fragment.setter
    def fragment(self, fragment):
        """Sets the fragment of this WorkPlanVersion.


        :param fragment: The fragment of this WorkPlanVersion.  # noqa: E501
        :type: bool
        """

        self._fragment = fragment

    @property
    def fragment_info(self):
        """Gets the fragment_info of this WorkPlanVersion.  # noqa: E501


        :return: The fragment_info of this WorkPlanVersion.  # noqa: E501
        :rtype: FragmentInfo
        """
        return self._fragment_info

    @fragment_info.setter
    def fragment_info(self, fragment_info):
        """Sets the fragment_info of this WorkPlanVersion.


        :param fragment_info: The fragment_info of this WorkPlanVersion.  # noqa: E501
        :type: FragmentInfo
        """

        self._fragment_info = fragment_info

    @property
    def hidden(self):
        """Gets the hidden of this WorkPlanVersion.  # noqa: E501


        :return: The hidden of this WorkPlanVersion.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this WorkPlanVersion.


        :param hidden: The hidden of this WorkPlanVersion.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def comments(self):
        """Gets the comments of this WorkPlanVersion.  # noqa: E501


        :return: The comments of this WorkPlanVersion.  # noqa: E501
        :rtype: list[TaskComment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WorkPlanVersion.


        :param comments: The comments of this WorkPlanVersion.  # noqa: E501
        :type: list[TaskComment]
        """

        self._comments = comments

    @property
    def last_comment(self):
        """Gets the last_comment of this WorkPlanVersion.  # noqa: E501


        :return: The last_comment of this WorkPlanVersion.  # noqa: E501
        :rtype: date
        """
        return self._last_comment

    @last_comment.setter
    def last_comment(self, last_comment):
        """Sets the last_comment of this WorkPlanVersion.


        :param last_comment: The last_comment of this WorkPlanVersion.  # noqa: E501
        :type: date
        """

        self._last_comment = last_comment

    @property
    def date_sets(self):
        """Gets the date_sets of this WorkPlanVersion.  # noqa: E501


        :return: The date_sets of this WorkPlanVersion.  # noqa: E501
        :rtype: list[PlanDateSet]
        """
        return self._date_sets

    @date_sets.setter
    def date_sets(self, date_sets):
        """Sets the date_sets of this WorkPlanVersion.


        :param date_sets: The date_sets of this WorkPlanVersion.  # noqa: E501
        :type: list[PlanDateSet]
        """

        self._date_sets = date_sets

    @property
    def integrations(self):
        """Gets the integrations of this WorkPlanVersion.  # noqa: E501


        :return: The integrations of this WorkPlanVersion.  # noqa: E501
        :rtype: list[IntegratedSystem]
        """
        return self._integrations

    @integrations.setter
    def integrations(self, integrations):
        """Sets the integrations of this WorkPlanVersion.


        :param integrations: The integrations of this WorkPlanVersion.  # noqa: E501
        :type: list[IntegratedSystem]
        """

        self._integrations = integrations

    @property
    def snapshots(self):
        """Gets the snapshots of this WorkPlanVersion.  # noqa: E501


        :return: The snapshots of this WorkPlanVersion.  # noqa: E501
        :rtype: list[FieldSnapshot]
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this WorkPlanVersion.


        :param snapshots: The snapshots of this WorkPlanVersion.  # noqa: E501
        :type: list[FieldSnapshot]
        """

        self._snapshots = snapshots

    @property
    def sub_plans(self):
        """Gets the sub_plans of this WorkPlanVersion.  # noqa: E501


        :return: The sub_plans of this WorkPlanVersion.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._sub_plans

    @sub_plans.setter
    def sub_plans(self, sub_plans):
        """Sets the sub_plans of this WorkPlanVersion.


        :param sub_plans: The sub_plans of this WorkPlanVersion.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._sub_plans = sub_plans

    @property
    def plan_number(self):
        """Gets the plan_number of this WorkPlanVersion.  # noqa: E501


        :return: The plan_number of this WorkPlanVersion.  # noqa: E501
        :rtype: str
        """
        return self._plan_number

    @plan_number.setter
    def plan_number(self, plan_number):
        """Sets the plan_number of this WorkPlanVersion.


        :param plan_number: The plan_number of this WorkPlanVersion.  # noqa: E501
        :type: str
        """

        self._plan_number = plan_number

    @property
    def rate_tables(self):
        """Gets the rate_tables of this WorkPlanVersion.  # noqa: E501


        :return: The rate_tables of this WorkPlanVersion.  # noqa: E501
        :rtype: list[PlanRateTable]
        """
        return self._rate_tables

    @rate_tables.setter
    def rate_tables(self, rate_tables):
        """Sets the rate_tables of this WorkPlanVersion.


        :param rate_tables: The rate_tables of this WorkPlanVersion.  # noqa: E501
        :type: list[PlanRateTable]
        """

        self._rate_tables = rate_tables

    @property
    def splits(self):
        """Gets the splits of this WorkPlanVersion.  # noqa: E501


        :return: The splits of this WorkPlanVersion.  # noqa: E501
        :rtype: list[LookupSplit]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this WorkPlanVersion.


        :param splits: The splits of this WorkPlanVersion.  # noqa: E501
        :type: list[LookupSplit]
        """

        self._splits = splits

    @property
    def lock_info(self):
        """Gets the lock_info of this WorkPlanVersion.  # noqa: E501


        :return: The lock_info of this WorkPlanVersion.  # noqa: E501
        :rtype: PlanLockInfo
        """
        return self._lock_info

    @lock_info.setter
    def lock_info(self, lock_info):
        """Sets the lock_info of this WorkPlanVersion.


        :param lock_info: The lock_info of this WorkPlanVersion.  # noqa: E501
        :type: PlanLockInfo
        """

        self._lock_info = lock_info

    @property
    def last_location(self):
        """Gets the last_location of this WorkPlanVersion.  # noqa: E501


        :return: The last_location of this WorkPlanVersion.  # noqa: E501
        :rtype: str
        """
        return self._last_location

    @last_location.setter
    def last_location(self, last_location):
        """Sets the last_location of this WorkPlanVersion.


        :param last_location: The last_location of this WorkPlanVersion.  # noqa: E501
        :type: str
        """

        self._last_location = last_location

    @property
    def id(self):
        """Gets the id of this WorkPlanVersion.  # noqa: E501


        :return: The id of this WorkPlanVersion.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkPlanVersion.


        :param id: The id of this WorkPlanVersion.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this WorkPlanVersion.  # noqa: E501


        :return: The config_id of this WorkPlanVersion.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this WorkPlanVersion.


        :param config_id: The config_id of this WorkPlanVersion.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkPlanVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkPlanVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
