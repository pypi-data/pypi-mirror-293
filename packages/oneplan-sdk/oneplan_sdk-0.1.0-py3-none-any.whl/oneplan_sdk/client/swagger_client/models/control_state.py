# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ControlState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'GloballyUniqueIdentifier',
        'application_id': 'GloballyUniqueIdentifier',
        'area_id': 'GloballyUniqueIdentifier',
        'name': 'str',
        'control_id': 'str',
        'state': 'str',
        'default': 'bool',
        'state_options': 'dict(str, Object)',
        'roadmap_parent_grouping_events': 'list[ViewGroupingEvent]'
    }

    attribute_map = {
        'id': 'Id',
        'application_id': 'ApplicationId',
        'area_id': 'AreaId',
        'name': 'Name',
        'control_id': 'ControlId',
        'state': 'State',
        'default': 'Default',
        'state_options': 'StateOptions',
        'roadmap_parent_grouping_events': 'RoadmapParentGroupingEvents'
    }

    def __init__(self, id=None, application_id=None, area_id=None, name=None, control_id=None, state=None, default=None, state_options=None, roadmap_parent_grouping_events=None):  # noqa: E501
        """ControlState - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._application_id = None
        self._area_id = None
        self._name = None
        self._control_id = None
        self._state = None
        self._default = None
        self._state_options = None
        self._roadmap_parent_grouping_events = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if application_id is not None:
            self.application_id = application_id
        if area_id is not None:
            self.area_id = area_id
        if name is not None:
            self.name = name
        if control_id is not None:
            self.control_id = control_id
        if state is not None:
            self.state = state
        if default is not None:
            self.default = default
        if state_options is not None:
            self.state_options = state_options
        if roadmap_parent_grouping_events is not None:
            self.roadmap_parent_grouping_events = roadmap_parent_grouping_events

    @property
    def id(self):
        """Gets the id of this ControlState.  # noqa: E501


        :return: The id of this ControlState.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ControlState.


        :param id: The id of this ControlState.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def application_id(self):
        """Gets the application_id of this ControlState.  # noqa: E501


        :return: The application_id of this ControlState.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ControlState.


        :param application_id: The application_id of this ControlState.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._application_id = application_id

    @property
    def area_id(self):
        """Gets the area_id of this ControlState.  # noqa: E501


        :return: The area_id of this ControlState.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this ControlState.


        :param area_id: The area_id of this ControlState.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._area_id = area_id

    @property
    def name(self):
        """Gets the name of this ControlState.  # noqa: E501


        :return: The name of this ControlState.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ControlState.


        :param name: The name of this ControlState.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def control_id(self):
        """Gets the control_id of this ControlState.  # noqa: E501


        :return: The control_id of this ControlState.  # noqa: E501
        :rtype: str
        """
        return self._control_id

    @control_id.setter
    def control_id(self, control_id):
        """Sets the control_id of this ControlState.


        :param control_id: The control_id of this ControlState.  # noqa: E501
        :type: str
        """

        self._control_id = control_id

    @property
    def state(self):
        """Gets the state of this ControlState.  # noqa: E501


        :return: The state of this ControlState.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ControlState.


        :param state: The state of this ControlState.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def default(self):
        """Gets the default of this ControlState.  # noqa: E501


        :return: The default of this ControlState.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ControlState.


        :param default: The default of this ControlState.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def state_options(self):
        """Gets the state_options of this ControlState.  # noqa: E501


        :return: The state_options of this ControlState.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._state_options

    @state_options.setter
    def state_options(self, state_options):
        """Sets the state_options of this ControlState.


        :param state_options: The state_options of this ControlState.  # noqa: E501
        :type: dict(str, Object)
        """

        self._state_options = state_options

    @property
    def roadmap_parent_grouping_events(self):
        """Gets the roadmap_parent_grouping_events of this ControlState.  # noqa: E501


        :return: The roadmap_parent_grouping_events of this ControlState.  # noqa: E501
        :rtype: list[ViewGroupingEvent]
        """
        return self._roadmap_parent_grouping_events

    @roadmap_parent_grouping_events.setter
    def roadmap_parent_grouping_events(self, roadmap_parent_grouping_events):
        """Sets the roadmap_parent_grouping_events of this ControlState.


        :param roadmap_parent_grouping_events: The roadmap_parent_grouping_events of this ControlState.  # noqa: E501
        :type: list[ViewGroupingEvent]
        """

        self._roadmap_parent_grouping_events = roadmap_parent_grouping_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ControlState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControlState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
