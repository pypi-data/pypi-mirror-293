# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ColumnCalculation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order': 'int',
        'scope': 'ColumnScope',
        'data_type': 'Type',
        'set_column': 'str',
        'set_value': 'Object',
        'calculations': 'list[CalculationDefinition]',
        'always_calculate': 'bool'
    }

    attribute_map = {
        'order': 'Order',
        'scope': 'Scope',
        'data_type': 'DataType',
        'set_column': 'SetColumn',
        'set_value': 'SetValue',
        'calculations': 'Calculations',
        'always_calculate': 'AlwaysCalculate'
    }

    def __init__(self, order=None, scope=None, data_type=None, set_column=None, set_value=None, calculations=None, always_calculate=None):  # noqa: E501
        """ColumnCalculation - a model defined in Swagger"""  # noqa: E501
        self._order = None
        self._scope = None
        self._data_type = None
        self._set_column = None
        self._set_value = None
        self._calculations = None
        self._always_calculate = None
        self.discriminator = None
        if order is not None:
            self.order = order
        if scope is not None:
            self.scope = scope
        if data_type is not None:
            self.data_type = data_type
        if set_column is not None:
            self.set_column = set_column
        if set_value is not None:
            self.set_value = set_value
        if calculations is not None:
            self.calculations = calculations
        if always_calculate is not None:
            self.always_calculate = always_calculate

    @property
    def order(self):
        """Gets the order of this ColumnCalculation.  # noqa: E501


        :return: The order of this ColumnCalculation.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ColumnCalculation.


        :param order: The order of this ColumnCalculation.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def scope(self):
        """Gets the scope of this ColumnCalculation.  # noqa: E501


        :return: The scope of this ColumnCalculation.  # noqa: E501
        :rtype: ColumnScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ColumnCalculation.


        :param scope: The scope of this ColumnCalculation.  # noqa: E501
        :type: ColumnScope
        """

        self._scope = scope

    @property
    def data_type(self):
        """Gets the data_type of this ColumnCalculation.  # noqa: E501


        :return: The data_type of this ColumnCalculation.  # noqa: E501
        :rtype: Type
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ColumnCalculation.


        :param data_type: The data_type of this ColumnCalculation.  # noqa: E501
        :type: Type
        """

        self._data_type = data_type

    @property
    def set_column(self):
        """Gets the set_column of this ColumnCalculation.  # noqa: E501


        :return: The set_column of this ColumnCalculation.  # noqa: E501
        :rtype: str
        """
        return self._set_column

    @set_column.setter
    def set_column(self, set_column):
        """Sets the set_column of this ColumnCalculation.


        :param set_column: The set_column of this ColumnCalculation.  # noqa: E501
        :type: str
        """

        self._set_column = set_column

    @property
    def set_value(self):
        """Gets the set_value of this ColumnCalculation.  # noqa: E501


        :return: The set_value of this ColumnCalculation.  # noqa: E501
        :rtype: Object
        """
        return self._set_value

    @set_value.setter
    def set_value(self, set_value):
        """Sets the set_value of this ColumnCalculation.


        :param set_value: The set_value of this ColumnCalculation.  # noqa: E501
        :type: Object
        """

        self._set_value = set_value

    @property
    def calculations(self):
        """Gets the calculations of this ColumnCalculation.  # noqa: E501


        :return: The calculations of this ColumnCalculation.  # noqa: E501
        :rtype: list[CalculationDefinition]
        """
        return self._calculations

    @calculations.setter
    def calculations(self, calculations):
        """Sets the calculations of this ColumnCalculation.


        :param calculations: The calculations of this ColumnCalculation.  # noqa: E501
        :type: list[CalculationDefinition]
        """

        self._calculations = calculations

    @property
    def always_calculate(self):
        """Gets the always_calculate of this ColumnCalculation.  # noqa: E501


        :return: The always_calculate of this ColumnCalculation.  # noqa: E501
        :rtype: bool
        """
        return self._always_calculate

    @always_calculate.setter
    def always_calculate(self, always_calculate):
        """Sets the always_calculate of this ColumnCalculation.


        :param always_calculate: The always_calculate of this ColumnCalculation.  # noqa: E501
        :type: bool
        """

        self._always_calculate = always_calculate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ColumnCalculation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColumnCalculation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
