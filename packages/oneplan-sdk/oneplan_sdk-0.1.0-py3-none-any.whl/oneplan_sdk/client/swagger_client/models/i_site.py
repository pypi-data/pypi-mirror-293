# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ISite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component': 'IComponent',
        'container': 'IContainer',
        'design_mode': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'component': 'Component',
        'container': 'Container',
        'design_mode': 'DesignMode',
        'name': 'Name'
    }

    def __init__(self, component=None, container=None, design_mode=None, name=None):  # noqa: E501
        """ISite - a model defined in Swagger"""  # noqa: E501
        self._component = None
        self._container = None
        self._design_mode = None
        self._name = None
        self.discriminator = None
        if component is not None:
            self.component = component
        if container is not None:
            self.container = container
        if design_mode is not None:
            self.design_mode = design_mode
        if name is not None:
            self.name = name

    @property
    def component(self):
        """Gets the component of this ISite.  # noqa: E501


        :return: The component of this ISite.  # noqa: E501
        :rtype: IComponent
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this ISite.


        :param component: The component of this ISite.  # noqa: E501
        :type: IComponent
        """

        self._component = component

    @property
    def container(self):
        """Gets the container of this ISite.  # noqa: E501


        :return: The container of this ISite.  # noqa: E501
        :rtype: IContainer
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ISite.


        :param container: The container of this ISite.  # noqa: E501
        :type: IContainer
        """

        self._container = container

    @property
    def design_mode(self):
        """Gets the design_mode of this ISite.  # noqa: E501


        :return: The design_mode of this ISite.  # noqa: E501
        :rtype: bool
        """
        return self._design_mode

    @design_mode.setter
    def design_mode(self, design_mode):
        """Sets the design_mode of this ISite.


        :param design_mode: The design_mode of this ISite.  # noqa: E501
        :type: bool
        """

        self._design_mode = design_mode

    @property
    def name(self):
        """Gets the name of this ISite.  # noqa: E501


        :return: The name of this ISite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ISite.


        :param name: The name of this ISite.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ISite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ISite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
