# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TasksRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'fields': 'dict(str, Object)',
        'work_type_id': 'GloballyUniqueIdentifier',
        'parent_task_id': 'GloballyUniqueIdentifier',
        'integration': 'TaskIntegrationInfo',
        'assignments': 'dict(str, DecimalNumber)',
        'process_assignments': 'bool'
    }

    attribute_map = {
        'name': 'Name',
        'fields': 'Fields',
        'work_type_id': 'WorkTypeId',
        'parent_task_id': 'ParentTaskId',
        'integration': 'Integration',
        'assignments': 'Assignments',
        'process_assignments': 'ProcessAssignments'
    }

    def __init__(self, name=None, fields=None, work_type_id=None, parent_task_id=None, integration=None, assignments=None, process_assignments=None):  # noqa: E501
        """TasksRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._fields = None
        self._work_type_id = None
        self._parent_task_id = None
        self._integration = None
        self._assignments = None
        self._process_assignments = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if fields is not None:
            self.fields = fields
        if work_type_id is not None:
            self.work_type_id = work_type_id
        if parent_task_id is not None:
            self.parent_task_id = parent_task_id
        if integration is not None:
            self.integration = integration
        if assignments is not None:
            self.assignments = assignments
        if process_assignments is not None:
            self.process_assignments = process_assignments

    @property
    def name(self):
        """Gets the name of this TasksRequest.  # noqa: E501


        :return: The name of this TasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TasksRequest.


        :param name: The name of this TasksRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def fields(self):
        """Gets the fields of this TasksRequest.  # noqa: E501


        :return: The fields of this TasksRequest.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TasksRequest.


        :param fields: The fields of this TasksRequest.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def work_type_id(self):
        """Gets the work_type_id of this TasksRequest.  # noqa: E501


        :return: The work_type_id of this TasksRequest.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_type_id

    @work_type_id.setter
    def work_type_id(self, work_type_id):
        """Sets the work_type_id of this TasksRequest.


        :param work_type_id: The work_type_id of this TasksRequest.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_type_id = work_type_id

    @property
    def parent_task_id(self):
        """Gets the parent_task_id of this TasksRequest.  # noqa: E501


        :return: The parent_task_id of this TasksRequest.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._parent_task_id

    @parent_task_id.setter
    def parent_task_id(self, parent_task_id):
        """Sets the parent_task_id of this TasksRequest.


        :param parent_task_id: The parent_task_id of this TasksRequest.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._parent_task_id = parent_task_id

    @property
    def integration(self):
        """Gets the integration of this TasksRequest.  # noqa: E501


        :return: The integration of this TasksRequest.  # noqa: E501
        :rtype: TaskIntegrationInfo
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """Sets the integration of this TasksRequest.


        :param integration: The integration of this TasksRequest.  # noqa: E501
        :type: TaskIntegrationInfo
        """

        self._integration = integration

    @property
    def assignments(self):
        """Gets the assignments of this TasksRequest.  # noqa: E501


        :return: The assignments of this TasksRequest.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this TasksRequest.


        :param assignments: The assignments of this TasksRequest.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._assignments = assignments

    @property
    def process_assignments(self):
        """Gets the process_assignments of this TasksRequest.  # noqa: E501


        :return: The process_assignments of this TasksRequest.  # noqa: E501
        :rtype: bool
        """
        return self._process_assignments

    @process_assignments.setter
    def process_assignments(self, process_assignments):
        """Sets the process_assignments of this TasksRequest.


        :param process_assignments: The process_assignments of this TasksRequest.  # noqa: E501
        :type: bool
        """

        self._process_assignments = process_assignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TasksRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TasksRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
