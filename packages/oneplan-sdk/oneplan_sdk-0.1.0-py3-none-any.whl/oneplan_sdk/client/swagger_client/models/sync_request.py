# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SyncRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tasks': 'ItemSyncRequest',
        'assignments': 'ItemSyncRequest',
        'dependencies': 'ItemSyncRequest',
        'resources': 'ItemSyncRequest',
        'request_id': 'UnsignedInteger',
        'revision': 'int'
    }

    attribute_map = {
        'tasks': 'tasks',
        'assignments': 'assignments',
        'dependencies': 'dependencies',
        'resources': 'resources',
        'request_id': 'requestId',
        'revision': 'revision'
    }

    def __init__(self, tasks=None, assignments=None, dependencies=None, resources=None, request_id=None, revision=None):  # noqa: E501
        """SyncRequest - a model defined in Swagger"""  # noqa: E501
        self._tasks = None
        self._assignments = None
        self._dependencies = None
        self._resources = None
        self._request_id = None
        self._revision = None
        self.discriminator = None
        if tasks is not None:
            self.tasks = tasks
        if assignments is not None:
            self.assignments = assignments
        if dependencies is not None:
            self.dependencies = dependencies
        if resources is not None:
            self.resources = resources
        if request_id is not None:
            self.request_id = request_id
        if revision is not None:
            self.revision = revision

    @property
    def tasks(self):
        """Gets the tasks of this SyncRequest.  # noqa: E501


        :return: The tasks of this SyncRequest.  # noqa: E501
        :rtype: ItemSyncRequest
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this SyncRequest.


        :param tasks: The tasks of this SyncRequest.  # noqa: E501
        :type: ItemSyncRequest
        """

        self._tasks = tasks

    @property
    def assignments(self):
        """Gets the assignments of this SyncRequest.  # noqa: E501


        :return: The assignments of this SyncRequest.  # noqa: E501
        :rtype: ItemSyncRequest
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this SyncRequest.


        :param assignments: The assignments of this SyncRequest.  # noqa: E501
        :type: ItemSyncRequest
        """

        self._assignments = assignments

    @property
    def dependencies(self):
        """Gets the dependencies of this SyncRequest.  # noqa: E501


        :return: The dependencies of this SyncRequest.  # noqa: E501
        :rtype: ItemSyncRequest
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this SyncRequest.


        :param dependencies: The dependencies of this SyncRequest.  # noqa: E501
        :type: ItemSyncRequest
        """

        self._dependencies = dependencies

    @property
    def resources(self):
        """Gets the resources of this SyncRequest.  # noqa: E501


        :return: The resources of this SyncRequest.  # noqa: E501
        :rtype: ItemSyncRequest
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this SyncRequest.


        :param resources: The resources of this SyncRequest.  # noqa: E501
        :type: ItemSyncRequest
        """

        self._resources = resources

    @property
    def request_id(self):
        """Gets the request_id of this SyncRequest.  # noqa: E501


        :return: The request_id of this SyncRequest.  # noqa: E501
        :rtype: UnsignedInteger
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SyncRequest.


        :param request_id: The request_id of this SyncRequest.  # noqa: E501
        :type: UnsignedInteger
        """

        self._request_id = request_id

    @property
    def revision(self):
        """Gets the revision of this SyncRequest.  # noqa: E501


        :return: The revision of this SyncRequest.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this SyncRequest.


        :param revision: The revision of this SyncRequest.  # noqa: E501
        :type: int
        """

        self._revision = revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
