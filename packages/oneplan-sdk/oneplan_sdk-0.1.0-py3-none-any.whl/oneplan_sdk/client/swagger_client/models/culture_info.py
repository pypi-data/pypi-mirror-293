# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CultureInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lcid': 'int',
        'keyboard_layout_id': 'int',
        'name': 'str',
        'ietf_language_tag': 'str',
        'display_name': 'str',
        'native_name': 'str',
        'english_name': 'str',
        'two_letter_iso_language_name': 'str',
        'three_letter_iso_language_name': 'str',
        'three_letter_windows_language_name': 'str',
        'compare_info': 'CompareInfo',
        'text_info': 'TextInfo',
        'is_neutral_culture': 'bool',
        'culture_types': 'CultureTypes',
        'number_format': 'NumberFormatInfo',
        'date_time_format': 'DateTimeFormatInfo',
        'calendar': 'Calendar',
        'optional_calendars': 'list[Calendar]',
        'use_user_override': 'bool',
        'is_read_only': 'bool'
    }

    attribute_map = {
        'lcid': 'LCID',
        'keyboard_layout_id': 'KeyboardLayoutId',
        'name': 'Name',
        'ietf_language_tag': 'IetfLanguageTag',
        'display_name': 'DisplayName',
        'native_name': 'NativeName',
        'english_name': 'EnglishName',
        'two_letter_iso_language_name': 'TwoLetterISOLanguageName',
        'three_letter_iso_language_name': 'ThreeLetterISOLanguageName',
        'three_letter_windows_language_name': 'ThreeLetterWindowsLanguageName',
        'compare_info': 'CompareInfo',
        'text_info': 'TextInfo',
        'is_neutral_culture': 'IsNeutralCulture',
        'culture_types': 'CultureTypes',
        'number_format': 'NumberFormat',
        'date_time_format': 'DateTimeFormat',
        'calendar': 'Calendar',
        'optional_calendars': 'OptionalCalendars',
        'use_user_override': 'UseUserOverride',
        'is_read_only': 'IsReadOnly'
    }

    def __init__(self, lcid=None, keyboard_layout_id=None, name=None, ietf_language_tag=None, display_name=None, native_name=None, english_name=None, two_letter_iso_language_name=None, three_letter_iso_language_name=None, three_letter_windows_language_name=None, compare_info=None, text_info=None, is_neutral_culture=None, culture_types=None, number_format=None, date_time_format=None, calendar=None, optional_calendars=None, use_user_override=None, is_read_only=None):  # noqa: E501
        """CultureInfo - a model defined in Swagger"""  # noqa: E501
        self._lcid = None
        self._keyboard_layout_id = None
        self._name = None
        self._ietf_language_tag = None
        self._display_name = None
        self._native_name = None
        self._english_name = None
        self._two_letter_iso_language_name = None
        self._three_letter_iso_language_name = None
        self._three_letter_windows_language_name = None
        self._compare_info = None
        self._text_info = None
        self._is_neutral_culture = None
        self._culture_types = None
        self._number_format = None
        self._date_time_format = None
        self._calendar = None
        self._optional_calendars = None
        self._use_user_override = None
        self._is_read_only = None
        self.discriminator = None
        if lcid is not None:
            self.lcid = lcid
        if keyboard_layout_id is not None:
            self.keyboard_layout_id = keyboard_layout_id
        if name is not None:
            self.name = name
        if ietf_language_tag is not None:
            self.ietf_language_tag = ietf_language_tag
        if display_name is not None:
            self.display_name = display_name
        if native_name is not None:
            self.native_name = native_name
        if english_name is not None:
            self.english_name = english_name
        if two_letter_iso_language_name is not None:
            self.two_letter_iso_language_name = two_letter_iso_language_name
        if three_letter_iso_language_name is not None:
            self.three_letter_iso_language_name = three_letter_iso_language_name
        if three_letter_windows_language_name is not None:
            self.three_letter_windows_language_name = three_letter_windows_language_name
        if compare_info is not None:
            self.compare_info = compare_info
        if text_info is not None:
            self.text_info = text_info
        if is_neutral_culture is not None:
            self.is_neutral_culture = is_neutral_culture
        if culture_types is not None:
            self.culture_types = culture_types
        if number_format is not None:
            self.number_format = number_format
        if date_time_format is not None:
            self.date_time_format = date_time_format
        if calendar is not None:
            self.calendar = calendar
        if optional_calendars is not None:
            self.optional_calendars = optional_calendars
        if use_user_override is not None:
            self.use_user_override = use_user_override
        if is_read_only is not None:
            self.is_read_only = is_read_only

    @property
    def lcid(self):
        """Gets the lcid of this CultureInfo.  # noqa: E501


        :return: The lcid of this CultureInfo.  # noqa: E501
        :rtype: int
        """
        return self._lcid

    @lcid.setter
    def lcid(self, lcid):
        """Sets the lcid of this CultureInfo.


        :param lcid: The lcid of this CultureInfo.  # noqa: E501
        :type: int
        """

        self._lcid = lcid

    @property
    def keyboard_layout_id(self):
        """Gets the keyboard_layout_id of this CultureInfo.  # noqa: E501


        :return: The keyboard_layout_id of this CultureInfo.  # noqa: E501
        :rtype: int
        """
        return self._keyboard_layout_id

    @keyboard_layout_id.setter
    def keyboard_layout_id(self, keyboard_layout_id):
        """Sets the keyboard_layout_id of this CultureInfo.


        :param keyboard_layout_id: The keyboard_layout_id of this CultureInfo.  # noqa: E501
        :type: int
        """

        self._keyboard_layout_id = keyboard_layout_id

    @property
    def name(self):
        """Gets the name of this CultureInfo.  # noqa: E501


        :return: The name of this CultureInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CultureInfo.


        :param name: The name of this CultureInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ietf_language_tag(self):
        """Gets the ietf_language_tag of this CultureInfo.  # noqa: E501


        :return: The ietf_language_tag of this CultureInfo.  # noqa: E501
        :rtype: str
        """
        return self._ietf_language_tag

    @ietf_language_tag.setter
    def ietf_language_tag(self, ietf_language_tag):
        """Sets the ietf_language_tag of this CultureInfo.


        :param ietf_language_tag: The ietf_language_tag of this CultureInfo.  # noqa: E501
        :type: str
        """

        self._ietf_language_tag = ietf_language_tag

    @property
    def display_name(self):
        """Gets the display_name of this CultureInfo.  # noqa: E501


        :return: The display_name of this CultureInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CultureInfo.


        :param display_name: The display_name of this CultureInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def native_name(self):
        """Gets the native_name of this CultureInfo.  # noqa: E501


        :return: The native_name of this CultureInfo.  # noqa: E501
        :rtype: str
        """
        return self._native_name

    @native_name.setter
    def native_name(self, native_name):
        """Sets the native_name of this CultureInfo.


        :param native_name: The native_name of this CultureInfo.  # noqa: E501
        :type: str
        """

        self._native_name = native_name

    @property
    def english_name(self):
        """Gets the english_name of this CultureInfo.  # noqa: E501


        :return: The english_name of this CultureInfo.  # noqa: E501
        :rtype: str
        """
        return self._english_name

    @english_name.setter
    def english_name(self, english_name):
        """Sets the english_name of this CultureInfo.


        :param english_name: The english_name of this CultureInfo.  # noqa: E501
        :type: str
        """

        self._english_name = english_name

    @property
    def two_letter_iso_language_name(self):
        """Gets the two_letter_iso_language_name of this CultureInfo.  # noqa: E501


        :return: The two_letter_iso_language_name of this CultureInfo.  # noqa: E501
        :rtype: str
        """
        return self._two_letter_iso_language_name

    @two_letter_iso_language_name.setter
    def two_letter_iso_language_name(self, two_letter_iso_language_name):
        """Sets the two_letter_iso_language_name of this CultureInfo.


        :param two_letter_iso_language_name: The two_letter_iso_language_name of this CultureInfo.  # noqa: E501
        :type: str
        """

        self._two_letter_iso_language_name = two_letter_iso_language_name

    @property
    def three_letter_iso_language_name(self):
        """Gets the three_letter_iso_language_name of this CultureInfo.  # noqa: E501


        :return: The three_letter_iso_language_name of this CultureInfo.  # noqa: E501
        :rtype: str
        """
        return self._three_letter_iso_language_name

    @three_letter_iso_language_name.setter
    def three_letter_iso_language_name(self, three_letter_iso_language_name):
        """Sets the three_letter_iso_language_name of this CultureInfo.


        :param three_letter_iso_language_name: The three_letter_iso_language_name of this CultureInfo.  # noqa: E501
        :type: str
        """

        self._three_letter_iso_language_name = three_letter_iso_language_name

    @property
    def three_letter_windows_language_name(self):
        """Gets the three_letter_windows_language_name of this CultureInfo.  # noqa: E501


        :return: The three_letter_windows_language_name of this CultureInfo.  # noqa: E501
        :rtype: str
        """
        return self._three_letter_windows_language_name

    @three_letter_windows_language_name.setter
    def three_letter_windows_language_name(self, three_letter_windows_language_name):
        """Sets the three_letter_windows_language_name of this CultureInfo.


        :param three_letter_windows_language_name: The three_letter_windows_language_name of this CultureInfo.  # noqa: E501
        :type: str
        """

        self._three_letter_windows_language_name = three_letter_windows_language_name

    @property
    def compare_info(self):
        """Gets the compare_info of this CultureInfo.  # noqa: E501


        :return: The compare_info of this CultureInfo.  # noqa: E501
        :rtype: CompareInfo
        """
        return self._compare_info

    @compare_info.setter
    def compare_info(self, compare_info):
        """Sets the compare_info of this CultureInfo.


        :param compare_info: The compare_info of this CultureInfo.  # noqa: E501
        :type: CompareInfo
        """

        self._compare_info = compare_info

    @property
    def text_info(self):
        """Gets the text_info of this CultureInfo.  # noqa: E501


        :return: The text_info of this CultureInfo.  # noqa: E501
        :rtype: TextInfo
        """
        return self._text_info

    @text_info.setter
    def text_info(self, text_info):
        """Sets the text_info of this CultureInfo.


        :param text_info: The text_info of this CultureInfo.  # noqa: E501
        :type: TextInfo
        """

        self._text_info = text_info

    @property
    def is_neutral_culture(self):
        """Gets the is_neutral_culture of this CultureInfo.  # noqa: E501


        :return: The is_neutral_culture of this CultureInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_neutral_culture

    @is_neutral_culture.setter
    def is_neutral_culture(self, is_neutral_culture):
        """Sets the is_neutral_culture of this CultureInfo.


        :param is_neutral_culture: The is_neutral_culture of this CultureInfo.  # noqa: E501
        :type: bool
        """

        self._is_neutral_culture = is_neutral_culture

    @property
    def culture_types(self):
        """Gets the culture_types of this CultureInfo.  # noqa: E501


        :return: The culture_types of this CultureInfo.  # noqa: E501
        :rtype: CultureTypes
        """
        return self._culture_types

    @culture_types.setter
    def culture_types(self, culture_types):
        """Sets the culture_types of this CultureInfo.


        :param culture_types: The culture_types of this CultureInfo.  # noqa: E501
        :type: CultureTypes
        """

        self._culture_types = culture_types

    @property
    def number_format(self):
        """Gets the number_format of this CultureInfo.  # noqa: E501


        :return: The number_format of this CultureInfo.  # noqa: E501
        :rtype: NumberFormatInfo
        """
        return self._number_format

    @number_format.setter
    def number_format(self, number_format):
        """Sets the number_format of this CultureInfo.


        :param number_format: The number_format of this CultureInfo.  # noqa: E501
        :type: NumberFormatInfo
        """

        self._number_format = number_format

    @property
    def date_time_format(self):
        """Gets the date_time_format of this CultureInfo.  # noqa: E501


        :return: The date_time_format of this CultureInfo.  # noqa: E501
        :rtype: DateTimeFormatInfo
        """
        return self._date_time_format

    @date_time_format.setter
    def date_time_format(self, date_time_format):
        """Sets the date_time_format of this CultureInfo.


        :param date_time_format: The date_time_format of this CultureInfo.  # noqa: E501
        :type: DateTimeFormatInfo
        """

        self._date_time_format = date_time_format

    @property
    def calendar(self):
        """Gets the calendar of this CultureInfo.  # noqa: E501


        :return: The calendar of this CultureInfo.  # noqa: E501
        :rtype: Calendar
        """
        return self._calendar

    @calendar.setter
    def calendar(self, calendar):
        """Sets the calendar of this CultureInfo.


        :param calendar: The calendar of this CultureInfo.  # noqa: E501
        :type: Calendar
        """

        self._calendar = calendar

    @property
    def optional_calendars(self):
        """Gets the optional_calendars of this CultureInfo.  # noqa: E501


        :return: The optional_calendars of this CultureInfo.  # noqa: E501
        :rtype: list[Calendar]
        """
        return self._optional_calendars

    @optional_calendars.setter
    def optional_calendars(self, optional_calendars):
        """Sets the optional_calendars of this CultureInfo.


        :param optional_calendars: The optional_calendars of this CultureInfo.  # noqa: E501
        :type: list[Calendar]
        """

        self._optional_calendars = optional_calendars

    @property
    def use_user_override(self):
        """Gets the use_user_override of this CultureInfo.  # noqa: E501


        :return: The use_user_override of this CultureInfo.  # noqa: E501
        :rtype: bool
        """
        return self._use_user_override

    @use_user_override.setter
    def use_user_override(self, use_user_override):
        """Sets the use_user_override of this CultureInfo.


        :param use_user_override: The use_user_override of this CultureInfo.  # noqa: E501
        :type: bool
        """

        self._use_user_override = use_user_override

    @property
    def is_read_only(self):
        """Gets the is_read_only of this CultureInfo.  # noqa: E501


        :return: The is_read_only of this CultureInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this CultureInfo.


        :param is_read_only: The is_read_only of this CultureInfo.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CultureInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CultureInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
