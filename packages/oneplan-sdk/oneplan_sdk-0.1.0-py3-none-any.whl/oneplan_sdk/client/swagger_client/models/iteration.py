# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Iteration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_id': 'GloballyUniqueIdentifier',
        'name': 'str',
        'start': 'date',
        'end': 'date',
        'target_points': 'int',
        'target_hours': 'int',
        'external_id': 'str',
        'external_url': 'str',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'plan_id': 'PlanId',
        'name': 'Name',
        'start': 'Start',
        'end': 'End',
        'target_points': 'TargetPoints',
        'target_hours': 'TargetHours',
        'external_id': 'ExternalId',
        'external_url': 'ExternalUrl',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, plan_id=None, name=None, start=None, end=None, target_points=None, target_hours=None, external_id=None, external_url=None, id=None, config_id=None):  # noqa: E501
        """Iteration - a model defined in Swagger"""  # noqa: E501
        self._plan_id = None
        self._name = None
        self._start = None
        self._end = None
        self._target_points = None
        self._target_hours = None
        self._external_id = None
        self._external_url = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if plan_id is not None:
            self.plan_id = plan_id
        if name is not None:
            self.name = name
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if target_points is not None:
            self.target_points = target_points
        if target_hours is not None:
            self.target_hours = target_hours
        if external_id is not None:
            self.external_id = external_id
        if external_url is not None:
            self.external_url = external_url
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def plan_id(self):
        """Gets the plan_id of this Iteration.  # noqa: E501


        :return: The plan_id of this Iteration.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this Iteration.


        :param plan_id: The plan_id of this Iteration.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_id = plan_id

    @property
    def name(self):
        """Gets the name of this Iteration.  # noqa: E501


        :return: The name of this Iteration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Iteration.


        :param name: The name of this Iteration.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start(self):
        """Gets the start of this Iteration.  # noqa: E501


        :return: The start of this Iteration.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Iteration.


        :param start: The start of this Iteration.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this Iteration.  # noqa: E501


        :return: The end of this Iteration.  # noqa: E501
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Iteration.


        :param end: The end of this Iteration.  # noqa: E501
        :type: date
        """

        self._end = end

    @property
    def target_points(self):
        """Gets the target_points of this Iteration.  # noqa: E501


        :return: The target_points of this Iteration.  # noqa: E501
        :rtype: int
        """
        return self._target_points

    @target_points.setter
    def target_points(self, target_points):
        """Sets the target_points of this Iteration.


        :param target_points: The target_points of this Iteration.  # noqa: E501
        :type: int
        """

        self._target_points = target_points

    @property
    def target_hours(self):
        """Gets the target_hours of this Iteration.  # noqa: E501


        :return: The target_hours of this Iteration.  # noqa: E501
        :rtype: int
        """
        return self._target_hours

    @target_hours.setter
    def target_hours(self, target_hours):
        """Sets the target_hours of this Iteration.


        :param target_hours: The target_hours of this Iteration.  # noqa: E501
        :type: int
        """

        self._target_hours = target_hours

    @property
    def external_id(self):
        """Gets the external_id of this Iteration.  # noqa: E501


        :return: The external_id of this Iteration.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Iteration.


        :param external_id: The external_id of this Iteration.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def external_url(self):
        """Gets the external_url of this Iteration.  # noqa: E501


        :return: The external_url of this Iteration.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this Iteration.


        :param external_url: The external_url of this Iteration.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def id(self):
        """Gets the id of this Iteration.  # noqa: E501


        :return: The id of this Iteration.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Iteration.


        :param id: The id of this Iteration.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this Iteration.  # noqa: E501


        :return: The config_id of this Iteration.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this Iteration.


        :param config_id: The config_id of this Iteration.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Iteration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Iteration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
