# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HttpRequestMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'Version',
        'content': 'HttpContent',
        'method': 'HttpMethod',
        'request_uri': 'URI',
        'headers': 'list[Object]',
        'properties': 'dict(str, Object)'
    }

    attribute_map = {
        'version': 'Version',
        'content': 'Content',
        'method': 'Method',
        'request_uri': 'RequestUri',
        'headers': 'Headers',
        'properties': 'Properties'
    }

    def __init__(self, version=None, content=None, method=None, request_uri=None, headers=None, properties=None):  # noqa: E501
        """HttpRequestMessage - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._content = None
        self._method = None
        self._request_uri = None
        self._headers = None
        self._properties = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if content is not None:
            self.content = content
        if method is not None:
            self.method = method
        if request_uri is not None:
            self.request_uri = request_uri
        if headers is not None:
            self.headers = headers
        if properties is not None:
            self.properties = properties

    @property
    def version(self):
        """Gets the version of this HttpRequestMessage.  # noqa: E501


        :return: The version of this HttpRequestMessage.  # noqa: E501
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HttpRequestMessage.


        :param version: The version of this HttpRequestMessage.  # noqa: E501
        :type: Version
        """

        self._version = version

    @property
    def content(self):
        """Gets the content of this HttpRequestMessage.  # noqa: E501


        :return: The content of this HttpRequestMessage.  # noqa: E501
        :rtype: HttpContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this HttpRequestMessage.


        :param content: The content of this HttpRequestMessage.  # noqa: E501
        :type: HttpContent
        """

        self._content = content

    @property
    def method(self):
        """Gets the method of this HttpRequestMessage.  # noqa: E501


        :return: The method of this HttpRequestMessage.  # noqa: E501
        :rtype: HttpMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this HttpRequestMessage.


        :param method: The method of this HttpRequestMessage.  # noqa: E501
        :type: HttpMethod
        """

        self._method = method

    @property
    def request_uri(self):
        """Gets the request_uri of this HttpRequestMessage.  # noqa: E501


        :return: The request_uri of this HttpRequestMessage.  # noqa: E501
        :rtype: URI
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this HttpRequestMessage.


        :param request_uri: The request_uri of this HttpRequestMessage.  # noqa: E501
        :type: URI
        """

        self._request_uri = request_uri

    @property
    def headers(self):
        """Gets the headers of this HttpRequestMessage.  # noqa: E501


        :return: The headers of this HttpRequestMessage.  # noqa: E501
        :rtype: list[Object]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpRequestMessage.


        :param headers: The headers of this HttpRequestMessage.  # noqa: E501
        :type: list[Object]
        """

        self._headers = headers

    @property
    def properties(self):
        """Gets the properties of this HttpRequestMessage.  # noqa: E501


        :return: The properties of this HttpRequestMessage.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this HttpRequestMessage.


        :param properties: The properties of this HttpRequestMessage.  # noqa: E501
        :type: dict(str, Object)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpRequestMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpRequestMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
