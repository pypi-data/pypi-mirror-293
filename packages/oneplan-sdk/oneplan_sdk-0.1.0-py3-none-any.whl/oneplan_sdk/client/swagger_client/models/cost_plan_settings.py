# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CostPlanSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date_range': 'date',
        'end_date_range': 'date',
        'cost_type': 'str',
        'additional_cost_types': 'list[str]',
        'zoom_level': 'int',
        'exchange_currency_value': 'str'
    }

    attribute_map = {
        'start_date_range': 'StartDateRange',
        'end_date_range': 'EndDateRange',
        'cost_type': 'CostType',
        'additional_cost_types': 'AdditionalCostTypes',
        'zoom_level': 'ZoomLevel',
        'exchange_currency_value': 'ExchangeCurrencyValue'
    }

    def __init__(self, start_date_range=None, end_date_range=None, cost_type=None, additional_cost_types=None, zoom_level=None, exchange_currency_value=None):  # noqa: E501
        """CostPlanSettings - a model defined in Swagger"""  # noqa: E501
        self._start_date_range = None
        self._end_date_range = None
        self._cost_type = None
        self._additional_cost_types = None
        self._zoom_level = None
        self._exchange_currency_value = None
        self.discriminator = None
        if start_date_range is not None:
            self.start_date_range = start_date_range
        if end_date_range is not None:
            self.end_date_range = end_date_range
        if cost_type is not None:
            self.cost_type = cost_type
        if additional_cost_types is not None:
            self.additional_cost_types = additional_cost_types
        if zoom_level is not None:
            self.zoom_level = zoom_level
        if exchange_currency_value is not None:
            self.exchange_currency_value = exchange_currency_value

    @property
    def start_date_range(self):
        """Gets the start_date_range of this CostPlanSettings.  # noqa: E501


        :return: The start_date_range of this CostPlanSettings.  # noqa: E501
        :rtype: date
        """
        return self._start_date_range

    @start_date_range.setter
    def start_date_range(self, start_date_range):
        """Sets the start_date_range of this CostPlanSettings.


        :param start_date_range: The start_date_range of this CostPlanSettings.  # noqa: E501
        :type: date
        """

        self._start_date_range = start_date_range

    @property
    def end_date_range(self):
        """Gets the end_date_range of this CostPlanSettings.  # noqa: E501


        :return: The end_date_range of this CostPlanSettings.  # noqa: E501
        :rtype: date
        """
        return self._end_date_range

    @end_date_range.setter
    def end_date_range(self, end_date_range):
        """Sets the end_date_range of this CostPlanSettings.


        :param end_date_range: The end_date_range of this CostPlanSettings.  # noqa: E501
        :type: date
        """

        self._end_date_range = end_date_range

    @property
    def cost_type(self):
        """Gets the cost_type of this CostPlanSettings.  # noqa: E501


        :return: The cost_type of this CostPlanSettings.  # noqa: E501
        :rtype: str
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this CostPlanSettings.


        :param cost_type: The cost_type of this CostPlanSettings.  # noqa: E501
        :type: str
        """

        self._cost_type = cost_type

    @property
    def additional_cost_types(self):
        """Gets the additional_cost_types of this CostPlanSettings.  # noqa: E501


        :return: The additional_cost_types of this CostPlanSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_cost_types

    @additional_cost_types.setter
    def additional_cost_types(self, additional_cost_types):
        """Sets the additional_cost_types of this CostPlanSettings.


        :param additional_cost_types: The additional_cost_types of this CostPlanSettings.  # noqa: E501
        :type: list[str]
        """

        self._additional_cost_types = additional_cost_types

    @property
    def zoom_level(self):
        """Gets the zoom_level of this CostPlanSettings.  # noqa: E501


        :return: The zoom_level of this CostPlanSettings.  # noqa: E501
        :rtype: int
        """
        return self._zoom_level

    @zoom_level.setter
    def zoom_level(self, zoom_level):
        """Sets the zoom_level of this CostPlanSettings.


        :param zoom_level: The zoom_level of this CostPlanSettings.  # noqa: E501
        :type: int
        """

        self._zoom_level = zoom_level

    @property
    def exchange_currency_value(self):
        """Gets the exchange_currency_value of this CostPlanSettings.  # noqa: E501


        :return: The exchange_currency_value of this CostPlanSettings.  # noqa: E501
        :rtype: str
        """
        return self._exchange_currency_value

    @exchange_currency_value.setter
    def exchange_currency_value(self, exchange_currency_value):
        """Sets the exchange_currency_value of this CostPlanSettings.


        :param exchange_currency_value: The exchange_currency_value of this CostPlanSettings.  # noqa: E501
        :type: str
        """

        self._exchange_currency_value = exchange_currency_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CostPlanSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CostPlanSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
