# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostFragmentInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_online': 'bool',
        'fragment_id': 'str',
        'parent_task_id': 'GloballyUniqueIdentifier',
        'category': 'int',
        'sub_category': 'int',
        'index': 'int',
        'location': 'FragmentLocation',
        'resource_map': 'dict(str, GloballyUniqueIdentifier)',
        'field_map': 'dict(str, str)'
    }

    attribute_map = {
        'is_online': 'IsOnline',
        'fragment_id': 'FragmentId',
        'parent_task_id': 'ParentTaskId',
        'category': 'Category',
        'sub_category': 'SubCategory',
        'index': 'Index',
        'location': 'Location',
        'resource_map': 'ResourceMap',
        'field_map': 'FieldMap'
    }

    def __init__(self, is_online=None, fragment_id=None, parent_task_id=None, category=None, sub_category=None, index=None, location=None, resource_map=None, field_map=None):  # noqa: E501
        """PostFragmentInfo - a model defined in Swagger"""  # noqa: E501
        self._is_online = None
        self._fragment_id = None
        self._parent_task_id = None
        self._category = None
        self._sub_category = None
        self._index = None
        self._location = None
        self._resource_map = None
        self._field_map = None
        self.discriminator = None
        if is_online is not None:
            self.is_online = is_online
        if fragment_id is not None:
            self.fragment_id = fragment_id
        if parent_task_id is not None:
            self.parent_task_id = parent_task_id
        if category is not None:
            self.category = category
        if sub_category is not None:
            self.sub_category = sub_category
        if index is not None:
            self.index = index
        if location is not None:
            self.location = location
        if resource_map is not None:
            self.resource_map = resource_map
        if field_map is not None:
            self.field_map = field_map

    @property
    def is_online(self):
        """Gets the is_online of this PostFragmentInfo.  # noqa: E501


        :return: The is_online of this PostFragmentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this PostFragmentInfo.


        :param is_online: The is_online of this PostFragmentInfo.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    @property
    def fragment_id(self):
        """Gets the fragment_id of this PostFragmentInfo.  # noqa: E501


        :return: The fragment_id of this PostFragmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._fragment_id

    @fragment_id.setter
    def fragment_id(self, fragment_id):
        """Sets the fragment_id of this PostFragmentInfo.


        :param fragment_id: The fragment_id of this PostFragmentInfo.  # noqa: E501
        :type: str
        """

        self._fragment_id = fragment_id

    @property
    def parent_task_id(self):
        """Gets the parent_task_id of this PostFragmentInfo.  # noqa: E501


        :return: The parent_task_id of this PostFragmentInfo.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._parent_task_id

    @parent_task_id.setter
    def parent_task_id(self, parent_task_id):
        """Sets the parent_task_id of this PostFragmentInfo.


        :param parent_task_id: The parent_task_id of this PostFragmentInfo.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._parent_task_id = parent_task_id

    @property
    def category(self):
        """Gets the category of this PostFragmentInfo.  # noqa: E501


        :return: The category of this PostFragmentInfo.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PostFragmentInfo.


        :param category: The category of this PostFragmentInfo.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def sub_category(self):
        """Gets the sub_category of this PostFragmentInfo.  # noqa: E501


        :return: The sub_category of this PostFragmentInfo.  # noqa: E501
        :rtype: int
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this PostFragmentInfo.


        :param sub_category: The sub_category of this PostFragmentInfo.  # noqa: E501
        :type: int
        """

        self._sub_category = sub_category

    @property
    def index(self):
        """Gets the index of this PostFragmentInfo.  # noqa: E501


        :return: The index of this PostFragmentInfo.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this PostFragmentInfo.


        :param index: The index of this PostFragmentInfo.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def location(self):
        """Gets the location of this PostFragmentInfo.  # noqa: E501


        :return: The location of this PostFragmentInfo.  # noqa: E501
        :rtype: FragmentLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PostFragmentInfo.


        :param location: The location of this PostFragmentInfo.  # noqa: E501
        :type: FragmentLocation
        """

        self._location = location

    @property
    def resource_map(self):
        """Gets the resource_map of this PostFragmentInfo.  # noqa: E501


        :return: The resource_map of this PostFragmentInfo.  # noqa: E501
        :rtype: dict(str, GloballyUniqueIdentifier)
        """
        return self._resource_map

    @resource_map.setter
    def resource_map(self, resource_map):
        """Sets the resource_map of this PostFragmentInfo.


        :param resource_map: The resource_map of this PostFragmentInfo.  # noqa: E501
        :type: dict(str, GloballyUniqueIdentifier)
        """

        self._resource_map = resource_map

    @property
    def field_map(self):
        """Gets the field_map of this PostFragmentInfo.  # noqa: E501


        :return: The field_map of this PostFragmentInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._field_map

    @field_map.setter
    def field_map(self, field_map):
        """Sets the field_map of this PostFragmentInfo.


        :param field_map: The field_map of this PostFragmentInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._field_map = field_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostFragmentInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostFragmentInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
