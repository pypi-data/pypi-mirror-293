# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightComment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'GloballyUniqueIdentifier',
        'item_type': 'InsightCommentType',
        'name': 'str',
        'html_name': 'str',
        'work_plan_id': 'GloballyUniqueIdentifier',
        'comment': 'str',
        '_date': 'date',
        'post_url': 'str',
        'upn': 'GloballyUniqueIdentifier',
        'resource_name': 'str',
        'comments': 'list[InsightCommentComment]'
    }

    attribute_map = {
        'id': 'id',
        'item_type': 'ItemType',
        'name': 'Name',
        'html_name': 'HtmlName',
        'work_plan_id': 'WorkPlanId',
        'comment': 'Comment',
        '_date': 'Date',
        'post_url': 'PostUrl',
        'upn': 'UPN',
        'resource_name': 'ResourceName',
        'comments': 'Comments'
    }

    def __init__(self, id=None, item_type=None, name=None, html_name=None, work_plan_id=None, comment=None, _date=None, post_url=None, upn=None, resource_name=None, comments=None):  # noqa: E501
        """InsightComment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_type = None
        self._name = None
        self._html_name = None
        self._work_plan_id = None
        self._comment = None
        self.__date = None
        self._post_url = None
        self._upn = None
        self._resource_name = None
        self._comments = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_type is not None:
            self.item_type = item_type
        if name is not None:
            self.name = name
        if html_name is not None:
            self.html_name = html_name
        if work_plan_id is not None:
            self.work_plan_id = work_plan_id
        if comment is not None:
            self.comment = comment
        if _date is not None:
            self._date = _date
        if post_url is not None:
            self.post_url = post_url
        if upn is not None:
            self.upn = upn
        if resource_name is not None:
            self.resource_name = resource_name
        if comments is not None:
            self.comments = comments

    @property
    def id(self):
        """Gets the id of this InsightComment.  # noqa: E501


        :return: The id of this InsightComment.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InsightComment.


        :param id: The id of this InsightComment.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def item_type(self):
        """Gets the item_type of this InsightComment.  # noqa: E501


        :return: The item_type of this InsightComment.  # noqa: E501
        :rtype: InsightCommentType
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this InsightComment.


        :param item_type: The item_type of this InsightComment.  # noqa: E501
        :type: InsightCommentType
        """

        self._item_type = item_type

    @property
    def name(self):
        """Gets the name of this InsightComment.  # noqa: E501


        :return: The name of this InsightComment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InsightComment.


        :param name: The name of this InsightComment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def html_name(self):
        """Gets the html_name of this InsightComment.  # noqa: E501


        :return: The html_name of this InsightComment.  # noqa: E501
        :rtype: str
        """
        return self._html_name

    @html_name.setter
    def html_name(self, html_name):
        """Sets the html_name of this InsightComment.


        :param html_name: The html_name of this InsightComment.  # noqa: E501
        :type: str
        """

        self._html_name = html_name

    @property
    def work_plan_id(self):
        """Gets the work_plan_id of this InsightComment.  # noqa: E501


        :return: The work_plan_id of this InsightComment.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_plan_id

    @work_plan_id.setter
    def work_plan_id(self, work_plan_id):
        """Sets the work_plan_id of this InsightComment.


        :param work_plan_id: The work_plan_id of this InsightComment.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_plan_id = work_plan_id

    @property
    def comment(self):
        """Gets the comment of this InsightComment.  # noqa: E501


        :return: The comment of this InsightComment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InsightComment.


        :param comment: The comment of this InsightComment.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def _date(self):
        """Gets the _date of this InsightComment.  # noqa: E501


        :return: The _date of this InsightComment.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InsightComment.


        :param _date: The _date of this InsightComment.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def post_url(self):
        """Gets the post_url of this InsightComment.  # noqa: E501


        :return: The post_url of this InsightComment.  # noqa: E501
        :rtype: str
        """
        return self._post_url

    @post_url.setter
    def post_url(self, post_url):
        """Sets the post_url of this InsightComment.


        :param post_url: The post_url of this InsightComment.  # noqa: E501
        :type: str
        """

        self._post_url = post_url

    @property
    def upn(self):
        """Gets the upn of this InsightComment.  # noqa: E501


        :return: The upn of this InsightComment.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._upn

    @upn.setter
    def upn(self, upn):
        """Sets the upn of this InsightComment.


        :param upn: The upn of this InsightComment.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._upn = upn

    @property
    def resource_name(self):
        """Gets the resource_name of this InsightComment.  # noqa: E501


        :return: The resource_name of this InsightComment.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this InsightComment.


        :param resource_name: The resource_name of this InsightComment.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def comments(self):
        """Gets the comments of this InsightComment.  # noqa: E501


        :return: The comments of this InsightComment.  # noqa: E501
        :rtype: list[InsightCommentComment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this InsightComment.


        :param comments: The comments of this InsightComment.  # noqa: E501
        :type: list[InsightCommentComment]
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InsightComment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightComment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
