# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GlobalPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'administrator': 'bool',
        'edit_all_plans': 'bool',
        'manage_data': 'bool',
        'view_all_plans': 'bool',
        'view_all_resources': 'bool',
        'manage_resources': 'bool'
    }

    attribute_map = {
        'administrator': 'Administrator',
        'edit_all_plans': 'EditAllPlans',
        'manage_data': 'ManageData',
        'view_all_plans': 'ViewAllPlans',
        'view_all_resources': 'ViewAllResources',
        'manage_resources': 'ManageResources'
    }

    def __init__(self, administrator=None, edit_all_plans=None, manage_data=None, view_all_plans=None, view_all_resources=None, manage_resources=None):  # noqa: E501
        """GlobalPermissions - a model defined in Swagger"""  # noqa: E501
        self._administrator = None
        self._edit_all_plans = None
        self._manage_data = None
        self._view_all_plans = None
        self._view_all_resources = None
        self._manage_resources = None
        self.discriminator = None
        if administrator is not None:
            self.administrator = administrator
        if edit_all_plans is not None:
            self.edit_all_plans = edit_all_plans
        if manage_data is not None:
            self.manage_data = manage_data
        if view_all_plans is not None:
            self.view_all_plans = view_all_plans
        if view_all_resources is not None:
            self.view_all_resources = view_all_resources
        if manage_resources is not None:
            self.manage_resources = manage_resources

    @property
    def administrator(self):
        """Gets the administrator of this GlobalPermissions.  # noqa: E501


        :return: The administrator of this GlobalPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._administrator

    @administrator.setter
    def administrator(self, administrator):
        """Sets the administrator of this GlobalPermissions.


        :param administrator: The administrator of this GlobalPermissions.  # noqa: E501
        :type: bool
        """

        self._administrator = administrator

    @property
    def edit_all_plans(self):
        """Gets the edit_all_plans of this GlobalPermissions.  # noqa: E501


        :return: The edit_all_plans of this GlobalPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._edit_all_plans

    @edit_all_plans.setter
    def edit_all_plans(self, edit_all_plans):
        """Sets the edit_all_plans of this GlobalPermissions.


        :param edit_all_plans: The edit_all_plans of this GlobalPermissions.  # noqa: E501
        :type: bool
        """

        self._edit_all_plans = edit_all_plans

    @property
    def manage_data(self):
        """Gets the manage_data of this GlobalPermissions.  # noqa: E501


        :return: The manage_data of this GlobalPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._manage_data

    @manage_data.setter
    def manage_data(self, manage_data):
        """Sets the manage_data of this GlobalPermissions.


        :param manage_data: The manage_data of this GlobalPermissions.  # noqa: E501
        :type: bool
        """

        self._manage_data = manage_data

    @property
    def view_all_plans(self):
        """Gets the view_all_plans of this GlobalPermissions.  # noqa: E501


        :return: The view_all_plans of this GlobalPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._view_all_plans

    @view_all_plans.setter
    def view_all_plans(self, view_all_plans):
        """Sets the view_all_plans of this GlobalPermissions.


        :param view_all_plans: The view_all_plans of this GlobalPermissions.  # noqa: E501
        :type: bool
        """

        self._view_all_plans = view_all_plans

    @property
    def view_all_resources(self):
        """Gets the view_all_resources of this GlobalPermissions.  # noqa: E501


        :return: The view_all_resources of this GlobalPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._view_all_resources

    @view_all_resources.setter
    def view_all_resources(self, view_all_resources):
        """Sets the view_all_resources of this GlobalPermissions.


        :param view_all_resources: The view_all_resources of this GlobalPermissions.  # noqa: E501
        :type: bool
        """

        self._view_all_resources = view_all_resources

    @property
    def manage_resources(self):
        """Gets the manage_resources of this GlobalPermissions.  # noqa: E501


        :return: The manage_resources of this GlobalPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._manage_resources

    @manage_resources.setter
    def manage_resources(self, manage_resources):
        """Sets the manage_resources of this GlobalPermissions.


        :param manage_resources: The manage_resources of this GlobalPermissions.  # noqa: E501
        :type: bool
        """

        self._manage_resources = manage_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalPermissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
