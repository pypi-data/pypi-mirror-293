# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlannerColumnPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order': 'int',
        'display_name': 'str',
        'description': 'str',
        'internal_name': 'str',
        'parent_filter_field': 'str',
        'column_type': 'ColumnTypeEnum',
        'column_aggregate': 'ColumnAggEnum',
        'choices': 'dict(str, str)',
        'choice_parents': 'dict(str, str)',
        'numeric_values': 'dict(str, DecimalNumber)',
        'read_only': 'bool',
        'required': 'bool',
        'percentage': 'bool',
        'decimals': 'int',
        'default_value': 'str',
        'allow_additions': 'bool',
        'plan_type_id': 'GloballyUniqueIdentifier',
        'writeable_plan_types': 'list[GloballyUniqueIdentifier]',
        'function': 'FieldFunction',
        'rollup_work_type': 'GloballyUniqueIdentifier',
        'rollup_aggregate': 'ColumnAggEnum',
        'rollup_lookup_field': 'str',
        'rollup_field': 'str',
        'rollup_filter': 'str',
        'calculations': 'list[ColumnCalculation]',
        'filter': 'TableFilter',
        'hidden': 'bool',
        'show_in_quick_start': 'bool'
    }

    attribute_map = {
        'order': 'Order',
        'display_name': 'DisplayName',
        'description': 'Description',
        'internal_name': 'InternalName',
        'parent_filter_field': 'ParentFilterField',
        'column_type': 'ColumnType',
        'column_aggregate': 'ColumnAggregate',
        'choices': 'Choices',
        'choice_parents': 'ChoiceParents',
        'numeric_values': 'NumericValues',
        'read_only': 'ReadOnly',
        'required': 'Required',
        'percentage': 'Percentage',
        'decimals': 'Decimals',
        'default_value': 'DefaultValue',
        'allow_additions': 'AllowAdditions',
        'plan_type_id': 'PlanTypeId',
        'writeable_plan_types': 'WriteablePlanTypes',
        'function': 'Function',
        'rollup_work_type': 'RollupWorkType',
        'rollup_aggregate': 'RollupAggregate',
        'rollup_lookup_field': 'RollupLookupField',
        'rollup_field': 'RollupField',
        'rollup_filter': 'RollupFilter',
        'calculations': 'Calculations',
        'filter': 'Filter',
        'hidden': 'Hidden',
        'show_in_quick_start': 'ShowInQuickStart'
    }

    def __init__(self, order=None, display_name=None, description=None, internal_name=None, parent_filter_field=None, column_type=None, column_aggregate=None, choices=None, choice_parents=None, numeric_values=None, read_only=None, required=None, percentage=None, decimals=None, default_value=None, allow_additions=None, plan_type_id=None, writeable_plan_types=None, function=None, rollup_work_type=None, rollup_aggregate=None, rollup_lookup_field=None, rollup_field=None, rollup_filter=None, calculations=None, filter=None, hidden=None, show_in_quick_start=None):  # noqa: E501
        """PlannerColumnPost - a model defined in Swagger"""  # noqa: E501
        self._order = None
        self._display_name = None
        self._description = None
        self._internal_name = None
        self._parent_filter_field = None
        self._column_type = None
        self._column_aggregate = None
        self._choices = None
        self._choice_parents = None
        self._numeric_values = None
        self._read_only = None
        self._required = None
        self._percentage = None
        self._decimals = None
        self._default_value = None
        self._allow_additions = None
        self._plan_type_id = None
        self._writeable_plan_types = None
        self._function = None
        self._rollup_work_type = None
        self._rollup_aggregate = None
        self._rollup_lookup_field = None
        self._rollup_field = None
        self._rollup_filter = None
        self._calculations = None
        self._filter = None
        self._hidden = None
        self._show_in_quick_start = None
        self.discriminator = None
        if order is not None:
            self.order = order
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if internal_name is not None:
            self.internal_name = internal_name
        if parent_filter_field is not None:
            self.parent_filter_field = parent_filter_field
        if column_type is not None:
            self.column_type = column_type
        if column_aggregate is not None:
            self.column_aggregate = column_aggregate
        if choices is not None:
            self.choices = choices
        if choice_parents is not None:
            self.choice_parents = choice_parents
        if numeric_values is not None:
            self.numeric_values = numeric_values
        if read_only is not None:
            self.read_only = read_only
        if required is not None:
            self.required = required
        if percentage is not None:
            self.percentage = percentage
        if decimals is not None:
            self.decimals = decimals
        if default_value is not None:
            self.default_value = default_value
        if allow_additions is not None:
            self.allow_additions = allow_additions
        if plan_type_id is not None:
            self.plan_type_id = plan_type_id
        if writeable_plan_types is not None:
            self.writeable_plan_types = writeable_plan_types
        if function is not None:
            self.function = function
        if rollup_work_type is not None:
            self.rollup_work_type = rollup_work_type
        if rollup_aggregate is not None:
            self.rollup_aggregate = rollup_aggregate
        if rollup_lookup_field is not None:
            self.rollup_lookup_field = rollup_lookup_field
        if rollup_field is not None:
            self.rollup_field = rollup_field
        if rollup_filter is not None:
            self.rollup_filter = rollup_filter
        if calculations is not None:
            self.calculations = calculations
        if filter is not None:
            self.filter = filter
        if hidden is not None:
            self.hidden = hidden
        if show_in_quick_start is not None:
            self.show_in_quick_start = show_in_quick_start

    @property
    def order(self):
        """Gets the order of this PlannerColumnPost.  # noqa: E501


        :return: The order of this PlannerColumnPost.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PlannerColumnPost.


        :param order: The order of this PlannerColumnPost.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def display_name(self):
        """Gets the display_name of this PlannerColumnPost.  # noqa: E501


        :return: The display_name of this PlannerColumnPost.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PlannerColumnPost.


        :param display_name: The display_name of this PlannerColumnPost.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this PlannerColumnPost.  # noqa: E501


        :return: The description of this PlannerColumnPost.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlannerColumnPost.


        :param description: The description of this PlannerColumnPost.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def internal_name(self):
        """Gets the internal_name of this PlannerColumnPost.  # noqa: E501


        :return: The internal_name of this PlannerColumnPost.  # noqa: E501
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this PlannerColumnPost.


        :param internal_name: The internal_name of this PlannerColumnPost.  # noqa: E501
        :type: str
        """

        self._internal_name = internal_name

    @property
    def parent_filter_field(self):
        """Gets the parent_filter_field of this PlannerColumnPost.  # noqa: E501


        :return: The parent_filter_field of this PlannerColumnPost.  # noqa: E501
        :rtype: str
        """
        return self._parent_filter_field

    @parent_filter_field.setter
    def parent_filter_field(self, parent_filter_field):
        """Sets the parent_filter_field of this PlannerColumnPost.


        :param parent_filter_field: The parent_filter_field of this PlannerColumnPost.  # noqa: E501
        :type: str
        """

        self._parent_filter_field = parent_filter_field

    @property
    def column_type(self):
        """Gets the column_type of this PlannerColumnPost.  # noqa: E501


        :return: The column_type of this PlannerColumnPost.  # noqa: E501
        :rtype: ColumnTypeEnum
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """Sets the column_type of this PlannerColumnPost.


        :param column_type: The column_type of this PlannerColumnPost.  # noqa: E501
        :type: ColumnTypeEnum
        """

        self._column_type = column_type

    @property
    def column_aggregate(self):
        """Gets the column_aggregate of this PlannerColumnPost.  # noqa: E501


        :return: The column_aggregate of this PlannerColumnPost.  # noqa: E501
        :rtype: ColumnAggEnum
        """
        return self._column_aggregate

    @column_aggregate.setter
    def column_aggregate(self, column_aggregate):
        """Sets the column_aggregate of this PlannerColumnPost.


        :param column_aggregate: The column_aggregate of this PlannerColumnPost.  # noqa: E501
        :type: ColumnAggEnum
        """

        self._column_aggregate = column_aggregate

    @property
    def choices(self):
        """Gets the choices of this PlannerColumnPost.  # noqa: E501


        :return: The choices of this PlannerColumnPost.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this PlannerColumnPost.


        :param choices: The choices of this PlannerColumnPost.  # noqa: E501
        :type: dict(str, str)
        """

        self._choices = choices

    @property
    def choice_parents(self):
        """Gets the choice_parents of this PlannerColumnPost.  # noqa: E501


        :return: The choice_parents of this PlannerColumnPost.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._choice_parents

    @choice_parents.setter
    def choice_parents(self, choice_parents):
        """Sets the choice_parents of this PlannerColumnPost.


        :param choice_parents: The choice_parents of this PlannerColumnPost.  # noqa: E501
        :type: dict(str, str)
        """

        self._choice_parents = choice_parents

    @property
    def numeric_values(self):
        """Gets the numeric_values of this PlannerColumnPost.  # noqa: E501


        :return: The numeric_values of this PlannerColumnPost.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._numeric_values

    @numeric_values.setter
    def numeric_values(self, numeric_values):
        """Sets the numeric_values of this PlannerColumnPost.


        :param numeric_values: The numeric_values of this PlannerColumnPost.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._numeric_values = numeric_values

    @property
    def read_only(self):
        """Gets the read_only of this PlannerColumnPost.  # noqa: E501


        :return: The read_only of this PlannerColumnPost.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this PlannerColumnPost.


        :param read_only: The read_only of this PlannerColumnPost.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def required(self):
        """Gets the required of this PlannerColumnPost.  # noqa: E501


        :return: The required of this PlannerColumnPost.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this PlannerColumnPost.


        :param required: The required of this PlannerColumnPost.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def percentage(self):
        """Gets the percentage of this PlannerColumnPost.  # noqa: E501


        :return: The percentage of this PlannerColumnPost.  # noqa: E501
        :rtype: bool
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this PlannerColumnPost.


        :param percentage: The percentage of this PlannerColumnPost.  # noqa: E501
        :type: bool
        """

        self._percentage = percentage

    @property
    def decimals(self):
        """Gets the decimals of this PlannerColumnPost.  # noqa: E501


        :return: The decimals of this PlannerColumnPost.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this PlannerColumnPost.


        :param decimals: The decimals of this PlannerColumnPost.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def default_value(self):
        """Gets the default_value of this PlannerColumnPost.  # noqa: E501


        :return: The default_value of this PlannerColumnPost.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this PlannerColumnPost.


        :param default_value: The default_value of this PlannerColumnPost.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def allow_additions(self):
        """Gets the allow_additions of this PlannerColumnPost.  # noqa: E501


        :return: The allow_additions of this PlannerColumnPost.  # noqa: E501
        :rtype: bool
        """
        return self._allow_additions

    @allow_additions.setter
    def allow_additions(self, allow_additions):
        """Sets the allow_additions of this PlannerColumnPost.


        :param allow_additions: The allow_additions of this PlannerColumnPost.  # noqa: E501
        :type: bool
        """

        self._allow_additions = allow_additions

    @property
    def plan_type_id(self):
        """Gets the plan_type_id of this PlannerColumnPost.  # noqa: E501


        :return: The plan_type_id of this PlannerColumnPost.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_type_id

    @plan_type_id.setter
    def plan_type_id(self, plan_type_id):
        """Sets the plan_type_id of this PlannerColumnPost.


        :param plan_type_id: The plan_type_id of this PlannerColumnPost.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_type_id = plan_type_id

    @property
    def writeable_plan_types(self):
        """Gets the writeable_plan_types of this PlannerColumnPost.  # noqa: E501


        :return: The writeable_plan_types of this PlannerColumnPost.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._writeable_plan_types

    @writeable_plan_types.setter
    def writeable_plan_types(self, writeable_plan_types):
        """Sets the writeable_plan_types of this PlannerColumnPost.


        :param writeable_plan_types: The writeable_plan_types of this PlannerColumnPost.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._writeable_plan_types = writeable_plan_types

    @property
    def function(self):
        """Gets the function of this PlannerColumnPost.  # noqa: E501


        :return: The function of this PlannerColumnPost.  # noqa: E501
        :rtype: FieldFunction
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this PlannerColumnPost.


        :param function: The function of this PlannerColumnPost.  # noqa: E501
        :type: FieldFunction
        """

        self._function = function

    @property
    def rollup_work_type(self):
        """Gets the rollup_work_type of this PlannerColumnPost.  # noqa: E501


        :return: The rollup_work_type of this PlannerColumnPost.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._rollup_work_type

    @rollup_work_type.setter
    def rollup_work_type(self, rollup_work_type):
        """Sets the rollup_work_type of this PlannerColumnPost.


        :param rollup_work_type: The rollup_work_type of this PlannerColumnPost.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._rollup_work_type = rollup_work_type

    @property
    def rollup_aggregate(self):
        """Gets the rollup_aggregate of this PlannerColumnPost.  # noqa: E501


        :return: The rollup_aggregate of this PlannerColumnPost.  # noqa: E501
        :rtype: ColumnAggEnum
        """
        return self._rollup_aggregate

    @rollup_aggregate.setter
    def rollup_aggregate(self, rollup_aggregate):
        """Sets the rollup_aggregate of this PlannerColumnPost.


        :param rollup_aggregate: The rollup_aggregate of this PlannerColumnPost.  # noqa: E501
        :type: ColumnAggEnum
        """

        self._rollup_aggregate = rollup_aggregate

    @property
    def rollup_lookup_field(self):
        """Gets the rollup_lookup_field of this PlannerColumnPost.  # noqa: E501


        :return: The rollup_lookup_field of this PlannerColumnPost.  # noqa: E501
        :rtype: str
        """
        return self._rollup_lookup_field

    @rollup_lookup_field.setter
    def rollup_lookup_field(self, rollup_lookup_field):
        """Sets the rollup_lookup_field of this PlannerColumnPost.


        :param rollup_lookup_field: The rollup_lookup_field of this PlannerColumnPost.  # noqa: E501
        :type: str
        """

        self._rollup_lookup_field = rollup_lookup_field

    @property
    def rollup_field(self):
        """Gets the rollup_field of this PlannerColumnPost.  # noqa: E501


        :return: The rollup_field of this PlannerColumnPost.  # noqa: E501
        :rtype: str
        """
        return self._rollup_field

    @rollup_field.setter
    def rollup_field(self, rollup_field):
        """Sets the rollup_field of this PlannerColumnPost.


        :param rollup_field: The rollup_field of this PlannerColumnPost.  # noqa: E501
        :type: str
        """

        self._rollup_field = rollup_field

    @property
    def rollup_filter(self):
        """Gets the rollup_filter of this PlannerColumnPost.  # noqa: E501


        :return: The rollup_filter of this PlannerColumnPost.  # noqa: E501
        :rtype: str
        """
        return self._rollup_filter

    @rollup_filter.setter
    def rollup_filter(self, rollup_filter):
        """Sets the rollup_filter of this PlannerColumnPost.


        :param rollup_filter: The rollup_filter of this PlannerColumnPost.  # noqa: E501
        :type: str
        """

        self._rollup_filter = rollup_filter

    @property
    def calculations(self):
        """Gets the calculations of this PlannerColumnPost.  # noqa: E501


        :return: The calculations of this PlannerColumnPost.  # noqa: E501
        :rtype: list[ColumnCalculation]
        """
        return self._calculations

    @calculations.setter
    def calculations(self, calculations):
        """Sets the calculations of this PlannerColumnPost.


        :param calculations: The calculations of this PlannerColumnPost.  # noqa: E501
        :type: list[ColumnCalculation]
        """

        self._calculations = calculations

    @property
    def filter(self):
        """Gets the filter of this PlannerColumnPost.  # noqa: E501


        :return: The filter of this PlannerColumnPost.  # noqa: E501
        :rtype: TableFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this PlannerColumnPost.


        :param filter: The filter of this PlannerColumnPost.  # noqa: E501
        :type: TableFilter
        """

        self._filter = filter

    @property
    def hidden(self):
        """Gets the hidden of this PlannerColumnPost.  # noqa: E501


        :return: The hidden of this PlannerColumnPost.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this PlannerColumnPost.


        :param hidden: The hidden of this PlannerColumnPost.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def show_in_quick_start(self):
        """Gets the show_in_quick_start of this PlannerColumnPost.  # noqa: E501


        :return: The show_in_quick_start of this PlannerColumnPost.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_quick_start

    @show_in_quick_start.setter
    def show_in_quick_start(self, show_in_quick_start):
        """Sets the show_in_quick_start of this PlannerColumnPost.


        :param show_in_quick_start: The show_in_quick_start of this PlannerColumnPost.  # noqa: E501
        :type: bool
        """

        self._show_in_quick_start = show_in_quick_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlannerColumnPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlannerColumnPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
