# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditFinancialPlansQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'user_id': 'GloballyUniqueIdentifier',
        'fields': 'str',
        'columns': 'list[str]',
        'date_between_start': 'date',
        'date_between_end': 'date',
        'hour_offset': 'int',
        'plan_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'action': 'Action',
        'user_id': 'UserId',
        'fields': 'Fields',
        'columns': 'Columns',
        'date_between_start': 'DateBetweenStart',
        'date_between_end': 'DateBetweenEnd',
        'hour_offset': 'HourOffset',
        'plan_id': 'PlanId'
    }

    def __init__(self, action=None, user_id=None, fields=None, columns=None, date_between_start=None, date_between_end=None, hour_offset=None, plan_id=None):  # noqa: E501
        """AuditFinancialPlansQuery - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._user_id = None
        self._fields = None
        self._columns = None
        self._date_between_start = None
        self._date_between_end = None
        self._hour_offset = None
        self._plan_id = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if user_id is not None:
            self.user_id = user_id
        if fields is not None:
            self.fields = fields
        if columns is not None:
            self.columns = columns
        if date_between_start is not None:
            self.date_between_start = date_between_start
        if date_between_end is not None:
            self.date_between_end = date_between_end
        if hour_offset is not None:
            self.hour_offset = hour_offset
        if plan_id is not None:
            self.plan_id = plan_id

    @property
    def action(self):
        """Gets the action of this AuditFinancialPlansQuery.  # noqa: E501


        :return: The action of this AuditFinancialPlansQuery.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditFinancialPlansQuery.


        :param action: The action of this AuditFinancialPlansQuery.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def user_id(self):
        """Gets the user_id of this AuditFinancialPlansQuery.  # noqa: E501


        :return: The user_id of this AuditFinancialPlansQuery.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditFinancialPlansQuery.


        :param user_id: The user_id of this AuditFinancialPlansQuery.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._user_id = user_id

    @property
    def fields(self):
        """Gets the fields of this AuditFinancialPlansQuery.  # noqa: E501


        :return: The fields of this AuditFinancialPlansQuery.  # noqa: E501
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this AuditFinancialPlansQuery.


        :param fields: The fields of this AuditFinancialPlansQuery.  # noqa: E501
        :type: str
        """

        self._fields = fields

    @property
    def columns(self):
        """Gets the columns of this AuditFinancialPlansQuery.  # noqa: E501


        :return: The columns of this AuditFinancialPlansQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this AuditFinancialPlansQuery.


        :param columns: The columns of this AuditFinancialPlansQuery.  # noqa: E501
        :type: list[str]
        """

        self._columns = columns

    @property
    def date_between_start(self):
        """Gets the date_between_start of this AuditFinancialPlansQuery.  # noqa: E501


        :return: The date_between_start of this AuditFinancialPlansQuery.  # noqa: E501
        :rtype: date
        """
        return self._date_between_start

    @date_between_start.setter
    def date_between_start(self, date_between_start):
        """Sets the date_between_start of this AuditFinancialPlansQuery.


        :param date_between_start: The date_between_start of this AuditFinancialPlansQuery.  # noqa: E501
        :type: date
        """

        self._date_between_start = date_between_start

    @property
    def date_between_end(self):
        """Gets the date_between_end of this AuditFinancialPlansQuery.  # noqa: E501


        :return: The date_between_end of this AuditFinancialPlansQuery.  # noqa: E501
        :rtype: date
        """
        return self._date_between_end

    @date_between_end.setter
    def date_between_end(self, date_between_end):
        """Sets the date_between_end of this AuditFinancialPlansQuery.


        :param date_between_end: The date_between_end of this AuditFinancialPlansQuery.  # noqa: E501
        :type: date
        """

        self._date_between_end = date_between_end

    @property
    def hour_offset(self):
        """Gets the hour_offset of this AuditFinancialPlansQuery.  # noqa: E501


        :return: The hour_offset of this AuditFinancialPlansQuery.  # noqa: E501
        :rtype: int
        """
        return self._hour_offset

    @hour_offset.setter
    def hour_offset(self, hour_offset):
        """Sets the hour_offset of this AuditFinancialPlansQuery.


        :param hour_offset: The hour_offset of this AuditFinancialPlansQuery.  # noqa: E501
        :type: int
        """

        self._hour_offset = hour_offset

    @property
    def plan_id(self):
        """Gets the plan_id of this AuditFinancialPlansQuery.  # noqa: E501


        :return: The plan_id of this AuditFinancialPlansQuery.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this AuditFinancialPlansQuery.


        :param plan_id: The plan_id of this AuditFinancialPlansQuery.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_id = plan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditFinancialPlansQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditFinancialPlansQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
