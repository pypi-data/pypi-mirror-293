# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NumberFormatInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_decimal_digits': 'int',
        'currency_decimal_separator': 'str',
        'is_read_only': 'bool',
        'currency_group_sizes': 'list[int]',
        'number_group_sizes': 'list[int]',
        'percent_group_sizes': 'list[int]',
        'currency_group_separator': 'str',
        'currency_symbol': 'str',
        'na_n_symbol': 'str',
        'currency_negative_pattern': 'int',
        'number_negative_pattern': 'int',
        'percent_positive_pattern': 'int',
        'percent_negative_pattern': 'int',
        'negative_infinity_symbol': 'str',
        'negative_sign': 'str',
        'number_decimal_digits': 'int',
        'number_decimal_separator': 'str',
        'number_group_separator': 'str',
        'currency_positive_pattern': 'int',
        'positive_infinity_symbol': 'str',
        'positive_sign': 'str',
        'percent_decimal_digits': 'int',
        'percent_decimal_separator': 'str',
        'percent_group_separator': 'str',
        'percent_symbol': 'str',
        'per_mille_symbol': 'str',
        'native_digits': 'list[str]',
        'digit_substitution': 'DigitShapes'
    }

    attribute_map = {
        'currency_decimal_digits': 'CurrencyDecimalDigits',
        'currency_decimal_separator': 'CurrencyDecimalSeparator',
        'is_read_only': 'IsReadOnly',
        'currency_group_sizes': 'CurrencyGroupSizes',
        'number_group_sizes': 'NumberGroupSizes',
        'percent_group_sizes': 'PercentGroupSizes',
        'currency_group_separator': 'CurrencyGroupSeparator',
        'currency_symbol': 'CurrencySymbol',
        'na_n_symbol': 'NaNSymbol',
        'currency_negative_pattern': 'CurrencyNegativePattern',
        'number_negative_pattern': 'NumberNegativePattern',
        'percent_positive_pattern': 'PercentPositivePattern',
        'percent_negative_pattern': 'PercentNegativePattern',
        'negative_infinity_symbol': 'NegativeInfinitySymbol',
        'negative_sign': 'NegativeSign',
        'number_decimal_digits': 'NumberDecimalDigits',
        'number_decimal_separator': 'NumberDecimalSeparator',
        'number_group_separator': 'NumberGroupSeparator',
        'currency_positive_pattern': 'CurrencyPositivePattern',
        'positive_infinity_symbol': 'PositiveInfinitySymbol',
        'positive_sign': 'PositiveSign',
        'percent_decimal_digits': 'PercentDecimalDigits',
        'percent_decimal_separator': 'PercentDecimalSeparator',
        'percent_group_separator': 'PercentGroupSeparator',
        'percent_symbol': 'PercentSymbol',
        'per_mille_symbol': 'PerMilleSymbol',
        'native_digits': 'NativeDigits',
        'digit_substitution': 'DigitSubstitution'
    }

    def __init__(self, currency_decimal_digits=None, currency_decimal_separator=None, is_read_only=None, currency_group_sizes=None, number_group_sizes=None, percent_group_sizes=None, currency_group_separator=None, currency_symbol=None, na_n_symbol=None, currency_negative_pattern=None, number_negative_pattern=None, percent_positive_pattern=None, percent_negative_pattern=None, negative_infinity_symbol=None, negative_sign=None, number_decimal_digits=None, number_decimal_separator=None, number_group_separator=None, currency_positive_pattern=None, positive_infinity_symbol=None, positive_sign=None, percent_decimal_digits=None, percent_decimal_separator=None, percent_group_separator=None, percent_symbol=None, per_mille_symbol=None, native_digits=None, digit_substitution=None):  # noqa: E501
        """NumberFormatInfo - a model defined in Swagger"""  # noqa: E501
        self._currency_decimal_digits = None
        self._currency_decimal_separator = None
        self._is_read_only = None
        self._currency_group_sizes = None
        self._number_group_sizes = None
        self._percent_group_sizes = None
        self._currency_group_separator = None
        self._currency_symbol = None
        self._na_n_symbol = None
        self._currency_negative_pattern = None
        self._number_negative_pattern = None
        self._percent_positive_pattern = None
        self._percent_negative_pattern = None
        self._negative_infinity_symbol = None
        self._negative_sign = None
        self._number_decimal_digits = None
        self._number_decimal_separator = None
        self._number_group_separator = None
        self._currency_positive_pattern = None
        self._positive_infinity_symbol = None
        self._positive_sign = None
        self._percent_decimal_digits = None
        self._percent_decimal_separator = None
        self._percent_group_separator = None
        self._percent_symbol = None
        self._per_mille_symbol = None
        self._native_digits = None
        self._digit_substitution = None
        self.discriminator = None
        if currency_decimal_digits is not None:
            self.currency_decimal_digits = currency_decimal_digits
        if currency_decimal_separator is not None:
            self.currency_decimal_separator = currency_decimal_separator
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if currency_group_sizes is not None:
            self.currency_group_sizes = currency_group_sizes
        if number_group_sizes is not None:
            self.number_group_sizes = number_group_sizes
        if percent_group_sizes is not None:
            self.percent_group_sizes = percent_group_sizes
        if currency_group_separator is not None:
            self.currency_group_separator = currency_group_separator
        if currency_symbol is not None:
            self.currency_symbol = currency_symbol
        if na_n_symbol is not None:
            self.na_n_symbol = na_n_symbol
        if currency_negative_pattern is not None:
            self.currency_negative_pattern = currency_negative_pattern
        if number_negative_pattern is not None:
            self.number_negative_pattern = number_negative_pattern
        if percent_positive_pattern is not None:
            self.percent_positive_pattern = percent_positive_pattern
        if percent_negative_pattern is not None:
            self.percent_negative_pattern = percent_negative_pattern
        if negative_infinity_symbol is not None:
            self.negative_infinity_symbol = negative_infinity_symbol
        if negative_sign is not None:
            self.negative_sign = negative_sign
        if number_decimal_digits is not None:
            self.number_decimal_digits = number_decimal_digits
        if number_decimal_separator is not None:
            self.number_decimal_separator = number_decimal_separator
        if number_group_separator is not None:
            self.number_group_separator = number_group_separator
        if currency_positive_pattern is not None:
            self.currency_positive_pattern = currency_positive_pattern
        if positive_infinity_symbol is not None:
            self.positive_infinity_symbol = positive_infinity_symbol
        if positive_sign is not None:
            self.positive_sign = positive_sign
        if percent_decimal_digits is not None:
            self.percent_decimal_digits = percent_decimal_digits
        if percent_decimal_separator is not None:
            self.percent_decimal_separator = percent_decimal_separator
        if percent_group_separator is not None:
            self.percent_group_separator = percent_group_separator
        if percent_symbol is not None:
            self.percent_symbol = percent_symbol
        if per_mille_symbol is not None:
            self.per_mille_symbol = per_mille_symbol
        if native_digits is not None:
            self.native_digits = native_digits
        if digit_substitution is not None:
            self.digit_substitution = digit_substitution

    @property
    def currency_decimal_digits(self):
        """Gets the currency_decimal_digits of this NumberFormatInfo.  # noqa: E501


        :return: The currency_decimal_digits of this NumberFormatInfo.  # noqa: E501
        :rtype: int
        """
        return self._currency_decimal_digits

    @currency_decimal_digits.setter
    def currency_decimal_digits(self, currency_decimal_digits):
        """Sets the currency_decimal_digits of this NumberFormatInfo.


        :param currency_decimal_digits: The currency_decimal_digits of this NumberFormatInfo.  # noqa: E501
        :type: int
        """

        self._currency_decimal_digits = currency_decimal_digits

    @property
    def currency_decimal_separator(self):
        """Gets the currency_decimal_separator of this NumberFormatInfo.  # noqa: E501


        :return: The currency_decimal_separator of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_decimal_separator

    @currency_decimal_separator.setter
    def currency_decimal_separator(self, currency_decimal_separator):
        """Sets the currency_decimal_separator of this NumberFormatInfo.


        :param currency_decimal_separator: The currency_decimal_separator of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._currency_decimal_separator = currency_decimal_separator

    @property
    def is_read_only(self):
        """Gets the is_read_only of this NumberFormatInfo.  # noqa: E501


        :return: The is_read_only of this NumberFormatInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this NumberFormatInfo.


        :param is_read_only: The is_read_only of this NumberFormatInfo.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def currency_group_sizes(self):
        """Gets the currency_group_sizes of this NumberFormatInfo.  # noqa: E501


        :return: The currency_group_sizes of this NumberFormatInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._currency_group_sizes

    @currency_group_sizes.setter
    def currency_group_sizes(self, currency_group_sizes):
        """Sets the currency_group_sizes of this NumberFormatInfo.


        :param currency_group_sizes: The currency_group_sizes of this NumberFormatInfo.  # noqa: E501
        :type: list[int]
        """

        self._currency_group_sizes = currency_group_sizes

    @property
    def number_group_sizes(self):
        """Gets the number_group_sizes of this NumberFormatInfo.  # noqa: E501


        :return: The number_group_sizes of this NumberFormatInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_group_sizes

    @number_group_sizes.setter
    def number_group_sizes(self, number_group_sizes):
        """Sets the number_group_sizes of this NumberFormatInfo.


        :param number_group_sizes: The number_group_sizes of this NumberFormatInfo.  # noqa: E501
        :type: list[int]
        """

        self._number_group_sizes = number_group_sizes

    @property
    def percent_group_sizes(self):
        """Gets the percent_group_sizes of this NumberFormatInfo.  # noqa: E501


        :return: The percent_group_sizes of this NumberFormatInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._percent_group_sizes

    @percent_group_sizes.setter
    def percent_group_sizes(self, percent_group_sizes):
        """Sets the percent_group_sizes of this NumberFormatInfo.


        :param percent_group_sizes: The percent_group_sizes of this NumberFormatInfo.  # noqa: E501
        :type: list[int]
        """

        self._percent_group_sizes = percent_group_sizes

    @property
    def currency_group_separator(self):
        """Gets the currency_group_separator of this NumberFormatInfo.  # noqa: E501


        :return: The currency_group_separator of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_group_separator

    @currency_group_separator.setter
    def currency_group_separator(self, currency_group_separator):
        """Sets the currency_group_separator of this NumberFormatInfo.


        :param currency_group_separator: The currency_group_separator of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._currency_group_separator = currency_group_separator

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this NumberFormatInfo.  # noqa: E501


        :return: The currency_symbol of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this NumberFormatInfo.


        :param currency_symbol: The currency_symbol of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._currency_symbol = currency_symbol

    @property
    def na_n_symbol(self):
        """Gets the na_n_symbol of this NumberFormatInfo.  # noqa: E501


        :return: The na_n_symbol of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._na_n_symbol

    @na_n_symbol.setter
    def na_n_symbol(self, na_n_symbol):
        """Sets the na_n_symbol of this NumberFormatInfo.


        :param na_n_symbol: The na_n_symbol of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._na_n_symbol = na_n_symbol

    @property
    def currency_negative_pattern(self):
        """Gets the currency_negative_pattern of this NumberFormatInfo.  # noqa: E501


        :return: The currency_negative_pattern of this NumberFormatInfo.  # noqa: E501
        :rtype: int
        """
        return self._currency_negative_pattern

    @currency_negative_pattern.setter
    def currency_negative_pattern(self, currency_negative_pattern):
        """Sets the currency_negative_pattern of this NumberFormatInfo.


        :param currency_negative_pattern: The currency_negative_pattern of this NumberFormatInfo.  # noqa: E501
        :type: int
        """

        self._currency_negative_pattern = currency_negative_pattern

    @property
    def number_negative_pattern(self):
        """Gets the number_negative_pattern of this NumberFormatInfo.  # noqa: E501


        :return: The number_negative_pattern of this NumberFormatInfo.  # noqa: E501
        :rtype: int
        """
        return self._number_negative_pattern

    @number_negative_pattern.setter
    def number_negative_pattern(self, number_negative_pattern):
        """Sets the number_negative_pattern of this NumberFormatInfo.


        :param number_negative_pattern: The number_negative_pattern of this NumberFormatInfo.  # noqa: E501
        :type: int
        """

        self._number_negative_pattern = number_negative_pattern

    @property
    def percent_positive_pattern(self):
        """Gets the percent_positive_pattern of this NumberFormatInfo.  # noqa: E501


        :return: The percent_positive_pattern of this NumberFormatInfo.  # noqa: E501
        :rtype: int
        """
        return self._percent_positive_pattern

    @percent_positive_pattern.setter
    def percent_positive_pattern(self, percent_positive_pattern):
        """Sets the percent_positive_pattern of this NumberFormatInfo.


        :param percent_positive_pattern: The percent_positive_pattern of this NumberFormatInfo.  # noqa: E501
        :type: int
        """

        self._percent_positive_pattern = percent_positive_pattern

    @property
    def percent_negative_pattern(self):
        """Gets the percent_negative_pattern of this NumberFormatInfo.  # noqa: E501


        :return: The percent_negative_pattern of this NumberFormatInfo.  # noqa: E501
        :rtype: int
        """
        return self._percent_negative_pattern

    @percent_negative_pattern.setter
    def percent_negative_pattern(self, percent_negative_pattern):
        """Sets the percent_negative_pattern of this NumberFormatInfo.


        :param percent_negative_pattern: The percent_negative_pattern of this NumberFormatInfo.  # noqa: E501
        :type: int
        """

        self._percent_negative_pattern = percent_negative_pattern

    @property
    def negative_infinity_symbol(self):
        """Gets the negative_infinity_symbol of this NumberFormatInfo.  # noqa: E501


        :return: The negative_infinity_symbol of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._negative_infinity_symbol

    @negative_infinity_symbol.setter
    def negative_infinity_symbol(self, negative_infinity_symbol):
        """Sets the negative_infinity_symbol of this NumberFormatInfo.


        :param negative_infinity_symbol: The negative_infinity_symbol of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._negative_infinity_symbol = negative_infinity_symbol

    @property
    def negative_sign(self):
        """Gets the negative_sign of this NumberFormatInfo.  # noqa: E501


        :return: The negative_sign of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._negative_sign

    @negative_sign.setter
    def negative_sign(self, negative_sign):
        """Sets the negative_sign of this NumberFormatInfo.


        :param negative_sign: The negative_sign of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._negative_sign = negative_sign

    @property
    def number_decimal_digits(self):
        """Gets the number_decimal_digits of this NumberFormatInfo.  # noqa: E501


        :return: The number_decimal_digits of this NumberFormatInfo.  # noqa: E501
        :rtype: int
        """
        return self._number_decimal_digits

    @number_decimal_digits.setter
    def number_decimal_digits(self, number_decimal_digits):
        """Sets the number_decimal_digits of this NumberFormatInfo.


        :param number_decimal_digits: The number_decimal_digits of this NumberFormatInfo.  # noqa: E501
        :type: int
        """

        self._number_decimal_digits = number_decimal_digits

    @property
    def number_decimal_separator(self):
        """Gets the number_decimal_separator of this NumberFormatInfo.  # noqa: E501


        :return: The number_decimal_separator of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._number_decimal_separator

    @number_decimal_separator.setter
    def number_decimal_separator(self, number_decimal_separator):
        """Sets the number_decimal_separator of this NumberFormatInfo.


        :param number_decimal_separator: The number_decimal_separator of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._number_decimal_separator = number_decimal_separator

    @property
    def number_group_separator(self):
        """Gets the number_group_separator of this NumberFormatInfo.  # noqa: E501


        :return: The number_group_separator of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._number_group_separator

    @number_group_separator.setter
    def number_group_separator(self, number_group_separator):
        """Sets the number_group_separator of this NumberFormatInfo.


        :param number_group_separator: The number_group_separator of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._number_group_separator = number_group_separator

    @property
    def currency_positive_pattern(self):
        """Gets the currency_positive_pattern of this NumberFormatInfo.  # noqa: E501


        :return: The currency_positive_pattern of this NumberFormatInfo.  # noqa: E501
        :rtype: int
        """
        return self._currency_positive_pattern

    @currency_positive_pattern.setter
    def currency_positive_pattern(self, currency_positive_pattern):
        """Sets the currency_positive_pattern of this NumberFormatInfo.


        :param currency_positive_pattern: The currency_positive_pattern of this NumberFormatInfo.  # noqa: E501
        :type: int
        """

        self._currency_positive_pattern = currency_positive_pattern

    @property
    def positive_infinity_symbol(self):
        """Gets the positive_infinity_symbol of this NumberFormatInfo.  # noqa: E501


        :return: The positive_infinity_symbol of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._positive_infinity_symbol

    @positive_infinity_symbol.setter
    def positive_infinity_symbol(self, positive_infinity_symbol):
        """Sets the positive_infinity_symbol of this NumberFormatInfo.


        :param positive_infinity_symbol: The positive_infinity_symbol of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._positive_infinity_symbol = positive_infinity_symbol

    @property
    def positive_sign(self):
        """Gets the positive_sign of this NumberFormatInfo.  # noqa: E501


        :return: The positive_sign of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._positive_sign

    @positive_sign.setter
    def positive_sign(self, positive_sign):
        """Sets the positive_sign of this NumberFormatInfo.


        :param positive_sign: The positive_sign of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._positive_sign = positive_sign

    @property
    def percent_decimal_digits(self):
        """Gets the percent_decimal_digits of this NumberFormatInfo.  # noqa: E501


        :return: The percent_decimal_digits of this NumberFormatInfo.  # noqa: E501
        :rtype: int
        """
        return self._percent_decimal_digits

    @percent_decimal_digits.setter
    def percent_decimal_digits(self, percent_decimal_digits):
        """Sets the percent_decimal_digits of this NumberFormatInfo.


        :param percent_decimal_digits: The percent_decimal_digits of this NumberFormatInfo.  # noqa: E501
        :type: int
        """

        self._percent_decimal_digits = percent_decimal_digits

    @property
    def percent_decimal_separator(self):
        """Gets the percent_decimal_separator of this NumberFormatInfo.  # noqa: E501


        :return: The percent_decimal_separator of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._percent_decimal_separator

    @percent_decimal_separator.setter
    def percent_decimal_separator(self, percent_decimal_separator):
        """Sets the percent_decimal_separator of this NumberFormatInfo.


        :param percent_decimal_separator: The percent_decimal_separator of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._percent_decimal_separator = percent_decimal_separator

    @property
    def percent_group_separator(self):
        """Gets the percent_group_separator of this NumberFormatInfo.  # noqa: E501


        :return: The percent_group_separator of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._percent_group_separator

    @percent_group_separator.setter
    def percent_group_separator(self, percent_group_separator):
        """Sets the percent_group_separator of this NumberFormatInfo.


        :param percent_group_separator: The percent_group_separator of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._percent_group_separator = percent_group_separator

    @property
    def percent_symbol(self):
        """Gets the percent_symbol of this NumberFormatInfo.  # noqa: E501


        :return: The percent_symbol of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._percent_symbol

    @percent_symbol.setter
    def percent_symbol(self, percent_symbol):
        """Sets the percent_symbol of this NumberFormatInfo.


        :param percent_symbol: The percent_symbol of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._percent_symbol = percent_symbol

    @property
    def per_mille_symbol(self):
        """Gets the per_mille_symbol of this NumberFormatInfo.  # noqa: E501


        :return: The per_mille_symbol of this NumberFormatInfo.  # noqa: E501
        :rtype: str
        """
        return self._per_mille_symbol

    @per_mille_symbol.setter
    def per_mille_symbol(self, per_mille_symbol):
        """Sets the per_mille_symbol of this NumberFormatInfo.


        :param per_mille_symbol: The per_mille_symbol of this NumberFormatInfo.  # noqa: E501
        :type: str
        """

        self._per_mille_symbol = per_mille_symbol

    @property
    def native_digits(self):
        """Gets the native_digits of this NumberFormatInfo.  # noqa: E501


        :return: The native_digits of this NumberFormatInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._native_digits

    @native_digits.setter
    def native_digits(self, native_digits):
        """Sets the native_digits of this NumberFormatInfo.


        :param native_digits: The native_digits of this NumberFormatInfo.  # noqa: E501
        :type: list[str]
        """

        self._native_digits = native_digits

    @property
    def digit_substitution(self):
        """Gets the digit_substitution of this NumberFormatInfo.  # noqa: E501


        :return: The digit_substitution of this NumberFormatInfo.  # noqa: E501
        :rtype: DigitShapes
        """
        return self._digit_substitution

    @digit_substitution.setter
    def digit_substitution(self, digit_substitution):
        """Sets the digit_substitution of this NumberFormatInfo.


        :param digit_substitution: The digit_substitution of this NumberFormatInfo.  # noqa: E501
        :type: DigitShapes
        """

        self._digit_substitution = digit_substitution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NumberFormatInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NumberFormatInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
