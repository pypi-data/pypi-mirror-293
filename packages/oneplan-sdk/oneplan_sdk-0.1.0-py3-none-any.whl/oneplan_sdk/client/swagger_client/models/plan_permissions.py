# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_plan': 'bool',
        'archive_plan': 'bool',
        'delete_plan': 'bool'
    }

    attribute_map = {
        'add_plan': 'AddPlan',
        'archive_plan': 'ArchivePlan',
        'delete_plan': 'DeletePlan'
    }

    def __init__(self, add_plan=None, archive_plan=None, delete_plan=None):  # noqa: E501
        """PlanPermissions - a model defined in Swagger"""  # noqa: E501
        self._add_plan = None
        self._archive_plan = None
        self._delete_plan = None
        self.discriminator = None
        if add_plan is not None:
            self.add_plan = add_plan
        if archive_plan is not None:
            self.archive_plan = archive_plan
        if delete_plan is not None:
            self.delete_plan = delete_plan

    @property
    def add_plan(self):
        """Gets the add_plan of this PlanPermissions.  # noqa: E501


        :return: The add_plan of this PlanPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._add_plan

    @add_plan.setter
    def add_plan(self, add_plan):
        """Sets the add_plan of this PlanPermissions.


        :param add_plan: The add_plan of this PlanPermissions.  # noqa: E501
        :type: bool
        """

        self._add_plan = add_plan

    @property
    def archive_plan(self):
        """Gets the archive_plan of this PlanPermissions.  # noqa: E501


        :return: The archive_plan of this PlanPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._archive_plan

    @archive_plan.setter
    def archive_plan(self, archive_plan):
        """Sets the archive_plan of this PlanPermissions.


        :param archive_plan: The archive_plan of this PlanPermissions.  # noqa: E501
        :type: bool
        """

        self._archive_plan = archive_plan

    @property
    def delete_plan(self):
        """Gets the delete_plan of this PlanPermissions.  # noqa: E501


        :return: The delete_plan of this PlanPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._delete_plan

    @delete_plan.setter
    def delete_plan(self, delete_plan):
        """Sets the delete_plan of this PlanPermissions.


        :param delete_plan: The delete_plan of this PlanPermissions.  # noqa: E501
        :type: bool
        """

        self._delete_plan = delete_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanPermissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
