# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditResourcePlans(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_id': 'GloballyUniqueIdentifier',
        'cost_type_id': 'GloballyUniqueIdentifier',
        'resource_id': 'GloballyUniqueIdentifier',
        'row_id': 'GloballyUniqueIdentifier',
        'user_id': 'GloballyUniqueIdentifier',
        'auth_key': 'str',
        'timestamp': 'date',
        'action': 'str',
        'updated_column_values': 'dict(str, DecimalNumber)',
        'month_range_start': 'date',
        'month_range_end': 'date',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'plan_id': 'PlanId',
        'cost_type_id': 'CostTypeId',
        'resource_id': 'ResourceId',
        'row_id': 'RowId',
        'user_id': 'UserId',
        'auth_key': 'AuthKey',
        'timestamp': 'Timestamp',
        'action': 'Action',
        'updated_column_values': 'UpdatedColumnValues',
        'month_range_start': 'MonthRange_Start',
        'month_range_end': 'MonthRange_End',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, plan_id=None, cost_type_id=None, resource_id=None, row_id=None, user_id=None, auth_key=None, timestamp=None, action=None, updated_column_values=None, month_range_start=None, month_range_end=None, id=None, config_id=None):  # noqa: E501
        """AuditResourcePlans - a model defined in Swagger"""  # noqa: E501
        self._plan_id = None
        self._cost_type_id = None
        self._resource_id = None
        self._row_id = None
        self._user_id = None
        self._auth_key = None
        self._timestamp = None
        self._action = None
        self._updated_column_values = None
        self._month_range_start = None
        self._month_range_end = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if plan_id is not None:
            self.plan_id = plan_id
        if cost_type_id is not None:
            self.cost_type_id = cost_type_id
        if resource_id is not None:
            self.resource_id = resource_id
        if row_id is not None:
            self.row_id = row_id
        if user_id is not None:
            self.user_id = user_id
        if auth_key is not None:
            self.auth_key = auth_key
        if timestamp is not None:
            self.timestamp = timestamp
        if action is not None:
            self.action = action
        if updated_column_values is not None:
            self.updated_column_values = updated_column_values
        if month_range_start is not None:
            self.month_range_start = month_range_start
        if month_range_end is not None:
            self.month_range_end = month_range_end
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def plan_id(self):
        """Gets the plan_id of this AuditResourcePlans.  # noqa: E501


        :return: The plan_id of this AuditResourcePlans.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this AuditResourcePlans.


        :param plan_id: The plan_id of this AuditResourcePlans.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_id = plan_id

    @property
    def cost_type_id(self):
        """Gets the cost_type_id of this AuditResourcePlans.  # noqa: E501


        :return: The cost_type_id of this AuditResourcePlans.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._cost_type_id

    @cost_type_id.setter
    def cost_type_id(self, cost_type_id):
        """Sets the cost_type_id of this AuditResourcePlans.


        :param cost_type_id: The cost_type_id of this AuditResourcePlans.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._cost_type_id = cost_type_id

    @property
    def resource_id(self):
        """Gets the resource_id of this AuditResourcePlans.  # noqa: E501


        :return: The resource_id of this AuditResourcePlans.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AuditResourcePlans.


        :param resource_id: The resource_id of this AuditResourcePlans.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._resource_id = resource_id

    @property
    def row_id(self):
        """Gets the row_id of this AuditResourcePlans.  # noqa: E501


        :return: The row_id of this AuditResourcePlans.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._row_id

    @row_id.setter
    def row_id(self, row_id):
        """Sets the row_id of this AuditResourcePlans.


        :param row_id: The row_id of this AuditResourcePlans.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._row_id = row_id

    @property
    def user_id(self):
        """Gets the user_id of this AuditResourcePlans.  # noqa: E501


        :return: The user_id of this AuditResourcePlans.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditResourcePlans.


        :param user_id: The user_id of this AuditResourcePlans.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._user_id = user_id

    @property
    def auth_key(self):
        """Gets the auth_key of this AuditResourcePlans.  # noqa: E501


        :return: The auth_key of this AuditResourcePlans.  # noqa: E501
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this AuditResourcePlans.


        :param auth_key: The auth_key of this AuditResourcePlans.  # noqa: E501
        :type: str
        """

        self._auth_key = auth_key

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditResourcePlans.  # noqa: E501


        :return: The timestamp of this AuditResourcePlans.  # noqa: E501
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditResourcePlans.


        :param timestamp: The timestamp of this AuditResourcePlans.  # noqa: E501
        :type: date
        """

        self._timestamp = timestamp

    @property
    def action(self):
        """Gets the action of this AuditResourcePlans.  # noqa: E501


        :return: The action of this AuditResourcePlans.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditResourcePlans.


        :param action: The action of this AuditResourcePlans.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def updated_column_values(self):
        """Gets the updated_column_values of this AuditResourcePlans.  # noqa: E501


        :return: The updated_column_values of this AuditResourcePlans.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._updated_column_values

    @updated_column_values.setter
    def updated_column_values(self, updated_column_values):
        """Sets the updated_column_values of this AuditResourcePlans.


        :param updated_column_values: The updated_column_values of this AuditResourcePlans.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._updated_column_values = updated_column_values

    @property
    def month_range_start(self):
        """Gets the month_range_start of this AuditResourcePlans.  # noqa: E501


        :return: The month_range_start of this AuditResourcePlans.  # noqa: E501
        :rtype: date
        """
        return self._month_range_start

    @month_range_start.setter
    def month_range_start(self, month_range_start):
        """Sets the month_range_start of this AuditResourcePlans.


        :param month_range_start: The month_range_start of this AuditResourcePlans.  # noqa: E501
        :type: date
        """

        self._month_range_start = month_range_start

    @property
    def month_range_end(self):
        """Gets the month_range_end of this AuditResourcePlans.  # noqa: E501


        :return: The month_range_end of this AuditResourcePlans.  # noqa: E501
        :rtype: date
        """
        return self._month_range_end

    @month_range_end.setter
    def month_range_end(self, month_range_end):
        """Sets the month_range_end of this AuditResourcePlans.


        :param month_range_end: The month_range_end of this AuditResourcePlans.  # noqa: E501
        :type: date
        """

        self._month_range_end = month_range_end

    @property
    def id(self):
        """Gets the id of this AuditResourcePlans.  # noqa: E501


        :return: The id of this AuditResourcePlans.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditResourcePlans.


        :param id: The id of this AuditResourcePlans.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this AuditResourcePlans.  # noqa: E501


        :return: The config_id of this AuditResourcePlans.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this AuditResourcePlans.


        :param config_id: The config_id of this AuditResourcePlans.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditResourcePlans, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditResourcePlans):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
