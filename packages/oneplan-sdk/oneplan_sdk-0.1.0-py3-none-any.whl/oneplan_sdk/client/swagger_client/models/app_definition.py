# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'install_default': 'bool',
        'standard_app': 'bool',
        'class_name': 'str',
        'name': 'str',
        'description': 'str',
        'icon': 'str',
        'manufacturer': 'str',
        'app_buttons': 'list[AppButton]',
        'application_cost_type': 'AppCostType',
        'cost': 'DecimalNumber',
        'subscription': 'Object',
        'resource_fields': 'list[PlannerColumn]',
        'task_fields': 'list[PlannerColumn]',
        'plan_fields': 'list[PlannerColumn]',
        'work_types': 'list[WorkType]',
        'states': 'list[ControlState]',
        'views': 'list[PlannerView]',
        'default_properties': 'dict(str, Object)',
        'app_properties': 'list[AppProperty]',
        'hidden': 'bool',
        'show_in_quick_start': 'bool',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'install_default': 'InstallDefault',
        'standard_app': 'StandardApp',
        'class_name': 'ClassName',
        'name': 'Name',
        'description': 'Description',
        'icon': 'Icon',
        'manufacturer': 'Manufacturer',
        'app_buttons': 'AppButtons',
        'application_cost_type': 'ApplicationCostType',
        'cost': 'Cost',
        'subscription': 'Subscription',
        'resource_fields': 'ResourceFields',
        'task_fields': 'TaskFields',
        'plan_fields': 'PlanFields',
        'work_types': 'WorkTypes',
        'states': 'States',
        'views': 'Views',
        'default_properties': 'DefaultProperties',
        'app_properties': 'AppProperties',
        'hidden': 'Hidden',
        'show_in_quick_start': 'ShowInQuickStart',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, install_default=None, standard_app=None, class_name=None, name=None, description=None, icon=None, manufacturer=None, app_buttons=None, application_cost_type=None, cost=None, subscription=None, resource_fields=None, task_fields=None, plan_fields=None, work_types=None, states=None, views=None, default_properties=None, app_properties=None, hidden=None, show_in_quick_start=None, id=None, config_id=None):  # noqa: E501
        """AppDefinition - a model defined in Swagger"""  # noqa: E501
        self._install_default = None
        self._standard_app = None
        self._class_name = None
        self._name = None
        self._description = None
        self._icon = None
        self._manufacturer = None
        self._app_buttons = None
        self._application_cost_type = None
        self._cost = None
        self._subscription = None
        self._resource_fields = None
        self._task_fields = None
        self._plan_fields = None
        self._work_types = None
        self._states = None
        self._views = None
        self._default_properties = None
        self._app_properties = None
        self._hidden = None
        self._show_in_quick_start = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if install_default is not None:
            self.install_default = install_default
        if standard_app is not None:
            self.standard_app = standard_app
        if class_name is not None:
            self.class_name = class_name
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if icon is not None:
            self.icon = icon
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if app_buttons is not None:
            self.app_buttons = app_buttons
        if application_cost_type is not None:
            self.application_cost_type = application_cost_type
        if cost is not None:
            self.cost = cost
        if subscription is not None:
            self.subscription = subscription
        if resource_fields is not None:
            self.resource_fields = resource_fields
        if task_fields is not None:
            self.task_fields = task_fields
        if plan_fields is not None:
            self.plan_fields = plan_fields
        if work_types is not None:
            self.work_types = work_types
        if states is not None:
            self.states = states
        if views is not None:
            self.views = views
        if default_properties is not None:
            self.default_properties = default_properties
        if app_properties is not None:
            self.app_properties = app_properties
        if hidden is not None:
            self.hidden = hidden
        if show_in_quick_start is not None:
            self.show_in_quick_start = show_in_quick_start
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def install_default(self):
        """Gets the install_default of this AppDefinition.  # noqa: E501


        :return: The install_default of this AppDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._install_default

    @install_default.setter
    def install_default(self, install_default):
        """Sets the install_default of this AppDefinition.


        :param install_default: The install_default of this AppDefinition.  # noqa: E501
        :type: bool
        """

        self._install_default = install_default

    @property
    def standard_app(self):
        """Gets the standard_app of this AppDefinition.  # noqa: E501


        :return: The standard_app of this AppDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._standard_app

    @standard_app.setter
    def standard_app(self, standard_app):
        """Sets the standard_app of this AppDefinition.


        :param standard_app: The standard_app of this AppDefinition.  # noqa: E501
        :type: bool
        """

        self._standard_app = standard_app

    @property
    def class_name(self):
        """Gets the class_name of this AppDefinition.  # noqa: E501


        :return: The class_name of this AppDefinition.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this AppDefinition.


        :param class_name: The class_name of this AppDefinition.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def name(self):
        """Gets the name of this AppDefinition.  # noqa: E501


        :return: The name of this AppDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppDefinition.


        :param name: The name of this AppDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AppDefinition.  # noqa: E501


        :return: The description of this AppDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppDefinition.


        :param description: The description of this AppDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def icon(self):
        """Gets the icon of this AppDefinition.  # noqa: E501


        :return: The icon of this AppDefinition.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AppDefinition.


        :param icon: The icon of this AppDefinition.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def manufacturer(self):
        """Gets the manufacturer of this AppDefinition.  # noqa: E501


        :return: The manufacturer of this AppDefinition.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this AppDefinition.


        :param manufacturer: The manufacturer of this AppDefinition.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def app_buttons(self):
        """Gets the app_buttons of this AppDefinition.  # noqa: E501


        :return: The app_buttons of this AppDefinition.  # noqa: E501
        :rtype: list[AppButton]
        """
        return self._app_buttons

    @app_buttons.setter
    def app_buttons(self, app_buttons):
        """Sets the app_buttons of this AppDefinition.


        :param app_buttons: The app_buttons of this AppDefinition.  # noqa: E501
        :type: list[AppButton]
        """

        self._app_buttons = app_buttons

    @property
    def application_cost_type(self):
        """Gets the application_cost_type of this AppDefinition.  # noqa: E501


        :return: The application_cost_type of this AppDefinition.  # noqa: E501
        :rtype: AppCostType
        """
        return self._application_cost_type

    @application_cost_type.setter
    def application_cost_type(self, application_cost_type):
        """Sets the application_cost_type of this AppDefinition.


        :param application_cost_type: The application_cost_type of this AppDefinition.  # noqa: E501
        :type: AppCostType
        """

        self._application_cost_type = application_cost_type

    @property
    def cost(self):
        """Gets the cost of this AppDefinition.  # noqa: E501


        :return: The cost of this AppDefinition.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AppDefinition.


        :param cost: The cost of this AppDefinition.  # noqa: E501
        :type: DecimalNumber
        """

        self._cost = cost

    @property
    def subscription(self):
        """Gets the subscription of this AppDefinition.  # noqa: E501


        :return: The subscription of this AppDefinition.  # noqa: E501
        :rtype: Object
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this AppDefinition.


        :param subscription: The subscription of this AppDefinition.  # noqa: E501
        :type: Object
        """

        self._subscription = subscription

    @property
    def resource_fields(self):
        """Gets the resource_fields of this AppDefinition.  # noqa: E501


        :return: The resource_fields of this AppDefinition.  # noqa: E501
        :rtype: list[PlannerColumn]
        """
        return self._resource_fields

    @resource_fields.setter
    def resource_fields(self, resource_fields):
        """Sets the resource_fields of this AppDefinition.


        :param resource_fields: The resource_fields of this AppDefinition.  # noqa: E501
        :type: list[PlannerColumn]
        """

        self._resource_fields = resource_fields

    @property
    def task_fields(self):
        """Gets the task_fields of this AppDefinition.  # noqa: E501


        :return: The task_fields of this AppDefinition.  # noqa: E501
        :rtype: list[PlannerColumn]
        """
        return self._task_fields

    @task_fields.setter
    def task_fields(self, task_fields):
        """Sets the task_fields of this AppDefinition.


        :param task_fields: The task_fields of this AppDefinition.  # noqa: E501
        :type: list[PlannerColumn]
        """

        self._task_fields = task_fields

    @property
    def plan_fields(self):
        """Gets the plan_fields of this AppDefinition.  # noqa: E501


        :return: The plan_fields of this AppDefinition.  # noqa: E501
        :rtype: list[PlannerColumn]
        """
        return self._plan_fields

    @plan_fields.setter
    def plan_fields(self, plan_fields):
        """Sets the plan_fields of this AppDefinition.


        :param plan_fields: The plan_fields of this AppDefinition.  # noqa: E501
        :type: list[PlannerColumn]
        """

        self._plan_fields = plan_fields

    @property
    def work_types(self):
        """Gets the work_types of this AppDefinition.  # noqa: E501


        :return: The work_types of this AppDefinition.  # noqa: E501
        :rtype: list[WorkType]
        """
        return self._work_types

    @work_types.setter
    def work_types(self, work_types):
        """Sets the work_types of this AppDefinition.


        :param work_types: The work_types of this AppDefinition.  # noqa: E501
        :type: list[WorkType]
        """

        self._work_types = work_types

    @property
    def states(self):
        """Gets the states of this AppDefinition.  # noqa: E501


        :return: The states of this AppDefinition.  # noqa: E501
        :rtype: list[ControlState]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this AppDefinition.


        :param states: The states of this AppDefinition.  # noqa: E501
        :type: list[ControlState]
        """

        self._states = states

    @property
    def views(self):
        """Gets the views of this AppDefinition.  # noqa: E501


        :return: The views of this AppDefinition.  # noqa: E501
        :rtype: list[PlannerView]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this AppDefinition.


        :param views: The views of this AppDefinition.  # noqa: E501
        :type: list[PlannerView]
        """

        self._views = views

    @property
    def default_properties(self):
        """Gets the default_properties of this AppDefinition.  # noqa: E501


        :return: The default_properties of this AppDefinition.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._default_properties

    @default_properties.setter
    def default_properties(self, default_properties):
        """Sets the default_properties of this AppDefinition.


        :param default_properties: The default_properties of this AppDefinition.  # noqa: E501
        :type: dict(str, Object)
        """

        self._default_properties = default_properties

    @property
    def app_properties(self):
        """Gets the app_properties of this AppDefinition.  # noqa: E501


        :return: The app_properties of this AppDefinition.  # noqa: E501
        :rtype: list[AppProperty]
        """
        return self._app_properties

    @app_properties.setter
    def app_properties(self, app_properties):
        """Sets the app_properties of this AppDefinition.


        :param app_properties: The app_properties of this AppDefinition.  # noqa: E501
        :type: list[AppProperty]
        """

        self._app_properties = app_properties

    @property
    def hidden(self):
        """Gets the hidden of this AppDefinition.  # noqa: E501


        :return: The hidden of this AppDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this AppDefinition.


        :param hidden: The hidden of this AppDefinition.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def show_in_quick_start(self):
        """Gets the show_in_quick_start of this AppDefinition.  # noqa: E501


        :return: The show_in_quick_start of this AppDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_quick_start

    @show_in_quick_start.setter
    def show_in_quick_start(self, show_in_quick_start):
        """Sets the show_in_quick_start of this AppDefinition.


        :param show_in_quick_start: The show_in_quick_start of this AppDefinition.  # noqa: E501
        :type: bool
        """

        self._show_in_quick_start = show_in_quick_start

    @property
    def id(self):
        """Gets the id of this AppDefinition.  # noqa: E501


        :return: The id of this AppDefinition.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppDefinition.


        :param id: The id of this AppDefinition.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this AppDefinition.  # noqa: E501


        :return: The config_id of this AppDefinition.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this AppDefinition.


        :param config_id: The config_id of this AppDefinition.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
