# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeOff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'GloballyUniqueIdentifier',
        'time_off_category': 'GloballyUniqueIdentifier',
        'start': 'date',
        'end': 'date',
        'hours_per_day': 'DecimalNumber',
        'notes': 'str',
        'status': 'TimeOffStatusEnum',
        'approver': 'GloballyUniqueIdentifier',
        'date_approved': 'date',
        'hour_tp': 'dict(str, DecimalNumber)',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'user_id': 'UserId',
        'time_off_category': 'TimeOffCategory',
        'start': 'Start',
        'end': 'End',
        'hours_per_day': 'HoursPerDay',
        'notes': 'Notes',
        'status': 'Status',
        'approver': 'Approver',
        'date_approved': 'DateApproved',
        'hour_tp': 'HourTP',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, user_id=None, time_off_category=None, start=None, end=None, hours_per_day=None, notes=None, status=None, approver=None, date_approved=None, hour_tp=None, id=None, config_id=None):  # noqa: E501
        """TimeOff - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._time_off_category = None
        self._start = None
        self._end = None
        self._hours_per_day = None
        self._notes = None
        self._status = None
        self._approver = None
        self._date_approved = None
        self._hour_tp = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if time_off_category is not None:
            self.time_off_category = time_off_category
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if hours_per_day is not None:
            self.hours_per_day = hours_per_day
        if notes is not None:
            self.notes = notes
        if status is not None:
            self.status = status
        if approver is not None:
            self.approver = approver
        if date_approved is not None:
            self.date_approved = date_approved
        if hour_tp is not None:
            self.hour_tp = hour_tp
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def user_id(self):
        """Gets the user_id of this TimeOff.  # noqa: E501


        :return: The user_id of this TimeOff.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TimeOff.


        :param user_id: The user_id of this TimeOff.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._user_id = user_id

    @property
    def time_off_category(self):
        """Gets the time_off_category of this TimeOff.  # noqa: E501


        :return: The time_off_category of this TimeOff.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._time_off_category

    @time_off_category.setter
    def time_off_category(self, time_off_category):
        """Sets the time_off_category of this TimeOff.


        :param time_off_category: The time_off_category of this TimeOff.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._time_off_category = time_off_category

    @property
    def start(self):
        """Gets the start of this TimeOff.  # noqa: E501


        :return: The start of this TimeOff.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TimeOff.


        :param start: The start of this TimeOff.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this TimeOff.  # noqa: E501


        :return: The end of this TimeOff.  # noqa: E501
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this TimeOff.


        :param end: The end of this TimeOff.  # noqa: E501
        :type: date
        """

        self._end = end

    @property
    def hours_per_day(self):
        """Gets the hours_per_day of this TimeOff.  # noqa: E501


        :return: The hours_per_day of this TimeOff.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._hours_per_day

    @hours_per_day.setter
    def hours_per_day(self, hours_per_day):
        """Sets the hours_per_day of this TimeOff.


        :param hours_per_day: The hours_per_day of this TimeOff.  # noqa: E501
        :type: DecimalNumber
        """

        self._hours_per_day = hours_per_day

    @property
    def notes(self):
        """Gets the notes of this TimeOff.  # noqa: E501


        :return: The notes of this TimeOff.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this TimeOff.


        :param notes: The notes of this TimeOff.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def status(self):
        """Gets the status of this TimeOff.  # noqa: E501


        :return: The status of this TimeOff.  # noqa: E501
        :rtype: TimeOffStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TimeOff.


        :param status: The status of this TimeOff.  # noqa: E501
        :type: TimeOffStatusEnum
        """

        self._status = status

    @property
    def approver(self):
        """Gets the approver of this TimeOff.  # noqa: E501


        :return: The approver of this TimeOff.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._approver

    @approver.setter
    def approver(self, approver):
        """Sets the approver of this TimeOff.


        :param approver: The approver of this TimeOff.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._approver = approver

    @property
    def date_approved(self):
        """Gets the date_approved of this TimeOff.  # noqa: E501


        :return: The date_approved of this TimeOff.  # noqa: E501
        :rtype: date
        """
        return self._date_approved

    @date_approved.setter
    def date_approved(self, date_approved):
        """Sets the date_approved of this TimeOff.


        :param date_approved: The date_approved of this TimeOff.  # noqa: E501
        :type: date
        """

        self._date_approved = date_approved

    @property
    def hour_tp(self):
        """Gets the hour_tp of this TimeOff.  # noqa: E501


        :return: The hour_tp of this TimeOff.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._hour_tp

    @hour_tp.setter
    def hour_tp(self, hour_tp):
        """Sets the hour_tp of this TimeOff.


        :param hour_tp: The hour_tp of this TimeOff.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._hour_tp = hour_tp

    @property
    def id(self):
        """Gets the id of this TimeOff.  # noqa: E501


        :return: The id of this TimeOff.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeOff.


        :param id: The id of this TimeOff.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this TimeOff.  # noqa: E501


        :return: The config_id of this TimeOff.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this TimeOff.


        :param config_id: The config_id of this TimeOff.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeOff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeOff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
