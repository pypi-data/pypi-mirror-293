# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelScenarioPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_id': 'GloballyUniqueIdentifier',
        'name': 'str',
        'initial_start_date': 'date',
        'initial_end_date': 'date',
        'shifted_start_date': 'date',
        'shifted_end_date': 'date',
        'offset': 'DecimalNumber',
        'priority': 'DecimalNumber',
        'checked': 'bool',
        'cost_fields_values': 'dict(str, Object)',
        'benefit_fields_values': 'dict(str, Object)',
        'filtered_out': 'bool',
        'fields': 'dict(str, Object)'
    }

    attribute_map = {
        'plan_id': 'PlanId',
        'name': 'Name',
        'initial_start_date': 'InitialStartDate',
        'initial_end_date': 'InitialEndDate',
        'shifted_start_date': 'ShiftedStartDate',
        'shifted_end_date': 'ShiftedEndDate',
        'offset': 'Offset',
        'priority': 'Priority',
        'checked': 'Checked',
        'cost_fields_values': 'CostFieldsValues',
        'benefit_fields_values': 'BenefitFieldsValues',
        'filtered_out': 'FilteredOut',
        'fields': 'Fields'
    }

    def __init__(self, plan_id=None, name=None, initial_start_date=None, initial_end_date=None, shifted_start_date=None, shifted_end_date=None, offset=None, priority=None, checked=None, cost_fields_values=None, benefit_fields_values=None, filtered_out=None, fields=None):  # noqa: E501
        """ModelScenarioPlan - a model defined in Swagger"""  # noqa: E501
        self._plan_id = None
        self._name = None
        self._initial_start_date = None
        self._initial_end_date = None
        self._shifted_start_date = None
        self._shifted_end_date = None
        self._offset = None
        self._priority = None
        self._checked = None
        self._cost_fields_values = None
        self._benefit_fields_values = None
        self._filtered_out = None
        self._fields = None
        self.discriminator = None
        if plan_id is not None:
            self.plan_id = plan_id
        if name is not None:
            self.name = name
        if initial_start_date is not None:
            self.initial_start_date = initial_start_date
        if initial_end_date is not None:
            self.initial_end_date = initial_end_date
        if shifted_start_date is not None:
            self.shifted_start_date = shifted_start_date
        if shifted_end_date is not None:
            self.shifted_end_date = shifted_end_date
        if offset is not None:
            self.offset = offset
        if priority is not None:
            self.priority = priority
        if checked is not None:
            self.checked = checked
        if cost_fields_values is not None:
            self.cost_fields_values = cost_fields_values
        if benefit_fields_values is not None:
            self.benefit_fields_values = benefit_fields_values
        if filtered_out is not None:
            self.filtered_out = filtered_out
        if fields is not None:
            self.fields = fields

    @property
    def plan_id(self):
        """Gets the plan_id of this ModelScenarioPlan.  # noqa: E501


        :return: The plan_id of this ModelScenarioPlan.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this ModelScenarioPlan.


        :param plan_id: The plan_id of this ModelScenarioPlan.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_id = plan_id

    @property
    def name(self):
        """Gets the name of this ModelScenarioPlan.  # noqa: E501


        :return: The name of this ModelScenarioPlan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelScenarioPlan.


        :param name: The name of this ModelScenarioPlan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def initial_start_date(self):
        """Gets the initial_start_date of this ModelScenarioPlan.  # noqa: E501


        :return: The initial_start_date of this ModelScenarioPlan.  # noqa: E501
        :rtype: date
        """
        return self._initial_start_date

    @initial_start_date.setter
    def initial_start_date(self, initial_start_date):
        """Sets the initial_start_date of this ModelScenarioPlan.


        :param initial_start_date: The initial_start_date of this ModelScenarioPlan.  # noqa: E501
        :type: date
        """

        self._initial_start_date = initial_start_date

    @property
    def initial_end_date(self):
        """Gets the initial_end_date of this ModelScenarioPlan.  # noqa: E501


        :return: The initial_end_date of this ModelScenarioPlan.  # noqa: E501
        :rtype: date
        """
        return self._initial_end_date

    @initial_end_date.setter
    def initial_end_date(self, initial_end_date):
        """Sets the initial_end_date of this ModelScenarioPlan.


        :param initial_end_date: The initial_end_date of this ModelScenarioPlan.  # noqa: E501
        :type: date
        """

        self._initial_end_date = initial_end_date

    @property
    def shifted_start_date(self):
        """Gets the shifted_start_date of this ModelScenarioPlan.  # noqa: E501


        :return: The shifted_start_date of this ModelScenarioPlan.  # noqa: E501
        :rtype: date
        """
        return self._shifted_start_date

    @shifted_start_date.setter
    def shifted_start_date(self, shifted_start_date):
        """Sets the shifted_start_date of this ModelScenarioPlan.


        :param shifted_start_date: The shifted_start_date of this ModelScenarioPlan.  # noqa: E501
        :type: date
        """

        self._shifted_start_date = shifted_start_date

    @property
    def shifted_end_date(self):
        """Gets the shifted_end_date of this ModelScenarioPlan.  # noqa: E501


        :return: The shifted_end_date of this ModelScenarioPlan.  # noqa: E501
        :rtype: date
        """
        return self._shifted_end_date

    @shifted_end_date.setter
    def shifted_end_date(self, shifted_end_date):
        """Sets the shifted_end_date of this ModelScenarioPlan.


        :param shifted_end_date: The shifted_end_date of this ModelScenarioPlan.  # noqa: E501
        :type: date
        """

        self._shifted_end_date = shifted_end_date

    @property
    def offset(self):
        """Gets the offset of this ModelScenarioPlan.  # noqa: E501


        :return: The offset of this ModelScenarioPlan.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ModelScenarioPlan.


        :param offset: The offset of this ModelScenarioPlan.  # noqa: E501
        :type: DecimalNumber
        """

        self._offset = offset

    @property
    def priority(self):
        """Gets the priority of this ModelScenarioPlan.  # noqa: E501


        :return: The priority of this ModelScenarioPlan.  # noqa: E501
        :rtype: DecimalNumber
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ModelScenarioPlan.


        :param priority: The priority of this ModelScenarioPlan.  # noqa: E501
        :type: DecimalNumber
        """

        self._priority = priority

    @property
    def checked(self):
        """Gets the checked of this ModelScenarioPlan.  # noqa: E501


        :return: The checked of this ModelScenarioPlan.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this ModelScenarioPlan.


        :param checked: The checked of this ModelScenarioPlan.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    @property
    def cost_fields_values(self):
        """Gets the cost_fields_values of this ModelScenarioPlan.  # noqa: E501


        :return: The cost_fields_values of this ModelScenarioPlan.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._cost_fields_values

    @cost_fields_values.setter
    def cost_fields_values(self, cost_fields_values):
        """Sets the cost_fields_values of this ModelScenarioPlan.


        :param cost_fields_values: The cost_fields_values of this ModelScenarioPlan.  # noqa: E501
        :type: dict(str, Object)
        """

        self._cost_fields_values = cost_fields_values

    @property
    def benefit_fields_values(self):
        """Gets the benefit_fields_values of this ModelScenarioPlan.  # noqa: E501


        :return: The benefit_fields_values of this ModelScenarioPlan.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._benefit_fields_values

    @benefit_fields_values.setter
    def benefit_fields_values(self, benefit_fields_values):
        """Sets the benefit_fields_values of this ModelScenarioPlan.


        :param benefit_fields_values: The benefit_fields_values of this ModelScenarioPlan.  # noqa: E501
        :type: dict(str, Object)
        """

        self._benefit_fields_values = benefit_fields_values

    @property
    def filtered_out(self):
        """Gets the filtered_out of this ModelScenarioPlan.  # noqa: E501


        :return: The filtered_out of this ModelScenarioPlan.  # noqa: E501
        :rtype: bool
        """
        return self._filtered_out

    @filtered_out.setter
    def filtered_out(self, filtered_out):
        """Sets the filtered_out of this ModelScenarioPlan.


        :param filtered_out: The filtered_out of this ModelScenarioPlan.  # noqa: E501
        :type: bool
        """

        self._filtered_out = filtered_out

    @property
    def fields(self):
        """Gets the fields of this ModelScenarioPlan.  # noqa: E501


        :return: The fields of this ModelScenarioPlan.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ModelScenarioPlan.


        :param fields: The fields of this ModelScenarioPlan.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelScenarioPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelScenarioPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
