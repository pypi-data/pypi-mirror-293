# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OnePlanSecurityGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'license': 'GloballyUniqueIdentifier',
        'permission_settings': 'Permissions',
        'is_default': 'bool',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'group_name': 'GroupName',
        'license': 'License',
        'permission_settings': 'PermissionSettings',
        'is_default': 'IsDefault',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, group_name=None, license=None, permission_settings=None, is_default=None, id=None, config_id=None):  # noqa: E501
        """OnePlanSecurityGroup - a model defined in Swagger"""  # noqa: E501
        self._group_name = None
        self._license = None
        self._permission_settings = None
        self._is_default = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if group_name is not None:
            self.group_name = group_name
        if license is not None:
            self.license = license
        if permission_settings is not None:
            self.permission_settings = permission_settings
        if is_default is not None:
            self.is_default = is_default
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def group_name(self):
        """Gets the group_name of this OnePlanSecurityGroup.  # noqa: E501


        :return: The group_name of this OnePlanSecurityGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this OnePlanSecurityGroup.


        :param group_name: The group_name of this OnePlanSecurityGroup.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def license(self):
        """Gets the license of this OnePlanSecurityGroup.  # noqa: E501


        :return: The license of this OnePlanSecurityGroup.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this OnePlanSecurityGroup.


        :param license: The license of this OnePlanSecurityGroup.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._license = license

    @property
    def permission_settings(self):
        """Gets the permission_settings of this OnePlanSecurityGroup.  # noqa: E501


        :return: The permission_settings of this OnePlanSecurityGroup.  # noqa: E501
        :rtype: Permissions
        """
        return self._permission_settings

    @permission_settings.setter
    def permission_settings(self, permission_settings):
        """Sets the permission_settings of this OnePlanSecurityGroup.


        :param permission_settings: The permission_settings of this OnePlanSecurityGroup.  # noqa: E501
        :type: Permissions
        """

        self._permission_settings = permission_settings

    @property
    def is_default(self):
        """Gets the is_default of this OnePlanSecurityGroup.  # noqa: E501


        :return: The is_default of this OnePlanSecurityGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this OnePlanSecurityGroup.


        :param is_default: The is_default of this OnePlanSecurityGroup.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def id(self):
        """Gets the id of this OnePlanSecurityGroup.  # noqa: E501


        :return: The id of this OnePlanSecurityGroup.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OnePlanSecurityGroup.


        :param id: The id of this OnePlanSecurityGroup.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this OnePlanSecurityGroup.  # noqa: E501


        :return: The config_id of this OnePlanSecurityGroup.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this OnePlanSecurityGroup.


        :param config_id: The config_id of this OnePlanSecurityGroup.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnePlanSecurityGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnePlanSecurityGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
