# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_error': 'str',
        'row_state': 'DataRowState',
        'table': 'DataTable',
        'item': 'Object',
        'item_array': 'list[Object]',
        'has_errors': 'bool'
    }

    attribute_map = {
        'row_error': 'RowError',
        'row_state': 'RowState',
        'table': 'Table',
        'item': 'Item',
        'item_array': 'ItemArray',
        'has_errors': 'HasErrors'
    }

    def __init__(self, row_error=None, row_state=None, table=None, item=None, item_array=None, has_errors=None):  # noqa: E501
        """DataRow - a model defined in Swagger"""  # noqa: E501
        self._row_error = None
        self._row_state = None
        self._table = None
        self._item = None
        self._item_array = None
        self._has_errors = None
        self.discriminator = None
        if row_error is not None:
            self.row_error = row_error
        if row_state is not None:
            self.row_state = row_state
        if table is not None:
            self.table = table
        if item is not None:
            self.item = item
        if item_array is not None:
            self.item_array = item_array
        if has_errors is not None:
            self.has_errors = has_errors

    @property
    def row_error(self):
        """Gets the row_error of this DataRow.  # noqa: E501


        :return: The row_error of this DataRow.  # noqa: E501
        :rtype: str
        """
        return self._row_error

    @row_error.setter
    def row_error(self, row_error):
        """Sets the row_error of this DataRow.


        :param row_error: The row_error of this DataRow.  # noqa: E501
        :type: str
        """

        self._row_error = row_error

    @property
    def row_state(self):
        """Gets the row_state of this DataRow.  # noqa: E501


        :return: The row_state of this DataRow.  # noqa: E501
        :rtype: DataRowState
        """
        return self._row_state

    @row_state.setter
    def row_state(self, row_state):
        """Sets the row_state of this DataRow.


        :param row_state: The row_state of this DataRow.  # noqa: E501
        :type: DataRowState
        """

        self._row_state = row_state

    @property
    def table(self):
        """Gets the table of this DataRow.  # noqa: E501


        :return: The table of this DataRow.  # noqa: E501
        :rtype: DataTable
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this DataRow.


        :param table: The table of this DataRow.  # noqa: E501
        :type: DataTable
        """

        self._table = table

    @property
    def item(self):
        """Gets the item of this DataRow.  # noqa: E501


        :return: The item of this DataRow.  # noqa: E501
        :rtype: Object
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this DataRow.


        :param item: The item of this DataRow.  # noqa: E501
        :type: Object
        """

        self._item = item

    @property
    def item_array(self):
        """Gets the item_array of this DataRow.  # noqa: E501


        :return: The item_array of this DataRow.  # noqa: E501
        :rtype: list[Object]
        """
        return self._item_array

    @item_array.setter
    def item_array(self, item_array):
        """Sets the item_array of this DataRow.


        :param item_array: The item_array of this DataRow.  # noqa: E501
        :type: list[Object]
        """

        self._item_array = item_array

    @property
    def has_errors(self):
        """Gets the has_errors of this DataRow.  # noqa: E501


        :return: The has_errors of this DataRow.  # noqa: E501
        :rtype: bool
        """
        return self._has_errors

    @has_errors.setter
    def has_errors(self, has_errors):
        """Sets the has_errors of this DataRow.


        :param has_errors: The has_errors of this DataRow.  # noqa: E501
        :type: bool
        """

        self._has_errors = has_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
