# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'GloballyUniqueIdentifier',
        'filters': 'Object',
        'user_id': 'GloballyUniqueIdentifier',
        'columns': 'list[str]',
        'gantt_collapsed': 'bool',
        'personal': 'bool',
        'personal_user_id': 'GloballyUniqueIdentifier',
        'default': 'bool',
        'resource_plan_settings': 'ResourcePlanSettings',
        'cost_plan_settings': 'CostPlanSettings',
        'chart_view': 'bool',
        'chart_type': 'ChartType',
        'bubble_chart_settings': 'BubbleChartSettings'
    }

    attribute_map = {
        'name': 'Name',
        'id': 'Id',
        'filters': 'Filters',
        'user_id': 'UserId',
        'columns': 'Columns',
        'gantt_collapsed': 'GanttCollapsed',
        'personal': 'Personal',
        'personal_user_id': 'PersonalUserId',
        'default': 'Default',
        'resource_plan_settings': 'resourcePlanSettings',
        'cost_plan_settings': 'costPlanSettings',
        'chart_view': 'ChartView',
        'chart_type': 'chartType',
        'bubble_chart_settings': 'bubbleChartSettings'
    }

    def __init__(self, name=None, id=None, filters=None, user_id=None, columns=None, gantt_collapsed=None, personal=None, personal_user_id=None, default=None, resource_plan_settings=None, cost_plan_settings=None, chart_view=None, chart_type=None, bubble_chart_settings=None):  # noqa: E501
        """ModelView - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._filters = None
        self._user_id = None
        self._columns = None
        self._gantt_collapsed = None
        self._personal = None
        self._personal_user_id = None
        self._default = None
        self._resource_plan_settings = None
        self._cost_plan_settings = None
        self._chart_view = None
        self._chart_type = None
        self._bubble_chart_settings = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if filters is not None:
            self.filters = filters
        if user_id is not None:
            self.user_id = user_id
        if columns is not None:
            self.columns = columns
        if gantt_collapsed is not None:
            self.gantt_collapsed = gantt_collapsed
        if personal is not None:
            self.personal = personal
        if personal_user_id is not None:
            self.personal_user_id = personal_user_id
        if default is not None:
            self.default = default
        if resource_plan_settings is not None:
            self.resource_plan_settings = resource_plan_settings
        if cost_plan_settings is not None:
            self.cost_plan_settings = cost_plan_settings
        if chart_view is not None:
            self.chart_view = chart_view
        if chart_type is not None:
            self.chart_type = chart_type
        if bubble_chart_settings is not None:
            self.bubble_chart_settings = bubble_chart_settings

    @property
    def name(self):
        """Gets the name of this ModelView.  # noqa: E501


        :return: The name of this ModelView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelView.


        :param name: The name of this ModelView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this ModelView.  # noqa: E501


        :return: The id of this ModelView.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelView.


        :param id: The id of this ModelView.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def filters(self):
        """Gets the filters of this ModelView.  # noqa: E501


        :return: The filters of this ModelView.  # noqa: E501
        :rtype: Object
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ModelView.


        :param filters: The filters of this ModelView.  # noqa: E501
        :type: Object
        """

        self._filters = filters

    @property
    def user_id(self):
        """Gets the user_id of this ModelView.  # noqa: E501


        :return: The user_id of this ModelView.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelView.


        :param user_id: The user_id of this ModelView.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._user_id = user_id

    @property
    def columns(self):
        """Gets the columns of this ModelView.  # noqa: E501


        :return: The columns of this ModelView.  # noqa: E501
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ModelView.


        :param columns: The columns of this ModelView.  # noqa: E501
        :type: list[str]
        """

        self._columns = columns

    @property
    def gantt_collapsed(self):
        """Gets the gantt_collapsed of this ModelView.  # noqa: E501


        :return: The gantt_collapsed of this ModelView.  # noqa: E501
        :rtype: bool
        """
        return self._gantt_collapsed

    @gantt_collapsed.setter
    def gantt_collapsed(self, gantt_collapsed):
        """Sets the gantt_collapsed of this ModelView.


        :param gantt_collapsed: The gantt_collapsed of this ModelView.  # noqa: E501
        :type: bool
        """

        self._gantt_collapsed = gantt_collapsed

    @property
    def personal(self):
        """Gets the personal of this ModelView.  # noqa: E501


        :return: The personal of this ModelView.  # noqa: E501
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this ModelView.


        :param personal: The personal of this ModelView.  # noqa: E501
        :type: bool
        """

        self._personal = personal

    @property
    def personal_user_id(self):
        """Gets the personal_user_id of this ModelView.  # noqa: E501


        :return: The personal_user_id of this ModelView.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._personal_user_id

    @personal_user_id.setter
    def personal_user_id(self, personal_user_id):
        """Sets the personal_user_id of this ModelView.


        :param personal_user_id: The personal_user_id of this ModelView.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._personal_user_id = personal_user_id

    @property
    def default(self):
        """Gets the default of this ModelView.  # noqa: E501


        :return: The default of this ModelView.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ModelView.


        :param default: The default of this ModelView.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def resource_plan_settings(self):
        """Gets the resource_plan_settings of this ModelView.  # noqa: E501


        :return: The resource_plan_settings of this ModelView.  # noqa: E501
        :rtype: ResourcePlanSettings
        """
        return self._resource_plan_settings

    @resource_plan_settings.setter
    def resource_plan_settings(self, resource_plan_settings):
        """Sets the resource_plan_settings of this ModelView.


        :param resource_plan_settings: The resource_plan_settings of this ModelView.  # noqa: E501
        :type: ResourcePlanSettings
        """

        self._resource_plan_settings = resource_plan_settings

    @property
    def cost_plan_settings(self):
        """Gets the cost_plan_settings of this ModelView.  # noqa: E501


        :return: The cost_plan_settings of this ModelView.  # noqa: E501
        :rtype: CostPlanSettings
        """
        return self._cost_plan_settings

    @cost_plan_settings.setter
    def cost_plan_settings(self, cost_plan_settings):
        """Sets the cost_plan_settings of this ModelView.


        :param cost_plan_settings: The cost_plan_settings of this ModelView.  # noqa: E501
        :type: CostPlanSettings
        """

        self._cost_plan_settings = cost_plan_settings

    @property
    def chart_view(self):
        """Gets the chart_view of this ModelView.  # noqa: E501


        :return: The chart_view of this ModelView.  # noqa: E501
        :rtype: bool
        """
        return self._chart_view

    @chart_view.setter
    def chart_view(self, chart_view):
        """Sets the chart_view of this ModelView.


        :param chart_view: The chart_view of this ModelView.  # noqa: E501
        :type: bool
        """

        self._chart_view = chart_view

    @property
    def chart_type(self):
        """Gets the chart_type of this ModelView.  # noqa: E501


        :return: The chart_type of this ModelView.  # noqa: E501
        :rtype: ChartType
        """
        return self._chart_type

    @chart_type.setter
    def chart_type(self, chart_type):
        """Sets the chart_type of this ModelView.


        :param chart_type: The chart_type of this ModelView.  # noqa: E501
        :type: ChartType
        """

        self._chart_type = chart_type

    @property
    def bubble_chart_settings(self):
        """Gets the bubble_chart_settings of this ModelView.  # noqa: E501


        :return: The bubble_chart_settings of this ModelView.  # noqa: E501
        :rtype: BubbleChartSettings
        """
        return self._bubble_chart_settings

    @bubble_chart_settings.setter
    def bubble_chart_settings(self, bubble_chart_settings):
        """Sets the bubble_chart_settings of this ModelView.


        :param bubble_chart_settings: The bubble_chart_settings of this ModelView.  # noqa: E501
        :type: BubbleChartSettings
        """

        self._bubble_chart_settings = bubble_chart_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
