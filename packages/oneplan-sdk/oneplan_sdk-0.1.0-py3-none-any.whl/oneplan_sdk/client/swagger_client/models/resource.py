# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Resource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userid': 'GloballyUniqueIdentifier',
        'office365_id': 'GloballyUniqueIdentifier',
        'profile_picture': 'str',
        'generic': 'bool',
        'inactive': 'bool',
        'can_login': 'bool',
        'user_only': 'bool',
        'global_permissions': 'OnePlanLevel',
        'one_plan_security_group': 'GloballyUniqueIdentifier',
        'last_login': 'date',
        'fields': 'dict(str, Object)',
        'time_zone': 'str',
        'external_id': 'str',
        'delegates': 'list[GloballyUniqueIdentifier]',
        'notifications': 'ResourceNotifications',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'userid': 'userid',
        'office365_id': 'Office365Id',
        'profile_picture': 'ProfilePicture',
        'generic': 'Generic',
        'inactive': 'Inactive',
        'can_login': 'CanLogin',
        'user_only': 'UserOnly',
        'global_permissions': 'GlobalPermissions',
        'one_plan_security_group': 'OnePlanSecurityGroup',
        'last_login': 'LastLogin',
        'fields': 'Fields',
        'time_zone': 'TimeZone',
        'external_id': 'ExternalId',
        'delegates': 'Delegates',
        'notifications': 'Notifications',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, userid=None, office365_id=None, profile_picture=None, generic=None, inactive=None, can_login=None, user_only=None, global_permissions=None, one_plan_security_group=None, last_login=None, fields=None, time_zone=None, external_id=None, delegates=None, notifications=None, id=None, config_id=None):  # noqa: E501
        """Resource - a model defined in Swagger"""  # noqa: E501
        self._userid = None
        self._office365_id = None
        self._profile_picture = None
        self._generic = None
        self._inactive = None
        self._can_login = None
        self._user_only = None
        self._global_permissions = None
        self._one_plan_security_group = None
        self._last_login = None
        self._fields = None
        self._time_zone = None
        self._external_id = None
        self._delegates = None
        self._notifications = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if userid is not None:
            self.userid = userid
        if office365_id is not None:
            self.office365_id = office365_id
        if profile_picture is not None:
            self.profile_picture = profile_picture
        if generic is not None:
            self.generic = generic
        if inactive is not None:
            self.inactive = inactive
        if can_login is not None:
            self.can_login = can_login
        if user_only is not None:
            self.user_only = user_only
        if global_permissions is not None:
            self.global_permissions = global_permissions
        if one_plan_security_group is not None:
            self.one_plan_security_group = one_plan_security_group
        if last_login is not None:
            self.last_login = last_login
        if fields is not None:
            self.fields = fields
        if time_zone is not None:
            self.time_zone = time_zone
        if external_id is not None:
            self.external_id = external_id
        if delegates is not None:
            self.delegates = delegates
        if notifications is not None:
            self.notifications = notifications
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def userid(self):
        """Gets the userid of this Resource.  # noqa: E501


        :return: The userid of this Resource.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Resource.


        :param userid: The userid of this Resource.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._userid = userid

    @property
    def office365_id(self):
        """Gets the office365_id of this Resource.  # noqa: E501


        :return: The office365_id of this Resource.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._office365_id

    @office365_id.setter
    def office365_id(self, office365_id):
        """Sets the office365_id of this Resource.


        :param office365_id: The office365_id of this Resource.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._office365_id = office365_id

    @property
    def profile_picture(self):
        """Gets the profile_picture of this Resource.  # noqa: E501


        :return: The profile_picture of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture):
        """Sets the profile_picture of this Resource.


        :param profile_picture: The profile_picture of this Resource.  # noqa: E501
        :type: str
        """

        self._profile_picture = profile_picture

    @property
    def generic(self):
        """Gets the generic of this Resource.  # noqa: E501


        :return: The generic of this Resource.  # noqa: E501
        :rtype: bool
        """
        return self._generic

    @generic.setter
    def generic(self, generic):
        """Sets the generic of this Resource.


        :param generic: The generic of this Resource.  # noqa: E501
        :type: bool
        """

        self._generic = generic

    @property
    def inactive(self):
        """Gets the inactive of this Resource.  # noqa: E501


        :return: The inactive of this Resource.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this Resource.


        :param inactive: The inactive of this Resource.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def can_login(self):
        """Gets the can_login of this Resource.  # noqa: E501


        :return: The can_login of this Resource.  # noqa: E501
        :rtype: bool
        """
        return self._can_login

    @can_login.setter
    def can_login(self, can_login):
        """Sets the can_login of this Resource.


        :param can_login: The can_login of this Resource.  # noqa: E501
        :type: bool
        """

        self._can_login = can_login

    @property
    def user_only(self):
        """Gets the user_only of this Resource.  # noqa: E501


        :return: The user_only of this Resource.  # noqa: E501
        :rtype: bool
        """
        return self._user_only

    @user_only.setter
    def user_only(self, user_only):
        """Sets the user_only of this Resource.


        :param user_only: The user_only of this Resource.  # noqa: E501
        :type: bool
        """

        self._user_only = user_only

    @property
    def global_permissions(self):
        """Gets the global_permissions of this Resource.  # noqa: E501


        :return: The global_permissions of this Resource.  # noqa: E501
        :rtype: OnePlanLevel
        """
        return self._global_permissions

    @global_permissions.setter
    def global_permissions(self, global_permissions):
        """Sets the global_permissions of this Resource.


        :param global_permissions: The global_permissions of this Resource.  # noqa: E501
        :type: OnePlanLevel
        """

        self._global_permissions = global_permissions

    @property
    def one_plan_security_group(self):
        """Gets the one_plan_security_group of this Resource.  # noqa: E501


        :return: The one_plan_security_group of this Resource.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._one_plan_security_group

    @one_plan_security_group.setter
    def one_plan_security_group(self, one_plan_security_group):
        """Sets the one_plan_security_group of this Resource.


        :param one_plan_security_group: The one_plan_security_group of this Resource.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._one_plan_security_group = one_plan_security_group

    @property
    def last_login(self):
        """Gets the last_login of this Resource.  # noqa: E501


        :return: The last_login of this Resource.  # noqa: E501
        :rtype: date
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Resource.


        :param last_login: The last_login of this Resource.  # noqa: E501
        :type: date
        """

        self._last_login = last_login

    @property
    def fields(self):
        """Gets the fields of this Resource.  # noqa: E501


        :return: The fields of this Resource.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Resource.


        :param fields: The fields of this Resource.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def time_zone(self):
        """Gets the time_zone of this Resource.  # noqa: E501


        :return: The time_zone of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Resource.


        :param time_zone: The time_zone of this Resource.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def external_id(self):
        """Gets the external_id of this Resource.  # noqa: E501


        :return: The external_id of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Resource.


        :param external_id: The external_id of this Resource.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def delegates(self):
        """Gets the delegates of this Resource.  # noqa: E501


        :return: The delegates of this Resource.  # noqa: E501
        :rtype: list[GloballyUniqueIdentifier]
        """
        return self._delegates

    @delegates.setter
    def delegates(self, delegates):
        """Sets the delegates of this Resource.


        :param delegates: The delegates of this Resource.  # noqa: E501
        :type: list[GloballyUniqueIdentifier]
        """

        self._delegates = delegates

    @property
    def notifications(self):
        """Gets the notifications of this Resource.  # noqa: E501


        :return: The notifications of this Resource.  # noqa: E501
        :rtype: ResourceNotifications
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this Resource.


        :param notifications: The notifications of this Resource.  # noqa: E501
        :type: ResourceNotifications
        """

        self._notifications = notifications

    @property
    def id(self):
        """Gets the id of this Resource.  # noqa: E501


        :return: The id of this Resource.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Resource.


        :param id: The id of this Resource.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this Resource.  # noqa: E501


        :return: The config_id of this Resource.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this Resource.


        :param config_id: The config_id of this Resource.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Resource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
