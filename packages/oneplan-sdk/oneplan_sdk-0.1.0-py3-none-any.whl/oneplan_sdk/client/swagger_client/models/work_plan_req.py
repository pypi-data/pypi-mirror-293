# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkPlanReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'folder': 'bool',
        'plan_type': 'GloballyUniqueIdentifier',
        'portfolio_parent_id': 'GloballyUniqueIdentifier',
        'parent_plan_id': 'GloballyUniqueIdentifier',
        'owner': 'GloballyUniqueIdentifier',
        'fields': 'dict(str, Object)',
        'summary_fields': 'dict(str, Object)'
    }

    attribute_map = {
        'name': 'Name',
        'folder': 'Folder',
        'plan_type': 'PlanType',
        'portfolio_parent_id': 'PortfolioParentId',
        'parent_plan_id': 'ParentPlanId',
        'owner': 'Owner',
        'fields': 'Fields',
        'summary_fields': 'SummaryFields'
    }

    def __init__(self, name=None, folder=None, plan_type=None, portfolio_parent_id=None, parent_plan_id=None, owner=None, fields=None, summary_fields=None):  # noqa: E501
        """WorkPlanReq - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._folder = None
        self._plan_type = None
        self._portfolio_parent_id = None
        self._parent_plan_id = None
        self._owner = None
        self._fields = None
        self._summary_fields = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if folder is not None:
            self.folder = folder
        if plan_type is not None:
            self.plan_type = plan_type
        if portfolio_parent_id is not None:
            self.portfolio_parent_id = portfolio_parent_id
        if parent_plan_id is not None:
            self.parent_plan_id = parent_plan_id
        if owner is not None:
            self.owner = owner
        if fields is not None:
            self.fields = fields
        if summary_fields is not None:
            self.summary_fields = summary_fields

    @property
    def name(self):
        """Gets the name of this WorkPlanReq.  # noqa: E501


        :return: The name of this WorkPlanReq.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkPlanReq.


        :param name: The name of this WorkPlanReq.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def folder(self):
        """Gets the folder of this WorkPlanReq.  # noqa: E501


        :return: The folder of this WorkPlanReq.  # noqa: E501
        :rtype: bool
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this WorkPlanReq.


        :param folder: The folder of this WorkPlanReq.  # noqa: E501
        :type: bool
        """

        self._folder = folder

    @property
    def plan_type(self):
        """Gets the plan_type of this WorkPlanReq.  # noqa: E501


        :return: The plan_type of this WorkPlanReq.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this WorkPlanReq.


        :param plan_type: The plan_type of this WorkPlanReq.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._plan_type = plan_type

    @property
    def portfolio_parent_id(self):
        """Gets the portfolio_parent_id of this WorkPlanReq.  # noqa: E501


        :return: The portfolio_parent_id of this WorkPlanReq.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._portfolio_parent_id

    @portfolio_parent_id.setter
    def portfolio_parent_id(self, portfolio_parent_id):
        """Sets the portfolio_parent_id of this WorkPlanReq.


        :param portfolio_parent_id: The portfolio_parent_id of this WorkPlanReq.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._portfolio_parent_id = portfolio_parent_id

    @property
    def parent_plan_id(self):
        """Gets the parent_plan_id of this WorkPlanReq.  # noqa: E501


        :return: The parent_plan_id of this WorkPlanReq.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._parent_plan_id

    @parent_plan_id.setter
    def parent_plan_id(self, parent_plan_id):
        """Sets the parent_plan_id of this WorkPlanReq.


        :param parent_plan_id: The parent_plan_id of this WorkPlanReq.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._parent_plan_id = parent_plan_id

    @property
    def owner(self):
        """Gets the owner of this WorkPlanReq.  # noqa: E501


        :return: The owner of this WorkPlanReq.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this WorkPlanReq.


        :param owner: The owner of this WorkPlanReq.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._owner = owner

    @property
    def fields(self):
        """Gets the fields of this WorkPlanReq.  # noqa: E501


        :return: The fields of this WorkPlanReq.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this WorkPlanReq.


        :param fields: The fields of this WorkPlanReq.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def summary_fields(self):
        """Gets the summary_fields of this WorkPlanReq.  # noqa: E501


        :return: The summary_fields of this WorkPlanReq.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._summary_fields

    @summary_fields.setter
    def summary_fields(self, summary_fields):
        """Sets the summary_fields of this WorkPlanReq.


        :param summary_fields: The summary_fields of this WorkPlanReq.  # noqa: E501
        :type: dict(str, Object)
        """

        self._summary_fields = summary_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkPlanReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkPlanReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
