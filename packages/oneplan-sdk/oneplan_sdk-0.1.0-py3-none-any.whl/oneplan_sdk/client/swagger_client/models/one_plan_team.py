# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OnePlanTeam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_name': 'str',
        'team_description': 'str',
        'profile_picture': 'str',
        'team_members': 'list[TeamMember]',
        'fields': 'dict(str, Object)',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'team_name': 'TeamName',
        'team_description': 'TeamDescription',
        'profile_picture': 'ProfilePicture',
        'team_members': 'TeamMembers',
        'fields': 'Fields',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, team_name=None, team_description=None, profile_picture=None, team_members=None, fields=None, id=None, config_id=None):  # noqa: E501
        """OnePlanTeam - a model defined in Swagger"""  # noqa: E501
        self._team_name = None
        self._team_description = None
        self._profile_picture = None
        self._team_members = None
        self._fields = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if team_name is not None:
            self.team_name = team_name
        if team_description is not None:
            self.team_description = team_description
        if profile_picture is not None:
            self.profile_picture = profile_picture
        if team_members is not None:
            self.team_members = team_members
        if fields is not None:
            self.fields = fields
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def team_name(self):
        """Gets the team_name of this OnePlanTeam.  # noqa: E501


        :return: The team_name of this OnePlanTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this OnePlanTeam.


        :param team_name: The team_name of this OnePlanTeam.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def team_description(self):
        """Gets the team_description of this OnePlanTeam.  # noqa: E501


        :return: The team_description of this OnePlanTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_description

    @team_description.setter
    def team_description(self, team_description):
        """Sets the team_description of this OnePlanTeam.


        :param team_description: The team_description of this OnePlanTeam.  # noqa: E501
        :type: str
        """

        self._team_description = team_description

    @property
    def profile_picture(self):
        """Gets the profile_picture of this OnePlanTeam.  # noqa: E501


        :return: The profile_picture of this OnePlanTeam.  # noqa: E501
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture):
        """Sets the profile_picture of this OnePlanTeam.


        :param profile_picture: The profile_picture of this OnePlanTeam.  # noqa: E501
        :type: str
        """

        self._profile_picture = profile_picture

    @property
    def team_members(self):
        """Gets the team_members of this OnePlanTeam.  # noqa: E501


        :return: The team_members of this OnePlanTeam.  # noqa: E501
        :rtype: list[TeamMember]
        """
        return self._team_members

    @team_members.setter
    def team_members(self, team_members):
        """Sets the team_members of this OnePlanTeam.


        :param team_members: The team_members of this OnePlanTeam.  # noqa: E501
        :type: list[TeamMember]
        """

        self._team_members = team_members

    @property
    def fields(self):
        """Gets the fields of this OnePlanTeam.  # noqa: E501


        :return: The fields of this OnePlanTeam.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this OnePlanTeam.


        :param fields: The fields of this OnePlanTeam.  # noqa: E501
        :type: dict(str, Object)
        """

        self._fields = fields

    @property
    def id(self):
        """Gets the id of this OnePlanTeam.  # noqa: E501


        :return: The id of this OnePlanTeam.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OnePlanTeam.


        :param id: The id of this OnePlanTeam.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this OnePlanTeam.  # noqa: E501


        :return: The config_id of this OnePlanTeam.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this OnePlanTeam.


        :param config_id: The config_id of this OnePlanTeam.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnePlanTeam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnePlanTeam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
