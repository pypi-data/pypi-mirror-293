# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkPlanConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local_fields': 'list[PlannerColumn]',
        'views': 'list[PlannerView]',
        'work_plan_id': 'GloballyUniqueIdentifier',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'local_fields': 'LocalFields',
        'views': 'Views',
        'work_plan_id': 'WorkPlanId',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, local_fields=None, views=None, work_plan_id=None, id=None, config_id=None):  # noqa: E501
        """WorkPlanConfig - a model defined in Swagger"""  # noqa: E501
        self._local_fields = None
        self._views = None
        self._work_plan_id = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if local_fields is not None:
            self.local_fields = local_fields
        if views is not None:
            self.views = views
        if work_plan_id is not None:
            self.work_plan_id = work_plan_id
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def local_fields(self):
        """Gets the local_fields of this WorkPlanConfig.  # noqa: E501


        :return: The local_fields of this WorkPlanConfig.  # noqa: E501
        :rtype: list[PlannerColumn]
        """
        return self._local_fields

    @local_fields.setter
    def local_fields(self, local_fields):
        """Sets the local_fields of this WorkPlanConfig.


        :param local_fields: The local_fields of this WorkPlanConfig.  # noqa: E501
        :type: list[PlannerColumn]
        """

        self._local_fields = local_fields

    @property
    def views(self):
        """Gets the views of this WorkPlanConfig.  # noqa: E501


        :return: The views of this WorkPlanConfig.  # noqa: E501
        :rtype: list[PlannerView]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this WorkPlanConfig.


        :param views: The views of this WorkPlanConfig.  # noqa: E501
        :type: list[PlannerView]
        """

        self._views = views

    @property
    def work_plan_id(self):
        """Gets the work_plan_id of this WorkPlanConfig.  # noqa: E501


        :return: The work_plan_id of this WorkPlanConfig.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._work_plan_id

    @work_plan_id.setter
    def work_plan_id(self, work_plan_id):
        """Sets the work_plan_id of this WorkPlanConfig.


        :param work_plan_id: The work_plan_id of this WorkPlanConfig.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._work_plan_id = work_plan_id

    @property
    def id(self):
        """Gets the id of this WorkPlanConfig.  # noqa: E501


        :return: The id of this WorkPlanConfig.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkPlanConfig.


        :param id: The id of this WorkPlanConfig.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this WorkPlanConfig.  # noqa: E501


        :return: The config_id of this WorkPlanConfig.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this WorkPlanConfig.


        :param config_id: The config_id of this WorkPlanConfig.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkPlanConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkPlanConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
