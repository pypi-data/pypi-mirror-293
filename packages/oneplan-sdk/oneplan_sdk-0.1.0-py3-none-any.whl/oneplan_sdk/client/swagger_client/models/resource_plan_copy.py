# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourcePlanCopy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copy_to': 'GloballyUniqueIdentifier',
        'copy_from': 'GloballyUniqueIdentifier',
        'start': 'date',
        'end': 'date',
        'copy_fields': 'bool',
        'copy_mode': 'ResourcePlanCopyMode'
    }

    attribute_map = {
        'copy_to': 'CopyTo',
        'copy_from': 'CopyFrom',
        'start': 'Start',
        'end': 'End',
        'copy_fields': 'CopyFields',
        'copy_mode': 'CopyMode'
    }

    def __init__(self, copy_to=None, copy_from=None, start=None, end=None, copy_fields=None, copy_mode=None):  # noqa: E501
        """ResourcePlanCopy - a model defined in Swagger"""  # noqa: E501
        self._copy_to = None
        self._copy_from = None
        self._start = None
        self._end = None
        self._copy_fields = None
        self._copy_mode = None
        self.discriminator = None
        if copy_to is not None:
            self.copy_to = copy_to
        if copy_from is not None:
            self.copy_from = copy_from
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if copy_fields is not None:
            self.copy_fields = copy_fields
        if copy_mode is not None:
            self.copy_mode = copy_mode

    @property
    def copy_to(self):
        """Gets the copy_to of this ResourcePlanCopy.  # noqa: E501


        :return: The copy_to of this ResourcePlanCopy.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._copy_to

    @copy_to.setter
    def copy_to(self, copy_to):
        """Sets the copy_to of this ResourcePlanCopy.


        :param copy_to: The copy_to of this ResourcePlanCopy.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._copy_to = copy_to

    @property
    def copy_from(self):
        """Gets the copy_from of this ResourcePlanCopy.  # noqa: E501


        :return: The copy_from of this ResourcePlanCopy.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._copy_from

    @copy_from.setter
    def copy_from(self, copy_from):
        """Sets the copy_from of this ResourcePlanCopy.


        :param copy_from: The copy_from of this ResourcePlanCopy.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._copy_from = copy_from

    @property
    def start(self):
        """Gets the start of this ResourcePlanCopy.  # noqa: E501


        :return: The start of this ResourcePlanCopy.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ResourcePlanCopy.


        :param start: The start of this ResourcePlanCopy.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this ResourcePlanCopy.  # noqa: E501


        :return: The end of this ResourcePlanCopy.  # noqa: E501
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ResourcePlanCopy.


        :param end: The end of this ResourcePlanCopy.  # noqa: E501
        :type: date
        """

        self._end = end

    @property
    def copy_fields(self):
        """Gets the copy_fields of this ResourcePlanCopy.  # noqa: E501


        :return: The copy_fields of this ResourcePlanCopy.  # noqa: E501
        :rtype: bool
        """
        return self._copy_fields

    @copy_fields.setter
    def copy_fields(self, copy_fields):
        """Sets the copy_fields of this ResourcePlanCopy.


        :param copy_fields: The copy_fields of this ResourcePlanCopy.  # noqa: E501
        :type: bool
        """

        self._copy_fields = copy_fields

    @property
    def copy_mode(self):
        """Gets the copy_mode of this ResourcePlanCopy.  # noqa: E501


        :return: The copy_mode of this ResourcePlanCopy.  # noqa: E501
        :rtype: ResourcePlanCopyMode
        """
        return self._copy_mode

    @copy_mode.setter
    def copy_mode(self, copy_mode):
        """Sets the copy_mode of this ResourcePlanCopy.


        :param copy_mode: The copy_mode of this ResourcePlanCopy.  # noqa: E501
        :type: ResourcePlanCopyMode
        """

        self._copy_mode = copy_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourcePlanCopy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourcePlanCopy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
