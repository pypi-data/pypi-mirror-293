# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audience': 'SystemNotificationAudience',
        'subject': 'str',
        'body': 'str',
        'survey_token': 'str',
        'survey_name': 'str',
        'start': 'date',
        'expiration': 'date',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'audience': 'Audience',
        'subject': 'Subject',
        'body': 'Body',
        'survey_token': 'SurveyToken',
        'survey_name': 'SurveyName',
        'start': 'Start',
        'expiration': 'Expiration',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, audience=None, subject=None, body=None, survey_token=None, survey_name=None, start=None, expiration=None, id=None, config_id=None):  # noqa: E501
        """SystemNotification - a model defined in Swagger"""  # noqa: E501
        self._audience = None
        self._subject = None
        self._body = None
        self._survey_token = None
        self._survey_name = None
        self._start = None
        self._expiration = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if audience is not None:
            self.audience = audience
        if subject is not None:
            self.subject = subject
        if body is not None:
            self.body = body
        if survey_token is not None:
            self.survey_token = survey_token
        if survey_name is not None:
            self.survey_name = survey_name
        if start is not None:
            self.start = start
        if expiration is not None:
            self.expiration = expiration
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def audience(self):
        """Gets the audience of this SystemNotification.  # noqa: E501


        :return: The audience of this SystemNotification.  # noqa: E501
        :rtype: SystemNotificationAudience
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this SystemNotification.


        :param audience: The audience of this SystemNotification.  # noqa: E501
        :type: SystemNotificationAudience
        """

        self._audience = audience

    @property
    def subject(self):
        """Gets the subject of this SystemNotification.  # noqa: E501


        :return: The subject of this SystemNotification.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SystemNotification.


        :param subject: The subject of this SystemNotification.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this SystemNotification.  # noqa: E501


        :return: The body of this SystemNotification.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SystemNotification.


        :param body: The body of this SystemNotification.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def survey_token(self):
        """Gets the survey_token of this SystemNotification.  # noqa: E501


        :return: The survey_token of this SystemNotification.  # noqa: E501
        :rtype: str
        """
        return self._survey_token

    @survey_token.setter
    def survey_token(self, survey_token):
        """Sets the survey_token of this SystemNotification.


        :param survey_token: The survey_token of this SystemNotification.  # noqa: E501
        :type: str
        """

        self._survey_token = survey_token

    @property
    def survey_name(self):
        """Gets the survey_name of this SystemNotification.  # noqa: E501


        :return: The survey_name of this SystemNotification.  # noqa: E501
        :rtype: str
        """
        return self._survey_name

    @survey_name.setter
    def survey_name(self, survey_name):
        """Sets the survey_name of this SystemNotification.


        :param survey_name: The survey_name of this SystemNotification.  # noqa: E501
        :type: str
        """

        self._survey_name = survey_name

    @property
    def start(self):
        """Gets the start of this SystemNotification.  # noqa: E501


        :return: The start of this SystemNotification.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SystemNotification.


        :param start: The start of this SystemNotification.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def expiration(self):
        """Gets the expiration of this SystemNotification.  # noqa: E501


        :return: The expiration of this SystemNotification.  # noqa: E501
        :rtype: date
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this SystemNotification.


        :param expiration: The expiration of this SystemNotification.  # noqa: E501
        :type: date
        """

        self._expiration = expiration

    @property
    def id(self):
        """Gets the id of this SystemNotification.  # noqa: E501


        :return: The id of this SystemNotification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemNotification.


        :param id: The id of this SystemNotification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this SystemNotification.  # noqa: E501


        :return: The config_id of this SystemNotification.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this SystemNotification.


        :param config_id: The config_id of this SystemNotification.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
