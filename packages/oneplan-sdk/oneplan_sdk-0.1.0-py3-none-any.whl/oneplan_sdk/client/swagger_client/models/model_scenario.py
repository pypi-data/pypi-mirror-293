# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelScenario(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'GloballyUniqueIdentifier',
        'name': 'str',
        'parent_model_id': 'GloballyUniqueIdentifier',
        'plans': 'list[ModelScenarioPlan]',
        'properties': 'dict(str, Object)',
        'total_checked_plans': 'int',
        'total_plans': 'int',
        'total_cost_fields': 'dict(str, DecimalNumber)',
        'total_benefit_fields': 'dict(str, DecimalNumber)',
        'target_cost_fields': 'dict(str, DecimalNumber)',
        'target_benefit_fields': 'dict(str, DecimalNumber)',
        'cost_planner_targets': 'list[ScenarioCostTarget]',
        'id': 'GloballyUniqueIdentifier',
        'config_id': 'GloballyUniqueIdentifier'
    }

    attribute_map = {
        'user_id': 'UserId',
        'name': 'Name',
        'parent_model_id': 'ParentModelId',
        'plans': 'Plans',
        'properties': 'Properties',
        'total_checked_plans': 'TotalCheckedPlans',
        'total_plans': 'TotalPlans',
        'total_cost_fields': 'TotalCostFields',
        'total_benefit_fields': 'TotalBenefitFields',
        'target_cost_fields': 'TargetCostFields',
        'target_benefit_fields': 'TargetBenefitFields',
        'cost_planner_targets': 'CostPlannerTargets',
        'id': 'id',
        'config_id': 'ConfigId'
    }

    def __init__(self, user_id=None, name=None, parent_model_id=None, plans=None, properties=None, total_checked_plans=None, total_plans=None, total_cost_fields=None, total_benefit_fields=None, target_cost_fields=None, target_benefit_fields=None, cost_planner_targets=None, id=None, config_id=None):  # noqa: E501
        """ModelScenario - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._name = None
        self._parent_model_id = None
        self._plans = None
        self._properties = None
        self._total_checked_plans = None
        self._total_plans = None
        self._total_cost_fields = None
        self._total_benefit_fields = None
        self._target_cost_fields = None
        self._target_benefit_fields = None
        self._cost_planner_targets = None
        self._id = None
        self._config_id = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if name is not None:
            self.name = name
        if parent_model_id is not None:
            self.parent_model_id = parent_model_id
        if plans is not None:
            self.plans = plans
        if properties is not None:
            self.properties = properties
        if total_checked_plans is not None:
            self.total_checked_plans = total_checked_plans
        if total_plans is not None:
            self.total_plans = total_plans
        if total_cost_fields is not None:
            self.total_cost_fields = total_cost_fields
        if total_benefit_fields is not None:
            self.total_benefit_fields = total_benefit_fields
        if target_cost_fields is not None:
            self.target_cost_fields = target_cost_fields
        if target_benefit_fields is not None:
            self.target_benefit_fields = target_benefit_fields
        if cost_planner_targets is not None:
            self.cost_planner_targets = cost_planner_targets
        if id is not None:
            self.id = id
        if config_id is not None:
            self.config_id = config_id

    @property
    def user_id(self):
        """Gets the user_id of this ModelScenario.  # noqa: E501


        :return: The user_id of this ModelScenario.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelScenario.


        :param user_id: The user_id of this ModelScenario.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this ModelScenario.  # noqa: E501


        :return: The name of this ModelScenario.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelScenario.


        :param name: The name of this ModelScenario.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_model_id(self):
        """Gets the parent_model_id of this ModelScenario.  # noqa: E501


        :return: The parent_model_id of this ModelScenario.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._parent_model_id

    @parent_model_id.setter
    def parent_model_id(self, parent_model_id):
        """Sets the parent_model_id of this ModelScenario.


        :param parent_model_id: The parent_model_id of this ModelScenario.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._parent_model_id = parent_model_id

    @property
    def plans(self):
        """Gets the plans of this ModelScenario.  # noqa: E501


        :return: The plans of this ModelScenario.  # noqa: E501
        :rtype: list[ModelScenarioPlan]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this ModelScenario.


        :param plans: The plans of this ModelScenario.  # noqa: E501
        :type: list[ModelScenarioPlan]
        """

        self._plans = plans

    @property
    def properties(self):
        """Gets the properties of this ModelScenario.  # noqa: E501


        :return: The properties of this ModelScenario.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ModelScenario.


        :param properties: The properties of this ModelScenario.  # noqa: E501
        :type: dict(str, Object)
        """

        self._properties = properties

    @property
    def total_checked_plans(self):
        """Gets the total_checked_plans of this ModelScenario.  # noqa: E501


        :return: The total_checked_plans of this ModelScenario.  # noqa: E501
        :rtype: int
        """
        return self._total_checked_plans

    @total_checked_plans.setter
    def total_checked_plans(self, total_checked_plans):
        """Sets the total_checked_plans of this ModelScenario.


        :param total_checked_plans: The total_checked_plans of this ModelScenario.  # noqa: E501
        :type: int
        """

        self._total_checked_plans = total_checked_plans

    @property
    def total_plans(self):
        """Gets the total_plans of this ModelScenario.  # noqa: E501


        :return: The total_plans of this ModelScenario.  # noqa: E501
        :rtype: int
        """
        return self._total_plans

    @total_plans.setter
    def total_plans(self, total_plans):
        """Sets the total_plans of this ModelScenario.


        :param total_plans: The total_plans of this ModelScenario.  # noqa: E501
        :type: int
        """

        self._total_plans = total_plans

    @property
    def total_cost_fields(self):
        """Gets the total_cost_fields of this ModelScenario.  # noqa: E501


        :return: The total_cost_fields of this ModelScenario.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._total_cost_fields

    @total_cost_fields.setter
    def total_cost_fields(self, total_cost_fields):
        """Sets the total_cost_fields of this ModelScenario.


        :param total_cost_fields: The total_cost_fields of this ModelScenario.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._total_cost_fields = total_cost_fields

    @property
    def total_benefit_fields(self):
        """Gets the total_benefit_fields of this ModelScenario.  # noqa: E501


        :return: The total_benefit_fields of this ModelScenario.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._total_benefit_fields

    @total_benefit_fields.setter
    def total_benefit_fields(self, total_benefit_fields):
        """Sets the total_benefit_fields of this ModelScenario.


        :param total_benefit_fields: The total_benefit_fields of this ModelScenario.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._total_benefit_fields = total_benefit_fields

    @property
    def target_cost_fields(self):
        """Gets the target_cost_fields of this ModelScenario.  # noqa: E501


        :return: The target_cost_fields of this ModelScenario.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._target_cost_fields

    @target_cost_fields.setter
    def target_cost_fields(self, target_cost_fields):
        """Sets the target_cost_fields of this ModelScenario.


        :param target_cost_fields: The target_cost_fields of this ModelScenario.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._target_cost_fields = target_cost_fields

    @property
    def target_benefit_fields(self):
        """Gets the target_benefit_fields of this ModelScenario.  # noqa: E501


        :return: The target_benefit_fields of this ModelScenario.  # noqa: E501
        :rtype: dict(str, DecimalNumber)
        """
        return self._target_benefit_fields

    @target_benefit_fields.setter
    def target_benefit_fields(self, target_benefit_fields):
        """Sets the target_benefit_fields of this ModelScenario.


        :param target_benefit_fields: The target_benefit_fields of this ModelScenario.  # noqa: E501
        :type: dict(str, DecimalNumber)
        """

        self._target_benefit_fields = target_benefit_fields

    @property
    def cost_planner_targets(self):
        """Gets the cost_planner_targets of this ModelScenario.  # noqa: E501


        :return: The cost_planner_targets of this ModelScenario.  # noqa: E501
        :rtype: list[ScenarioCostTarget]
        """
        return self._cost_planner_targets

    @cost_planner_targets.setter
    def cost_planner_targets(self, cost_planner_targets):
        """Sets the cost_planner_targets of this ModelScenario.


        :param cost_planner_targets: The cost_planner_targets of this ModelScenario.  # noqa: E501
        :type: list[ScenarioCostTarget]
        """

        self._cost_planner_targets = cost_planner_targets

    @property
    def id(self):
        """Gets the id of this ModelScenario.  # noqa: E501


        :return: The id of this ModelScenario.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelScenario.


        :param id: The id of this ModelScenario.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._id = id

    @property
    def config_id(self):
        """Gets the config_id of this ModelScenario.  # noqa: E501


        :return: The config_id of this ModelScenario.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this ModelScenario.


        :param config_id: The config_id of this ModelScenario.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._config_id = config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelScenario, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelScenario):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
