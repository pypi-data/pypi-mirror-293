# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_db_null': 'bool',
        'auto_increment': 'bool',
        'auto_increment_seed': 'int',
        'auto_increment_step': 'int',
        'caption': 'str',
        'column_name': 'str',
        'prefix': 'str',
        'data_type': 'Type',
        'date_time_mode': 'DataSetDateTime',
        'default_value': 'Object',
        'expression': 'str',
        'extended_properties': 'dict(str, Object)',
        'max_length': 'int',
        'namespace': 'str',
        'ordinal': 'int',
        'read_only': 'bool',
        'table': 'DataTable',
        'unique': 'bool',
        'column_mapping': 'MappingType',
        'site': 'ISite',
        'container': 'IContainer',
        'design_mode': 'bool'
    }

    attribute_map = {
        'allow_db_null': 'AllowDBNull',
        'auto_increment': 'AutoIncrement',
        'auto_increment_seed': 'AutoIncrementSeed',
        'auto_increment_step': 'AutoIncrementStep',
        'caption': 'Caption',
        'column_name': 'ColumnName',
        'prefix': 'Prefix',
        'data_type': 'DataType',
        'date_time_mode': 'DateTimeMode',
        'default_value': 'DefaultValue',
        'expression': 'Expression',
        'extended_properties': 'ExtendedProperties',
        'max_length': 'MaxLength',
        'namespace': 'Namespace',
        'ordinal': 'Ordinal',
        'read_only': 'ReadOnly',
        'table': 'Table',
        'unique': 'Unique',
        'column_mapping': 'ColumnMapping',
        'site': 'Site',
        'container': 'Container',
        'design_mode': 'DesignMode'
    }

    def __init__(self, allow_db_null=None, auto_increment=None, auto_increment_seed=None, auto_increment_step=None, caption=None, column_name=None, prefix=None, data_type=None, date_time_mode=None, default_value=None, expression=None, extended_properties=None, max_length=None, namespace=None, ordinal=None, read_only=None, table=None, unique=None, column_mapping=None, site=None, container=None, design_mode=None):  # noqa: E501
        """DataColumn - a model defined in Swagger"""  # noqa: E501
        self._allow_db_null = None
        self._auto_increment = None
        self._auto_increment_seed = None
        self._auto_increment_step = None
        self._caption = None
        self._column_name = None
        self._prefix = None
        self._data_type = None
        self._date_time_mode = None
        self._default_value = None
        self._expression = None
        self._extended_properties = None
        self._max_length = None
        self._namespace = None
        self._ordinal = None
        self._read_only = None
        self._table = None
        self._unique = None
        self._column_mapping = None
        self._site = None
        self._container = None
        self._design_mode = None
        self.discriminator = None
        if allow_db_null is not None:
            self.allow_db_null = allow_db_null
        if auto_increment is not None:
            self.auto_increment = auto_increment
        if auto_increment_seed is not None:
            self.auto_increment_seed = auto_increment_seed
        if auto_increment_step is not None:
            self.auto_increment_step = auto_increment_step
        if caption is not None:
            self.caption = caption
        if column_name is not None:
            self.column_name = column_name
        if prefix is not None:
            self.prefix = prefix
        if data_type is not None:
            self.data_type = data_type
        if date_time_mode is not None:
            self.date_time_mode = date_time_mode
        if default_value is not None:
            self.default_value = default_value
        if expression is not None:
            self.expression = expression
        if extended_properties is not None:
            self.extended_properties = extended_properties
        if max_length is not None:
            self.max_length = max_length
        if namespace is not None:
            self.namespace = namespace
        if ordinal is not None:
            self.ordinal = ordinal
        if read_only is not None:
            self.read_only = read_only
        if table is not None:
            self.table = table
        if unique is not None:
            self.unique = unique
        if column_mapping is not None:
            self.column_mapping = column_mapping
        if site is not None:
            self.site = site
        if container is not None:
            self.container = container
        if design_mode is not None:
            self.design_mode = design_mode

    @property
    def allow_db_null(self):
        """Gets the allow_db_null of this DataColumn.  # noqa: E501


        :return: The allow_db_null of this DataColumn.  # noqa: E501
        :rtype: bool
        """
        return self._allow_db_null

    @allow_db_null.setter
    def allow_db_null(self, allow_db_null):
        """Sets the allow_db_null of this DataColumn.


        :param allow_db_null: The allow_db_null of this DataColumn.  # noqa: E501
        :type: bool
        """

        self._allow_db_null = allow_db_null

    @property
    def auto_increment(self):
        """Gets the auto_increment of this DataColumn.  # noqa: E501


        :return: The auto_increment of this DataColumn.  # noqa: E501
        :rtype: bool
        """
        return self._auto_increment

    @auto_increment.setter
    def auto_increment(self, auto_increment):
        """Sets the auto_increment of this DataColumn.


        :param auto_increment: The auto_increment of this DataColumn.  # noqa: E501
        :type: bool
        """

        self._auto_increment = auto_increment

    @property
    def auto_increment_seed(self):
        """Gets the auto_increment_seed of this DataColumn.  # noqa: E501


        :return: The auto_increment_seed of this DataColumn.  # noqa: E501
        :rtype: int
        """
        return self._auto_increment_seed

    @auto_increment_seed.setter
    def auto_increment_seed(self, auto_increment_seed):
        """Sets the auto_increment_seed of this DataColumn.


        :param auto_increment_seed: The auto_increment_seed of this DataColumn.  # noqa: E501
        :type: int
        """

        self._auto_increment_seed = auto_increment_seed

    @property
    def auto_increment_step(self):
        """Gets the auto_increment_step of this DataColumn.  # noqa: E501


        :return: The auto_increment_step of this DataColumn.  # noqa: E501
        :rtype: int
        """
        return self._auto_increment_step

    @auto_increment_step.setter
    def auto_increment_step(self, auto_increment_step):
        """Sets the auto_increment_step of this DataColumn.


        :param auto_increment_step: The auto_increment_step of this DataColumn.  # noqa: E501
        :type: int
        """

        self._auto_increment_step = auto_increment_step

    @property
    def caption(self):
        """Gets the caption of this DataColumn.  # noqa: E501


        :return: The caption of this DataColumn.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this DataColumn.


        :param caption: The caption of this DataColumn.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def column_name(self):
        """Gets the column_name of this DataColumn.  # noqa: E501


        :return: The column_name of this DataColumn.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this DataColumn.


        :param column_name: The column_name of this DataColumn.  # noqa: E501
        :type: str
        """

        self._column_name = column_name

    @property
    def prefix(self):
        """Gets the prefix of this DataColumn.  # noqa: E501


        :return: The prefix of this DataColumn.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this DataColumn.


        :param prefix: The prefix of this DataColumn.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def data_type(self):
        """Gets the data_type of this DataColumn.  # noqa: E501


        :return: The data_type of this DataColumn.  # noqa: E501
        :rtype: Type
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataColumn.


        :param data_type: The data_type of this DataColumn.  # noqa: E501
        :type: Type
        """

        self._data_type = data_type

    @property
    def date_time_mode(self):
        """Gets the date_time_mode of this DataColumn.  # noqa: E501


        :return: The date_time_mode of this DataColumn.  # noqa: E501
        :rtype: DataSetDateTime
        """
        return self._date_time_mode

    @date_time_mode.setter
    def date_time_mode(self, date_time_mode):
        """Sets the date_time_mode of this DataColumn.


        :param date_time_mode: The date_time_mode of this DataColumn.  # noqa: E501
        :type: DataSetDateTime
        """

        self._date_time_mode = date_time_mode

    @property
    def default_value(self):
        """Gets the default_value of this DataColumn.  # noqa: E501


        :return: The default_value of this DataColumn.  # noqa: E501
        :rtype: Object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this DataColumn.


        :param default_value: The default_value of this DataColumn.  # noqa: E501
        :type: Object
        """

        self._default_value = default_value

    @property
    def expression(self):
        """Gets the expression of this DataColumn.  # noqa: E501


        :return: The expression of this DataColumn.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this DataColumn.


        :param expression: The expression of this DataColumn.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def extended_properties(self):
        """Gets the extended_properties of this DataColumn.  # noqa: E501


        :return: The extended_properties of this DataColumn.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this DataColumn.


        :param extended_properties: The extended_properties of this DataColumn.  # noqa: E501
        :type: dict(str, Object)
        """

        self._extended_properties = extended_properties

    @property
    def max_length(self):
        """Gets the max_length of this DataColumn.  # noqa: E501


        :return: The max_length of this DataColumn.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this DataColumn.


        :param max_length: The max_length of this DataColumn.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def namespace(self):
        """Gets the namespace of this DataColumn.  # noqa: E501


        :return: The namespace of this DataColumn.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DataColumn.


        :param namespace: The namespace of this DataColumn.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def ordinal(self):
        """Gets the ordinal of this DataColumn.  # noqa: E501


        :return: The ordinal of this DataColumn.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this DataColumn.


        :param ordinal: The ordinal of this DataColumn.  # noqa: E501
        :type: int
        """

        self._ordinal = ordinal

    @property
    def read_only(self):
        """Gets the read_only of this DataColumn.  # noqa: E501


        :return: The read_only of this DataColumn.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this DataColumn.


        :param read_only: The read_only of this DataColumn.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def table(self):
        """Gets the table of this DataColumn.  # noqa: E501


        :return: The table of this DataColumn.  # noqa: E501
        :rtype: DataTable
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this DataColumn.


        :param table: The table of this DataColumn.  # noqa: E501
        :type: DataTable
        """

        self._table = table

    @property
    def unique(self):
        """Gets the unique of this DataColumn.  # noqa: E501


        :return: The unique of this DataColumn.  # noqa: E501
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this DataColumn.


        :param unique: The unique of this DataColumn.  # noqa: E501
        :type: bool
        """

        self._unique = unique

    @property
    def column_mapping(self):
        """Gets the column_mapping of this DataColumn.  # noqa: E501


        :return: The column_mapping of this DataColumn.  # noqa: E501
        :rtype: MappingType
        """
        return self._column_mapping

    @column_mapping.setter
    def column_mapping(self, column_mapping):
        """Sets the column_mapping of this DataColumn.


        :param column_mapping: The column_mapping of this DataColumn.  # noqa: E501
        :type: MappingType
        """

        self._column_mapping = column_mapping

    @property
    def site(self):
        """Gets the site of this DataColumn.  # noqa: E501


        :return: The site of this DataColumn.  # noqa: E501
        :rtype: ISite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this DataColumn.


        :param site: The site of this DataColumn.  # noqa: E501
        :type: ISite
        """

        self._site = site

    @property
    def container(self):
        """Gets the container of this DataColumn.  # noqa: E501


        :return: The container of this DataColumn.  # noqa: E501
        :rtype: IContainer
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this DataColumn.


        :param container: The container of this DataColumn.  # noqa: E501
        :type: IContainer
        """

        self._container = container

    @property
    def design_mode(self):
        """Gets the design_mode of this DataColumn.  # noqa: E501


        :return: The design_mode of this DataColumn.  # noqa: E501
        :rtype: bool
        """
        return self._design_mode

    @design_mode.setter
    def design_mode(self, design_mode):
        """Sets the design_mode of this DataColumn.


        :param design_mode: The design_mode of this DataColumn.  # noqa: E501
        :type: bool
        """

        self._design_mode = design_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataColumn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
