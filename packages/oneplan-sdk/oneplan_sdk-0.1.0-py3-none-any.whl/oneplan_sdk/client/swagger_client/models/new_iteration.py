# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewIteration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'date',
        'days_per_iteration': 'int',
        'number_of_iterations': 'int',
        'target_points': 'int',
        'target_hours': 'int',
        'planner_id': 'GloballyUniqueIdentifier',
        'global_iteration': 'bool'
    }

    attribute_map = {
        'start': 'Start',
        'days_per_iteration': 'DaysPerIteration',
        'number_of_iterations': 'NumberOfIterations',
        'target_points': 'TargetPoints',
        'target_hours': 'TargetHours',
        'planner_id': 'PlannerId',
        'global_iteration': 'GlobalIteration'
    }

    def __init__(self, start=None, days_per_iteration=None, number_of_iterations=None, target_points=None, target_hours=None, planner_id=None, global_iteration=None):  # noqa: E501
        """NewIteration - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._days_per_iteration = None
        self._number_of_iterations = None
        self._target_points = None
        self._target_hours = None
        self._planner_id = None
        self._global_iteration = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if days_per_iteration is not None:
            self.days_per_iteration = days_per_iteration
        if number_of_iterations is not None:
            self.number_of_iterations = number_of_iterations
        if target_points is not None:
            self.target_points = target_points
        if target_hours is not None:
            self.target_hours = target_hours
        if planner_id is not None:
            self.planner_id = planner_id
        if global_iteration is not None:
            self.global_iteration = global_iteration

    @property
    def start(self):
        """Gets the start of this NewIteration.  # noqa: E501


        :return: The start of this NewIteration.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this NewIteration.


        :param start: The start of this NewIteration.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def days_per_iteration(self):
        """Gets the days_per_iteration of this NewIteration.  # noqa: E501


        :return: The days_per_iteration of this NewIteration.  # noqa: E501
        :rtype: int
        """
        return self._days_per_iteration

    @days_per_iteration.setter
    def days_per_iteration(self, days_per_iteration):
        """Sets the days_per_iteration of this NewIteration.


        :param days_per_iteration: The days_per_iteration of this NewIteration.  # noqa: E501
        :type: int
        """

        self._days_per_iteration = days_per_iteration

    @property
    def number_of_iterations(self):
        """Gets the number_of_iterations of this NewIteration.  # noqa: E501


        :return: The number_of_iterations of this NewIteration.  # noqa: E501
        :rtype: int
        """
        return self._number_of_iterations

    @number_of_iterations.setter
    def number_of_iterations(self, number_of_iterations):
        """Sets the number_of_iterations of this NewIteration.


        :param number_of_iterations: The number_of_iterations of this NewIteration.  # noqa: E501
        :type: int
        """

        self._number_of_iterations = number_of_iterations

    @property
    def target_points(self):
        """Gets the target_points of this NewIteration.  # noqa: E501


        :return: The target_points of this NewIteration.  # noqa: E501
        :rtype: int
        """
        return self._target_points

    @target_points.setter
    def target_points(self, target_points):
        """Sets the target_points of this NewIteration.


        :param target_points: The target_points of this NewIteration.  # noqa: E501
        :type: int
        """

        self._target_points = target_points

    @property
    def target_hours(self):
        """Gets the target_hours of this NewIteration.  # noqa: E501


        :return: The target_hours of this NewIteration.  # noqa: E501
        :rtype: int
        """
        return self._target_hours

    @target_hours.setter
    def target_hours(self, target_hours):
        """Sets the target_hours of this NewIteration.


        :param target_hours: The target_hours of this NewIteration.  # noqa: E501
        :type: int
        """

        self._target_hours = target_hours

    @property
    def planner_id(self):
        """Gets the planner_id of this NewIteration.  # noqa: E501


        :return: The planner_id of this NewIteration.  # noqa: E501
        :rtype: GloballyUniqueIdentifier
        """
        return self._planner_id

    @planner_id.setter
    def planner_id(self, planner_id):
        """Sets the planner_id of this NewIteration.


        :param planner_id: The planner_id of this NewIteration.  # noqa: E501
        :type: GloballyUniqueIdentifier
        """

        self._planner_id = planner_id

    @property
    def global_iteration(self):
        """Gets the global_iteration of this NewIteration.  # noqa: E501


        :return: The global_iteration of this NewIteration.  # noqa: E501
        :rtype: bool
        """
        return self._global_iteration

    @global_iteration.setter
    def global_iteration(self, global_iteration):
        """Sets the global_iteration of this NewIteration.


        :param global_iteration: The global_iteration of this NewIteration.  # noqa: E501
        :type: bool
        """

        self._global_iteration = global_iteration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewIteration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewIteration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
