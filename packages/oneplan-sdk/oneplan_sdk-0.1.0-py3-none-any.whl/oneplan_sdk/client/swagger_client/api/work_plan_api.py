# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oneplan_sdk.client.swagger_client.api_client import ApiClient


class WorkPlanApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def workplan_dependency_id_delete(self, id, **kwargs):  # noqa: E501
        """workplan_dependency_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_dependency_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_dependency_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_dependency_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def workplan_dependency_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """workplan_dependency_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_dependency_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_dependency_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_dependency_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/dependency/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_dependency_id_post(self, body, id, **kwargs):  # noqa: E501
        """workplan_dependency_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_dependency_id_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanDependency body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: PlanDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_dependency_id_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_dependency_id_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def workplan_dependency_id_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """workplan_dependency_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_dependency_id_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanDependency body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: PlanDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_dependency_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_dependency_id_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_dependency_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/dependency/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlanDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_dependency_post(self, body, **kwargs):  # noqa: E501
        """workplan_dependency_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_dependency_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanDependency body: (required)
        :return: PlanDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_dependency_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_dependency_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def workplan_dependency_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """workplan_dependency_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_dependency_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanDependency body: (required)
        :return: PlanDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_dependency_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_dependency_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/dependency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlanDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_fields_field_id_post(self, body, field_id, **kwargs):  # noqa: E501
        """workplan_fields_field_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fields_field_id_post(body, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlannerColumnPost body: (required)
        :param GloballyUniqueIdentifier field_id: (required)
        :return: PlannerColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_fields_field_id_post_with_http_info(body, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_fields_field_id_post_with_http_info(body, field_id, **kwargs)  # noqa: E501
            return data

    def workplan_fields_field_id_post_with_http_info(self, body, field_id, **kwargs):  # noqa: E501
        """workplan_fields_field_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fields_field_id_post_with_http_info(body, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlannerColumnPost body: (required)
        :param GloballyUniqueIdentifier field_id: (required)
        :return: PlannerColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_fields_field_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_fields_field_id_post`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `workplan_fields_field_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'field_id' in params:
            path_params['FieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/fields/{FieldId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlannerColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_fields_get(self, **kwargs):  # noqa: E501
        """workplan_fields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fields_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool hide_system:
        :return: list[PlannerColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_fields_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.workplan_fields_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def workplan_fields_get_with_http_info(self, **kwargs):  # noqa: E501
        """workplan_fields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fields_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool hide_system:
        :return: list[PlannerColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hide_system']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_fields_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hide_system' in params:
            query_params.append(('HideSystem', params['hide_system']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PlannerColumn]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_fields_post(self, body, **kwargs):  # noqa: E501
        """workplan_fields_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fields_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlannerColumnPost body: (required)
        :return: PlannerColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_fields_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_fields_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def workplan_fields_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """workplan_fields_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fields_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlannerColumnPost body: (required)
        :return: PlannerColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_fields_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_fields_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/fields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlannerColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_fields_reorder_post(self, **kwargs):  # noqa: E501
        """workplan_fields_reorder_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fields_reorder_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_fields_reorder_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.workplan_fields_reorder_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def workplan_fields_reorder_post_with_http_info(self, **kwargs):  # noqa: E501
        """workplan_fields_reorder_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fields_reorder_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_fields_reorder_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/fields/reorder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_find_post(self, body, **kwargs):  # noqa: E501
        """workplan_find_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_find_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindPlansRequest body: (required)
        :return: FindPlansReturn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_find_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_find_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def workplan_find_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """workplan_find_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_find_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindPlansRequest body: (required)
        :return: FindPlansReturn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_find_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_find_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/find', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FindPlansReturn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_fragments_get(self, fragment_category, **kwargs):  # noqa: E501
        """workplan_fragments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fragments_get(fragment_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fragment_category: (required)
        :return: list[WorkPlanTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_fragments_get_with_http_info(fragment_category, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_fragments_get_with_http_info(fragment_category, **kwargs)  # noqa: E501
            return data

    def workplan_fragments_get_with_http_info(self, fragment_category, **kwargs):  # noqa: E501
        """workplan_fragments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_fragments_get_with_http_info(fragment_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fragment_category: (required)
        :return: list[WorkPlanTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fragment_category']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_fragments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fragment_category' is set
        if ('fragment_category' not in params or
                params['fragment_category'] is None):
            raise ValueError("Missing the required parameter `fragment_category` when calling `workplan_fragments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fragment_category' in params:
            query_params.append(('FragmentCategory', params['fragment_category']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/fragments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkPlanTemplate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_get(self, filter_field, filter_value, **kwargs):  # noqa: E501
        """workplan_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_get(filter_field, filter_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_field: (required)
        :param str filter_value: (required)
        :param bool show_archived:
        :param bool show_templates:
        :param bool built_in_field:
        :return: list[WorkPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_get_with_http_info(filter_field, filter_value, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_get_with_http_info(filter_field, filter_value, **kwargs)  # noqa: E501
            return data

    def workplan_get_with_http_info(self, filter_field, filter_value, **kwargs):  # noqa: E501
        """workplan_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_get_with_http_info(filter_field, filter_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_field: (required)
        :param str filter_value: (required)
        :param bool show_archived:
        :param bool show_templates:
        :param bool built_in_field:
        :return: list[WorkPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_field', 'filter_value', 'show_archived', 'show_templates', 'built_in_field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_field' is set
        if ('filter_field' not in params or
                params['filter_field'] is None):
            raise ValueError("Missing the required parameter `filter_field` when calling `workplan_get`")  # noqa: E501
        # verify the required parameter 'filter_value' is set
        if ('filter_value' not in params or
                params['filter_value'] is None):
            raise ValueError("Missing the required parameter `filter_value` when calling `workplan_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_field' in params:
            query_params.append(('FilterField', params['filter_field']))  # noqa: E501
        if 'filter_value' in params:
            query_params.append(('FilterValue', params['filter_value']))  # noqa: E501
        if 'show_archived' in params:
            query_params.append(('ShowArchived', params['show_archived']))  # noqa: E501
        if 'show_templates' in params:
            query_params.append(('ShowTemplates', params['show_templates']))  # noqa: E501
        if 'built_in_field' in params:
            query_params.append(('BuiltInField', params['built_in_field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_getfragmentfields_get(self, fragment_id, category, sub_category, **kwargs):  # noqa: E501
        """workplan_getfragmentfields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_getfragmentfields_get(fragment_id, category, sub_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fragment_id: (required)
        :param int category: (required)
        :param int sub_category: (required)
        :return: list[FragmentFieldInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_getfragmentfields_get_with_http_info(fragment_id, category, sub_category, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_getfragmentfields_get_with_http_info(fragment_id, category, sub_category, **kwargs)  # noqa: E501
            return data

    def workplan_getfragmentfields_get_with_http_info(self, fragment_id, category, sub_category, **kwargs):  # noqa: E501
        """workplan_getfragmentfields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_getfragmentfields_get_with_http_info(fragment_id, category, sub_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fragment_id: (required)
        :param int category: (required)
        :param int sub_category: (required)
        :return: list[FragmentFieldInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fragment_id', 'category', 'sub_category']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_getfragmentfields_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fragment_id' is set
        if ('fragment_id' not in params or
                params['fragment_id'] is None):
            raise ValueError("Missing the required parameter `fragment_id` when calling `workplan_getfragmentfields_get`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `workplan_getfragmentfields_get`")  # noqa: E501
        # verify the required parameter 'sub_category' is set
        if ('sub_category' not in params or
                params['sub_category'] is None):
            raise ValueError("Missing the required parameter `sub_category` when calling `workplan_getfragmentfields_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fragment_id' in params:
            query_params.append(('FragmentId', params['fragment_id']))  # noqa: E501
        if 'category' in params:
            query_params.append(('Category', params['category']))  # noqa: E501
        if 'sub_category' in params:
            query_params.append(('SubCategory', params['sub_category']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/getfragmentfields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FragmentFieldInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_getfragmentresources_get(self, fragment_id, category, sub_category, assignment_column, **kwargs):  # noqa: E501
        """workplan_getfragmentresources_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_getfragmentresources_get(fragment_id, category, sub_category, assignment_column, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fragment_id: (required)
        :param int category: (required)
        :param int sub_category: (required)
        :param str assignment_column: (required)
        :return: list[FragmentResourceInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_getfragmentresources_get_with_http_info(fragment_id, category, sub_category, assignment_column, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_getfragmentresources_get_with_http_info(fragment_id, category, sub_category, assignment_column, **kwargs)  # noqa: E501
            return data

    def workplan_getfragmentresources_get_with_http_info(self, fragment_id, category, sub_category, assignment_column, **kwargs):  # noqa: E501
        """workplan_getfragmentresources_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_getfragmentresources_get_with_http_info(fragment_id, category, sub_category, assignment_column, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fragment_id: (required)
        :param int category: (required)
        :param int sub_category: (required)
        :param str assignment_column: (required)
        :return: list[FragmentResourceInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fragment_id', 'category', 'sub_category', 'assignment_column']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_getfragmentresources_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fragment_id' is set
        if ('fragment_id' not in params or
                params['fragment_id'] is None):
            raise ValueError("Missing the required parameter `fragment_id` when calling `workplan_getfragmentresources_get`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `workplan_getfragmentresources_get`")  # noqa: E501
        # verify the required parameter 'sub_category' is set
        if ('sub_category' not in params or
                params['sub_category'] is None):
            raise ValueError("Missing the required parameter `sub_category` when calling `workplan_getfragmentresources_get`")  # noqa: E501
        # verify the required parameter 'assignment_column' is set
        if ('assignment_column' not in params or
                params['assignment_column'] is None):
            raise ValueError("Missing the required parameter `assignment_column` when calling `workplan_getfragmentresources_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fragment_id' in params:
            query_params.append(('FragmentId', params['fragment_id']))  # noqa: E501
        if 'category' in params:
            query_params.append(('Category', params['category']))  # noqa: E501
        if 'sub_category' in params:
            query_params.append(('SubCategory', params['sub_category']))  # noqa: E501
        if 'assignment_column' in params:
            query_params.append(('AssignmentColumn', params['assignment_column']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/getfragmentresources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FragmentResourceInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_changetype_post(self, id, plan_type, new_parent_id, **kwargs):  # noqa: E501
        """workplan_id_changetype_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_changetype_post(id, plan_type, new_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier plan_type: (required)
        :param GloballyUniqueIdentifier new_parent_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_changetype_post_with_http_info(id, plan_type, new_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_changetype_post_with_http_info(id, plan_type, new_parent_id, **kwargs)  # noqa: E501
            return data

    def workplan_id_changetype_post_with_http_info(self, id, plan_type, new_parent_id, **kwargs):  # noqa: E501
        """workplan_id_changetype_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_changetype_post_with_http_info(id, plan_type, new_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier plan_type: (required)
        :param GloballyUniqueIdentifier new_parent_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'plan_type', 'new_parent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_changetype_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_changetype_post`")  # noqa: E501
        # verify the required parameter 'plan_type' is set
        if ('plan_type' not in params or
                params['plan_type'] is None):
            raise ValueError("Missing the required parameter `plan_type` when calling `workplan_id_changetype_post`")  # noqa: E501
        # verify the required parameter 'new_parent_id' is set
        if ('new_parent_id' not in params or
                params['new_parent_id'] is None):
            raise ValueError("Missing the required parameter `new_parent_id` when calling `workplan_id_changetype_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []
        if 'plan_type' in params:
            query_params.append(('PlanType', params['plan_type']))  # noqa: E501
        if 'new_parent_id' in params:
            query_params.append(('NewParentId', params['new_parent_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{Id}/changetype', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_config_get(self, id, **kwargs):  # noqa: E501
        """workplan_id_config_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_config_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: WorkPlanConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_config_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_config_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def workplan_id_config_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """workplan_id_config_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_config_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: WorkPlanConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_config_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_config_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{Id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlanConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_convert_conversionid_post(self, id, conversionid, **kwargs):  # noqa: E501
        """workplan_id_convert_conversionid_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_convert_conversionid_post(id, conversionid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier conversionid: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_convert_conversionid_post_with_http_info(id, conversionid, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_convert_conversionid_post_with_http_info(id, conversionid, **kwargs)  # noqa: E501
            return data

    def workplan_id_convert_conversionid_post_with_http_info(self, id, conversionid, **kwargs):  # noqa: E501
        """workplan_id_convert_conversionid_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_convert_conversionid_post_with_http_info(id, conversionid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier conversionid: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'conversionid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_convert_conversionid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_convert_conversionid_post`")  # noqa: E501
        # verify the required parameter 'conversionid' is set
        if ('conversionid' not in params or
                params['conversionid'] is None):
            raise ValueError("Missing the required parameter `conversionid` when calling `workplan_id_convert_conversionid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'conversionid' in params:
            path_params['conversionid'] = params['conversionid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/convert/{conversionid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_costs_task_id_post(self, id, task_id, **kwargs):  # noqa: E501
        """workplan_id_costs_task_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_costs_task_id_post(id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier task_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_costs_task_id_post_with_http_info(id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_costs_task_id_post_with_http_info(id, task_id, **kwargs)  # noqa: E501
            return data

    def workplan_id_costs_task_id_post_with_http_info(self, id, task_id, **kwargs):  # noqa: E501
        """workplan_id_costs_task_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_costs_task_id_post_with_http_info(id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier task_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_costs_task_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_costs_task_id_post`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `workplan_id_costs_task_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{Id}/costs/{taskId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_delete(self, id, **kwargs):  # noqa: E501
        """workplan_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param bool archive:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def workplan_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """workplan_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param bool archive:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'archive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'archive' in params:
            query_params.append(('Archive', params['archive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_getastemplate_get(self, id, **kwargs):  # noqa: E501
        """workplan_id_getastemplate_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_getastemplate_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_getastemplate_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_getastemplate_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def workplan_id_getastemplate_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """workplan_id_getastemplate_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_getastemplate_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_getastemplate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_getastemplate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/getastemplate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_insertfragment_post(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_insertfragment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_insertfragment_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostFragmentInfo body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_insertfragment_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_insertfragment_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def workplan_id_insertfragment_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_insertfragment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_insertfragment_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostFragmentInfo body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_insertfragment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_id_insertfragment_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_insertfragment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/insertfragment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_post(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkPlanRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool changed_fields:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def workplan_id_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkPlanRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param bool changed_fields:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'changed_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_id_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []
        if 'changed_fields' in params:
            query_params.append(('ChangedFields', params['changed_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{Id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_revenue_post(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_revenue_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_revenue_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CostRevenueRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: list[CostRevenueResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_revenue_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_revenue_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def workplan_id_revenue_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_revenue_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_revenue_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CostRevenueRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: list[CostRevenueResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_revenue_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_id_revenue_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_revenue_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{Id}/revenue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CostRevenueResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_savefragment_post(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_savefragment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_savefragment_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FragmentInfo body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_savefragment_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_savefragment_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def workplan_id_savefragment_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_savefragment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_savefragment_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FragmentInfo body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_savefragment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_id_savefragment_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_savefragment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/savefragment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_split_delete(self, id, field, lookup_value, split, **kwargs):  # noqa: E501
        """workplan_id_split_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_split_delete(id, field, lookup_value, split, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param str field: (required)
        :param GloballyUniqueIdentifier lookup_value: (required)
        :param DecimalNumber split: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_split_delete_with_http_info(id, field, lookup_value, split, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_split_delete_with_http_info(id, field, lookup_value, split, **kwargs)  # noqa: E501
            return data

    def workplan_id_split_delete_with_http_info(self, id, field, lookup_value, split, **kwargs):  # noqa: E501
        """workplan_id_split_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_split_delete_with_http_info(id, field, lookup_value, split, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param str field: (required)
        :param GloballyUniqueIdentifier lookup_value: (required)
        :param DecimalNumber split: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field', 'lookup_value', 'split']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_split_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_split_delete`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `workplan_id_split_delete`")  # noqa: E501
        # verify the required parameter 'lookup_value' is set
        if ('lookup_value' not in params or
                params['lookup_value'] is None):
            raise ValueError("Missing the required parameter `lookup_value` when calling `workplan_id_split_delete`")  # noqa: E501
        # verify the required parameter 'split' is set
        if ('split' not in params or
                params['split'] is None):
            raise ValueError("Missing the required parameter `split` when calling `workplan_id_split_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('Field', params['field']))  # noqa: E501
        if 'lookup_value' in params:
            query_params.append(('LookupValue', params['lookup_value']))  # noqa: E501
        if 'split' in params:
            query_params.append(('Split', params['split']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{Id}/split', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_split_post(self, id, field, lookup_value, split, **kwargs):  # noqa: E501
        """workplan_id_split_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_split_post(id, field, lookup_value, split, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param str field: (required)
        :param GloballyUniqueIdentifier lookup_value: (required)
        :param DecimalNumber split: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_split_post_with_http_info(id, field, lookup_value, split, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_split_post_with_http_info(id, field, lookup_value, split, **kwargs)  # noqa: E501
            return data

    def workplan_id_split_post_with_http_info(self, id, field, lookup_value, split, **kwargs):  # noqa: E501
        """workplan_id_split_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_split_post_with_http_info(id, field, lookup_value, split, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param str field: (required)
        :param GloballyUniqueIdentifier lookup_value: (required)
        :param DecimalNumber split: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field', 'lookup_value', 'split']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_split_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_split_post`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `workplan_id_split_post`")  # noqa: E501
        # verify the required parameter 'lookup_value' is set
        if ('lookup_value' not in params or
                params['lookup_value'] is None):
            raise ValueError("Missing the required parameter `lookup_value` when calling `workplan_id_split_post`")  # noqa: E501
        # verify the required parameter 'split' is set
        if ('split' not in params or
                params['split'] is None):
            raise ValueError("Missing the required parameter `split` when calling `workplan_id_split_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('Field', params['field']))  # noqa: E501
        if 'lookup_value' in params:
            query_params.append(('LookupValue', params['lookup_value']))  # noqa: E501
        if 'split' in params:
            query_params.append(('Split', params['split']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{Id}/split', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_tasks_get(self, id, has_updates, filter_field, filter_value, **kwargs):  # noqa: E501
        """workplan_id_tasks_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_get(id, has_updates, filter_field, filter_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param bool has_updates: (required)
        :param str filter_field: (required)
        :param str filter_value: (required)
        :return: list[WorkPlanTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_tasks_get_with_http_info(id, has_updates, filter_field, filter_value, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_tasks_get_with_http_info(id, has_updates, filter_field, filter_value, **kwargs)  # noqa: E501
            return data

    def workplan_id_tasks_get_with_http_info(self, id, has_updates, filter_field, filter_value, **kwargs):  # noqa: E501
        """workplan_id_tasks_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_get_with_http_info(id, has_updates, filter_field, filter_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param bool has_updates: (required)
        :param str filter_field: (required)
        :param str filter_value: (required)
        :return: list[WorkPlanTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'has_updates', 'filter_field', 'filter_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_tasks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_tasks_get`")  # noqa: E501
        # verify the required parameter 'has_updates' is set
        if ('has_updates' not in params or
                params['has_updates'] is None):
            raise ValueError("Missing the required parameter `has_updates` when calling `workplan_id_tasks_get`")  # noqa: E501
        # verify the required parameter 'filter_field' is set
        if ('filter_field' not in params or
                params['filter_field'] is None):
            raise ValueError("Missing the required parameter `filter_field` when calling `workplan_id_tasks_get`")  # noqa: E501
        # verify the required parameter 'filter_value' is set
        if ('filter_value' not in params or
                params['filter_value'] is None):
            raise ValueError("Missing the required parameter `filter_value` when calling `workplan_id_tasks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'has_updates' in params:
            query_params.append(('HasUpdates', params['has_updates']))  # noqa: E501
        if 'filter_field' in params:
            query_params.append(('FilterField', params['filter_field']))  # noqa: E501
        if 'filter_value' in params:
            query_params.append(('FilterValue', params['filter_value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkPlanTask]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_tasks_post(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_tasks_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TasksRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: WorkPlanTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_tasks_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_tasks_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def workplan_id_tasks_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_tasks_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TasksRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: WorkPlanTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_tasks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_id_tasks_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_tasks_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlanTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_tasks_taskid_assignments_post(self, id, taskid, user_id, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_assignments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_assignments_post(id, taskid, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param int units:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_tasks_taskid_assignments_post_with_http_info(id, taskid, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_tasks_taskid_assignments_post_with_http_info(id, taskid, user_id, **kwargs)  # noqa: E501
            return data

    def workplan_id_tasks_taskid_assignments_post_with_http_info(self, id, taskid, user_id, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_assignments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_assignments_post_with_http_info(id, taskid, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param int units:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'taskid', 'user_id', 'units']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_tasks_taskid_assignments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_tasks_taskid_assignments_post`")  # noqa: E501
        # verify the required parameter 'taskid' is set
        if ('taskid' not in params or
                params['taskid'] is None):
            raise ValueError("Missing the required parameter `taskid` when calling `workplan_id_tasks_taskid_assignments_post`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `workplan_id_tasks_taskid_assignments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'taskid' in params:
            path_params['taskid'] = params['taskid']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501
        if 'units' in params:
            query_params.append(('Units', params['units']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/tasks/{taskid}/assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_tasks_taskid_assignments_user_id_delete(self, id, taskid, user_id, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_assignments_user_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_assignments_user_id_delete(id, taskid, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_tasks_taskid_assignments_user_id_delete_with_http_info(id, taskid, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_tasks_taskid_assignments_user_id_delete_with_http_info(id, taskid, user_id, **kwargs)  # noqa: E501
            return data

    def workplan_id_tasks_taskid_assignments_user_id_delete_with_http_info(self, id, taskid, user_id, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_assignments_user_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_assignments_user_id_delete_with_http_info(id, taskid, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'taskid', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_tasks_taskid_assignments_user_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_tasks_taskid_assignments_user_id_delete`")  # noqa: E501
        # verify the required parameter 'taskid' is set
        if ('taskid' not in params or
                params['taskid'] is None):
            raise ValueError("Missing the required parameter `taskid` when calling `workplan_id_tasks_taskid_assignments_user_id_delete`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `workplan_id_tasks_taskid_assignments_user_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'taskid' in params:
            path_params['taskid'] = params['taskid']  # noqa: E501
        if 'user_id' in params:
            path_params['UserId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/tasks/{taskid}/assignments/{UserId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_tasks_taskid_delete(self, id, taskid, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_delete(id, taskid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :param bool ignore_timesheet_hours:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_tasks_taskid_delete_with_http_info(id, taskid, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_tasks_taskid_delete_with_http_info(id, taskid, **kwargs)  # noqa: E501
            return data

    def workplan_id_tasks_taskid_delete_with_http_info(self, id, taskid, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_delete_with_http_info(id, taskid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :param bool ignore_timesheet_hours:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'taskid', 'ignore_timesheet_hours']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_tasks_taskid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_tasks_taskid_delete`")  # noqa: E501
        # verify the required parameter 'taskid' is set
        if ('taskid' not in params or
                params['taskid'] is None):
            raise ValueError("Missing the required parameter `taskid` when calling `workplan_id_tasks_taskid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'taskid' in params:
            path_params['taskid'] = params['taskid']  # noqa: E501

        query_params = []
        if 'ignore_timesheet_hours' in params:
            query_params.append(('ignoreTimesheetHours', params['ignore_timesheet_hours']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/tasks/{taskid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_tasks_taskid_get(self, id, taskid, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_get(id, taskid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :return: WorkPlanTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_tasks_taskid_get_with_http_info(id, taskid, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_tasks_taskid_get_with_http_info(id, taskid, **kwargs)  # noqa: E501
            return data

    def workplan_id_tasks_taskid_get_with_http_info(self, id, taskid, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_get_with_http_info(id, taskid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :return: WorkPlanTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'taskid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_tasks_taskid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_tasks_taskid_get`")  # noqa: E501
        # verify the required parameter 'taskid' is set
        if ('taskid' not in params or
                params['taskid'] is None):
            raise ValueError("Missing the required parameter `taskid` when calling `workplan_id_tasks_taskid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'taskid' in params:
            path_params['taskid'] = params['taskid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/tasks/{taskid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlanTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_tasks_taskid_post(self, body, id, taskid, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_post(body, id, taskid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TasksRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_tasks_taskid_post_with_http_info(body, id, taskid, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_tasks_taskid_post_with_http_info(body, id, taskid, **kwargs)  # noqa: E501
            return data

    def workplan_id_tasks_taskid_post_with_http_info(self, body, id, taskid, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_post_with_http_info(body, id, taskid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TasksRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'taskid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_tasks_taskid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_id_tasks_taskid_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_tasks_taskid_post`")  # noqa: E501
        # verify the required parameter 'taskid' is set
        if ('taskid' not in params or
                params['taskid'] is None):
            raise ValueError("Missing the required parameter `taskid` when calling `workplan_id_tasks_taskid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'taskid' in params:
            path_params['taskid'] = params['taskid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/tasks/{taskid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_tasks_taskid_updateassignments_post(self, body, id, taskid, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_updateassignments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_updateassignments_post(body, id, taskid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignmentRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_tasks_taskid_updateassignments_post_with_http_info(body, id, taskid, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_tasks_taskid_updateassignments_post_with_http_info(body, id, taskid, **kwargs)  # noqa: E501
            return data

    def workplan_id_tasks_taskid_updateassignments_post_with_http_info(self, body, id, taskid, **kwargs):  # noqa: E501
        """workplan_id_tasks_taskid_updateassignments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_tasks_taskid_updateassignments_post_with_http_info(body, id, taskid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignmentRequest body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier taskid: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'taskid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_tasks_taskid_updateassignments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_id_tasks_taskid_updateassignments_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_tasks_taskid_updateassignments_post`")  # noqa: E501
        # verify the required parameter 'taskid' is set
        if ('taskid' not in params or
                params['taskid'] is None):
            raise ValueError("Missing the required parameter `taskid` when calling `workplan_id_tasks_taskid_updateassignments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'taskid' in params:
            path_params['taskid'] = params['taskid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/tasks/{taskid}/updateassignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_updatefragment_post(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_updatefragment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_updatefragment_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FragmentInfo body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_updatefragment_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_updatefragment_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def workplan_id_updatefragment_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """workplan_id_updatefragment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_updatefragment_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FragmentInfo body: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_updatefragment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_id_updatefragment_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_updatefragment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/updatefragment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_versions_did_delete(self, id, did, **kwargs):  # noqa: E501
        """workplan_id_versions_did_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_versions_did_delete(id, did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier did: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_versions_did_delete_with_http_info(id, did, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_versions_did_delete_with_http_info(id, did, **kwargs)  # noqa: E501
            return data

    def workplan_id_versions_did_delete_with_http_info(self, id, did, **kwargs):  # noqa: E501
        """workplan_id_versions_did_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_versions_did_delete_with_http_info(id, did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier did: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'did']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_versions_did_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_versions_did_delete`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `workplan_id_versions_did_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/versions/{did}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_id_versions_get(self, id, **kwargs):  # noqa: E501
        """workplan_id_versions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_versions_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: list[WorkPlanVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_id_versions_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_id_versions_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def workplan_id_versions_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """workplan_id_versions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_id_versions_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: list[WorkPlanVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_id_versions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_id_versions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{id}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkPlanVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_comments_get(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_comments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_comments_get(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: CommentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_comments_get_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_comments_get_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_comments_get_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_comments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_comments_get_with_http_info(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: CommentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_comments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_comments_id_delete(self, plan_id, id, **kwargs):  # noqa: E501
        """workplan_plan_id_comments_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_comments_id_delete(plan_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_comments_id_delete_with_http_info(plan_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_comments_id_delete_with_http_info(plan_id, id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_comments_id_delete_with_http_info(self, plan_id, id, **kwargs):  # noqa: E501
        """workplan_plan_id_comments_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_comments_id_delete_with_http_info(plan_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_comments_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_comments_id_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `workplan_plan_id_comments_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/comments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_comments_post(self, body, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_comments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_comments_post(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentPost body: (required)
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: TaskComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_comments_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_comments_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_comments_post_with_http_info(self, body, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_comments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_comments_post_with_http_info(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentPost body: (required)
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: TaskComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_comments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_plan_id_comments_post`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_comments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskComment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_get(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_get(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_get_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_get_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_get_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_get_with_http_info(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_processhistory_get(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_processhistory_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_processhistory_get(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[WorkPlanStageStep]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_processhistory_get_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_processhistory_get_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_processhistory_get_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_processhistory_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_processhistory_get_with_http_info(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[WorkPlanStageStep]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_processhistory_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_processhistory_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/processhistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkPlanStageStep]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_ratetables_post(self, body, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_ratetables_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_ratetables_post(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanRateTable body: (required)
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_ratetables_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_ratetables_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_ratetables_post_with_http_info(self, body, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_ratetables_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_ratetables_post_with_http_info(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanRateTable body: (required)
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_ratetables_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_plan_id_ratetables_post`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_ratetables_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/ratetables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_sharedwithteam_delete(self, plan_id, team_id, **kwargs):  # noqa: E501
        """workplan_plan_id_sharedwithteam_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_sharedwithteam_delete(plan_id, team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param GloballyUniqueIdentifier team_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_sharedwithteam_delete_with_http_info(plan_id, team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_sharedwithteam_delete_with_http_info(plan_id, team_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_sharedwithteam_delete_with_http_info(self, plan_id, team_id, **kwargs):  # noqa: E501
        """workplan_plan_id_sharedwithteam_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_sharedwithteam_delete_with_http_info(plan_id, team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param GloballyUniqueIdentifier team_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'team_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_sharedwithteam_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_sharedwithteam_delete`")  # noqa: E501
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `workplan_plan_id_sharedwithteam_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'team_id' in params:
            query_params.append(('TeamId', params['team_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/sharedwithteam', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_sharedwithteam_get(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_sharedwithteam_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_sharedwithteam_get(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[TeamAccess]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_sharedwithteam_get_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_sharedwithteam_get_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_sharedwithteam_get_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_sharedwithteam_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_sharedwithteam_get_with_http_info(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[TeamAccess]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_sharedwithteam_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_sharedwithteam_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/sharedwithteam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamAccess]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_sharedwithteam_post(self, body, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_sharedwithteam_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_sharedwithteam_post(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TeamRequest body: (required)
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_sharedwithteam_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_sharedwithteam_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_sharedwithteam_post_with_http_info(self, body, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_sharedwithteam_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_sharedwithteam_post_with_http_info(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TeamRequest body: (required)
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_sharedwithteam_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_plan_id_sharedwithteam_post`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_sharedwithteam_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/sharedwithteam', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_siblings_get(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_siblings_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_siblings_get(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[WorkPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_siblings_get_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_siblings_get_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_siblings_get_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_siblings_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_siblings_get_with_http_info(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[WorkPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_siblings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_siblings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/siblings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_step_approve_post(self, plan_id, state, comment, **kwargs):  # noqa: E501
        """workplan_plan_id_step_approve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_step_approve_post(plan_id, state, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param ProcessState state: (required)
        :param str comment: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_step_approve_post_with_http_info(plan_id, state, comment, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_step_approve_post_with_http_info(plan_id, state, comment, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_step_approve_post_with_http_info(self, plan_id, state, comment, **kwargs):  # noqa: E501
        """workplan_plan_id_step_approve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_step_approve_post_with_http_info(plan_id, state, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param ProcessState state: (required)
        :param str comment: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'state', 'comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_step_approve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_step_approve_post`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `workplan_plan_id_step_approve_post`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in params or
                params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `workplan_plan_id_step_approve_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/step/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_step_post(self, plan_id, step_name, step_id, **kwargs):  # noqa: E501
        """workplan_plan_id_step_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_step_post(plan_id, step_name, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param str step_name: (required)
        :param GloballyUniqueIdentifier step_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_step_post_with_http_info(plan_id, step_name, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_step_post_with_http_info(plan_id, step_name, step_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_step_post_with_http_info(self, plan_id, step_name, step_id, **kwargs):  # noqa: E501
        """workplan_plan_id_step_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_step_post_with_http_info(plan_id, step_name, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param str step_name: (required)
        :param GloballyUniqueIdentifier step_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'step_name', 'step_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_step_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_step_post`")  # noqa: E501
        # verify the required parameter 'step_name' is set
        if ('step_name' not in params or
                params['step_name'] is None):
            raise ValueError("Missing the required parameter `step_name` when calling `workplan_plan_id_step_post`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `workplan_plan_id_step_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'step_name' in params:
            query_params.append(('StepName', params['step_name']))  # noqa: E501
        if 'step_id' in params:
            query_params.append(('StepId', params['step_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/step', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_subplans_get(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_subplans_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_subplans_get(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[Object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_subplans_get_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_subplans_get_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_subplans_get_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_subplans_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_subplans_get_with_http_info(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[Object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_subplans_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_subplans_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/subplans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_subplans_post(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_subplans_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_subplans_post(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_subplans_post_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_subplans_post_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_subplans_post_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_subplans_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_subplans_post_with_http_info(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_subplans_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_subplans_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/subplans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_user_delete(self, plan_id, user_id, **kwargs):  # noqa: E501
        """workplan_plan_id_user_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_user_delete(plan_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_user_delete_with_http_info(plan_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_user_delete_with_http_info(plan_id, user_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_user_delete_with_http_info(self, plan_id, user_id, **kwargs):  # noqa: E501
        """workplan_plan_id_user_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_user_delete_with_http_info(plan_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_user_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_user_delete`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `workplan_plan_id_user_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/user', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_user_get(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_user_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_user_get(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[UserAccess]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_user_get_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_user_get_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_user_get_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_user_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_user_get_with_http_info(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: list[UserAccess]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_user_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_user_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccess]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_plan_id_user_post(self, body, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_user_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_user_post(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserRequest body: (required)
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_plan_id_user_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_plan_id_user_post_with_http_info(body, plan_id, **kwargs)  # noqa: E501
            return data

    def workplan_plan_id_user_post_with_http_info(self, body, plan_id, **kwargs):  # noqa: E501
        """workplan_plan_id_user_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_plan_id_user_post_with_http_info(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserRequest body: (required)
        :param GloballyUniqueIdentifier plan_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_plan_id_user_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_plan_id_user_post`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `workplan_plan_id_user_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['PlanId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/{PlanId}/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_post(self, body, **kwargs):  # noqa: E501
        """workplan_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkPlanRequest body: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.workplan_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def workplan_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """workplan_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkPlanRequest body: (required)
        :return: WorkPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workplan_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_uploadaitemplate_post(self, **kwargs):  # noqa: E501
        """workplan_uploadaitemplate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_uploadaitemplate_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_uploadaitemplate_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.workplan_uploadaitemplate_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def workplan_uploadaitemplate_post_with_http_info(self, **kwargs):  # noqa: E501
        """workplan_uploadaitemplate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_uploadaitemplate_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_uploadaitemplate_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/uploadaitemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_uploadjson_post(self, **kwargs):  # noqa: E501
        """workplan_uploadjson_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_uploadjson_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_uploadjson_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.workplan_uploadjson_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def workplan_uploadjson_post_with_http_info(self, **kwargs):  # noqa: E501
        """workplan_uploadjson_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_uploadjson_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_uploadjson_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/uploadjson', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workplan_user_levels_get(self, **kwargs):  # noqa: E501
        """workplan_user_levels_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_user_levels_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workplan_user_levels_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.workplan_user_levels_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def workplan_user_levels_get_with_http_info(self, **kwargs):  # noqa: E501
        """workplan_user_levels_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workplan_user_levels_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workplan_user_levels_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/workplan/user/levels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
