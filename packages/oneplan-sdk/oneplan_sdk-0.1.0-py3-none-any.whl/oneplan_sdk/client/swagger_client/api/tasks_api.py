# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oneplan_sdk.client.swagger_client.api_client import ApiClient


class TasksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tasks_dependency_all_get(self, **kwargs):  # noqa: E501
        """tasks_dependency_all_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_dependency_all_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[WorkPlanDep]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_dependency_all_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tasks_dependency_all_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tasks_dependency_all_get_with_http_info(self, **kwargs):  # noqa: E501
        """tasks_dependency_all_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_dependency_all_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[WorkPlanDep]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_dependency_all_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/dependency/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkPlanDep]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_dependency_task_id_dep_id_delete(self, task_id, dep_id, **kwargs):  # noqa: E501
        """tasks_dependency_task_id_dep_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_dependency_task_id_dep_id_delete(task_id, dep_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier task_id: (required)
        :param GloballyUniqueIdentifier dep_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_dependency_task_id_dep_id_delete_with_http_info(task_id, dep_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_dependency_task_id_dep_id_delete_with_http_info(task_id, dep_id, **kwargs)  # noqa: E501
            return data

    def tasks_dependency_task_id_dep_id_delete_with_http_info(self, task_id, dep_id, **kwargs):  # noqa: E501
        """tasks_dependency_task_id_dep_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_dependency_task_id_dep_id_delete_with_http_info(task_id, dep_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier task_id: (required)
        :param GloballyUniqueIdentifier dep_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'dep_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_dependency_task_id_dep_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `tasks_dependency_task_id_dep_id_delete`")  # noqa: E501
        # verify the required parameter 'dep_id' is set
        if ('dep_id' not in params or
                params['dep_id'] is None):
            raise ValueError("Missing the required parameter `dep_id` when calling `tasks_dependency_task_id_dep_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['TaskId'] = params['task_id']  # noqa: E501
        if 'dep_id' in params:
            path_params['DepId'] = params['dep_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/dependency/{TaskId}/{DepId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_dependency_task_id_dep_id_post(self, task_id, dep_id, type, lag, **kwargs):  # noqa: E501
        """tasks_dependency_task_id_dep_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_dependency_task_id_dep_id_post(task_id, dep_id, type, lag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier task_id: (required)
        :param GloballyUniqueIdentifier dep_id: (required)
        :param DependencyType type: (required)
        :param int lag: (required)
        :param str lag_unit:
        :return: WorkPlanDep
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_dependency_task_id_dep_id_post_with_http_info(task_id, dep_id, type, lag, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_dependency_task_id_dep_id_post_with_http_info(task_id, dep_id, type, lag, **kwargs)  # noqa: E501
            return data

    def tasks_dependency_task_id_dep_id_post_with_http_info(self, task_id, dep_id, type, lag, **kwargs):  # noqa: E501
        """tasks_dependency_task_id_dep_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_dependency_task_id_dep_id_post_with_http_info(task_id, dep_id, type, lag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier task_id: (required)
        :param GloballyUniqueIdentifier dep_id: (required)
        :param DependencyType type: (required)
        :param int lag: (required)
        :param str lag_unit:
        :return: WorkPlanDep
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'dep_id', 'type', 'lag', 'lag_unit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_dependency_task_id_dep_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `tasks_dependency_task_id_dep_id_post`")  # noqa: E501
        # verify the required parameter 'dep_id' is set
        if ('dep_id' not in params or
                params['dep_id'] is None):
            raise ValueError("Missing the required parameter `dep_id` when calling `tasks_dependency_task_id_dep_id_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `tasks_dependency_task_id_dep_id_post`")  # noqa: E501
        # verify the required parameter 'lag' is set
        if ('lag' not in params or
                params['lag'] is None):
            raise ValueError("Missing the required parameter `lag` when calling `tasks_dependency_task_id_dep_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['TaskId'] = params['task_id']  # noqa: E501
        if 'dep_id' in params:
            path_params['DepId'] = params['dep_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if 'lag' in params:
            query_params.append(('Lag', params['lag']))  # noqa: E501
        if 'lag_unit' in params:
            query_params.append(('LagUnit', params['lag_unit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/dependency/{TaskId}/{DepId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkPlanDep',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_dependency_task_id_get(self, task_id, **kwargs):  # noqa: E501
        """tasks_dependency_task_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_dependency_task_id_get(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier task_id: (required)
        :return: list[WorkPlanDep]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_dependency_task_id_get_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_dependency_task_id_get_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def tasks_dependency_task_id_get_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """tasks_dependency_task_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_dependency_task_id_get_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier task_id: (required)
        :return: list[WorkPlanDep]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_dependency_task_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `tasks_dependency_task_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['TaskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/dependency/{TaskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkPlanDep]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_fields_get(self, **kwargs):  # noqa: E501
        """tasks_fields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_fields_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool hide_system:
        :return: list[PlannerColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_fields_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tasks_fields_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tasks_fields_get_with_http_info(self, **kwargs):  # noqa: E501
        """tasks_fields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_fields_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool hide_system:
        :return: list[PlannerColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hide_system']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_fields_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hide_system' in params:
            query_params.append(('HideSystem', params['hide_system']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PlannerColumn]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_fields_id_delete(self, id, work_plan_id, **kwargs):  # noqa: E501
        """tasks_fields_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_fields_id_delete(id, work_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier work_plan_id: (required)
        :return: list[PlannerColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_fields_id_delete_with_http_info(id, work_plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_fields_id_delete_with_http_info(id, work_plan_id, **kwargs)  # noqa: E501
            return data

    def tasks_fields_id_delete_with_http_info(self, id, work_plan_id, **kwargs):  # noqa: E501
        """tasks_fields_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_fields_id_delete_with_http_info(id, work_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier work_plan_id: (required)
        :return: list[PlannerColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'work_plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_fields_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tasks_fields_id_delete`")  # noqa: E501
        # verify the required parameter 'work_plan_id' is set
        if ('work_plan_id' not in params or
                params['work_plan_id'] is None):
            raise ValueError("Missing the required parameter `work_plan_id` when calling `tasks_fields_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'work_plan_id' in params:
            query_params.append(('WorkPlanId', params['work_plan_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/fields/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PlannerColumn]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_fields_id_post(self, body, work_plan_id, id, **kwargs):  # noqa: E501
        """tasks_fields_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_fields_id_post(body, work_plan_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlannerColumnPost body: (required)
        :param GloballyUniqueIdentifier work_plan_id: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: PlannerColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_fields_id_post_with_http_info(body, work_plan_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_fields_id_post_with_http_info(body, work_plan_id, id, **kwargs)  # noqa: E501
            return data

    def tasks_fields_id_post_with_http_info(self, body, work_plan_id, id, **kwargs):  # noqa: E501
        """tasks_fields_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_fields_id_post_with_http_info(body, work_plan_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlannerColumnPost body: (required)
        :param GloballyUniqueIdentifier work_plan_id: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: PlannerColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'work_plan_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_fields_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tasks_fields_id_post`")  # noqa: E501
        # verify the required parameter 'work_plan_id' is set
        if ('work_plan_id' not in params or
                params['work_plan_id'] is None):
            raise ValueError("Missing the required parameter `work_plan_id` when calling `tasks_fields_id_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tasks_fields_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'work_plan_id' in params:
            query_params.append(('WorkPlanId', params['work_plan_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/fields/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlannerColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_fields_post(self, body, work_plan_id, **kwargs):  # noqa: E501
        """tasks_fields_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_fields_post(body, work_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlannerColumnPost body: (required)
        :param GloballyUniqueIdentifier work_plan_id: (required)
        :return: PlannerColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_fields_post_with_http_info(body, work_plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_fields_post_with_http_info(body, work_plan_id, **kwargs)  # noqa: E501
            return data

    def tasks_fields_post_with_http_info(self, body, work_plan_id, **kwargs):  # noqa: E501
        """tasks_fields_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_fields_post_with_http_info(body, work_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlannerColumnPost body: (required)
        :param GloballyUniqueIdentifier work_plan_id: (required)
        :return: PlannerColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'work_plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_fields_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tasks_fields_post`")  # noqa: E501
        # verify the required parameter 'work_plan_id' is set
        if ('work_plan_id' not in params or
                params['work_plan_id'] is None):
            raise ValueError("Missing the required parameter `work_plan_id` when calling `tasks_fields_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'work_plan_id' in params:
            query_params.append(('WorkPlanId', params['work_plan_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/fields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlannerColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_id_comments_get(self, id, **kwargs):  # noqa: E501
        """tasks_id_comments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_comments_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: CommentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_id_comments_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_id_comments_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tasks_id_comments_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """tasks_id_comments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_comments_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :return: CommentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_id_comments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tasks_id_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{id}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_id_comments_post(self, body, notificationid, id, **kwargs):  # noqa: E501
        """tasks_id_comments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_comments_post(body, notificationid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskComment body: (required)
        :param str notificationid: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: TaskComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_id_comments_post_with_http_info(body, notificationid, id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_id_comments_post_with_http_info(body, notificationid, id, **kwargs)  # noqa: E501
            return data

    def tasks_id_comments_post_with_http_info(self, body, notificationid, id, **kwargs):  # noqa: E501
        """tasks_id_comments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_comments_post_with_http_info(body, notificationid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskComment body: (required)
        :param str notificationid: (required)
        :param GloballyUniqueIdentifier id: (required)
        :return: TaskComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'notificationid', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_id_comments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tasks_id_comments_post`")  # noqa: E501
        # verify the required parameter 'notificationid' is set
        if ('notificationid' not in params or
                params['notificationid'] is None):
            raise ValueError("Missing the required parameter `notificationid` when calling `tasks_id_comments_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tasks_id_comments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'notificationid' in params:
            query_params.append(('Notificationid', params['notificationid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{id}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskComment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_localfields_get(self, work_plan_id, **kwargs):  # noqa: E501
        """tasks_localfields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_localfields_get(work_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier work_plan_id: (required)
        :return: list[PlannerColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_localfields_get_with_http_info(work_plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_localfields_get_with_http_info(work_plan_id, **kwargs)  # noqa: E501
            return data

    def tasks_localfields_get_with_http_info(self, work_plan_id, **kwargs):  # noqa: E501
        """tasks_localfields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_localfields_get_with_http_info(work_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier work_plan_id: (required)
        :return: list[PlannerColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_localfields_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_plan_id' is set
        if ('work_plan_id' not in params or
                params['work_plan_id'] is None):
            raise ValueError("Missing the required parameter `work_plan_id` when calling `tasks_localfields_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'work_plan_id' in params:
            query_params.append(('WorkPlanId', params['work_plan_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/localfields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PlannerColumn]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_taskid_comments_id_delete(self, taskid, id, notificationid, **kwargs):  # noqa: E501
        """tasks_taskid_comments_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_taskid_comments_id_delete(taskid, id, notificationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier taskid: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param str notificationid: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_taskid_comments_id_delete_with_http_info(taskid, id, notificationid, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_taskid_comments_id_delete_with_http_info(taskid, id, notificationid, **kwargs)  # noqa: E501
            return data

    def tasks_taskid_comments_id_delete_with_http_info(self, taskid, id, notificationid, **kwargs):  # noqa: E501
        """tasks_taskid_comments_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_taskid_comments_id_delete_with_http_info(taskid, id, notificationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier taskid: (required)
        :param GloballyUniqueIdentifier id: (required)
        :param str notificationid: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taskid', 'id', 'notificationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_taskid_comments_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taskid' is set
        if ('taskid' not in params or
                params['taskid'] is None):
            raise ValueError("Missing the required parameter `taskid` when calling `tasks_taskid_comments_id_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tasks_taskid_comments_id_delete`")  # noqa: E501
        # verify the required parameter 'notificationid' is set
        if ('notificationid' not in params or
                params['notificationid'] is None):
            raise ValueError("Missing the required parameter `notificationid` when calling `tasks_taskid_comments_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'taskid' in params:
            path_params['taskid'] = params['taskid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'notificationid' in params:
            query_params.append(('Notificationid', params['notificationid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{taskid}/comments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
