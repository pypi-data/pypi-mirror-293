# coding: utf-8

"""
    OnePlan API

    This is an automatically generated OpenAPI specification for the OnePlan API based on the api help docs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oneplan_sdk.client.swagger_client.api_client import ApiClient


class TimesheetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def timesheet_id_lines_line_id_delete(self, id, line_id, user_id, **kwargs):  # noqa: E501
        """timesheet_id_lines_line_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_lines_line_id_delete(id, line_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier line_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.timesheet_id_lines_line_id_delete_with_http_info(id, line_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.timesheet_id_lines_line_id_delete_with_http_info(id, line_id, user_id, **kwargs)  # noqa: E501
            return data

    def timesheet_id_lines_line_id_delete_with_http_info(self, id, line_id, user_id, **kwargs):  # noqa: E501
        """timesheet_id_lines_line_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_lines_line_id_delete_with_http_info(id, line_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier line_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'line_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timesheet_id_lines_line_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `timesheet_id_lines_line_id_delete`")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling `timesheet_id_lines_line_id_delete`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `timesheet_id_lines_line_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501
        if 'line_id' in params:
            path_params['LineId'] = params['line_id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/timesheet/{Id}/lines/{LineId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def timesheet_id_lines_put(self, id, user_id, **kwargs):  # noqa: E501
        """timesheet_id_lines_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_lines_put(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.timesheet_id_lines_put_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.timesheet_id_lines_put_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def timesheet_id_lines_put_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """timesheet_id_lines_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_lines_put_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timesheet_id_lines_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `timesheet_id_lines_put`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `timesheet_id_lines_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/timesheet/{Id}/lines', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def timesheet_id_recall_post(self, id, user_id, **kwargs):  # noqa: E501
        """timesheet_id_recall_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_recall_post(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.timesheet_id_recall_post_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.timesheet_id_recall_post_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def timesheet_id_recall_post_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """timesheet_id_recall_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_recall_post_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timesheet_id_recall_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `timesheet_id_recall_post`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `timesheet_id_recall_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/timesheet/{Id}/recall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def timesheet_id_submit_post(self, id, user_id, **kwargs):  # noqa: E501
        """timesheet_id_submit_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_submit_post(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param bool all_rows:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.timesheet_id_submit_post_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.timesheet_id_submit_post_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def timesheet_id_submit_post_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """timesheet_id_submit_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_submit_post_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param bool all_rows:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id', 'all_rows']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timesheet_id_submit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `timesheet_id_submit_post`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `timesheet_id_submit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501
        if 'all_rows' in params:
            query_params.append(('AllRows', params['all_rows']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/timesheet/{Id}/submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def timesheet_id_workflow_line_id_get(self, id, line_id, **kwargs):  # noqa: E501
        """timesheet_id_workflow_line_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_workflow_line_id_get(id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier line_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.timesheet_id_workflow_line_id_get_with_http_info(id, line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.timesheet_id_workflow_line_id_get_with_http_info(id, line_id, **kwargs)  # noqa: E501
            return data

    def timesheet_id_workflow_line_id_get_with_http_info(self, id, line_id, **kwargs):  # noqa: E501
        """timesheet_id_workflow_line_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_id_workflow_line_id_get_with_http_info(id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier id: (required)
        :param GloballyUniqueIdentifier line_id: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'line_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timesheet_id_workflow_line_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `timesheet_id_workflow_line_id_get`")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling `timesheet_id_workflow_line_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501
        if 'line_id' in params:
            path_params['lineId'] = params['line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/timesheet/{Id}/workflow/{lineId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def timesheet_lines_get(self, period_id, user_id, **kwargs):  # noqa: E501
        """timesheet_lines_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_lines_get(period_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier period_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: TimesheetInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.timesheet_lines_get_with_http_info(period_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.timesheet_lines_get_with_http_info(period_id, user_id, **kwargs)  # noqa: E501
            return data

    def timesheet_lines_get_with_http_info(self, period_id, user_id, **kwargs):  # noqa: E501
        """timesheet_lines_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timesheet_lines_get_with_http_info(period_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier period_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: TimesheetInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timesheet_lines_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `timesheet_lines_get`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `timesheet_lines_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'period_id' in params:
            query_params.append(('PeriodId', params['period_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/timesheet/lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimesheetInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ts_fields_get(self, **kwargs):  # noqa: E501
        """ts_fields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_fields_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: DataTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ts_fields_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ts_fields_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ts_fields_get_with_http_info(self, **kwargs):  # noqa: E501
        """ts_fields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_fields_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: DataTable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ts_fields_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/ts/fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataTable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ts_periods_get(self, **kwargs):  # noqa: E501
        """ts_periods_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_periods_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool closed:
        :return: DataTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ts_periods_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ts_periods_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ts_periods_get_with_http_info(self, **kwargs):  # noqa: E501
        """ts_periods_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_periods_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool closed:
        :return: DataTable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['closed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ts_periods_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'closed' in params:
            query_params.append(('Closed', params['closed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/ts/periods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataTable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ts_search_get(self, search_string, user_id, **kwargs):  # noqa: E501
        """ts_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_search_get(search_string, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_string: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param bool assigned_to_me:
        :return: list[Object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ts_search_get_with_http_info(search_string, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.ts_search_get_with_http_info(search_string, user_id, **kwargs)  # noqa: E501
            return data

    def ts_search_get_with_http_info(self, search_string, user_id, **kwargs):  # noqa: E501
        """ts_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_search_get_with_http_info(search_string, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_string: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param bool assigned_to_me:
        :return: list[Object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_string', 'user_id', 'assigned_to_me']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ts_search_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_string' is set
        if ('search_string' not in params or
                params['search_string'] is None):
            raise ValueError("Missing the required parameter `search_string` when calling `ts_search_get`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `ts_search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_string' in params:
            query_params.append(('SearchString', params['search_string']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501
        if 'assigned_to_me' in params:
            query_params.append(('AssignedToMe', params['assigned_to_me']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/ts/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ts_stopwatch_start_post(self, body, user_id, offset, **kwargs):  # noqa: E501
        """ts_stopwatch_start_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_stopwatch_start_post(body, user_id, offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Stopwatch body: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param int offset: (required)
        :return: list[Stopwatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ts_stopwatch_start_post_with_http_info(body, user_id, offset, **kwargs)  # noqa: E501
        else:
            (data) = self.ts_stopwatch_start_post_with_http_info(body, user_id, offset, **kwargs)  # noqa: E501
            return data

    def ts_stopwatch_start_post_with_http_info(self, body, user_id, offset, **kwargs):  # noqa: E501
        """ts_stopwatch_start_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_stopwatch_start_post_with_http_info(body, user_id, offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Stopwatch body: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param int offset: (required)
        :return: list[Stopwatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ts_stopwatch_start_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `ts_stopwatch_start_post`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `ts_stopwatch_start_post`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `ts_stopwatch_start_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/ts/stopwatch/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Stopwatch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ts_stopwatch_stop_post(self, timesheet_line_id, current_time, user_id, offset, **kwargs):  # noqa: E501
        """ts_stopwatch_stop_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_stopwatch_stop_post(timesheet_line_id, current_time, user_id, offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier timesheet_line_id: (required)
        :param date current_time: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param int offset: (required)
        :return: Stopwatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ts_stopwatch_stop_post_with_http_info(timesheet_line_id, current_time, user_id, offset, **kwargs)  # noqa: E501
        else:
            (data) = self.ts_stopwatch_stop_post_with_http_info(timesheet_line_id, current_time, user_id, offset, **kwargs)  # noqa: E501
            return data

    def ts_stopwatch_stop_post_with_http_info(self, timesheet_line_id, current_time, user_id, offset, **kwargs):  # noqa: E501
        """ts_stopwatch_stop_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_stopwatch_stop_post_with_http_info(timesheet_line_id, current_time, user_id, offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier timesheet_line_id: (required)
        :param date current_time: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param int offset: (required)
        :return: Stopwatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timesheet_line_id', 'current_time', 'user_id', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ts_stopwatch_stop_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timesheet_line_id' is set
        if ('timesheet_line_id' not in params or
                params['timesheet_line_id'] is None):
            raise ValueError("Missing the required parameter `timesheet_line_id` when calling `ts_stopwatch_stop_post`")  # noqa: E501
        # verify the required parameter 'current_time' is set
        if ('current_time' not in params or
                params['current_time'] is None):
            raise ValueError("Missing the required parameter `current_time` when calling `ts_stopwatch_stop_post`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `ts_stopwatch_stop_post`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `ts_stopwatch_stop_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'timesheet_line_id' in params:
            query_params.append(('TimesheetLineId', params['timesheet_line_id']))  # noqa: E501
        if 'current_time' in params:
            query_params.append(('currentTime', params['current_time']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/ts/stopwatch/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stopwatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ts_stopwatch_validate_post(self, body, **kwargs):  # noqa: E501
        """ts_stopwatch_validate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_stopwatch_validate_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Stopwatch body: (required)
        :return: Stopwatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ts_stopwatch_validate_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.ts_stopwatch_validate_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def ts_stopwatch_validate_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """ts_stopwatch_validate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_stopwatch_validate_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Stopwatch body: (required)
        :return: Stopwatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ts_stopwatch_validate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `ts_stopwatch_validate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/ts/stopwatch/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stopwatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ts_timesheet_get(self, period_id, user_id, **kwargs):  # noqa: E501
        """ts_timesheet_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_timesheet_get(period_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier period_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ts_timesheet_get_with_http_info(period_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.ts_timesheet_get_with_http_info(period_id, user_id, **kwargs)  # noqa: E501
            return data

    def ts_timesheet_get_with_http_info(self, period_id, user_id, **kwargs):  # noqa: E501
        """ts_timesheet_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_timesheet_get_with_http_info(period_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier period_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ts_timesheet_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `ts_timesheet_get`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `ts_timesheet_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'period_id' in params:
            query_params.append(('PeriodId', params['period_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/ts/timesheet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ts_timesheet_lines_get(self, period_id, user_id, **kwargs):  # noqa: E501
        """ts_timesheet_lines_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_timesheet_lines_get(period_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier period_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param bool my_approvals:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ts_timesheet_lines_get_with_http_info(period_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.ts_timesheet_lines_get_with_http_info(period_id, user_id, **kwargs)  # noqa: E501
            return data

    def ts_timesheet_lines_get_with_http_info(self, period_id, user_id, **kwargs):  # noqa: E501
        """ts_timesheet_lines_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_timesheet_lines_get_with_http_info(period_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GloballyUniqueIdentifier period_id: (required)
        :param GloballyUniqueIdentifier user_id: (required)
        :param bool my_approvals:
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period_id', 'user_id', 'my_approvals']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ts_timesheet_lines_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `ts_timesheet_lines_get`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `ts_timesheet_lines_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'my_approvals' in params:
            query_params.append(('MyApprovals', params['my_approvals']))  # noqa: E501
        if 'period_id' in params:
            query_params.append(('PeriodId', params['period_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('UserId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/ts/timesheet/lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ts_timesheet_lines_post(self, body, **kwargs):  # noqa: E501
        """ts_timesheet_lines_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_timesheet_lines_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveLineObject body: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ts_timesheet_lines_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.ts_timesheet_lines_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def ts_timesheet_lines_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """ts_timesheet_lines_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ts_timesheet_lines_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveLineObject body: (required)
        :return: HttpResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ts_timesheet_lines_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `ts_timesheet_lines_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oneplan_api_auth']  # noqa: E501

        return self.api_client.call_api(
            '/ts/timesheet/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponseMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
