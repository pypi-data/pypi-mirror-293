# -*- coding: utf-8 -*-

# Copyright (c) 2022 longtsing.
# Distributed under the terms of the GPL V3 License.

"""
The Afile Reader module which get data from Afile(compatible with the A0File)

Change Log:
    - Created by 王清龙/湖北/宜昌, 2022/10/1, e-mail:songofsongs@vip.qq.com
"""

import sys
import re
import numpy as np
import pandas as pd
import calendar
import os.path
from datetime import datetime,timedelta
import openpyxl as xl
from openpyxl.styles import NamedStyle, Alignment, Font, Border, Side
#region 常量定义区
#A文件的气象要素标识符，一个字符表示一个气象要素
OBstrs='PTIEUNHCVRWLZGFDKASB'
#region 用base64存储excel模板文件，直接在代码中调用，减少模板文件被修改的可能。
import base64
from io import BytesIO 
#region base64 excel模板文件   
templateexcel='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'

#endregion 
excel_bin_data = base64.b64decode(templateexcel)
templateexcel_f = BytesIO(excel_bin_data)
#endregion 
#endregion 
#templateexcel_f=os.path.split(os.path.abspath(__file__))[0]+'/A文件转Excel模板.xlsx'
wp=re.compile(r'(?<=[\(\),])\d{2}')

def read_A0file_metaD(metaline):
    """
    #从A0文件首行中读取并返回元数据
    Args:
        metaline (string): A0文件的首行.

    Return:
        list 元数据列表.
    """
    stationcode=metaline[:5]
    lat=int(metaline[6:8]) +int(metaline[8:10])/60
    latstr=metaline[6:8]+'°'+metaline[8:10]+'″'
    lon=int(metaline[10:13]) +int(metaline[13:14])/60
    lonstr=metaline[12:15]+'°'+metaline[15:17]+'″'
    alti=int(metaline[16:21])/10
    PRS_alti=int(metaline[22:27])/10
    year=int(metaline[28:32])
    month=int(metaline[33:55])
    
    return stationcode,lat,latstr,lon,lonstr,alti,PRS_alti,year,month

def read_Afile_metaD(metaline):    
    """
    #从A文件首行中读取并返回元数据
    Args:
        metaline (string): A0文件的首行.
    Return:
        A list of 元数据.
    """
    stationcode=metaline[:5]
    lat=int(metaline[6:8]) +int(metaline[8:10])/60
    latF=metaline[10]
    if(latF=='S'):
        lat=lat*-1
    latstr=metaline[6:8]+'°'+metaline[8:10]+'″'+latF
    lon=int(metaline[12:15]) +int(metaline[15:17])/60
    lonF=metaline[17]
    if(lonF=='W'):
        lon=lon*-1
    lonstr=metaline[12:15]+'°'+metaline[15:17]+'″'+lonF
    altiF=metaline[19]
    alti=int(metaline[20:25])/10
    PRS_altiF=metaline[26]
    PRS_alti=int(metaline[27:32])/10
    Wind_height=int(metaline[33:36])/10
    height=int(metaline[37:40])/10
    ob_T=metaline[42]
    observation_str=''
    if(ob_T=='0'):
        observation_str='人工观测'
    else:
        if(ob_T=='1'):
            observation_str='自动观测'
    station_type=metaline[43]
    station_typestr=''
    if(station_type=='1'):
        station_typestr='基准站'
    else:
        if(station_type=='2'):
            station_typestr='基本站'
        else:
            if(station_type=='3'):
                station_typestr='一般站（四次观测）'
            else:
                if(station_type=='4'):
                    station_typestr='一般站（三次观测）'

    OB_ts=['9']*len(OBstrs)
    OB_ts=list(metaline[45:65])
    QC_F=metaline[66]
    year=int(metaline[68:72])
    month=int(metaline[73:75])
    
    return stationcode,lat,latF,latstr,lon,lonF,lonstr,altiF,alti,PRS_altiF,PRS_alti,Wind_height,height,ob_T,observation_str,station_type,station_typestr,OB_ts,QC_F,year,month

def ReadAfile(afile:str):
    """
    读取A或A0文件,取得内部元数据和气象观测数据
    
    Args:
        afile (string): A或A0文件的地址.

    Return:
        metadata：A文件中的元数据
        hourly_datas:月各要素逐小时数据，以20时为日界
        ssh:日照逐小时数据，以0时为日界
        dialy_datas:月各要素逐日数据
    """
    #region  读取txt文件
    if(not os.path.exists(afile)):
        print("The Afile is not exists!")
        sys.exit(1)

    f=open(afile,encoding='gb18030', errors='ignore')
    line=f.readline()
    lines=[]
    while(line):
        line=line.strip()
        if(len(line)>0):
            lines.append(line)
        line=f.readline()
    f.close()
    #endregion

    #region 读取元数据信息
    metadata={
        'OBstrs':OBstrs,
        'OB_units':[
            'hPa,hPa',
            'degeeC',
            'degeeC,degeeC',
            'hPa',
            'percent',
            'ten percent',
            'm',
            'type string',
            'Km',
            'mm',
            'weather string',
            'mm',
            'cm',
            'special',
            'degree or Wind direct, m/s',
            'degreeC',
            'degreeC',
            'cm',
            'hours',
            'degreeC'
        ],
        'stationcode':'#####',
        'stationname':'',
        'QC_F': '0',
        'QCD_F':'0',
        'FJ_F':'0',
        'FJ_i':-1,
        'FJ_YF_i':-1,
        'FJ_JY_i':-1,
        'FJ_GK_i':-1,
        'FJ_BZ_i':-1,
        'FJ':{},
        'FJ_JY_CONSTs':{
            '01':'重要天气现象及其影响',
            '02':'台站附近江、河、湖、海状况',
            '03':'台站附近道路状况',
            '04':'台站附近高山积雪状况',
            '05':'冰雹记载',
            '06':'罕见特殊现象',
            '07':'人工影响局部天气情况',
            '08':'其他事项记载'
        },
        'FJ_GK_CONSTs':{
            '01':'主要天气气候特点',
            '02':'主要天气过程',
            '03':'重大灾害性、关键性天气及其影响',
            '04':'持续时间较长的不利天气影响',
            '05':'天气气候综合评价'
        }
    }
    metaline=lines[0]
    if(len(metaline)>38):
        stationcode,lat,latF,latstr,lon,lonF,lonstr,altiF,alti,PRS_altiF,PRS_alti,Wind_height,height,ob_T,observation_str,station_type,station_typestr,OB_ts,QC_F,year,month=read_Afile_metaD(metaline)
        metadata.update({
            'stationcode':stationcode,
            'lat':lat,
            'latF':latF,
            'latstr':latstr,
            'lon':lon,
            'lonF':lonF,
            'lonstr':lonstr,
            'altiF':altiF,
            'alti':alti,
            'PRS_altiF':PRS_altiF,
            'PRS_alti':PRS_alti,
            'Wind_height':Wind_height,
            'height':height,
            'ob_T':ob_T,
            'observation_str':observation_str,
            'station_type':station_type,
            'station_typestr':station_typestr,
            'OB_ts':OB_ts,
            'QC_F':QC_F,
            'year':year,
            'month':month
        })    
    else:
        stationcode,lat,latstr,lon,lonstr,alti,PRS_alti,year,month=read_A0file_metaD(metaline)
        metadata.update({
            'stationcode':stationcode,
            'lat':lat,
            'latstr':latstr,
            'lon':lon,
            'lonstr':lonstr,
            'alti':alti,
            'PRS_alti':PRS_alti,
            'year':year,
            'month':month,
        })

    metadata.update({
        'daycounts':calendar.monthrange(metadata['year'],metadata['month'])[1]
    })
    #endregion

    #region 初始化数据
    hours=pd.date_range(start=(datetime(year,month,1)-timedelta(hours=3)),periods=metadata['daycounts']*24,freq='1H')
    hourly_datas=pd.DataFrame({'Datetime':hours,'Station':[stationcode]*len(hours)})
    days=pd.date_range(start=datetime(year,month,1),periods=metadata['daycounts'],freq='1D')
    dialy_datas=pd.DataFrame({'Datetime':days,'Station':[stationcode]*len(days)})
    ssh=pd.date_range(start=datetime(year,month,1,1),periods=metadata['daycounts']*24,freq='1H')
    ssh=pd.DataFrame({'Datetime':ssh,'Station':[stationcode]*len(hours)})
    #endregion

    #region 获取各要素位置、存储、质控情况
    OB_is=[-1]*len(OBstrs)
    OB_ts=['']*len(OBstrs)
    OB_hs=['0']*len(OBstrs) #0全月缺测 1有数据 2有观测但全月未出现
    OB_D_end=-1
    OB_Q_end=-1
    OB_FJ_end=-1
    if(metadata['QC_F']=='1'):
        QC_is=[-1]*len(OBstrs)
        QC_ts=[-1]*len(OBstrs)
    flag='1'
    for i in range(1,len(lines)):
        if(lines[i][0] in OBstrs and len(lines[i])<10 and flag=='1'):
            OB_is[OBstrs.index(lines[i][0])]=i
            OB_ts[OBstrs.index(lines[i][0])]=lines[i][1]
            if(len(lines[i])<=2):
                OB_hs[OBstrs.index(lines[i][0])]='1'
            else:
                if(lines[i][2]=='='):
                    OB_hs[OBstrs.index(lines[i][0])]='2'
        else:
            if(lines[i][:6]=='??????'):
                OB_D_end=i            
                flag='2'
            else:
                if(metadata['QC_F']=='1' and lines[i][0]=='Q' and lines[i][1] in OBstrs and len(lines[i])<10):
                    flag='2'
                    QC_is[OBstrs.index(lines[i][1])]=i
                    QC_ts[OBstrs.index(lines[i][1])]=lines[i][2] 
                else:
                    if(lines[i][:6]=='******'):
                        OB_Q_end=i            
                        flag='3'
                    else:
                        if(len(lines[i])<5):
                            if(lines[i][0:2]=='YF'):
                                flag='3'
                                metadata['FJ_YF_i']=i
                            else:
                                if(lines[i][0:2]=='JY'):
                                    metadata['FJ_JY_i']=i    
                                else:
                                    if(lines[i][0:2]=='GK'):
                                        metadata['FJ_GK_i']=i    
                                    else:
                                        if(lines[i][0:2]=='BZ'):
                                            metadata['FJ_BZ_i']=i  
                        else:
                            if(lines[i][:6]=='######'):                            
                                OB_FJ_end=i

    for i in range(len(OB_ts)):
        if(OB_ts[i]=='='):
            OB_hs[i]='0'

    if(OB_FJ_end<0):
        OB_FJ_end=len(lines)
        
    metadata['OB_D_end']=OB_D_end
    metadata['OB_Q_end']=OB_Q_end
    metadata['OB_FJ_end']=OB_FJ_end

    metadata['OB_is']=OB_is
    metadata['OB_ts']=OB_ts
    metadata['OB_hs']=OB_hs
    if(metadata['QC_F']=='1'):
        metadata['QC_is']=QC_is
        metadata['QC_ts']=QC_ts
    #endregion

    #region  获取A文件备注信息
    metadata['FJ_F']='1' if max(metadata['FJ_YF_i'],metadata['FJ_JY_i'],metadata['FJ_GK_i'],metadata['FJ_BZ_i'])>0 else '0'
    if(metadata['FJ_F']=='1'):
        metadata['FJ_i']=min(filter(lambda x:x>0,[metadata['FJ_YF_i'],metadata['FJ_JY_i'],metadata['FJ_GK_i'],metadata['FJ_BZ_i']]))
        line_end=min(filter(lambda x:x>0,[metadata['FJ_JY_i'],metadata['FJ_GK_i'],metadata['FJ_BZ_i'],len(lines)]))
        metadata['FJ']['YF']=lines[metadata['FJ_YF_i']+1:line_end]
        metadata['FJ']['YF'][-1]=metadata['FJ']['YF'][-1][:-1]
        metadata['stationname']=metadata['FJ']['YF'][2]
        
        line_end=min(filter(lambda x:x>0,[metadata['FJ_GK_i'],metadata['FJ_BZ_i'],len(lines)]))
        metadata['FJ']['JY']=lines[metadata['FJ_JY_i']+1:line_end]
        metadata['FJ']['JY'][-1]=metadata['FJ']['JY'][-1][:-1]
        if(len(metadata['FJ']['JY'])==1 and metadata['FJ']['JY'][0]=='8888'):
            metadata['FJ']['JY']=[]
        else:
            for i in range(len(metadata['FJ']['JY'])):
                ds=metadata['FJ']['JY'][i].strip().split('/')
                metadata['FJ']['JY'][i]=ds;
            
        line_end=min(filter(lambda x:x>0,[metadata['FJ_BZ_i'],len(lines)]))
        metadata['FJ']['GK']=lines[metadata['FJ_GK_i']+1:line_end]
        metadata['FJ']['GK'][-1]=metadata['FJ']['GK'][-1][:-1]
        for i in range(len(metadata['FJ']['GK'])):
            ds=metadata['FJ']['GK'][i].strip().split('/')
            metadata['FJ']['GK'][i]=ds;
            
        line_end=len(lines)
        metadata['FJ']['BZ']=lines[metadata['FJ_BZ_i']+1:line_end-1]
        metadata['FJ']['BZ'][-1]=metadata['FJ']['BZ'][-1][:-1]
        for i in range(len(metadata['FJ']['BZ'])):
            ds=metadata['FJ']['BZ'][i].strip().split('/')
            metadata['FJ']['BZ'][i]=ds;
        
    #endregion

    #region 各要素处理函数

    def txt2int(txt):
        if(str(txt).isdigit()):
            return int(txt)
        else:
            return np.nan 
        
    def txt2float(txt):
        if(str(txt).isdigit()):
            return int(txt)/10
        else:
            return np.nan 

    def rx(x):
        return x;
    def P_txt2float(txt):
        ti=txt2float(txt)
        if(not np.isnan(ti) and ti<500):
            ti=ti+1000
        return ti

    def VAP_txt2float(txt):
        ti=txt2float(txt)
        if(not np.isnan(ti) and ti<10):
            ti=ti+100
        return ti

    def RHU_txt2int(txt):
        if(txt=='%%'):
            return 100
        else:
            return txt2int(txt)
        
    def PRE_txt2float(txt):
        if(txt==',,,,'):
            return 0
        
        if(str(txt)[0]==';'):
            return 1000+int(txt[1:])/10
        
        if(str(txt)[0]==':'):
            return 2000+int(txt[1:])/10
        
        return txt2float(txt)

    def Snow_Depth_txt2int(txt):
        if(txt==',,,'):
            return 0   
        
        return txt2int(txt)

    def Wind_txt2data(txt):
        WD=WD2degree(txt[:3])
        WS=txt[3:]
        if(WS[0]=='>'):
            WS=txt2int(WS)
        else:
            WS=txt2float(WS)
        return WD,WS

    def WIN_high_txt2data(txt):
        WD=WD2degree(txt[3:])
        WS=txt[:3]
        if(WS[0]=='>'):
            WS=txt2int(WS)
        else:
            WS=txt2float(WS)
        return WD,WS    
    windcit={
        '///':np.nan,
        'C':0,
        'N':0,
        'NNE':22.5,
        'NE':45,
        'ENE':67.5,
        'E':90,
        'ESE':112.5,
        'SE':135,
        'SSE':157.5,
        'S':180,
        'SSW':202.5,
        'SW':225,
        'WSW':247.5,
        'W':270,
        'WNW':292.5,
        'NW':315,
        'NNW':337.5
    }
    def WD_txt2degree(txt):
        txt=txt.replace('A','').replace('P','')
        return windcit[txt]

    def WD2degree(txt):
        if(txt[-1].isdigit()):
            return txt2int(txt)
        else:
            return WD_txt2degree(txt)
        
    def txt2wlist(txt):
        wlist=wp.findall(txt)
        return set(wlist)

    def txt2wsumary(txt):        
        return ','.join(txt2wlist(txt))
    #endregion

    #region 核心行数据处理函数
    def f_line(lines,left_len,right_len,left_fs=txt2float,right_fs=txt2float,linesplit=None,datasplit=' ',removechar='=',removelineblank=True,removedatablank=True):
        if(linesplit!=None):
            lines_copy=datasplit.join(lines)
            if(linesplit in lines_copy):
                lines=lines_copy.split(linesplit)
        if(removelineblank):
            lines=list(filter(lambda x:len(x)>0,lines))
        lines=list(map(lambda x:x.replace(removechar,''),lines))
        left_datas=[]
        right_datas=[]
        if(type(left_fs)!=list):
            left_fs=[left_fs]*left_len
        if(type(right_fs)!=list and right_len>0):
            right_fs=[right_fs]*right_len
        for line in lines:
            ds=line.split(datasplit)
            if(removedatablank):
                ds=list(filter(lambda x:len(x)>0,ds))
            #print(len(ds))
            left_datas.extend([left_fs[i](ds[i]) for i in range(left_len)])
            if(right_len>0):
                right_datas.extend([right_fs[i](ds[i+left_len]) for i in range(right_len)])
        return left_datas,right_datas

    #endregion

    #region  P 0
    ti=0
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='3'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,2,P_txt2float,P_txt2float)
                hourly_datas['PRS']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'PRS']=left_datas
                dialy_datas['PRS_Max']=[right_datas[i] for i in range(0,len(right_datas),2)]
                dialy_datas['PRS_Min']=[right_datas[i] for i in range(1,len(right_datas),2)]  
                line_start=OB_is[ti]+1+metadata['daycounts']
                
            if(lines[line_start][0]!='='):
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,P_txt2float)
                hourly_datas['PRS_Sea']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'PRS_Sea']=left_datas

        if(OB_ts[ti]=='4'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,P_txt2float)
                hourly_datas['PRS']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'PRS']=left_datas                
                line_start=OB_is[ti]+1+metadata['daycounts']
            if(lines[line_start][0]!='='):            
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,P_txt2float)
                hourly_datas['PRS_Sea']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'PRS_Sea']=left_datas    

        if(OB_ts[ti]=='6'):        
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start:line_start+metadata['daycounts']],3,2,P_txt2float,P_txt2float)
                hourly_datas['PRS']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'PRS']=left_datas
                dialy_datas['PRS_Max']=[right_datas[i] for i in range(0,len(right_datas),2)]
                dialy_datas['PRS_Min']=[right_datas[i] for i in range(1,len(right_datas),2)]                
                line_start=OB_is[ti]+1+metadata['daycounts']
            if(lines[line_start][0]!='='):            
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,P_txt2float)
                hourly_datas['PRS_Sea']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'PRS_Sea']=left_datas

        if(OB_ts[ti]=='8'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,P_txt2float,P_txt2float)
                hourly_datas['PRS']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'PRS']=left_datas  
                line_start=OB_is[ti]+1+metadata['daycounts']  
            if(lines[line_start][0]!='='):            
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,P_txt2float)
                hourly_datas['PRS_Sea']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'PRS_Sea']=left_datas

        if(OB_ts[ti]=='B'):        
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,2,P_txt2float,P_txt2float,linesplit='.')
                hourly_datas['PRS']=left_datas    
                dialy_datas['PRS_Max']=[right_datas[i] for i in range(0,len(right_datas),2)]
                dialy_datas['PRS_Min']=[right_datas[i] for i in range(1,len(right_datas),2)]   
                line_start=OB_is[ti]+1+metadata['daycounts']*2  
            if(lines[line_start][0]!='='):             
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,P_txt2float)
                hourly_datas['PRS_Sea']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'PRS_Sea']=left_datas    

        if(OB_ts[ti]=='C'):        
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,4,P_txt2float,[P_txt2float,rx,P_txt2float,rx],linesplit='.')
                hourly_datas['PRS']=left_datas    
                dialy_datas['PRS_Max']=[right_datas[i] for i in range(0,len(right_datas),4)]
                dialy_datas['PRS_Max_OTime']=[right_datas[i] for i in range(1,len(right_datas),4)]
                dialy_datas['PRS_Min']=[right_datas[i] for i in range(2,len(right_datas),4)]  
                dialy_datas['PRS_Min_OTime']=[right_datas[i] for i in range(3,len(right_datas),4)]  
                line_start=OB_is[ti]+1+metadata['daycounts']*2  
            if(lines[line_start][0]!='='):             
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,P_txt2float)
                hourly_datas['PRS_Sea']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'PRS_Sea']=left_datas    

    #endregion 
    
    #regionT 1
    ti=1
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],4,2,txt2float,txt2float)
            hourly_datas['TEM']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'TEM']=left_datas
            dialy_datas['TEM_Max']=[right_datas[i] for i in range(0,len(right_datas),2)]
            dialy_datas['TEM_Min']=[right_datas[i] for i in range(1,len(right_datas),2)]    

        if(OB_ts[ti]=='9'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],3,2,txt2float,txt2float)
            hourly_datas['TEM']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'TEM']=left_datas
            dialy_datas['TEM_Max']=[right_datas[i] for i in range(0,len(right_datas),2)]
            dialy_datas['TEM_Min']=[right_datas[i] for i in range(1,len(right_datas),2)]      

        if(OB_ts[ti]=='A'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']*2],24,2,txt2float,txt2float,linesplit='.')
            hourly_datas['TEM']=left_datas
            dialy_datas['TEM_Max']=[right_datas[i] for i in range(0,len(right_datas),2)]
            dialy_datas['TEM_Min']=[right_datas[i] for i in range(1,len(right_datas),2)]    

        if(OB_ts[ti]=='B'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']*2],24,4,txt2float,[txt2float,rx,txt2float,rx],linesplit='.')
            hourly_datas['TEM']=left_datas
            dialy_datas['TEM_Max']=[right_datas[i] for i in range(0,len(right_datas),4)]
            dialy_datas['TEM_Max_OTime']=[right_datas[i] for i in range(1,len(right_datas),4)]
            dialy_datas['TEM_Min']=[right_datas[i] for i in range(2,len(right_datas),4)]    
            dialy_datas['TEM_Min_OTime']=[right_datas[i] for i in range(3,len(right_datas),4)]
    #endregion 

    #region I 2
    ti=2
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='2'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['WBT']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'WBT']=left_datas
                line_start=OB_is[ti]+1+metadata['daycounts']
                
            if(lines[line_start][0]!='='):
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['DPT']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'DPT']=left_datas

        if(OB_ts[ti]=='7'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['WBT']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'WBT']=left_datas
                line_start=OB_is[ti]+1+metadata['daycounts']
                
            if(lines[line_start][0]!='='):
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['DPT']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'DPT']=left_datas

        if(OB_ts[ti]=='8'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['WBT']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'WBT']=left_datas
                line_start=OB_is[ti]+1+metadata['daycounts']
                
            if(lines[line_start][0]!='='):
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['DPT']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'DPT']=left_datas

        if(OB_ts[ti]=='B'):        
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['WBT']=left_datas    
                line_start=OB_is[ti]+1+metadata['daycounts']*2  
            if(lines[line_start][0]!='='):             
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['DPT']=left_datas    

    #endregion
    
    #region E 3
    ti=3
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],4,0,VAP_txt2float)
            hourly_datas['VAP']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'VAP']=left_datas

        if(OB_ts[ti]=='9'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],3,0,VAP_txt2float)
            hourly_datas['VAP']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'VAP']=left_datas    

        if(OB_ts[ti]=='A'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']*2],24,0,VAP_txt2float,linesplit='.')
            hourly_datas['VAP']=left_datas

    #endregion 

    #region U 4
    ti=4
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],4,1,RHU_txt2int,RHU_txt2int)
            hourly_datas['RHU']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'RHU']=left_datas
            dialy_datas['RHU_Min']=right_datas

        if(OB_ts[ti]=='2'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],4,0,RHU_txt2int)
            hourly_datas['RHU']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'RHU']=left_datas

        if(OB_ts[ti]=='7'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],3,1,RHU_txt2int,RHU_txt2int)
            hourly_datas['RHU']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'RHU']=left_datas
            dialy_datas['RHU_Min']=right_datas         

        if(OB_ts[ti]=='9'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],3,0,RHU_txt2int)
            hourly_datas['RHU']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'RHU']=left_datas

        if(OB_ts[ti]=='A'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']*2],24,1,RHU_txt2int,RHU_txt2int,linesplit='.')
            hourly_datas['RHU']=left_datas
            dialy_datas['RHU_Min']=right_datas         
            
        if(OB_ts[ti]=='B'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']*2],24,2,RHU_txt2int,[RHU_txt2int,rx],linesplit='.')
            hourly_datas['RHU']=left_datas
            dialy_datas['RHU_Min']=[right_datas[i] for i in range(0,len(right_datas),2)]
            dialy_datas['RHU_Min_OTIME']=[right_datas[i] for i in range(1,len(right_datas),2)]            
    #endregion            

    #region N 5
    ti=5
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2int)
                hourly_datas['CLO_Cov']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'CLO_Cov']=left_datas
                line_start=OB_is[ti]+1+metadata['daycounts']
                
            if(lines[line_start][0]!='='):
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2int)
                hourly_datas['CLO_Cov_Low']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'CLO_Cov_Low']=left_datas

        if(OB_ts[ti]=='9'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2int)
                hourly_datas['CLO_Cov']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'CLO_Cov']=left_datas
                line_start=OB_is[ti]+1+metadata['daycounts']
                
            if(lines[line_start][0]!='='):
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2int)
                hourly_datas['CLO_Cov_Low']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'CLO_Cov_Low']=left_datas

        if(OB_ts[ti]=='A'):        
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],24,0,txt2int)
                hourly_datas['CLO_Cov']=left_datas    
                line_start=OB_is[ti]+1+metadata['daycounts']
            if(lines[line_start][0]!='='):             
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],24,0,txt2int)
                hourly_datas['CLO_Cov_Low']=left_datas    
    #endregion

    #region H 6
    def HC_pre_handle(lines):
        return list(map(lambda x: x if ',' not in x else x.replace(' ',';').replace(',',' '),lines))  
    ti=6
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            left_datas,right_datas=f_line(HC_pre_handle(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']]),4,0,rx)
            hourly_datas['CLO_Height_LoM']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'CLO_Height_LoM']=left_datas

        if(OB_ts[ti]=='9'):
            left_datas,right_datas=f_line(HC_pre_handle(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']]),3,0,rx)
            hourly_datas['CLO_Height_LoM']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'CLO_Height_LoM']=left_datas
            
        if(OB_ts[ti]=='B'):
            left_datas,right_datas=f_line(HC_pre_handle(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']*4]),24,0,rx,linesplit='.')
            hourly_datas['CLO_Height_LoM']=left_datas          
            
    #endregion 

    #region C 7
    ti=7
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            left_datas,right_datas=f_line(HC_pre_handle(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']]),4,0,rx,removedatablank=False)
            hourly_datas['CLO_FOME']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'CLO_FOME']=left_datas

        if(OB_ts[ti]=='9'):
            left_datas,right_datas=f_line(HC_pre_handle(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']]),3,0,rx,removedatablank=False)
            hourly_datas['CLO_FOME']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'CLO_FOME']=left_datas
            
        if(OB_ts[ti]=='A'):
            left_datas,right_datas=f_line(HC_pre_handle(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']*4]),24,0,rx,linesplit='.',removedatablank=False)
            hourly_datas['CLO_FOME']=left_datas      
            
    #endregion

    #region V 8
    ti=8
    if(OB_hs[ti]=='1'):
        line_start=OB_is[ti]+1
        line_end=line_start+metadata['daycounts']
        if(OB_ts[ti]=='0'):
            left_datas,right_datas=f_line(lines[line_start:line_end],4,0,txt2float)
            hourly_datas['VIS']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'VIS']=left_datas

        if(OB_ts[ti]=='7'):
            left_datas,right_datas=f_line(lines[line_start:line_end],3,0,rx)
            hourly_datas['VIS']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'VIS']=left_datas    
            
        if(OB_ts[ti]=='8'):
            left_datas,right_datas=f_line(lines[line_start:line_end],4,0,rx)
            hourly_datas['VIS']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'VIS']=left_datas   
            
        if(OB_ts[ti]=='9'):
            left_datas,right_datas=f_line(lines[line_start:line_end],3,0,txt2float)
            hourly_datas['VIS']=np.nan
            hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'VIS']=left_datas   

        if(OB_ts[ti]=='A'):
            if('.' in lines[line_start+1]):
                line_end=line_end+metadata['daycounts']
            left_datas,right_datas=f_line(lines[line_start:line_end],24,0,txt2float,linesplit='.')
            hourly_datas['VIS']=left_datas        

        if(OB_ts[ti]=='B'):
            if('.' in lines[line_start+1]):
                line_end=line_end+metadata['daycounts']
            left_datas,right_datas=f_line(lines[line_start:line_end],24,2,txt2float,[txt2float,rx],linesplit='.')
            hourly_datas['VIS']=left_datas
            dialy_datas['VIS_Min']=[right_datas[i] for i in range(0,len(right_datas),2)]
            dialy_datas['VIS_Min_OTime']=[right_datas[i] for i in range(1,len(right_datas),2)]  

    #endregion
    
    #region R 9
    ti=9
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,PRE_txt2float)
                dialy_datas['PRE_Time_2008']=[left_datas[i] for i in range(0,len(left_datas),3)]
                dialy_datas['PRE_Time_0820']=[left_datas[i] for i in range(1,len(left_datas),3)]
                dialy_datas['PRE_Time_2020']=[left_datas[i] for i in range(2,len(left_datas),3)]
                line_start=OB_is[ti]+1+metadata['daycounts']
                
            if(lines[line_start][0]!='='):        
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],2,0,PRE_txt2float)
                dialy_datas['PRE_Max_1h']=[left_datas[i] for i in range(0,len(left_datas),2)]
                dialy_datas['PRE_Max_1m']=[left_datas[i] for i in range(1,len(left_datas),2)]
        
        
        if(OB_ts[ti]=='2'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],3,0,PRE_txt2float)
            dialy_datas['PRE_Time_2008']=[left_datas[i] for i in range(0,len(left_datas),3)]
            dialy_datas['PRE_Time_0820']=[left_datas[i] for i in range(1,len(left_datas),3)]
            dialy_datas['PRE_Time_2020']=[left_datas[i] for i in range(2,len(left_datas),3)]
            
        if(OB_ts[ti]=='6'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,PRE_txt2float)
                dialy_datas['PRE_Time_2008']=[left_datas[i] for i in range(0,len(left_datas),3)]
                dialy_datas['PRE_Time_0820']=[left_datas[i] for i in range(1,len(left_datas),3)]
                dialy_datas['PRE_Time_2020']=[left_datas[i] for i in range(2,len(left_datas),3)]
                line_start=line_start+metadata['daycounts']        
            
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,PRE_txt2float,linesplit='.')
                hourly_datas['PRE_1h']=left_datas      
                line_start=line_start+metadata['daycounts']*2
                
            metadata['rain_string']=lines[line_start][:-1].split(' ')  
    #endregion

    #region W 10
    ti=10
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            left_datas,right_datas=f_line(lines[OB_is[ti]+1:OB_is[ti]+1+metadata['daycounts']],1,0,rx)
            dialy_datas['WEP_Record']=left_datas
            dialy_datas['WEP_Sumary']=list(map(txt2wsumary,left_datas))
    #endregion 

    #region L 11
    ti=11
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],1,0,txt2float)
                dialy_datas['EVP']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):  
                line_start=line_start+1 
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],1,0,txt2float)
                dialy_datas['EVP_Big']=left_datas
                line_start=line_start+metadata['daycounts']  
    
        if(OB_ts[ti]=='A'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],1,0,txt2float)
                dialy_datas['EVP']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):  
                line_start=line_start+1 
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,1,txt2float,txt2float,linesplit='.')
                hourly_datas['EVP_Big']=left_datas      
                dialy_datas['EVP_Big']=right_datas
                line_start=line_start+metadata['daycounts']*2
    
        if(OB_ts[ti]=='B'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],1,0,txt2float)
                dialy_datas['EVP']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):  
                line_start=line_start+1 
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['EVP_Big']=left_datas      
                line_start=line_start+metadata['daycounts']*2           
                
    #endregion 

    #region Z 12

    ti=12
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],1,1,Snow_Depth_txt2int,txt2float)
                dialy_datas['Snow_Depth']=left_datas
                dialy_datas['Snow_PRS']=right_datas
                line_start=line_start+metadata['daycounts']


    #endregion
    
    #region G 13

    ti=13
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],6,0,txt2int)
                dialy_datas['Fz_Rain_SN_Di']=[left_datas[i] for i in range(0,len(left_datas),6)]
                dialy_datas['Fz_Rain_SN_Depth']=[left_datas[i] for i in range(1,len(left_datas),6)]
                dialy_datas['Fz_Rain_SN_Weight']=[left_datas[i] for i in range(2,len(left_datas),6)]
                dialy_datas['Fz_Rain_EW_Di']=[left_datas[i] for i in range(3,len(left_datas),6)]
                dialy_datas['Fz_Rain_EW_Depth']=[left_datas[i] for i in range(4,len(left_datas),6)]
                dialy_datas['Fz_Rain_EW_Weight']=[left_datas[i] for i in range(5,len(left_datas),6)]
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],6,0,txt2int)
                dialy_datas['Rime_Ice_SN_Di']=[left_datas[i] for i in range(0,len(left_datas),6)]
                dialy_datas['Rime_Ice_SN_Depth']=[left_datas[i] for i in range(1,len(left_datas),6)]
                dialy_datas['Rime_Ice_SN_Weight']=[left_datas[i] for i in range(2,len(left_datas),6)]
                dialy_datas['Rime_Ice_EW_Di']=[left_datas[i] for i in range(3,len(left_datas),6)]
                dialy_datas['Rime_Ice_EW_Depth']=[left_datas[i] for i in range(4,len(left_datas),6)]
                dialy_datas['Rime_Ice_EW_Weight']=[left_datas[i] for i in range(5,len(left_datas),6)]
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='2'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],9,0,[rx,txt2int,txt2int,txt2int,txt2int,txt2int,txt2int,rx])
                dialy_datas['Fz_Rain_WEP']=[left_datas[i] for i in range(0,len(left_datas),9)]
                dialy_datas['Fz_Rain_SN_Di']=[left_datas[i] for i in range(1,len(left_datas),9)]
                dialy_datas['Fz_Rain_SN_Depth']=[left_datas[i] for i in range(2,len(left_datas),9)]
                dialy_datas['Fz_Rain_SN_Weight']=[left_datas[i] for i in range(3,len(left_datas),9)]
                dialy_datas['Fz_Rain_EW_Di']=[left_datas[i] for i in range(4,len(left_datas),9)]
                dialy_datas['Fz_Rain_EW_Depth']=[left_datas[i] for i in range(5,len(left_datas),9)]
                dialy_datas['Fz_Rain_EW_Weight']=[left_datas[i] for i in range(6,len(left_datas),9)]
                dialy_datas['Fz_Rain_TEM']=[left_datas[i] for i in range(7,len(left_datas),9)]
                dialy_datas['Fz_Rain_Wind']=[left_datas[i] for i in range(8,len(left_datas),9)]
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],9,0,[rx,txt2int,txt2int,txt2int,txt2int,txt2int,txt2int,rx])
                dialy_datas['Rime_Ice_WEP']=[left_datas[i] for i in range(0,len(left_datas),9)]
                dialy_datas['Rime_Ice_SN_Di']=[left_datas[i] for i in range(1,len(left_datas),9)]
                dialy_datas['Rime_Ice_SN_Depth']=[left_datas[i] for i in range(2,len(left_datas),9)]
                dialy_datas['Rime_Ice_SN_Weight']=[left_datas[i] for i in range(3,len(left_datas),9)]
                dialy_datas['Rime_Ice_EW_Di']=[left_datas[i] for i in range(4,len(left_datas),9)]
                dialy_datas['Rime_Ice_EW_Depth']=[left_datas[i] for i in range(5,len(left_datas),9)]
                dialy_datas['Rime_Ice_EW_Weight']=[left_datas[i] for i in range(6,len(left_datas),9)]
                dialy_datas['Rime_Ice_TEM']=[left_datas[i] for i in range(7,len(left_datas),9)]
                dialy_datas['Rime_Ice_Wind']=[left_datas[i] for i in range(8,len(left_datas),9)]
                line_start=line_start+metadata['daycounts']


    #endregion

    #region F 14


    # F
    ti=14
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,Wind_txt2data)
                hourly_datas['WIN_D_Avg_10mi']=np.nan
                hourly_datas['WIN_S_Avg_10mi']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'WIN_D_Avg_10mi']=[x[0] for x in left_datas]
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'WIN_S_Avg_10mi']=[x[1] for x in left_datas]

                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],2,0,[WIN_high_txt2data,WIN_high_txt2data])
                dialy_datas['WIN_S_Max']=[x[0] for x in [left_datas[i] for i in range(0,len(left_datas),2)]]
                dialy_datas['WIN_D_S_Max']=[x[1] for x in [left_datas[i] for i in range(0,len(left_datas),2)]]
                dialy_datas['WIN_S_Inst_Max']=[x[0] for x in [left_datas[i] for i in range(1,len(left_datas),2)]]
                dialy_datas['WIN_D_Inst_Max']=[x[1] for x in [left_datas[i] for i in range(1,len(left_datas),2)]]
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='E'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,Wind_txt2data)
                hourly_datas['WIN_D_Avg_2mi']=np.nan
                hourly_datas['WIN_S_Avg_2mi']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'WIN_D_Avg_2mi']=[x[0] for x in left_datas]
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'WIN_S_Avg_2mi']=[x[1] for x in left_datas]

                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*4],24,0,Wind_txt2data,linesplit='.')
                hourly_datas['WIN_D_Avg_10mi']=[x[0] for x in left_datas]
                hourly_datas['WIN_S_Avg_10mi']=[x[1] for x in left_datas]
                line_start=line_start+metadata['daycounts']*4
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,[WIN_high_txt2data,rx,WIN_high_txt2data,rx])
                dialy_datas['WIN_S_Max']=[x[0] for x in [left_datas[i] for i in range(0,len(left_datas),4)]]
                dialy_datas['WIN_D_S_Max']=[x[1] for x in [left_datas[i] for i in range(0,len(left_datas),4)]]
                dialy_datas['WIN_S_Max_OTime']=[left_datas[i] for i in range(1,len(left_datas),4)]
                dialy_datas['WIN_S_Inst_Max']=[x[0] for x in [left_datas[i] for i in range(2,len(left_datas),4)]]
                dialy_datas['WIN_D_Inst_Max']=[x[1] for x in [left_datas[i] for i in range(2,len(left_datas),4)]]
                dialy_datas['WIN_S_Inst_Max_OTime']=[left_datas[i] for i in range(3,len(left_datas),4)]
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='H'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,Wind_txt2data)
                hourly_datas['WIN_D_Avg_2mi']=np.nan
                hourly_datas['WIN_S_Avg_2mi']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'WIN_D_Avg_2mi']=[x[0] for x in left_datas]
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'WIN_S_Avg_2mi']=[x[1] for x in left_datas]

                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*4],24,0,Wind_txt2data,linesplit='.')
                hourly_datas['WIN_D_Avg_10mi']=[x[0] for x in left_datas]
                hourly_datas['WIN_S_Avg_10mi']=[x[1] for x in left_datas]
                line_start=line_start+metadata['daycounts']*4
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,[WIN_high_txt2data,rx,WIN_high_txt2data,rx])
                dialy_datas['WIN_S_Max']=[x[0] for x in [left_datas[i] for i in range(0,len(left_datas),4)]]
                dialy_datas['WIN_D_S_Max']=[x[1] for x in [left_datas[i] for i in range(0,len(left_datas),4)]]
                dialy_datas['WIN_S_Max_OTime']=[left_datas[i] for i in range(1,len(left_datas),4)]
                dialy_datas['WIN_S_Inst_Max']=[x[0] for x in [left_datas[i] for i in range(2,len(left_datas),4)]]
                dialy_datas['WIN_D_Inst_Max']=[x[1] for x in [left_datas[i] for i in range(2,len(left_datas),4)]]
                dialy_datas['WIN_S_Inst_Max_OTime']=[left_datas[i] for i in range(3,len(left_datas),4)]
                line_start=line_start+metadata['daycounts'] 
                
        if(OB_ts[ti]=='K'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*4],24,0,Wind_txt2data,linesplit='.')
                hourly_datas['WIN_D_Avg_2mi']=[x[0] for x in left_datas]
                hourly_datas['WIN_S_Avg_2mi']=[x[1] for x in left_datas]
                line_start=line_start+metadata['daycounts']*4
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*4],24,0,Wind_txt2data,linesplit='.')
                hourly_datas['WIN_D_Avg_10mi']=[x[0] for x in left_datas]
                hourly_datas['WIN_S_Avg_10mi']=[x[1] for x in left_datas]
                line_start=line_start+metadata['daycounts']*4
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,[WIN_high_txt2data,rx,WIN_high_txt2data,rx])
                dialy_datas['WIN_S_Max']=[x[0] for x in [left_datas[i] for i in range(0,len(left_datas),4)]]
                dialy_datas['WIN_D_S_Max']=[x[1] for x in [left_datas[i] for i in range(0,len(left_datas),4)]]
                dialy_datas['WIN_S_Max_OTime']=[left_datas[i] for i in range(1,len(left_datas),4)]
                dialy_datas['WIN_S_Inst_Max']=[x[0] for x in [left_datas[i] for i in range(2,len(left_datas),4)]]
                dialy_datas['WIN_D_Inst_Max']=[x[1] for x in [left_datas[i] for i in range(2,len(left_datas),4)]]
                dialy_datas['WIN_S_Inst_Max_OTime']=[left_datas[i] for i in range(3,len(left_datas),4)]
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='N'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*4],24,0,Wind_txt2data,linesplit='.')
                hourly_datas['WIN_D_Avg_2mi']=[x[0] for x in left_datas]
                hourly_datas['WIN_S_Avg_2mi']=[x[1] for x in left_datas]
                line_start=line_start+metadata['daycounts']*4
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*4],24,0,Wind_txt2data,linesplit='.')
                hourly_datas['WIN_D_Avg_10mi']=[x[0] for x in left_datas]
                hourly_datas['WIN_S_Avg_10mi']=[x[1] for x in left_datas]
                line_start=line_start+metadata['daycounts']*4
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,[WIN_high_txt2data,rx,WIN_high_txt2data,rx])
                dialy_datas['WIN_S_Max']=[x[0] for x in [left_datas[i] for i in range(0,len(left_datas),4)]]
                dialy_datas['WIN_D_S_Max']=[x[1] for x in [left_datas[i] for i in range(0,len(left_datas),4)]]
                dialy_datas['WIN_S_Max_OTime']=[left_datas[i] for i in range(1,len(left_datas),4)]
                dialy_datas['WIN_S_Inst_Max']=[x[0] for x in [left_datas[i] for i in range(2,len(left_datas),4)]]
                dialy_datas['WIN_D_Inst_Max']=[x[1] for x in [left_datas[i] for i in range(2,len(left_datas),4)]]
                dialy_datas['WIN_S_Inst_Max_OTime']=[left_datas[i] for i in range(3,len(left_datas),4)]
                line_start=line_start+metadata['daycounts']
            


    #endregion

    #region D 15




    # D
    ti=15
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,2,txt2float,txt2float)
                hourly_datas['GST']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST']=left_datas
                dialy_datas['GST_Max']= [right_datas[i] for i in range(0,len(right_datas),2)]
                dialy_datas['GST_Min']= [right_datas[i] for i in range(1,len(right_datas),2)]
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_5cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_5cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_10cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_10cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_15cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_15cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_20cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_20cm']=left_datas
                line_start=line_start+metadata['daycounts']        
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_40Cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_40Cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='1'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,2,txt2float,txt2float)
                hourly_datas['GST']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST']=left_datas
                dialy_datas['GST_Max']= [right_datas[i] for i in range(0,len(right_datas),2)]
                dialy_datas['GST_Min']= [right_datas[i] for i in range(1,len(right_datas),2)]
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_5cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_5cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_10cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_10cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_15cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_15cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_20cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_20cm']=left_datas
                line_start=line_start+metadata['daycounts']        
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_30Cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_30Cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='2'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float,txt2float)
                hourly_datas['GST']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_5cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_5cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_10cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_10cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_15cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_15cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_20cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_20cm']=left_datas
                line_start=line_start+metadata['daycounts']        
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_40Cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST_40Cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='7'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,2,txt2float,txt2float)
                hourly_datas['GST']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([2,8,14,20]),'GST']=left_datas
                dialy_datas['GST_Max']= [right_datas[i] for i in range(0,len(right_datas),2)]
                dialy_datas['GST_Min']= [right_datas[i] for i in range(1,len(right_datas),2)]
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_5cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_5cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_10cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_10cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_15cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_15cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_20cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_20cm']=left_datas
                line_start=line_start+metadata['daycounts']        
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_40Cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_40Cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='8'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_5cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_5cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_10cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_10cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_15cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_15cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_20cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_20cm']=left_datas
                line_start=line_start+metadata['daycounts']        
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_40Cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_40Cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='9'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,2,txt2float,txt2float)
                hourly_datas['GST']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST']=left_datas
                dialy_datas['GST_Max']= [right_datas[i] for i in range(0,len(right_datas),2)]
                dialy_datas['GST_Min']= [right_datas[i] for i in range(1,len(right_datas),2)]
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_5cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_5cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_10cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_10cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_15cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_15cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_20cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_20cm']=left_datas
                line_start=line_start+metadata['daycounts']        
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_40Cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour.isin([8,14,20]),'GST_40Cm']=left_datas
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='B'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,4,txt2float,[txt2float,rx,txt2float,rx],linesplit='.')
                hourly_datas['GST']=left_datas
                dialy_datas['GST_Max']= [right_datas[i] for i in range(0,len(right_datas),4)]
                dialy_datas['GST_Max_Otime']= [right_datas[i] for i in range(1,len(right_datas),4)]
                dialy_datas['GST_Min']= [right_datas[i] for i in range(2,len(right_datas),4)]
                dialy_datas['GST_Min_OTime']= [right_datas[i] for i in range(3,len(right_datas),4)]
                line_start=line_start+metadata['daycounts']*2
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['GST_5cm']=left_datas
                line_start=line_start+metadata['daycounts']*2
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['GST_10cm']=left_datas
                line_start=line_start+metadata['daycounts']*2
            
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['GST_15cm']=left_datas
                line_start=line_start+metadata['daycounts']*2
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['GST_20cm']=left_datas
                line_start=line_start+metadata['daycounts']*2
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['GST_40Cm']=left_datas
                line_start=line_start+metadata['daycounts']*2

    #endregion

    #region K 16




    # K
    ti=16
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],3,0,txt2float)
                hourly_datas['GST_80cm']=np.nan
                hourly_datas['GST_160cm']=np.nan
                hourly_datas['GST_320cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14,'GST_80cm']=[left_datas[i] for i in range(0,len(left_datas),3)]
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14,'GST_160cm']=[left_datas[i] for i in range(1,len(left_datas),3)]
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14,'GST_320cm']=[left_datas[i] for i in range(2,len(left_datas),3)]
                line_start=line_start+metadata['daycounts']
                
        if(OB_ts[ti]=='1'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,txt2float)
                hourly_datas['GST_50cm']=np.nan
                hourly_datas['GST_80cm']=np.nan
                hourly_datas['GST_160cm']=np.nan
                hourly_datas['GST_320cm']=np.nan
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14,'GST_50cm']=[left_datas[i] for i in range(0,len(left_datas),4)]
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14,'GST_80cm']=[left_datas[i] for i in range(1,len(left_datas),4)]
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14,'GST_160cm']=[left_datas[i] for i in range(2,len(left_datas),4)]
                hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14,'GST_320cm']=[left_datas[i] for i in range(3,len(left_datas),4)]
                line_start=line_start+metadata['daycounts']
                
                
        if(OB_ts[ti]=='B'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['GST_80cm']=left_datas
                line_start=line_start+metadata['daycounts']*2
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['GST_160cm']=left_datas
                line_start=line_start+metadata['daycounts']*2
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,0,txt2float,linesplit='.')
                hourly_datas['GST_320cm']=left_datas
                line_start=line_start+metadata['daycounts']*2
                
                

    #endregion

    #region A 17




    # A
    ti=17
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1        
            left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],4,0,rx)
            dialy_datas['FRS_1st_Top']=[left_datas[i] for i in range(0,len(left_datas),4)]
            dialy_datas['FRS_1st_Bot']=[left_datas[i] for i in range(1,len(left_datas),4)]
            dialy_datas['FRS_2nd_Top']=[left_datas[i] for i in range(2,len(left_datas),4)]
            dialy_datas['FRS_2nd_Bot']=[left_datas[i] for i in range(3,len(left_datas),4)]
            
        if(OB_ts[ti]=='6'):
            line_start=OB_is[ti]+1        
            left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],2,0,rx)
            dialy_datas['FRS_1st_Top']=[left_datas[i] for i in range(0,len(left_datas),2)]
            dialy_datas['FRS_1st_Bot']=[left_datas[i] for i in range(1,len(left_datas),2)]
                
                

    #endregion

    #region S 18




    # S
    ti=18
    if(OB_hs[ti]=='1'):
        if(OB_ts[ti]=='0'):
            line_start=OB_is[ti]+1        
            left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],1,0,txt2float)
            dialy_datas['SSH']=left_datas
            
        if(OB_ts[ti]=='2'):
            line_start=OB_is[ti]+1        
            left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],18,1,txt2float)
            ssh.loc[ssh['Datetime'].dt.hour.isin([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]),'SSH']=left_datas
            dialy_datas['SSH']=right_datas            
                
        if(OB_ts[ti]=='A'):
            line_start=OB_is[ti]+1        
            left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],24,3,txt2float,[rx,rx,txt2float])
            ssh['SSH']=left_datas
            dialy_datas['Sunrist_Time']=[right_datas[i] for i in range(0,len(right_datas),3)]
            dialy_datas['Sunset_Time']=[right_datas[i] for i in range(1,len(right_datas),3)]
            dialy_datas['SSH']=[right_datas[i] for i in range(2,len(right_datas),3)]
                


    #endregion

    #region B 19

    ti=19
    if(OB_hs[ti]=='1'):          
                
        if(OB_ts[ti]=='A'):
            line_start=OB_is[ti]+1
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']*2],24,4,txt2float,[txt2float,rx,txt2float,rx],linesplit='.')
                hourly_datas['LGST']=left_datas
                dialy_datas['LGST_Max']= [right_datas[i] for i in range(0,len(right_datas),4)]
                dialy_datas['LGST_Max_OTime']= [right_datas[i] for i in range(1,len(right_datas),4)]
                dialy_datas['LGST_Min']= [right_datas[i] for i in range(2,len(right_datas),4)]
                dialy_datas['LGST_Min_OTime']= [right_datas[i] for i in range(3,len(right_datas),4)]
                line_start=line_start+metadata['daycounts']*2
                
            if(lines[line_start][0]=='='):
                line_start=line_start+1
            else:
                left_datas,right_datas=f_line(lines[line_start:line_start+metadata['daycounts']],1,0,txt2float)
                dialy_datas['SCO']=left_datas
                line_start=line_start+metadata['daycounts']
                

    #endregion


    return metadata,hourly_datas,ssh,dialy_datas


def A2Excel(afile:str,excelfile:str,templatefile=templateexcel_f):
    """
    读取A或A0文件,转化成 Excel2010 （xlsx）格式表格
    
    Args:
        afile (string): A或A0文件的地址
        excelfile (string):生成excel文件的地址
        templatefile (string):excel 模板文件地址 默认使用本页内的base64字符串模板


    Return:
        None
    """
    metadata,hourly_datas,ssh,dialy_datas=ReadAfile(afile)
    #读取excel模板文件
    wb=xl.load_workbook(templatefile)
    




    #region 定义一系列样式对象
    defaultstyle = NamedStyle(name="defaultstyle")
    defaultstyle.alignment = Alignment(horizontal='center',vertical='center')
    defaultstyle.font = Font(name='楷体',size=12)
    wb.add_named_style(defaultstyle)

    bd = Side(style='thin', color="000000")

    Bstyle = NamedStyle(name="Bstyle")
    Bstyle.alignment = Alignment(horizontal='center',vertical='center')
    Bstyle.font = Font(name='楷体',size=12,bold=True)
    wb.add_named_style(Bstyle)

    Bstyle_Border = NamedStyle(name="Bstyle_Border")
    Bstyle_Border.alignment = Alignment(horizontal='center',vertical='center')
    Bstyle_Border.font = Font(name='楷体',size=12,bold=True)
    Bstyle_Border.border = Border(left=bd, top=bd, right=bd, bottom=bd)
    wb.add_named_style(Bstyle_Border)

    Bstyle_16_Border = NamedStyle(name="Bstyle_16_Border")
    Bstyle_16_Border.alignment = Alignment(horizontal='center',vertical='center')
    Bstyle_16_Border.font = Font(name='楷体',size=16,bold=True)
    Bstyle_16_Border.border = Border(left=bd, top=bd, right=bd, bottom=bd)
    wb.add_named_style(Bstyle_16_Border)


    Bstyle_18_Border = NamedStyle(name="Bstyle_18_Border")
    Bstyle_18_Border.alignment = Alignment(horizontal='center',vertical='center')
    Bstyle_18_Border.font = Font(name='楷体',size=18,bold=True)
    Bstyle_18_Border.border = Border(left=bd, top=bd, right=bd, bottom=bd)
    wb.add_named_style(Bstyle_18_Border)

    Bstyle_24_Border = NamedStyle(name="Bstyle_24_Border")
    Bstyle_24_Border.alignment = Alignment(horizontal='center',vertical='center')
    Bstyle_24_Border.font = Font(name='楷体',size=24,bold=True)
    Bstyle_24_Border.border = Border(left=bd, top=bd, right=bd, bottom=bd)
    wb.add_named_style(Bstyle_24_Border)

    Datastyle_Border = NamedStyle(name="Datastyle_Border")
    Datastyle_Border.alignment = Alignment(horizontal='center',vertical='center')
    Datastyle_Border.font = Font(name='楷体',size=8)
    Datastyle_Border.border = Border(left=bd, top=bd, right=bd, bottom=bd)
    wb.add_named_style(Datastyle_Border)

    #endregion


    #region 封面、封底

    if(metadata['FJ_F']=='1'):
        ws=wb['封面']
        ws['C1'].value=metadata['observation_str']
        ws['C1'].style=Bstyle
        ws['C2'].value=str(metadata['stationcode'])
        ws['C2'].style=defaultstyle
        ws['C3'].value=metadata['FJ']['YF'][0]
        ws['C3'].style=defaultstyle

        ws['H9'].value=str(metadata['year'])+'年'+str(metadata['month'])+'月'
        ws['G11'].value=metadata['FJ']['YF'][2]
        ws['H12'].value=metadata['FJ']['YF'][1]
        ws['G13'].value=metadata['FJ']['YF'][3]
        ws['G14'].value=metadata['latstr']
        ws['K14'].value=metadata['lonstr']    
        ws['I15'].value=metadata['alti']
        ws['I16'].value=metadata['PRS_alti']
        ws['I17'].value=metadata['Wind_height']
        if(len(metadata['FJ']['YF'])>5):
            ws['H19'].value=metadata['FJ']['YF'][5]
        if(len(metadata['FJ']['YF'])>6):
            ws['H20'].value=metadata['FJ']['YF'][6]
        if(len(metadata['FJ']['YF'])>7):
            ws['K20'].value=metadata['FJ']['YF'][7]
        if(len(metadata['FJ']['YF'])>8):
            ws['H21'].value=metadata['FJ']['YF'][8]        
        if(len(metadata['FJ']['YF'])>9):
            ws['K21'].value=metadata['FJ']['YF'][9]        
        if(len(metadata['FJ']['YF'])>10):
            ws['H22'].value=metadata['FJ']['YF'][10]
        if(len(metadata['FJ']['YF'])>11):
            if(len(metadata['FJ']['YF'][11])>=8):
                ws['H23'].value=metadata['FJ']['YF'][11][:4]+'年'+metadata['FJ']['YF'][11][4:6]+'月'+metadata['FJ']['YF'][11][6:]+'日'
            else:
                ws['H23'].value=metadata['FJ']['YF'][11]

        ws=wb['封底']
        ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
        ws.cell(1 ,4,metadata['stationname']).style=Bstyle
        for i in range(len(metadata['FJ']['JY'])):
            ws['A'+str(i+3)].value=metadata['FJ']['JY'][i][1]
            ws['A'+str(i+3)].style=Bstyle_16_Border
            ws['B'+str(i+3)].value=metadata['FJ_JY_CONSTs'][metadata['FJ']['JY'][i][0]]+' : '+metadata['FJ']['JY'][i][2]
            
        for i in range(len(metadata['FJ']['GK'])):
            ws['C'+str(i+3)].value=metadata['FJ_GK_CONSTs'][metadata['FJ']['GK'][i][0]]+' : '+metadata['FJ']['GK'][i][1]
            
        for i in range(len(metadata['FJ']['BZ'])):
            if(len(metadata['FJ']['BZ'][i])>2):
                ws['D'+str(i+3)].value=metadata['FJ']['BZ'][i][0]+' : '+metadata['FJ']['BZ'][i][1]
                ws['E'+str(i+3)].value=metadata['FJ']['BZ'][i][2]
            else:
                ws['D'+str(i+3)].value=metadata['FJ']['BZ'][i][0]
                ws['E'+str(i+3)].value=metadata['FJ']['BZ'][i][1]
            ws['D'+str(i+3)].style=Bstyle_16_Border


    #endregion 

    #region 气压




    ws=wb['气压']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle

    if(metadata['OB_hs'][0]=='1' and 'PRS' in hourly_datas):
        for i in range(metadata['daycounts']):
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,28,value=dialy_datas['PRS_Max'][i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,29,value=dialy_datas['PRS_Min'][i]).style=Datastyle_Border
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['PRS'][i*24+j]).style=Datastyle_Border
                
    if(metadata['OB_hs'][0]=='1' and 'PRS_Max' in dialy_datas and 'PRS_Min' in dialy_datas):
        for i in range(metadata['daycounts']):
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,28,value=dialy_datas['PRS_Max'][i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,29,value=dialy_datas['PRS_Min'][i]).style=Datastyle_Border


    #endregion 

    #region 气温

    ws=wb['气温']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][1]=='1' and 'TEM' in hourly_datas):
        for i in range(metadata['daycounts']):
            if('TEM_Max' in dialy_datas and 'TEM_Min' in dialy_datas):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,28,value=dialy_datas['TEM_Max'][i]).style=Datastyle_Border
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,29,value=dialy_datas['TEM_Min'][i]).style=Datastyle_Border
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['TEM'][i*24+j]).style=Datastyle_Border


    #endregion 

    #region 露点温度

    ws=wb['露点温度']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle

    if(metadata['OB_hs'][2]=='1' and 'DPT' in hourly_datas):
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['DPT'][i*24+j]).style=Datastyle_Border


    #endregion 

    #region 水汽压

    ws=wb['水汽压']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle

    if(metadata['OB_hs'][3]=='1' and 'VAP' in hourly_datas):
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['VAP'][i*24+j]).style=Datastyle_Border


    #endregion 

    #region 相对湿度

    ws=wb['相对湿度']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle

    if(metadata['OB_hs'][4]=='1' and 'RHU' in hourly_datas):
        for i in range(metadata['daycounts']):
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,29,value=dialy_datas['RHU_Min'][i]).style=Datastyle_Border
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['RHU'][i*24+j]).style=Datastyle_Border


    #endregion 

    #region 云


    ws=wb['云']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,15,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][5]=='1' and 'CLO_Cov' in hourly_datas and 'CLO_Cov_Low' in hourly_datas):
        for i in range(metadata['daycounts']):
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,2,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==2]['CLO_Cov'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,3,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==8]['CLO_Cov'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,4,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14]['CLO_Cov'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,5,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==20]['CLO_Cov'].iloc[i]).style=Datastyle_Border
            
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,7,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==2]['CLO_Cov_Low'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,8,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==8]['CLO_Cov_Low'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,9,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14]['CLO_Cov_Low'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,10,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==20]['CLO_Cov_Low'].iloc[i]).style=Datastyle_Border
            
    if(metadata['OB_hs'][7]=='1'  and 'CLO_FOME' in hourly_datas):
        for i in range(metadata['daycounts']):        
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,12,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==2]['CLO_FOME'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,13,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==8]['CLO_FOME'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,14,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14]['CLO_FOME'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,15,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==20]['CLO_FOME'].iloc[i]).style=Datastyle_Border
            
    if(metadata['OB_hs'][6]=='1'  and 'CLO_Height_LoM' in hourly_datas):
        for i in range(metadata['daycounts']):        
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,16,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==2]['CLO_Height_LoM'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,17,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==8]['CLO_Height_LoM'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,18,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14]['CLO_Height_LoM'].iloc[i]).style=Datastyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,19,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==20]['CLO_Height_LoM'].iloc[i]).style=Datastyle_Border
            


    #endregion 

    #region 能见度


    ws=wb['能见度']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][8]=='1' and 'VIS' in hourly_datas):
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['VIS'][i*24+j]).style=Datastyle_Border

    if(metadata['OB_hs'][8]=='1' and 'VIS_Min' in dialy_datas):
        for i in range(metadata['daycounts']):
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,26,value=dialy_datas['VIS_Min'][i]).style=Datastyle_Border 
            if('VIS_Min_OTime' in  dialy_datas):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,27,value=dialy_datas['VIS_Min_OTime'][i]).style=Datastyle_Border


    #endregion 

    #region 天




    ws=wb['天']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,15,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][8]=='1' and 'VIS' in hourly_datas):
        for i in range(metadata['daycounts']):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,2,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==2]['VIS'].iloc[i]).style=Datastyle_Border
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,3,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==8]['VIS'].iloc[i]).style=Datastyle_Border
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,4,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==14]['VIS'].iloc[i]).style=Datastyle_Border
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,5,value=hourly_datas.loc[hourly_datas['Datetime'].dt.hour==20]['VIS'].iloc[i]).style=Datastyle_Border

    if(metadata['OB_hs'][10]=='1'  and 'WEP_Record' in dialy_datas):
        for i in range(metadata['daycounts']):    
            w=dialy_datas['WEP_Record'].iloc[i]
            dndi=-1
            if(')' in w):
                dndi=w.index(')')
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,7,value=w[1:dndi]).style=Bstyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,11,value=w[dndi+1:].replace('.','')).style=Bstyle_Border
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,18,value=dialy_datas['WEP_Sumary'].iloc[i]).style=Bstyle_Border
        wlist=list(filter(lambda x:len(x)>0,','.join(dialy_datas['WEP_Sumary']).split(',')))
        if(len(wlist)>0):
            ws.cell(38,7,value=wlist.count('01')).style=Bstyle_Border
            ws.cell(38,8,value=wlist.count('02')).style=Bstyle_Border
            ws.cell(38,9,value=wlist.count('03')).style=Bstyle_Border
            ws.cell(38,10,value=wlist.count('05')).style=Bstyle_Border
            ws.cell(38,11,value=wlist.count('10')).style=Bstyle_Border
            ws.cell(38,12,value=wlist.count('15')).style=Bstyle_Border
            ws.cell(38,13,value=wlist.count('16')).style=Bstyle_Border
            ws.cell(38,14,value=wlist.count('42')).style=Bstyle_Border
            ws.cell(38,15,value=wlist.count('50')).style=Bstyle_Border
            ws.cell(38,16,value=wlist.count('60')).style=Bstyle_Border
            ws.cell(38,17,value=wlist.count('68')).style=Bstyle_Border
            ws.cell(38,18,value=wlist.count('70')).style=Bstyle_Border
            ws.cell(38,19,value=wlist.count('80')).style=Bstyle_Border
            ws.cell(40,7,value=wlist.count('83')).style=Bstyle_Border
            ws.cell(40,9,value=wlist.count('85')).style=Bstyle_Border
            ws.cell(40,10,value=wlist.count('89')).style=Bstyle_Border
            


    #endregion 

    #region 蒸发




    ws=wb['蒸发']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][11]=='1' and ('EVP_Big' in hourly_datas or 'EVP' in hourly_datas)):
        if('EVP_Big' in hourly_datas):
            data=hourly_datas['EVP_Big']
        else:
            data=hourly_datas['EVP']
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=data[i*24+j]).style=Datastyle_Border

    if(metadata['OB_hs'][11]=='1' and ('EVP_Big' in dialy_datas or 'EVP' in dialy_datas)):
        if('EVP_Big' in dialy_datas):
            data=dialy_datas['EVP_Big']
        else:
            data=dialy_datas['EVP']
        for i in range(metadata['daycounts']):
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,26,value=data[i]).style=Datastyle_Border 


    #endregion 

    #region 降水




    ws=wb['降水']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][9]=='1' and 'PRE_1h' in hourly_datas ):
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['PRE_1h'].iloc[i*24+j]).style=Datastyle_Border

    if(metadata['OB_hs'][9]=='1' and 'PRE_Time_2020' in dialy_datas):
        for i in range(metadata['daycounts']):
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,26,value=dialy_datas['PRE_Time_2020'].iloc[i]).style=Datastyle_Border 


    #endregion 

    #region 日照




    ws=wb['日照']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][18]=='1' and 'SSH' in ssh ):
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=ssh['SSH'].iloc[i*24+j]).style=Datastyle_Border

    if(metadata['OB_hs'][18]=='1' and 'SSH' in dialy_datas):
        for i in range(metadata['daycounts']):
            ws.cell(4+i+i//10 if i<30 else 4+i+2 ,26,value=dialy_datas['SSH'].iloc[i]).style=Datastyle_Border 


    #endregion 

    #region 风




    ws=wb['二分钟平均风向']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][14]=='1' and 'WIN_D_Avg_2mi' in hourly_datas ):
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['WIN_D_Avg_2mi'].iloc[i*24+j]).style=Datastyle_Border
                
    ws=wb['二分钟平均风速']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][14]=='1' and 'WIN_S_Avg_2mi' in hourly_datas ):
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['WIN_S_Avg_2mi'].iloc[i*24+j]).style=Datastyle_Border

    ws=wb['十分钟平均风向']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][14]=='1' and 'WIN_D_Avg_10mi' in hourly_datas ):
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['WIN_D_Avg_10mi'].iloc[i*24+j]).style=Datastyle_Border
                
    ws=wb['十分钟平均风速']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if(metadata['OB_hs'][14]=='1' and 'WIN_S_Avg_10mi' in hourly_datas ):
        for i in range(metadata['daycounts']):
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['WIN_S_Avg_10mi'].iloc[i*24+j]).style=Datastyle_Border


    #endregion 

    #region 地表温度




    ws=wb['地表温度']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if('GST' in hourly_datas):
        for i in range(metadata['daycounts']):
            if('GST_Max' in dialy_datas and 'GST_Min' in dialy_datas):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,28,value=dialy_datas['GST_Max'][i]).style=Datastyle_Border
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,29,value=dialy_datas['GST_Min'][i]).style=Datastyle_Border
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['GST'][i*24+j]).style=Datastyle_Border


    #endregion 

    #region 草温




    ws=wb['草温']
    ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
    ws.cell(1 ,22,metadata['stationname']).style=Bstyle
    if('LGST' in hourly_datas):
        for i in range(metadata['daycounts']):
            if('LGST_Max' in dialy_datas and 'LGST_Min' in dialy_datas):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,28,value=dialy_datas['GST_Max'][i]).style=Datastyle_Border
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,29,value=dialy_datas['GST_Min'][i]).style=Datastyle_Border
            for j in range(24):
                ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas['LGST'][i*24+j]).style=Datastyle_Border


    #endregion 

    #region 其他地温




    wbs=[
        '5cm',
        '10cm',
        '15cm',
        '20cm',
        '40cm',
        '80cm',
        '160cm',
        '320cm'
    ]
    gsts=[
        'GST_5cm',
        'GST_10cm',
        'GST_15cm',
        'GST_20cm',
        'GST_40Cm',
        'GST_80cm',
        'GST_160cm',
        'GST_320cm' 
    ]
    for i0 in range(len(wbs)):
        ws=wb[wbs[i0]]
        ws.cell(1 ,2,value=str(metadata['year'])+'年'+str(metadata['month'])+'月').style=Bstyle
        ws.cell(1 ,22,metadata['stationname']).style=Bstyle
        if(gsts[i0] in hourly_datas):
            for i in range(metadata['daycounts']):
                for j in range(24):
                    ws.cell(4+i+i//10 if i<30 else 4+i+2 ,j+2,value=hourly_datas[gsts[i0]][i*24+j]).style=Datastyle_Border


    #endregion 

    wb.active = wb['封面']
    wb.save(excelfile)






