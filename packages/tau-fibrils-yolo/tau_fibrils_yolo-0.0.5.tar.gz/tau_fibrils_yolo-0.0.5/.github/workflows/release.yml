name: Publish, Build and Release

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build .
          twine upload dist/*

  build:
    needs: deploy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    env:
      PYAPP_PROJECT_NAME: 'tau_fibrils_yolo'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Extract PyPi package version
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          VERSION=${VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Download PyApp
        shell: bash
        run: |
          curl https://github.com/ofek/pyapp/releases/latest/download/source.tar.gz -Lo pyapp-source.tar.gz
          tar -xzf pyapp-source.tar.gz
          mv pyapp-v* pyapp-latest

      - name: Build executable for Windows
        env:
          PYAPP_PROJECT_VERSION: ${{ env.VERSION }}
          PYAPP_PYTHON_VERSION: '3.9'
        run: cargo build --release --manifest-path pyapp-latest/Cargo.toml

      - name: Archive Windows executable
        shell: bash
        working-directory: pyapp-latest/target/release
        run: |
          EXECUTABLE_NAME=${{ env.PYAPP_PROJECT_NAME }}_${{ runner.os }}_${{ env.VERSION }}.exe
          mv pyapp.exe $EXECUTABLE_NAME
          tar -czvf ../../../executable-windows.tar.gz $EXECUTABLE_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: executable-${{ runner.os }}
          path: executable-*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: executable-Windows
          path: .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows executable to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./executable-windows.tar.gz
          asset_name: executable-windows.tar.gz
          asset_content_type: application/gzip
