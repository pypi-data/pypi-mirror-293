Metadata-Version: 2.1
Name: ai_pentestsii
Version: 0.0.1
Summary: Automatic Pentest using Gemini API
Author-email: "A. Random Developer" <author@example.com>
Maintainer-email: "A. Great Maintainer" <maintainer@example.com>
License: Copyright (c) 2016 The Python Packaging Authority (PyPA)
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
        of the Software, and to permit persons to whom the Software is furnished to do
        so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/pypa/sampleproject
Project-URL: Bug Reports, https://github.com/pypa/sampleproject/issues
Project-URL: Funding, https://donate.pypi.org
Project-URL: Say Thanks!, http://saythanks.io/to/example
Project-URL: Source, https://github.com/pypa/sampleproject/
Keywords: sample,setuptools,development
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: dataclasses
Requires-Dist: google-generativeai
Requires-Dist: grpcio
Requires-Dist: markdown2
Requires-Dist: pdfkit
Requires-Dist: openai
Requires-Dist: python-nmap

> Pour l'instant c'est plutôt aléatoire donc si vous avez des idées pour gérer les prompts c'est cool, j'utilise le prompt v6 pour l'instant c'est le mieux mais je vais bientôt faire une session spécialisée pour les outils difficiles.
> Idéalement utilisez une vm kali comme ça vous aurez la plupart des outils
> Si vous voulez changer et utiliser une autre API d'IA, changez le fichier ai_config dans config.


# Pentest AI Automation Script 

## Description 

Ce projet est un script Python automatisant les tâches de pentest à l'aide d'IA. Il utilise des API pour interagir avec des modèles de langage avancés pour effectuer des tâches comme la sélection d'outils, la génération de commandes, l'exécution de ces commandes, et l'analyse des résultats. Le script est conçu pour optimiser le processus de pentest, en particulier pour les tâches répétitives et l'analyse des résultats.

## Prérequis 

### Logiciels 

- **Kali linux**
  
- **Python 3.8+**
 
- **pip**  - Pour installer les dépendances Python
 
- **Environment variables**  - Fichier `.env` avec les configurations nécessaires (voir la section "Configuration")

### Python Libraries 

Installez les dépendances avec pip:


```bash
pip install -r requirements.txt
```

### Fichiers nécessaires 
 
- `config/tools/authorized_tools.txt` : Liste des outils autorisés pour les tests de sécurité.
 
- `config/tools/tool_priority.txt` : Liste des outils préférés pour certaines tâches. (Déprécié, vous pouvez changer le code en commentaire dans la fonction command)

## Configuration 
Créez un fichier `.env` à la racine du projet pour définir les variables d'environnement nécessaires :

```dotenv
# Clé API pour interagir avec les services d'IA
API_TYPE="gemini/openai"

# Clé API pour interagir avec les services d'IA
API_KEY="votre_clé_api_ici"

# Chemin vers le fichier des outils autorisés
SAFE_TOOL='config/tools/authorized_tools.txt'

# Chemin vers le fichier de priorité des outils
PRIORITY_TOOL='config/tools/tool_priority.txt'

# Nom du prompt que vous souhaitez utiliser
PROMPT_VERSION='prompt_v8_modif'
```

## Utilisation 

### Lancement du script 

Pour lancer le script, exécutez la commande suivante :


```bash
sudo python main.py
```
- Il faut idéalement avoir les droits administrateur pour certaines commandes
### Fonctionnalités principales 
 
- **Initialisation**  : Le script démarre avec un écran de chargement et une initialisation des sessions IA.
 
- **Saisie des informations cible**  : Vous serez invité à entrer l'adresse IP cible et/ou le contexte du test.
 
- **Arbre des tâches**  : Le script crée un arbre des tâches basé sur les informations fournies et le modèle IA.
 
- **Sélection et exécution des tâches**  : Le script sélectionne la tâche appropriée, génère la commande correspondante, et l'exécute tout en vérifiant la sécurité.
 
- **Analyse et rapport**  : Le résultat de chaque commande est analysé et sauvegardé, et un rapport final est généré en format Markdown et PDF.

### Interruption du script 
Vous pouvez interrompre le script à tout moment avec `Ctrl+C`. Un rapport final sera généré automatiquement.
## Structure du Projet 
 
- **`config/`**  : Contient les fichiers de configuration pour les sessions IA.
 
- **`prompts/`**  : Fichiers de prompt utilisés pour communiquer avec l'IA.
 
- **`tasks/`**  : Scripts et fichiers relatifs aux tâches spécifiques comme la création de rapports, la vérification des installations, etc.
 
- **`outputs/`**  : Dossier où sont stockés les fichiers de sortie, y compris les rapports d'analyse.

- **`logs/`**  : Dossier où sont stockés les logs de commandes et de prompts.


## Limitations 
 
- Le script est conçu pour être utilisé dans un environnement contrôlé avec des outils spécifiques listés dans `authorized_tools.txt`.

- Il nécessite une clé API valide pour interagir avec les services d'IA.

- L'IA peut halluciner ou rester dans des analyses de surface.

## Contributeur 
 
- **Elouan TEISSERE**  - Créateur du projet
