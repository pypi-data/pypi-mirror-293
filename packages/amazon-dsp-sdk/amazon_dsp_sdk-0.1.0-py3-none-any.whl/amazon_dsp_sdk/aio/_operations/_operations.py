# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/python@6.19.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, List, Optional, Type, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ..._operations._operations import (
    build_amazon_dsp_sdk_add_conversion_tracking_products_request,
    build_amazon_dsp_sdk_create_ad_groups_request,
    build_amazon_dsp_sdk_create_campaigns_request,
    build_amazon_dsp_sdk_create_targets_request,
    build_amazon_dsp_sdk_delete_targets_request,
    build_amazon_dsp_sdk_get_conversion_tracking_products_request,
    build_amazon_dsp_sdk_list_ad_groups_request,
    build_amazon_dsp_sdk_list_campaigns_request,
    build_amazon_dsp_sdk_list_targets_request,
    build_amazon_dsp_sdk_partially_update_ad_groups_request,
    build_amazon_dsp_sdk_partially_update_camaigns_request,
    build_amazon_dsp_sdk_remove_conversion_tracking_products_request,
)
from .._vendor import AmazonDspSdkMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class AmazonDspSdkOperationsMixin(AmazonDspSdkMixinABC):

    @overload
    async def create_campaigns(
        self,
        body: Optional[JSON] = None,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates one or more campaigns.

        Creates one or more campaigns.

        :param body: Default value is None.
        :type body: JSON
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "campaigns": [
                        {
                            "advertiserId": "str",
                            "flights": {
                                "flights": {
                                    "flights": [
                                        {
                                            "budgetAmount": 0.0,
                                            "endDateTime": "2020-02-20
                                              00:00:00",
                                            "startDateTime": "2020-02-20
                                              00:00:00"
                                        }
                                    ]
                                }
                            },
                            "frequencies": [
                                {
                                    "frequencyType": "str",
                                    "levelType": "str",
                                    "maxImpressions": 0.0,
                                    "timeUnit": "str",
                                    "timeUnitCount": 0.0
                                }
                            ],
                            "name": "str",
                            "optimization": {
                                "bidStrategy": "str",
                                "goalSetting": {
                                    "kpi": "str",
                                    "targetKpi": 0.0
                                },
                                "automateBudgetAllocation": bool,
                                "automatedAdGroupCreationSettings": {
                                    "performancePlus": {
                                        "inventoryTypes": [
                                            "str"
                                        ]
                                    }
                                }
                            },
                            "budgetCaps": [
                                {
                                    "amount": 0.0,
                                    "recurrenceTimePeriod": "str"
                                }
                            ],
                            "comments": "str",
                            "fees": {
                                "agencyFeePercentage": 0.0
                            },
                            "purchaseOrderNumber": "str"
                        }
                    ]
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "campaignId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def create_campaigns(
        self,
        body: Optional[IO[bytes]] = None,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates one or more campaigns.

        Creates one or more campaigns.

        :param body: Default value is None.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "campaignId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def create_campaigns(
        self,
        body: Optional[Union[JSON, IO[bytes]]] = None,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Creates one or more campaigns.

        Creates one or more campaigns.

        :param body: Is either a JSON type or a IO[bytes] type. Default value is None.
        :type body: JSON or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "campaigns": [
                        {
                            "advertiserId": "str",
                            "flights": {
                                "flights": {
                                    "flights": [
                                        {
                                            "budgetAmount": 0.0,
                                            "endDateTime": "2020-02-20
                                              00:00:00",
                                            "startDateTime": "2020-02-20
                                              00:00:00"
                                        }
                                    ]
                                }
                            },
                            "frequencies": [
                                {
                                    "frequencyType": "str",
                                    "levelType": "str",
                                    "maxImpressions": 0.0,
                                    "timeUnit": "str",
                                    "timeUnitCount": 0.0
                                }
                            ],
                            "name": "str",
                            "optimization": {
                                "bidStrategy": "str",
                                "goalSetting": {
                                    "kpi": "str",
                                    "targetKpi": 0.0
                                },
                                "automateBudgetAllocation": bool,
                                "automatedAdGroupCreationSettings": {
                                    "performancePlus": {
                                        "inventoryTypes": [
                                            "str"
                                        ]
                                    }
                                }
                            },
                            "budgetCaps": [
                                {
                                    "amount": 0.0,
                                    "recurrenceTimePeriod": "str"
                                }
                            ],
                            "comments": "str",
                            "fees": {
                                "agencyFeePercentage": 0.0
                            },
                            "purchaseOrderNumber": "str"
                        }
                    ]
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "campaignId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_amazon_dsp_sdk_create_campaigns_request(
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def partially_update_camaigns(
        self,
        body: Optional[JSON] = None,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Partially updates one or more campaigns.

        Partially updates one or more campaigns.

        :param body: Default value is None.
        :type body: JSON
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "campaigns": [
                        {
                            "campaignId": "str",
                            "budgetCaps": [
                                {
                                    "amount": 0.0,
                                    "recurrenceTimePeriod": "str"
                                }
                            ],
                            "comments": "str",
                            "fees": {
                                "agencyFeePercentage": 0.0
                            },
                            "frequencies": [
                                {
                                    "frequencyType": "str",
                                    "levelType": "str",
                                    "maxImpressions": 0.0,
                                    "timeUnit": "str",
                                    "timeUnitCount": 0.0
                                }
                            ],
                            "name": "str",
                            "optimization": {
                                "automateBudgetAllocation": bool,
                                "automatedAdGroupCreationSettings": {
                                    "performancePlus": {
                                        "inventoryTypes": [
                                            "str"
                                        ]
                                    }
                                },
                                "bidStrategy": "str",
                                "goalSetting": {
                                    "kpi": "str",
                                    "targetKpi": 0.0
                                }
                            },
                            "purchaseOrderNumber": "str",
                            "state": "str"
                        }
                    ]
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "campaignId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def partially_update_camaigns(
        self,
        body: Optional[IO[bytes]] = None,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Partially updates one or more campaigns.

        Partially updates one or more campaigns.

        :param body: Default value is None.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "campaignId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def partially_update_camaigns(
        self,
        body: Optional[Union[JSON, IO[bytes]]] = None,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Partially updates one or more campaigns.

        Partially updates one or more campaigns.

        :param body: Is either a JSON type or a IO[bytes] type. Default value is None.
        :type body: JSON or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "campaigns": [
                        {
                            "campaignId": "str",
                            "budgetCaps": [
                                {
                                    "amount": 0.0,
                                    "recurrenceTimePeriod": "str"
                                }
                            ],
                            "comments": "str",
                            "fees": {
                                "agencyFeePercentage": 0.0
                            },
                            "frequencies": [
                                {
                                    "frequencyType": "str",
                                    "levelType": "str",
                                    "maxImpressions": 0.0,
                                    "timeUnit": "str",
                                    "timeUnitCount": 0.0
                                }
                            ],
                            "name": "str",
                            "optimization": {
                                "automateBudgetAllocation": bool,
                                "automatedAdGroupCreationSettings": {
                                    "performancePlus": {
                                        "inventoryTypes": [
                                            "str"
                                        ]
                                    }
                                },
                                "bidStrategy": "str",
                                "goalSetting": {
                                    "kpi": "str",
                                    "targetKpi": 0.0
                                }
                            },
                            "purchaseOrderNumber": "str",
                            "state": "str"
                        }
                    ]
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "campaignId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_amazon_dsp_sdk_partially_update_camaigns_request(
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def list_campaigns(
        self,
        body: Optional[JSON] = None,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Lists one or more campaigns.

        Lists one or more campaigns.

        :param body: Default value is None.
        :type body: JSON
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "campaignIdFilter": [
                        "str"
                    ],
                    "maxResults": 0,
                    "nextToken": "str"
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "campaignId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def list_campaigns(
        self,
        body: Optional[IO[bytes]] = None,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Lists one or more campaigns.

        Lists one or more campaigns.

        :param body: Default value is None.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "campaignId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def list_campaigns(
        self,
        body: Optional[Union[JSON, IO[bytes]]] = None,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Lists one or more campaigns.

        Lists one or more campaigns.

        :param body: Is either a JSON type or a IO[bytes] type. Default value is None.
        :type body: JSON or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "campaignIdFilter": [
                        "str"
                    ],
                    "maxResults": 0,
                    "nextToken": "str"
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "campaignId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_amazon_dsp_sdk_list_campaigns_request(
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def create_ad_groups(
        self,
        body: JSON,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create one or more ad groups synchronously.

        Creates one or more ad groups synchronously and returns one or more ad group identifiers if
        successful. For more details, see the `Amazon DSP Support Center
        <https://advertising.amazon.com/dsp/help>`_.

        :param body: Required.
        :type body: JSON
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "adGroups": [
                        {
                            "advertisedProductCategoryIds": [
                                "str"
                            ],
                            "bid": {
                                "baseBid": 0.0,
                                "maxAverageCPM": 0.0
                            },
                            "campaignId": "str",
                            "creativeRotationType": "str",
                            "endDateTime": "2020-02-20 00:00:00",
                            "frequencies": [
                                [
                                    {
                                        "frequencyType": "str",
                                        "maxImpressions": 0.0,
                                        "timeUnit": "str",
                                        "timeUnitCount": 0.0
                                    }
                                ]
                            ],
                            "inventoryType": "str",
                            "name": "str",
                            "optimization": {
                                "bidStrategy": "str",
                                "automateBudgetAllocation": bool
                            },
                            "pacing": {
                                "catchUpBoostPercentage": 0.0,
                                "deliveryProfile": "str"
                            },
                            "startDateTime": "2020-02-20 00:00:00",
                            "targetingSettings": {
                                "amazonViewability": {
                                    "includeUnmeasurableImpressions": bool,
                                    "viewabilityTier": "str"
                                },
                                "timeZoneType": "str",
                                "userLocation": "str",
                                "userLocationSignal": "str",
                                "enableLanguageTargeting": bool,
                                "targetedPGDealId": "str",
                                "videoCompletionTier": "str"
                            },
                            "budgetAmount": 0.0,
                            "budgetCaps": [
                                [
                                    {
                                        "amount": 0.0,
                                        "recurrenceTimePeriod": "str"
                                    }
                                ]
                            ],
                            "comments": "str",
                            "fees": [
                                [
                                    {
                                        "addToBudgetSpentAmount": bool,
                                        "feeType": "str",
                                        "feeValue": "str",
                                        "thirdPartyProvider": "str"
                                    }
                                ]
                            ],
                            "purchaseOrderNumber": "str"
                        }
                    ]
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "adGroupId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def create_ad_groups(
        self,
        body: IO[bytes],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create one or more ad groups synchronously.

        Creates one or more ad groups synchronously and returns one or more ad group identifiers if
        successful. For more details, see the `Amazon DSP Support Center
        <https://advertising.amazon.com/dsp/help>`_.

        :param body: Required.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "adGroupId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def create_ad_groups(
        self,
        body: Union[JSON, IO[bytes]],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Create one or more ad groups synchronously.

        Creates one or more ad groups synchronously and returns one or more ad group identifiers if
        successful. For more details, see the `Amazon DSP Support Center
        <https://advertising.amazon.com/dsp/help>`_.

        :param body: Is either a JSON type or a IO[bytes] type. Required.
        :type body: JSON or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "adGroups": [
                        {
                            "advertisedProductCategoryIds": [
                                "str"
                            ],
                            "bid": {
                                "baseBid": 0.0,
                                "maxAverageCPM": 0.0
                            },
                            "campaignId": "str",
                            "creativeRotationType": "str",
                            "endDateTime": "2020-02-20 00:00:00",
                            "frequencies": [
                                [
                                    {
                                        "frequencyType": "str",
                                        "maxImpressions": 0.0,
                                        "timeUnit": "str",
                                        "timeUnitCount": 0.0
                                    }
                                ]
                            ],
                            "inventoryType": "str",
                            "name": "str",
                            "optimization": {
                                "bidStrategy": "str",
                                "automateBudgetAllocation": bool
                            },
                            "pacing": {
                                "catchUpBoostPercentage": 0.0,
                                "deliveryProfile": "str"
                            },
                            "startDateTime": "2020-02-20 00:00:00",
                            "targetingSettings": {
                                "amazonViewability": {
                                    "includeUnmeasurableImpressions": bool,
                                    "viewabilityTier": "str"
                                },
                                "timeZoneType": "str",
                                "userLocation": "str",
                                "userLocationSignal": "str",
                                "enableLanguageTargeting": bool,
                                "targetedPGDealId": "str",
                                "videoCompletionTier": "str"
                            },
                            "budgetAmount": 0.0,
                            "budgetCaps": [
                                [
                                    {
                                        "amount": 0.0,
                                        "recurrenceTimePeriod": "str"
                                    }
                                ]
                            ],
                            "comments": "str",
                            "fees": [
                                [
                                    {
                                        "addToBudgetSpentAmount": bool,
                                        "feeType": "str",
                                        "feeValue": "str",
                                        "thirdPartyProvider": "str"
                                    }
                                ]
                            ],
                            "purchaseOrderNumber": "str"
                        }
                    ]
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "adGroupId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        _request = build_amazon_dsp_sdk_create_ad_groups_request(
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def partially_update_ad_groups(
        self,
        body: JSON,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Partially updates one or more ad groups synchronously.

        Partially updates one or more ad groups synchronously and returns one or more ad group
        identifiers if successful. For more details, see the `Amazon DSP Support Center
        <https://advertising.amazon.com/dsp/help>`_.

        :param body: Required.
        :type body: JSON
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "adGroups": [
                        {
                            "adGroupId": "str",
                            "advertisedProductCategoryIds": [
                                "str"
                            ],
                            "bid": {
                                "baseBid": 0.0,
                                "maxAverageCPM": 0.0
                            },
                            "budgetAmount": 0.0,
                            "budgetCaps": [
                                [
                                    {
                                        "amount": 0.0,
                                        "recurrenceTimePeriod": "str"
                                    }
                                ]
                            ],
                            "comments": "str",
                            "creativeRotationType": "str",
                            "endDateTime": "2020-02-20 00:00:00",
                            "fees": [
                                [
                                    {
                                        "addToBudgetSpentAmount": bool,
                                        "feeType": "str",
                                        "feeValue": "str",
                                        "thirdPartyProvider": "str"
                                    }
                                ]
                            ],
                            "frequencies": [
                                [
                                    {
                                        "frequencyType": "str",
                                        "maxImpressions": 0.0,
                                        "timeUnit": "str",
                                        "timeUnitCount": 0.0
                                    }
                                ]
                            ],
                            "inventoryType": "str",
                            "name": "str",
                            "optimization": {
                                "automateBudgetAllocation": bool,
                                "bidStrategy": "str"
                            },
                            "pacing": {
                                "catchUpBoostPercentage": 0.0,
                                "deliveryProfile": "str"
                            },
                            "purchaseOrderNumber": "str",
                            "startDateTime": "2020-02-20 00:00:00",
                            "state": "str",
                            "targetingSettings": {
                                "amazonViewability": {
                                    "includeUnmeasurableImpressions": bool,
                                    "viewabilityTier": "str"
                                },
                                "enableLanguageTargeting": bool,
                                "targetedPGDealId": "str",
                                "timeZoneType": "str",
                                "userLocation": "str",
                                "userLocationSignal": "str",
                                "videoCompletionTier": "str"
                            }
                        }
                    ]
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "adGroupId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def partially_update_ad_groups(
        self,
        body: IO[bytes],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Partially updates one or more ad groups synchronously.

        Partially updates one or more ad groups synchronously and returns one or more ad group
        identifiers if successful. For more details, see the `Amazon DSP Support Center
        <https://advertising.amazon.com/dsp/help>`_.

        :param body: Required.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "adGroupId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def partially_update_ad_groups(
        self,
        body: Union[JSON, IO[bytes]],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Partially updates one or more ad groups synchronously.

        Partially updates one or more ad groups synchronously and returns one or more ad group
        identifiers if successful. For more details, see the `Amazon DSP Support Center
        <https://advertising.amazon.com/dsp/help>`_.

        :param body: Is either a JSON type or a IO[bytes] type. Required.
        :type body: JSON or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "adGroups": [
                        {
                            "adGroupId": "str",
                            "advertisedProductCategoryIds": [
                                "str"
                            ],
                            "bid": {
                                "baseBid": 0.0,
                                "maxAverageCPM": 0.0
                            },
                            "budgetAmount": 0.0,
                            "budgetCaps": [
                                [
                                    {
                                        "amount": 0.0,
                                        "recurrenceTimePeriod": "str"
                                    }
                                ]
                            ],
                            "comments": "str",
                            "creativeRotationType": "str",
                            "endDateTime": "2020-02-20 00:00:00",
                            "fees": [
                                [
                                    {
                                        "addToBudgetSpentAmount": bool,
                                        "feeType": "str",
                                        "feeValue": "str",
                                        "thirdPartyProvider": "str"
                                    }
                                ]
                            ],
                            "frequencies": [
                                [
                                    {
                                        "frequencyType": "str",
                                        "maxImpressions": 0.0,
                                        "timeUnit": "str",
                                        "timeUnitCount": 0.0
                                    }
                                ]
                            ],
                            "inventoryType": "str",
                            "name": "str",
                            "optimization": {
                                "automateBudgetAllocation": bool,
                                "bidStrategy": "str"
                            },
                            "pacing": {
                                "catchUpBoostPercentage": 0.0,
                                "deliveryProfile": "str"
                            },
                            "purchaseOrderNumber": "str",
                            "startDateTime": "2020-02-20 00:00:00",
                            "state": "str",
                            "targetingSettings": {
                                "amazonViewability": {
                                    "includeUnmeasurableImpressions": bool,
                                    "viewabilityTier": "str"
                                },
                                "enableLanguageTargeting": bool,
                                "targetedPGDealId": "str",
                                "timeZoneType": "str",
                                "userLocation": "str",
                                "userLocationSignal": "str",
                                "videoCompletionTier": "str"
                            }
                        }
                    ]
                }

                # response body for status code(s): 207
                response == {
                    "requestId": "str",
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "success": [
                        {
                            "index": 0,
                            "adGroupId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        _request = build_amazon_dsp_sdk_partially_update_ad_groups_request(
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def list_ad_groups(
        self,
        body: JSON,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Lists one or more ad groups synchronously.

        Lists one or more ad groups synchronously. For more details, see the `Amazon DSP Support Center
        <https://advertising.amazon.com/dsp/help>`_.

        :param body: Required.
        :type body: JSON
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "adGroupIdFilter": [
                        "str"
                    ],
                    "campaignIdFilter": [
                        "str"
                    ],
                    "maxResults": 0,
                    "nextToken": "str"
                }

                # response body for status code(s): 207
                response == {
                    "adGroups": [
                        {
                            "adGroupId": "str",
                            "advertisedProductCategoryIds": [
                                "str"
                            ],
                            "bid": {
                                "baseBid": 0.0,
                                "currencyCode": "str",
                                "maxAverageCPM": 0.0
                            },
                            "budgetAmount": 0.0,
                            "budgetCaps": [
                                {
                                    "amount": 0.0,
                                    "currencyCode": "str",
                                    "recurrenceTimePeriod": "str"
                                }
                            ],
                            "campaignId": "str",
                            "comments": "str",
                            "creationDateTime": "2020-02-20 00:00:00",
                            "creativeRotationType": "str",
                            "deliveryStatus": "str",
                            "endDateTime": "2020-02-20 00:00:00",
                            "fees": [
                                {
                                    "feeType": "str",
                                    "feeValue": "str",
                                    "feeValueType": "str",
                                    "addToBudgetSpentAmount": bool,
                                    "currencyCode": "str",
                                    "thirdPartyProvider": "str"
                                }
                            ],
                            "frequencies": [
                                [
                                    {
                                        "frequencyType": "str",
                                        "maxImpressions": 0.0,
                                        "timeUnit": "str",
                                        "timeUnitCount": 0.0
                                    }
                                ]
                            ],
                            "inventoryType": "str",
                            "lastUpdatedDateTime": "2020-02-20 00:00:00",
                            "name": "str",
                            "optimization": {
                                "automateBudgetAllocation": bool,
                                "bidStrategy": "str"
                            },
                            "pacing": {
                                "catchUpBoostPercentage": 0.0,
                                "deliveryProfile": "str"
                            },
                            "purchaseOrderNumber": "str",
                            "startDateTime": "2020-02-20 00:00:00",
                            "state": "str",
                            "targetingSettings": {
                                "amazonViewability": {
                                    "includeUnmeasurableImpressions": bool,
                                    "viewabilityTier": "str"
                                },
                                "enableLanguageTargeting": bool,
                                "siteLanguage": "str",
                                "targetedPGDealId": "str",
                                "timeZoneType": "str",
                                "userLocation": "str",
                                "userLocationSignal": "str",
                                "videoCompletionTier": "str"
                            }
                        }
                    ],
                    "nextToken": "str"
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def list_ad_groups(
        self,
        body: IO[bytes],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Lists one or more ad groups synchronously.

        Lists one or more ad groups synchronously. For more details, see the `Amazon DSP Support Center
        <https://advertising.amazon.com/dsp/help>`_.

        :param body: Required.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "adGroups": [
                        {
                            "adGroupId": "str",
                            "advertisedProductCategoryIds": [
                                "str"
                            ],
                            "bid": {
                                "baseBid": 0.0,
                                "currencyCode": "str",
                                "maxAverageCPM": 0.0
                            },
                            "budgetAmount": 0.0,
                            "budgetCaps": [
                                {
                                    "amount": 0.0,
                                    "currencyCode": "str",
                                    "recurrenceTimePeriod": "str"
                                }
                            ],
                            "campaignId": "str",
                            "comments": "str",
                            "creationDateTime": "2020-02-20 00:00:00",
                            "creativeRotationType": "str",
                            "deliveryStatus": "str",
                            "endDateTime": "2020-02-20 00:00:00",
                            "fees": [
                                {
                                    "feeType": "str",
                                    "feeValue": "str",
                                    "feeValueType": "str",
                                    "addToBudgetSpentAmount": bool,
                                    "currencyCode": "str",
                                    "thirdPartyProvider": "str"
                                }
                            ],
                            "frequencies": [
                                [
                                    {
                                        "frequencyType": "str",
                                        "maxImpressions": 0.0,
                                        "timeUnit": "str",
                                        "timeUnitCount": 0.0
                                    }
                                ]
                            ],
                            "inventoryType": "str",
                            "lastUpdatedDateTime": "2020-02-20 00:00:00",
                            "name": "str",
                            "optimization": {
                                "automateBudgetAllocation": bool,
                                "bidStrategy": "str"
                            },
                            "pacing": {
                                "catchUpBoostPercentage": 0.0,
                                "deliveryProfile": "str"
                            },
                            "purchaseOrderNumber": "str",
                            "startDateTime": "2020-02-20 00:00:00",
                            "state": "str",
                            "targetingSettings": {
                                "amazonViewability": {
                                    "includeUnmeasurableImpressions": bool,
                                    "viewabilityTier": "str"
                                },
                                "enableLanguageTargeting": bool,
                                "siteLanguage": "str",
                                "targetedPGDealId": "str",
                                "timeZoneType": "str",
                                "userLocation": "str",
                                "userLocationSignal": "str",
                                "videoCompletionTier": "str"
                            }
                        }
                    ],
                    "nextToken": "str"
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def list_ad_groups(
        self,
        body: Union[JSON, IO[bytes]],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Lists one or more ad groups synchronously.

        Lists one or more ad groups synchronously. For more details, see the `Amazon DSP Support Center
        <https://advertising.amazon.com/dsp/help>`_.

        :param body: Is either a JSON type or a IO[bytes] type. Required.
        :type body: JSON or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "adGroupIdFilter": [
                        "str"
                    ],
                    "campaignIdFilter": [
                        "str"
                    ],
                    "maxResults": 0,
                    "nextToken": "str"
                }

                # response body for status code(s): 207
                response == {
                    "adGroups": [
                        {
                            "adGroupId": "str",
                            "advertisedProductCategoryIds": [
                                "str"
                            ],
                            "bid": {
                                "baseBid": 0.0,
                                "currencyCode": "str",
                                "maxAverageCPM": 0.0
                            },
                            "budgetAmount": 0.0,
                            "budgetCaps": [
                                {
                                    "amount": 0.0,
                                    "currencyCode": "str",
                                    "recurrenceTimePeriod": "str"
                                }
                            ],
                            "campaignId": "str",
                            "comments": "str",
                            "creationDateTime": "2020-02-20 00:00:00",
                            "creativeRotationType": "str",
                            "deliveryStatus": "str",
                            "endDateTime": "2020-02-20 00:00:00",
                            "fees": [
                                {
                                    "feeType": "str",
                                    "feeValue": "str",
                                    "feeValueType": "str",
                                    "addToBudgetSpentAmount": bool,
                                    "currencyCode": "str",
                                    "thirdPartyProvider": "str"
                                }
                            ],
                            "frequencies": [
                                [
                                    {
                                        "frequencyType": "str",
                                        "maxImpressions": 0.0,
                                        "timeUnit": "str",
                                        "timeUnitCount": 0.0
                                    }
                                ]
                            ],
                            "inventoryType": "str",
                            "lastUpdatedDateTime": "2020-02-20 00:00:00",
                            "name": "str",
                            "optimization": {
                                "automateBudgetAllocation": bool,
                                "bidStrategy": "str"
                            },
                            "pacing": {
                                "catchUpBoostPercentage": 0.0,
                                "deliveryProfile": "str"
                            },
                            "purchaseOrderNumber": "str",
                            "startDateTime": "2020-02-20 00:00:00",
                            "state": "str",
                            "targetingSettings": {
                                "amazonViewability": {
                                    "includeUnmeasurableImpressions": bool,
                                    "viewabilityTier": "str"
                                },
                                "enableLanguageTargeting": bool,
                                "siteLanguage": "str",
                                "targetedPGDealId": "str",
                                "timeZoneType": "str",
                                "userLocation": "str",
                                "userLocationSignal": "str",
                                "videoCompletionTier": "str"
                            }
                        }
                    ],
                    "nextToken": "str"
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        _request = build_amazon_dsp_sdk_list_ad_groups_request(
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def create_targets(
        self,
        body: List[JSON],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates one or more targets.

        Creates one or more targets.

        :param body: Required.
        :type body: list[JSON]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    {
                        "adGroupId": "str",
                        "adProduct": "str",
                        "negative": bool,
                        "state": "str",
                        "targetDetails": {}
                    }
                ]

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "errors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ],
                            "index": 0,
                            "message": "str"
                        }
                    ],
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def create_targets(
        self,
        body: IO[bytes],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates one or more targets.

        Creates one or more targets.

        :param body: Required.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "errors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ],
                            "index": 0,
                            "message": "str"
                        }
                    ],
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def create_targets(
        self,
        body: Union[List[JSON], IO[bytes]],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Creates one or more targets.

        Creates one or more targets.

        :param body: Is either a [JSON] type or a IO[bytes] type. Required.
        :type body: list[JSON] or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "errors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ],
                            "index": 0,
                            "message": "str"
                        }
                    ],
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        _request = build_amazon_dsp_sdk_create_targets_request(
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def delete_targets(
        self,
        body: List[JSON],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Deletes one or more targets.

        Deletes one or more targets.

        :param body: Required.
        :type body: list[JSON]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    {
                        "adGroupId": "str",
                        "adProduct": "str",
                        "negative": bool,
                        "state": "str",
                        "targetDetails": {}
                    }
                ]

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "errors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ],
                            "index": 0,
                            "message": "str"
                        }
                    ],
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def delete_targets(
        self,
        body: IO[bytes],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Deletes one or more targets.

        Deletes one or more targets.

        :param body: Required.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "errors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ],
                            "index": 0,
                            "message": "str"
                        }
                    ],
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def delete_targets(
        self,
        body: Union[List[JSON], IO[bytes]],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Deletes one or more targets.

        Deletes one or more targets.

        :param body: Is either a [JSON] type or a IO[bytes] type. Required.
        :type body: list[JSON] or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "errors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ],
                            "index": 0,
                            "message": "str"
                        }
                    ],
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        _request = build_amazon_dsp_sdk_delete_targets_request(
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def list_targets(
        self,
        body: JSON,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[List[JSON], JSON]:
        """Lists one or more targets.

        Lists one or more targets.

        :param body: Required.
        :type body: JSON
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object or JSON object
        :rtype: list[JSON] or JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "filters": {
                        "adGroupIdFilter": [
                            "str"
                        ],
                        "adProductFilter": [
                            "str"
                        ],
                        "stateFilter": [
                            "str"
                        ],
                        "targetTypeFilter": [
                            "str"
                        ]
                    },
                    "maxResults": 0,
                    "nextToken": "str"
                }

                # response body for status code(s): 207
                response == [
                    {
                        "adGroupId": "str",
                        "adProduct": "str",
                        "negative": bool,
                        "state": "str",
                        "targetDetails": {}
                    }
                ]
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def list_targets(
        self,
        body: IO[bytes],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[List[JSON], JSON]:
        """Lists one or more targets.

        Lists one or more targets.

        :param body: Required.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object or JSON object
        :rtype: list[JSON] or JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == [
                    {
                        "adGroupId": "str",
                        "adProduct": "str",
                        "negative": bool,
                        "state": "str",
                        "targetDetails": {}
                    }
                ]
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def list_targets(
        self,
        body: Union[JSON, IO[bytes]],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> Union[List[JSON], JSON]:
        """Lists one or more targets.

        Lists one or more targets.

        :param body: Is either a JSON type or a IO[bytes] type. Required.
        :type body: JSON or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: list of JSON object or JSON object
        :rtype: list[JSON] or JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "filters": {
                        "adGroupIdFilter": [
                            "str"
                        ],
                        "adProductFilter": [
                            "str"
                        ],
                        "stateFilter": [
                            "str"
                        ],
                        "targetTypeFilter": [
                            "str"
                        ]
                    },
                    "maxResults": 0,
                    "nextToken": "str"
                }

                # response body for status code(s): 207
                response == [
                    {
                        "adGroupId": "str",
                        "adProduct": "str",
                        "negative": bool,
                        "state": "str",
                        "targetDetails": {}
                    }
                ]
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Union[List[JSON], JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        _request = build_amazon_dsp_sdk_list_targets_request(
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[List[JSON], JSON], deserialized), {})  # type: ignore

        return cast(Union[List[JSON], JSON], deserialized)  # type: ignore

    @overload
    async def add_conversion_tracking_products(
        self,
        campaign_id: str,
        body: List[JSON],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Add products to a campaign for conversion tracking.

        Adds products to a campaign to enable product-related conversion metrics. Products may be added
        in batches of 2,000, and a campaign can track a maximum of 500,000 products.

        :param campaign_id: The campaign identifier. Required.
        :type campaign_id: str
        :param body: Required.
        :type body: list[JSON]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    {
                        "domain": "str",
                        "productAssociation": "str",
                        "productId": "str"
                    }
                ]

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "requestId": "str",
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def add_conversion_tracking_products(
        self,
        campaign_id: str,
        body: IO[bytes],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Add products to a campaign for conversion tracking.

        Adds products to a campaign to enable product-related conversion metrics. Products may be added
        in batches of 2,000, and a campaign can track a maximum of 500,000 products.

        :param campaign_id: The campaign identifier. Required.
        :type campaign_id: str
        :param body: Required.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "requestId": "str",
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def add_conversion_tracking_products(
        self,
        campaign_id: str,
        body: Union[List[JSON], IO[bytes]],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Add products to a campaign for conversion tracking.

        Adds products to a campaign to enable product-related conversion metrics. Products may be added
        in batches of 2,000, and a campaign can track a maximum of 500,000 products.

        :param campaign_id: The campaign identifier. Required.
        :type campaign_id: str
        :param body: Is either a [JSON] type or a IO[bytes] type. Required.
        :type body: list[JSON] or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "requestId": "str",
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        _request = build_amazon_dsp_sdk_add_conversion_tracking_products_request(
            campaign_id=campaign_id,
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def get_conversion_tracking_products(
        self,
        campaign_id: str,
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        max_results: int = 10000,
        next_token: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Gets products of a campaign for conversion tracking.

        Gets products of a campaign to enable product-related conversion metrics. Products may be
        extracted in batches of 10,000, and a campaign can track a maximum of 500,000 products.

        :param campaign_id: The campaign identifier. Required.
        :type campaign_id: str
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword max_results: Sets the maximum number of objects in the returned array. Use in
         conjunction with the nextToken  parameter to control pagination. For example, supplying
         maxResults=20 with a previously returned  token will fetch up to the next 20 items. In some
         cases, fewer items may be returned. Default value is 10000.
        :paramtype max_results: int
        :keyword next_token: Operations that return paginated results include a pagination token in
         this field.  To retrieve the next page of results, call the same operation and specify this
         token in the request.  If the nextToken field is empty, there are no further results.  Token
         expires 59 seconds after the last call. Default value is None.
        :paramtype next_token: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "nextToken": "str",
                    "productTrackingList": [
                        {
                            "domain": "str",
                            "productAssociation": "str",
                            "productId": "str"
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_amazon_dsp_sdk_get_conversion_tracking_products_request(
            campaign_id=campaign_id,
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            max_results=max_results,
            next_token=next_token,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def remove_conversion_tracking_products(
        self,
        campaign_id: str,
        body: List[JSON],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Removes one or more products from campaign conversion tracking.

        Removes one or more products from a campaign. Products may be removed in batches of 2,000, and
        a campaign can track a maximum of 500,000 products.

        :param campaign_id: The campaign identifier. Required.
        :type campaign_id: str
        :param body: Required.
        :type body: list[JSON]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    {
                        "domain": "str",
                        "productAssociation": "str",
                        "productId": "str"
                    }
                ]

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "requestId": "str",
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @overload
    async def remove_conversion_tracking_products(
        self,
        campaign_id: str,
        body: IO[bytes],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Removes one or more products from campaign conversion tracking.

        Removes one or more products from a campaign. Products may be removed in batches of 2,000, and
        a campaign can track a maximum of 500,000 products.

        :param campaign_id: The campaign identifier. Required.
        :type campaign_id: str
        :param body: Required.
        :type body: IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "requestId": "str",
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """

    @distributed_trace_async
    async def remove_conversion_tracking_products(
        self,
        campaign_id: str,
        body: Union[List[JSON], IO[bytes]],
        *,
        amazon_ads_account_id: str,
        amazon_advertising_api_client_id: str,
        amazon_advertising_api_scope: str,
        **kwargs: Any
    ) -> JSON:
        """Removes one or more products from campaign conversion tracking.

        Removes one or more products from a campaign. Products may be removed in batches of 2,000, and
        a campaign can track a maximum of 500,000 products.

        :param campaign_id: The campaign identifier. Required.
        :type campaign_id: str
        :param body: Is either a [JSON] type or a IO[bytes] type. Required.
        :type body: list[JSON] or IO[bytes]
        :keyword amazon_ads_account_id: Account identifier you use to access the DSP. This is your
         Amazon DSP Advertiser ID. Required.
        :paramtype amazon_ads_account_id: str
        :keyword amazon_advertising_api_client_id: The identifier of a client associated with a "Login
         with Amazon" account. Required.
        :paramtype amazon_advertising_api_client_id: str
        :keyword amazon_advertising_api_scope: The identifier of a profile associated with the
         advertiser account. Use GET method on Profiles resource to list profiles associated with the
         access token passed in the HTTP Authorization header. Required.
        :paramtype amazon_advertising_api_scope: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 207
                response == {
                    "error": [
                        {
                            "index": 0,
                            "subErrors": [
                                {
                                    "errorCode": "str",
                                    "errorMessage": "str",
                                    "errorId": "str"
                                }
                            ]
                        }
                    ],
                    "requestId": "str",
                    "success": [
                        {
                            "index": 0
                        }
                    ]
                }
                # response body for status code(s): 400, 401, 403, 404, 409, 415, 429, 500
                response == {
                    "errors": [
                        {
                            "errorCode": "str",
                            "errorMessage": "str",
                            "errorId": "str"
                        }
                    ],
                    "requestId": "str"
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        _request = build_amazon_dsp_sdk_remove_conversion_tracking_products_request(
            campaign_id=campaign_id,
            amazon_ads_account_id=amazon_ads_account_id,
            amazon_advertising_api_client_id=amazon_advertising_api_client_id,
            amazon_advertising_api_scope=amazon_advertising_api_scope,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [207, 400, 401, 403, 404, 409, 415, 429, 500]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore
