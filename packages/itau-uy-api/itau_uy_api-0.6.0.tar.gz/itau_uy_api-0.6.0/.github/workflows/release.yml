name: Build, test, lint, and publish

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release'
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Lint and test
        run: |
          uv run pflake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          uv run pflake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          uv run black --check --diff .
          uv run mypy . --strict --ignore-missing-imports
          uv run pytest

      - name: Check version change
        id: check_version
        run: |
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          if [ "v$CURRENT_VERSION" != "$LATEST_TAG" ] || ${{ github.event.inputs.force_release == 'true' }}; then
            echo "Version changed from $LATEST_TAG to v$CURRENT_VERSION or force release requested"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged and no force release requested"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build package
        if: steps.check_version.outputs.version_changed == 'true'
        run: uvx --from build pyproject-build --installer uv

      - name: Create Release
        if: steps.check_version.outputs.version_changed == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.check_version.outputs.new_version }}
          name: Release v${{ steps.check_version.outputs.new_version }}
          body: |
            Release of version ${{ steps.check_version.outputs.new_version }}
            
            For full changes, see the [changelog](CHANGELOG.md).
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: steps.check_version.outputs.version_changed == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: uvx twine upload --non-interactive dist/*

      - name: Minimize uv cache
        run: uv cache prune --ci
