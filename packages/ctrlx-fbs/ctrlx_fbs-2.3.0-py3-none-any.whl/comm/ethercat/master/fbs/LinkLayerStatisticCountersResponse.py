# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Link layer statistic counters
class LinkLayerStatisticCountersResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinkLayerStatisticCountersResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLinkLayerStatisticCountersResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LinkLayerStatisticCountersResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Physical error counter
    # LinkLayerStatisticCountersResponse
    def PhysicalErrorCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Telegram error counter
    # LinkLayerStatisticCountersResponse
    def TelegramErrorCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Measurement of send offset is active
    # LinkLayerStatisticCountersResponse
    def SendOffsetMeasurementActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Send offset values in nanoseconds
    # LinkLayerStatisticCountersResponse
    def SendOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.MinActMaxValues import MinActMaxValues
            obj = MinActMaxValues()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Measurement of network delay is active
    # LinkLayerStatisticCountersResponse
    def NetworkDelayMeasurementActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Network delay values in nanoseconds
    # LinkLayerStatisticCountersResponse
    def NetworkDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.MinActMaxValues import MinActMaxValues
            obj = MinActMaxValues()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def LinkLayerStatisticCountersResponseStart(builder): builder.StartObject(6)
def Start(builder):
    return LinkLayerStatisticCountersResponseStart(builder)
def LinkLayerStatisticCountersResponseAddPhysicalErrorCnt(builder, physicalErrorCnt): builder.PrependUint32Slot(0, physicalErrorCnt, 0)
def AddPhysicalErrorCnt(builder, physicalErrorCnt):
    return LinkLayerStatisticCountersResponseAddPhysicalErrorCnt(builder, physicalErrorCnt)
def LinkLayerStatisticCountersResponseAddTelegramErrorCnt(builder, telegramErrorCnt): builder.PrependUint32Slot(1, telegramErrorCnt, 0)
def AddTelegramErrorCnt(builder, telegramErrorCnt):
    return LinkLayerStatisticCountersResponseAddTelegramErrorCnt(builder, telegramErrorCnt)
def LinkLayerStatisticCountersResponseAddSendOffsetMeasurementActive(builder, sendOffsetMeasurementActive): builder.PrependBoolSlot(2, sendOffsetMeasurementActive, 0)
def AddSendOffsetMeasurementActive(builder, sendOffsetMeasurementActive):
    return LinkLayerStatisticCountersResponseAddSendOffsetMeasurementActive(builder, sendOffsetMeasurementActive)
def LinkLayerStatisticCountersResponseAddSendOffset(builder, sendOffset): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sendOffset), 0)
def AddSendOffset(builder, sendOffset):
    return LinkLayerStatisticCountersResponseAddSendOffset(builder, sendOffset)
def LinkLayerStatisticCountersResponseAddNetworkDelayMeasurementActive(builder, networkDelayMeasurementActive): builder.PrependBoolSlot(4, networkDelayMeasurementActive, 0)
def AddNetworkDelayMeasurementActive(builder, networkDelayMeasurementActive):
    return LinkLayerStatisticCountersResponseAddNetworkDelayMeasurementActive(builder, networkDelayMeasurementActive)
def LinkLayerStatisticCountersResponseAddNetworkDelay(builder, networkDelay): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(networkDelay), 0)
def AddNetworkDelay(builder, networkDelay):
    return LinkLayerStatisticCountersResponseAddNetworkDelay(builder, networkDelay)
def LinkLayerStatisticCountersResponseEnd(builder): return builder.EndObject()
def End(builder):
    return LinkLayerStatisticCountersResponseEnd(builder)
import comm.ethercat.master.fbs.MinActMaxValues
try:
    from typing import Optional
except:
    pass

class LinkLayerStatisticCountersResponseT(object):

    # LinkLayerStatisticCountersResponseT
    def __init__(self):
        self.physicalErrorCnt = 0  # type: int
        self.telegramErrorCnt = 0  # type: int
        self.sendOffsetMeasurementActive = False  # type: bool
        self.sendOffset = None  # type: Optional[comm.ethercat.master.fbs.MinActMaxValues.MinActMaxValuesT]
        self.networkDelayMeasurementActive = False  # type: bool
        self.networkDelay = None  # type: Optional[comm.ethercat.master.fbs.MinActMaxValues.MinActMaxValuesT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        linkLayerStatisticCountersResponse = LinkLayerStatisticCountersResponse()
        linkLayerStatisticCountersResponse.Init(buf, pos)
        return cls.InitFromObj(linkLayerStatisticCountersResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, linkLayerStatisticCountersResponse):
        x = LinkLayerStatisticCountersResponseT()
        x._UnPack(linkLayerStatisticCountersResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.physicalErrorCnt == other.physicalErrorCnt and \
            self.telegramErrorCnt == other.telegramErrorCnt and \
            self.sendOffsetMeasurementActive == other.sendOffsetMeasurementActive and \
            self.sendOffset == other.sendOffset and \
            self.networkDelayMeasurementActive == other.networkDelayMeasurementActive and \
            self.networkDelay == other.networkDelay

    # LinkLayerStatisticCountersResponseT
    def _UnPack(self, linkLayerStatisticCountersResponse):
        if linkLayerStatisticCountersResponse is None:
            return
        self.physicalErrorCnt = linkLayerStatisticCountersResponse.PhysicalErrorCnt()
        self.telegramErrorCnt = linkLayerStatisticCountersResponse.TelegramErrorCnt()
        self.sendOffsetMeasurementActive = linkLayerStatisticCountersResponse.SendOffsetMeasurementActive()
        if linkLayerStatisticCountersResponse.SendOffset() is not None:
            self.sendOffset = comm.ethercat.master.fbs.MinActMaxValues.MinActMaxValuesT.InitFromObj(linkLayerStatisticCountersResponse.SendOffset())
        self.networkDelayMeasurementActive = linkLayerStatisticCountersResponse.NetworkDelayMeasurementActive()
        if linkLayerStatisticCountersResponse.NetworkDelay() is not None:
            self.networkDelay = comm.ethercat.master.fbs.MinActMaxValues.MinActMaxValuesT.InitFromObj(linkLayerStatisticCountersResponse.NetworkDelay())

    # LinkLayerStatisticCountersResponseT
    def Pack(self, builder):
        LinkLayerStatisticCountersResponseStart(builder)
        LinkLayerStatisticCountersResponseAddPhysicalErrorCnt(builder, self.physicalErrorCnt)
        LinkLayerStatisticCountersResponseAddTelegramErrorCnt(builder, self.telegramErrorCnt)
        LinkLayerStatisticCountersResponseAddSendOffsetMeasurementActive(builder, self.sendOffsetMeasurementActive)
        if self.sendOffset is not None:
            sendOffset = self.sendOffset.Pack(builder)
            LinkLayerStatisticCountersResponseAddSendOffset(builder, sendOffset)
        LinkLayerStatisticCountersResponseAddNetworkDelayMeasurementActive(builder, self.networkDelayMeasurementActive)
        if self.networkDelay is not None:
            networkDelay = self.networkDelay.Pack(builder)
            LinkLayerStatisticCountersResponseAddNetworkDelay(builder, networkDelay)
        linkLayerStatisticCountersResponse = LinkLayerStatisticCountersResponseEnd(builder)
        return linkLayerStatisticCountersResponse
