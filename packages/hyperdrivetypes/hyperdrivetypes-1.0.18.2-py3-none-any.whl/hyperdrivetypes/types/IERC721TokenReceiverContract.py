"""A web3.py Contract class for the IERC721TokenReceiver contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, BlockIdentifier, CallOverride, TxParams

from .utilities import (
    dataclass_to_tuple,
    rename_returned_types,
    try_bytecode_hexbytes,
)

structs = {}


class IERC721TokenReceiverOnERC721ReceivedContractFunction(ContractFunction):
    """ContractFunction for the onERC721Received method."""

    def __call__(self, arg1: str, arg2: str, arg3: int, arg4: bytes) -> IERC721TokenReceiverOnERC721ReceivedContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1),
            dataclass_to_tuple(arg2),
            dataclass_to_tuple(arg3),
            dataclass_to_tuple(arg4),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IERC721TokenReceiverContractFunctions(ContractFunctions):
    """ContractFunctions for the IERC721TokenReceiver contract."""

    onERC721Received: IERC721TokenReceiverOnERC721ReceivedContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.onERC721Received = (
            IERC721TokenReceiverOnERC721ReceivedContractFunction.factory(
                "onERC721Received",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="onERC721Received",
            )
        )


ierc721tokenreceiver_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "onERC721Received",
            "inputs": [
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {"name": "", "type": "bytes4", "internalType": "bytes4"}
            ],
            "stateMutability": "nonpayable",
        }
    ],
)
# pylint: disable=line-too-long
ierc721tokenreceiver_bytecode = HexStr("0x")


class IERC721TokenReceiverContract(Contract):
    """A web3.py Contract class for the IERC721TokenReceiver contract."""

    abi: ABI = ierc721tokenreceiver_abi
    bytecode: bytes | None = try_bytecode_hexbytes(
        ierc721tokenreceiver_bytecode, "ierc721tokenreceiver"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = IERC721TokenReceiverContractFunctions(ierc721tokenreceiver_abi, self.w3, address)  # type: ignore

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    functions: IERC721TokenReceiverContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IERC721TokenReceiverContractFunctions(
            ierc721tokenreceiver_abi, w3, None
        )

        return contract
