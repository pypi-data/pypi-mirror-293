"""A web3.py Contract class for the SweepTest contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, Sequence, Type, cast, overload

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import (
    ABI,
    ABIFunction,
    BlockIdentifier,
    CallOverride,
    EventData,
    TxParams,
)

from .StdInvariantTypes import FuzzInterface, FuzzSelector
from .utilities import (
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
    try_bytecode_hexbytes,
)

structs = {
    "FuzzSelector": FuzzSelector,
    "FuzzInterface": FuzzInterface,
}


class SweepTestIS_TESTContractFunction(ContractFunction):
    """ContractFunction for the IS_TEST method."""

    def __call__(self) -> SweepTestIS_TESTContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestCreateUserContractFunction(ContractFunction):
    """ContractFunction for the createUser method."""

    def __call__(self, name: str) -> SweepTestCreateUserContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(name))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestExcludeArtifactsContractFunction(ContractFunction):
    """ContractFunction for the excludeArtifacts method."""

    def __call__(self) -> SweepTestExcludeArtifactsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestExcludeContractsContractFunction(ContractFunction):
    """ContractFunction for the excludeContracts method."""

    def __call__(self) -> SweepTestExcludeContractsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestExcludeSendersContractFunction(ContractFunction):
    """ContractFunction for the excludeSenders method."""

    def __call__(self) -> SweepTestExcludeSendersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestFailedContractFunction(ContractFunction):
    """ContractFunction for the failed method."""

    def __call__(self) -> SweepTestFailedContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestSetUpContractFunction(ContractFunction):
    """ContractFunction for the setUp method."""

    def __call__(self) -> SweepTestSetUpContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class SweepTestTargetArtifactSelectorsContractFunction(ContractFunction):
    """ContractFunction for the targetArtifactSelectors method."""

    def __call__(self) -> SweepTestTargetArtifactSelectorsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FuzzSelector]:
        """returns list[FuzzSelector]."""
        # Define the expected return types from the smart contract call

        return_types = list[FuzzSelector]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class SweepTestTargetArtifactsContractFunction(ContractFunction):
    """ContractFunction for the targetArtifacts method."""

    def __call__(self) -> SweepTestTargetArtifactsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestTargetContractsContractFunction(ContractFunction):
    """ContractFunction for the targetContracts method."""

    def __call__(self) -> SweepTestTargetContractsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestTargetInterfacesContractFunction(ContractFunction):
    """ContractFunction for the targetInterfaces method."""

    def __call__(self) -> SweepTestTargetInterfacesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FuzzInterface]:
        """returns list[FuzzInterface]."""
        # Define the expected return types from the smart contract call

        return_types = list[FuzzInterface]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )


class SweepTestTargetSelectorsContractFunction(ContractFunction):
    """ContractFunction for the targetSelectors method."""

    def __call__(self) -> SweepTestTargetSelectorsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FuzzSelector]:
        """returns list[FuzzSelector]."""
        # Define the expected return types from the smart contract call

        return_types = list[FuzzSelector]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class SweepTestTargetSendersContractFunction(ContractFunction):
    """ContractFunction for the targetSenders method."""

    def __call__(self) -> SweepTestTargetSendersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestTest_sweep_failure_direct_sweepsContractFunction(
    ContractFunction
):
    """ContractFunction for the test_sweep_failure_direct_sweeps method."""

    def __call__(self) -> SweepTestTest_sweep_failure_direct_sweepsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class SweepTestTest_sweep_failure_indirect_sweepsContractFunction(
    ContractFunction
):
    """ContractFunction for the test_sweep_failure_indirect_sweeps method."""

    def __call__(self) -> SweepTestTest_sweep_failure_indirect_sweepsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class SweepTestTest_sweep_failure_invalid_sweeperContractFunction(
    ContractFunction
):
    """ContractFunction for the test_sweep_failure_invalid_sweeper method."""

    def __call__(self) -> SweepTestTest_sweep_failure_invalid_sweeperContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class SweepTestTest_sweep_success_governanceContractFunction(ContractFunction):
    """ContractFunction for the test_sweep_success_governance method."""

    def __call__(self) -> SweepTestTest_sweep_success_governanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class SweepTestTest_sweep_success_pauserContractFunction(ContractFunction):
    """ContractFunction for the test_sweep_success_pauser method."""

    def __call__(self) -> SweepTestTest_sweep_success_pauserContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class SweepTestTest_sweep_success_sweepCollectorContractFunction(
    ContractFunction
):
    """ContractFunction for the test_sweep_success_sweepCollector method."""

    def __call__(self) -> SweepTestTest_sweep_success_sweepCollectorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class SweepTestWhaleTransferContractFunction0(ContractFunction):
    """ContractFunction for the whaleTransfer method."""

    def __call__(self, whale: str, token: str, to: str) -> SweepTestWhaleTransferContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(whale), dataclass_to_tuple(token), dataclass_to_tuple(to))  # type: ignore
        return cast(SweepTestWhaleTransferContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestWhaleTransferContractFunction1(ContractFunction):
    """ContractFunction for the whaleTransfer method."""

    def __call__(self, whale: str, token: str, amount: int, to: str) -> SweepTestWhaleTransferContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(whale), dataclass_to_tuple(token), dataclass_to_tuple(amount), dataclass_to_tuple(to))  # type: ignore
        return cast(SweepTestWhaleTransferContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestWhaleTransferContractFunction(ContractFunction):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, whale: str, token: str, to: str) -> SweepTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> SweepTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> SweepTestWhaleTransferContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class SweepTestContractFunctions(ContractFunctions):
    """ContractFunctions for the SweepTest contract."""

    IS_TEST: SweepTestIS_TESTContractFunction

    createUser: SweepTestCreateUserContractFunction

    excludeArtifacts: SweepTestExcludeArtifactsContractFunction

    excludeContracts: SweepTestExcludeContractsContractFunction

    excludeSenders: SweepTestExcludeSendersContractFunction

    failed: SweepTestFailedContractFunction

    setUp: SweepTestSetUpContractFunction

    targetArtifactSelectors: SweepTestTargetArtifactSelectorsContractFunction

    targetArtifacts: SweepTestTargetArtifactsContractFunction

    targetContracts: SweepTestTargetContractsContractFunction

    targetInterfaces: SweepTestTargetInterfacesContractFunction

    targetSelectors: SweepTestTargetSelectorsContractFunction

    targetSenders: SweepTestTargetSendersContractFunction

    test_sweep_failure_direct_sweeps: (
        SweepTestTest_sweep_failure_direct_sweepsContractFunction
    )

    test_sweep_failure_indirect_sweeps: (
        SweepTestTest_sweep_failure_indirect_sweepsContractFunction
    )

    test_sweep_failure_invalid_sweeper: (
        SweepTestTest_sweep_failure_invalid_sweeperContractFunction
    )

    test_sweep_success_governance: (
        SweepTestTest_sweep_success_governanceContractFunction
    )

    test_sweep_success_pauser: (
        SweepTestTest_sweep_success_pauserContractFunction
    )

    test_sweep_success_sweepCollector: (
        SweepTestTest_sweep_success_sweepCollectorContractFunction
    )

    whaleTransfer: SweepTestWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = SweepTestIS_TESTContractFunction.factory(
            "IS_TEST",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="IS_TEST",
        )
        self.createUser = SweepTestCreateUserContractFunction.factory(
            "createUser",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="createUser",
        )
        self.excludeArtifacts = (
            SweepTestExcludeArtifactsContractFunction.factory(
                "excludeArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="excludeArtifacts",
            )
        )
        self.excludeContracts = (
            SweepTestExcludeContractsContractFunction.factory(
                "excludeContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="excludeContracts",
            )
        )
        self.excludeSenders = SweepTestExcludeSendersContractFunction.factory(
            "excludeSenders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="excludeSenders",
        )
        self.failed = SweepTestFailedContractFunction.factory(
            "failed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="failed",
        )
        self.setUp = SweepTestSetUpContractFunction.factory(
            "setUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setUp",
        )
        self.targetArtifactSelectors = (
            SweepTestTargetArtifactSelectorsContractFunction.factory(
                "targetArtifactSelectors",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="targetArtifactSelectors",
            )
        )
        self.targetArtifacts = SweepTestTargetArtifactsContractFunction.factory(
            "targetArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="targetArtifacts",
        )
        self.targetContracts = SweepTestTargetContractsContractFunction.factory(
            "targetContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="targetContracts",
        )
        self.targetInterfaces = (
            SweepTestTargetInterfacesContractFunction.factory(
                "targetInterfaces",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="targetInterfaces",
            )
        )
        self.targetSelectors = SweepTestTargetSelectorsContractFunction.factory(
            "targetSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="targetSelectors",
        )
        self.targetSenders = SweepTestTargetSendersContractFunction.factory(
            "targetSenders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="targetSenders",
        )
        self.test_sweep_failure_direct_sweeps = (
            SweepTestTest_sweep_failure_direct_sweepsContractFunction.factory(
                "test_sweep_failure_direct_sweeps",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="test_sweep_failure_direct_sweeps",
            )
        )
        self.test_sweep_failure_indirect_sweeps = (
            SweepTestTest_sweep_failure_indirect_sweepsContractFunction.factory(
                "test_sweep_failure_indirect_sweeps",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="test_sweep_failure_indirect_sweeps",
            )
        )
        self.test_sweep_failure_invalid_sweeper = (
            SweepTestTest_sweep_failure_invalid_sweeperContractFunction.factory(
                "test_sweep_failure_invalid_sweeper",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="test_sweep_failure_invalid_sweeper",
            )
        )
        self.test_sweep_success_governance = (
            SweepTestTest_sweep_success_governanceContractFunction.factory(
                "test_sweep_success_governance",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="test_sweep_success_governance",
            )
        )
        self.test_sweep_success_pauser = (
            SweepTestTest_sweep_success_pauserContractFunction.factory(
                "test_sweep_success_pauser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="test_sweep_success_pauser",
            )
        )
        self.test_sweep_success_sweepCollector = (
            SweepTestTest_sweep_success_sweepCollectorContractFunction.factory(
                "test_sweep_success_sweepCollector",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="test_sweep_success_sweepCollector",
            )
        )
        self.whaleTransfer = SweepTestWhaleTransferContractFunction.factory(
            "whaleTransfer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="whaleTransfer",
        )


class SweepTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestAddLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestAddLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestAddLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestAddLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestApprovalContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestApprovalContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestApprovalContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestApprovalContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestApprovalForAllContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestApprovalForAllContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestApprovalForAllContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestApprovalForAllContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestCloseLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestCloseLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestCloseLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestCloseLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestCloseShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestCloseShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestCloseShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestCloseShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestCollectGovernanceFeeContractEvent(ContractEvent):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestCollectGovernanceFeeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestCollectGovernanceFeeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestCollectGovernanceFeeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestCollectGovernanceFeeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestCreateCheckpointContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestCreateCheckpointContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestCreateCheckpointContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestCreateCheckpointContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestInitializeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestInitializeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestInitializeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestInitializeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestOpenLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestOpenLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestOpenLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestOpenLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestOpenShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestOpenShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestOpenShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestOpenShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestPauseStatusUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestPauseStatusUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestPauseStatusUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestPauseStatusUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestPauseStatusUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestRedeemWithdrawalSharesContractEvent(ContractEvent):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestRedeemWithdrawalSharesContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestRedeemWithdrawalSharesContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestRedeemWithdrawalSharesContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestRedeemWithdrawalSharesContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestRemoveLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestRemoveLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestRemoveLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestRemoveLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestSweepContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestSweepContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestSweepContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestSweepContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestTransferSingleContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestTransferSingleContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestTransferSingleContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestTransferSingleContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLogContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLogContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLogContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLogContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_addressContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_addressContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_addressContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_addressContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_arrayContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_arrayContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_arrayContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_arrayContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_bytesContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_bytesContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_bytesContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_bytesContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_bytes32ContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_bytes32ContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_bytes32ContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_bytes32ContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_intContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_intContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_intContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_intContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_addressContractEvent(ContractEvent):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_named_addressContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_named_addressContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_named_addressContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_named_addressContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_arrayContractEvent(ContractEvent):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_named_arrayContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_named_arrayContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_named_arrayContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_named_arrayContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_bytesContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_named_bytesContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_named_bytesContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_named_bytesContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_named_bytesContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_named_bytes32ContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_named_bytes32ContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_named_bytes32ContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_named_bytes32ContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_decimal_intContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_named_decimal_intContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_named_decimal_intContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_named_decimal_intContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_named_decimal_intContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_decimal_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_named_decimal_uintContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_named_decimal_uintContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_named_decimal_uintContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_named_decimal_uintContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_named_intContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_named_intContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_named_intContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_named_intContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_stringContractEvent(ContractEvent):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_named_stringContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_named_stringContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_named_stringContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_named_stringContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_named_uintContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_named_uintContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_named_uintContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_named_uintContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_stringContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_stringContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_stringContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_stringContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLog_uintContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLog_uintContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLog_uintContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLog_uintContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "SweepTestLogsContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["SweepTestLogsContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "SweepTestLogsContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["SweepTestLogsContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class SweepTestContractEvents(ContractEvents):
    """ContractEvents for the SweepTest contract."""

    AddLiquidity: SweepTestAddLiquidityContractEvent

    Approval: SweepTestApprovalContractEvent

    ApprovalForAll: SweepTestApprovalForAllContractEvent

    CloseLong: SweepTestCloseLongContractEvent

    CloseShort: SweepTestCloseShortContractEvent

    CollectGovernanceFee: SweepTestCollectGovernanceFeeContractEvent

    CreateCheckpoint: SweepTestCreateCheckpointContractEvent

    Initialize: SweepTestInitializeContractEvent

    OpenLong: SweepTestOpenLongContractEvent

    OpenShort: SweepTestOpenShortContractEvent

    PauseStatusUpdated: SweepTestPauseStatusUpdatedContractEvent

    RedeemWithdrawalShares: SweepTestRedeemWithdrawalSharesContractEvent

    RemoveLiquidity: SweepTestRemoveLiquidityContractEvent

    Sweep: SweepTestSweepContractEvent

    TransferSingle: SweepTestTransferSingleContractEvent

    log: SweepTestLogContractEvent

    log_address: SweepTestLog_addressContractEvent

    log_array: SweepTestLog_arrayContractEvent

    log_bytes: SweepTestLog_bytesContractEvent

    log_bytes32: SweepTestLog_bytes32ContractEvent

    log_int: SweepTestLog_intContractEvent

    log_named_address: SweepTestLog_named_addressContractEvent

    log_named_array: SweepTestLog_named_arrayContractEvent

    log_named_bytes: SweepTestLog_named_bytesContractEvent

    log_named_bytes32: SweepTestLog_named_bytes32ContractEvent

    log_named_decimal_int: SweepTestLog_named_decimal_intContractEvent

    log_named_decimal_uint: SweepTestLog_named_decimal_uintContractEvent

    log_named_int: SweepTestLog_named_intContractEvent

    log_named_string: SweepTestLog_named_stringContractEvent

    log_named_uint: SweepTestLog_named_uintContractEvent

    log_string: SweepTestLog_stringContractEvent

    log_uint: SweepTestLog_uintContractEvent

    logs: SweepTestLogsContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            SweepTestAddLiquidityContractEvent,
            SweepTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            ),
        )
        self.Approval = cast(
            SweepTestApprovalContractEvent,
            SweepTestApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            ),
        )
        self.ApprovalForAll = cast(
            SweepTestApprovalForAllContractEvent,
            SweepTestApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            ),
        )
        self.CloseLong = cast(
            SweepTestCloseLongContractEvent,
            SweepTestCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            ),
        )
        self.CloseShort = cast(
            SweepTestCloseShortContractEvent,
            SweepTestCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            ),
        )
        self.CollectGovernanceFee = cast(
            SweepTestCollectGovernanceFeeContractEvent,
            SweepTestCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            ),
        )
        self.CreateCheckpoint = cast(
            SweepTestCreateCheckpointContractEvent,
            SweepTestCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            ),
        )
        self.Initialize = cast(
            SweepTestInitializeContractEvent,
            SweepTestInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            ),
        )
        self.OpenLong = cast(
            SweepTestOpenLongContractEvent,
            SweepTestOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            ),
        )
        self.OpenShort = cast(
            SweepTestOpenShortContractEvent,
            SweepTestOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            ),
        )
        self.PauseStatusUpdated = cast(
            SweepTestPauseStatusUpdatedContractEvent,
            SweepTestPauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            ),
        )
        self.RedeemWithdrawalShares = cast(
            SweepTestRedeemWithdrawalSharesContractEvent,
            SweepTestRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            ),
        )
        self.RemoveLiquidity = cast(
            SweepTestRemoveLiquidityContractEvent,
            SweepTestRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            ),
        )
        self.Sweep = cast(
            SweepTestSweepContractEvent,
            SweepTestSweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            ),
        )
        self.TransferSingle = cast(
            SweepTestTransferSingleContractEvent,
            SweepTestTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            ),
        )
        self.log = cast(
            SweepTestLogContractEvent,
            SweepTestLogContractEvent.factory(
                "log",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log",
            ),
        )
        self.log_address = cast(
            SweepTestLog_addressContractEvent,
            SweepTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            ),
        )
        self.log_array = cast(
            SweepTestLog_arrayContractEvent,
            SweepTestLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            ),
        )
        self.log_bytes = cast(
            SweepTestLog_bytesContractEvent,
            SweepTestLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            ),
        )
        self.log_bytes32 = cast(
            SweepTestLog_bytes32ContractEvent,
            SweepTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            ),
        )
        self.log_int = cast(
            SweepTestLog_intContractEvent,
            SweepTestLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            ),
        )
        self.log_named_address = cast(
            SweepTestLog_named_addressContractEvent,
            SweepTestLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            ),
        )
        self.log_named_array = cast(
            SweepTestLog_named_arrayContractEvent,
            SweepTestLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            ),
        )
        self.log_named_bytes = cast(
            SweepTestLog_named_bytesContractEvent,
            SweepTestLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            ),
        )
        self.log_named_bytes32 = cast(
            SweepTestLog_named_bytes32ContractEvent,
            SweepTestLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            ),
        )
        self.log_named_decimal_int = cast(
            SweepTestLog_named_decimal_intContractEvent,
            SweepTestLog_named_decimal_intContractEvent.factory(
                "log_named_decimal_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_int",
            ),
        )
        self.log_named_decimal_uint = cast(
            SweepTestLog_named_decimal_uintContractEvent,
            SweepTestLog_named_decimal_uintContractEvent.factory(
                "log_named_decimal_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_uint",
            ),
        )
        self.log_named_int = cast(
            SweepTestLog_named_intContractEvent,
            SweepTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            ),
        )
        self.log_named_string = cast(
            SweepTestLog_named_stringContractEvent,
            SweepTestLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            ),
        )
        self.log_named_uint = cast(
            SweepTestLog_named_uintContractEvent,
            SweepTestLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            ),
        )
        self.log_string = cast(
            SweepTestLog_stringContractEvent,
            SweepTestLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            ),
        )
        self.log_uint = cast(
            SweepTestLog_uintContractEvent,
            SweepTestLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            ),
        )
        self.logs = cast(
            SweepTestLogsContractEvent,
            SweepTestLogsContractEvent.factory(
                "logs",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="logs",
            ),
        )


class SweepTestLnInvalidInputContractError:
    """ContractError for LnInvalidInput."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "SweepTestLnInvalidInputContractError",
    ) -> None:
        self.selector = "0xe61b4975"
        self.signature = "LnInvalidInput()"

    def decode_error_data(  # type: ignore
        self: "SweepTestLnInvalidInputContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in sweeptest_abi
                if item.get("name") == "LnInvalidInput"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["SweepTestLnInvalidInputContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in sweeptest_abi
                if item.get("name") == "LnInvalidInput"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class SweepTestUnsafeCastToInt256ContractError:
    """ContractError for UnsafeCastToInt256."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "SweepTestUnsafeCastToInt256ContractError",
    ) -> None:
        self.selector = "0x72dd4e02"
        self.signature = "UnsafeCastToInt256()"

    def decode_error_data(  # type: ignore
        self: "SweepTestUnsafeCastToInt256ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in sweeptest_abi
                if item.get("name") == "UnsafeCastToInt256"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["SweepTestUnsafeCastToInt256ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in sweeptest_abi
                if item.get("name") == "UnsafeCastToInt256"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class SweepTestWhaleBalanceExceededContractError:
    """ContractError for WhaleBalanceExceeded."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "SweepTestWhaleBalanceExceededContractError",
    ) -> None:
        self.selector = "0xc4649d28"
        self.signature = "WhaleBalanceExceeded()"

    def decode_error_data(  # type: ignore
        self: "SweepTestWhaleBalanceExceededContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in sweeptest_abi
                if item.get("name") == "WhaleBalanceExceeded"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["SweepTestWhaleBalanceExceededContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in sweeptest_abi
                if item.get("name") == "WhaleBalanceExceeded"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class SweepTestWhaleIsContractContractError:
    """ContractError for WhaleIsContract."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "SweepTestWhaleIsContractContractError",
    ) -> None:
        self.selector = "0x98d85a67"
        self.signature = "WhaleIsContract()"

    def decode_error_data(  # type: ignore
        self: "SweepTestWhaleIsContractContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in sweeptest_abi
                if item.get("name") == "WhaleIsContract"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["SweepTestWhaleIsContractContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in sweeptest_abi
                if item.get("name") == "WhaleIsContract"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class SweepTestContractErrors:
    """ContractErrors for the SweepTest contract."""

    LnInvalidInput: SweepTestLnInvalidInputContractError

    UnsafeCastToInt256: SweepTestUnsafeCastToInt256ContractError

    WhaleBalanceExceeded: SweepTestWhaleBalanceExceededContractError

    WhaleIsContract: SweepTestWhaleIsContractContractError

    def __init__(
        self,
    ) -> None:
        self.LnInvalidInput = SweepTestLnInvalidInputContractError()
        self.UnsafeCastToInt256 = SweepTestUnsafeCastToInt256ContractError()
        self.WhaleBalanceExceeded = SweepTestWhaleBalanceExceededContractError()
        self.WhaleIsContract = SweepTestWhaleIsContractContractError()

        self._all = [
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"SweepTest does not have a selector matching {selector}"
        )


sweeptest_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "_user", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_direct_sweeps",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_indirect_sweeps",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_invalid_sweeper",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success_governance",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success_pauser",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success_sweepCollector",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)
# pylint: disable=line-too-long
sweeptest_bytecode = HexStr(
    "0x60806040819052600c8054600160ff199182168117909255601e8054909116909117905563f877cb1960e01b90526020608452600f60a4526e1350525393915517d49410d7d55493608a1b60c452737109709ecfa91a80626ff3989d68f67f5b1dd12d63f877cb1960e4600060405180830381865afa15801562000087573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000b19190810190620002f5565b602c90620000c090826200045b565b5060405163f877cb1960e01b815260206004820152600f60248201526e14d15413d3125057d49410d7d55493608a1b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb1990606401600060405180830381865afa15801562000131573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200015b9190810190620002f5565b602d906200016a90826200045b565b5060405163f877cb1960e01b815260206004820152601460248201527f474e4f5349535f434841494e5f5250435f55524c0000000000000000000000006044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb1990606401600060405180830381865afa158015620001e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002139190810190620002f5565b602e906200022290826200045b565b5060405163f877cb1960e01b815260206004820152600d60248201526c131253915057d49410d7d55493609a1b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb1990606401600060405180830381865afa15801562000291573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002bb9190810190620002f5565b602f90620002ca90826200045b565b50348015620002d857600080fd5b5062000527565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200030957600080fd5b82516001600160401b03808211156200032157600080fd5b818501915085601f8301126200033657600080fd5b8151818111156200034b576200034b620002df565b604051601f8201601f19908116603f01168101908382118183101715620003765762000376620002df565b8160405282815288868487010111156200038f57600080fd5b600093505b82841015620003b3578484018601518185018701529285019262000394565b600086848301015280965050505050505092915050565b600181811c90821680620003df57607f821691505b6020821081036200040057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000456576000816000526020600020601f850160051c81016020861015620004315750805b601f850160051c820191505b8181101562000452578281556001016200043d565b5050505b505050565b81516001600160401b03811115620004775762000477620002df565b6200048f81620004888454620003ca565b8462000406565b602080601f831160018114620004c75760008415620004ae5750858301515b600019600386901b1c1916600185901b17855562000452565b600085815260208120601f198616915b82811015620004f857888601518255948401946001909101908401620004d7565b5085821015620005175787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b620204fe80620005386000396000f3fe60806040523480156200001157600080fd5b5060043610620001515760003560e01c806366d9a9a011620000c7578063b5508aa91162000086578063b5508aa9146200027d578063b72875e81462000287578063ba414fa61462000291578063db1a76b314620002ac578063e20c9f7114620002b6578063fa7626d414620002c057600080fd5b806366d9a9a0146200022d5780636f829b8c146200024657806385226c811462000250578063916a17c61462000269578063a0e2bb34146200027357600080fd5b80633e5e0d2611620001145780633e5e0d2614620001c85780633e5e3c2314620001df5780633f7286f414620001e95780634f0032c914620001f3578063507ffba514620001fd57600080fd5b80630a9254e414620001565780630da1f58e146200016257806310716760146200016c5780631ed7831c14620001965780632ade388014620001af575b600080fd5b62000160620002ce565b005b6200016062000c27565b620001836200017d36600462002bc0565b620011c2565b6040519081526020015b60405180910390f35b620001a06200124a565b6040516200018d919062002c12565b620001b9620012ae565b6040516200018d919062002ca9565b62000183620001d936600462002d6f565b620013fc565b620001a06200165c565b620001a0620016be565b6200016062001720565b620002146200020e36600462002e0c565b6200176e565b6040516001600160a01b0390911681526020016200018d565b6200023762001884565b6040516200018d919062002ec7565b620001606200196e565b6200025a62001a90565b6040516200018d919062002f80565b6200023762001b6a565b6200016062001c54565b6200025a62001df5565b6200016062001ecf565b6200029b62002045565b60405190151581526020016200018d565b62000160620020e8565b620001a062002307565b601e546200029b9060ff1681565b620002d862002369565b601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062020489833981519152906306447d5690602401600060405180830381600087803b1580156200033157600080fd5b505af115801562000346573d6000803e3d6000fd5b505050506012600080600019604051620003609062002b1e565b60c080825260099082015268537765657061626c6560b81b60e08201526101006020820181905260059082015264053574545560dc1b61012082015260ff90941660408501526001600160a01b0390921660608401521515608083015260a082015261014001604051809103906000f080158015620003e3573d6000803e3d6000fd5b50603180546001600160a01b0319166001600160a01b0392909216919091179055604051600090620004159062002b2c565b604051809103906000f08015801562000432573d6000803e3d6000fd5b50905080604051620004449062002b3a565b6001600160a01b039091168152602001604051809103906000f08015801562000471573d6000803e3d6000fd5b5060308054610100600160a81b0319166101006001600160a01b039384160217905560405163a1903eab60e01b8152600060048201529082169063a1903eab90670de0b6b3a76400009060240160206040518083038185885af1158015620004dd573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062000504919062002fe8565b50600060405180610200016040528073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168152602001836001600160a01b0316815260200160006001600160a01b031681526020016000801b8152602001670de0b6b3a7640000815260200166038d7ea4c68000815260200166038d7ea4c680008152602001670de0b6b3a764000081526020016301e133808152602001620151808152602001620005be662386f26fc100006301e1338062002739565b8152601e546001600160a01b036101009091048116602080840191909152601f5482166040808501919091528154909216606080850191909152600060808086018290528451908101855281815280840182905280850182905291820181905260a090940152815160018082528184019093529394509192918281019080368337505060285482519293506001600160a01b03169183915060009062000668576200066862003002565b60200260200101906001600160a01b031690816001600160a01b031681525050604051806102c001604052808361016001516001600160a01b03168152602001601e60019054906101000a90046001600160a01b03166001600160a01b031681526020018361016001516001600160a01b031681526020018281526020018361018001516001600160a01b03168152602001836101a001516001600160a01b03168152602001836101c001516001600160a01b03168152602001610e10815260200161708081526020016201518081526020016201518081526020016303c267008152602001662386f26fc100008152602001671bc16d674ec800008152602001662386f26fc1000081526020016706f05b59d3b200008152602001662386f26fc1000081526020016706f05b59d3b200008152602001604051806080016040528066038d7ea4c680008152602001655af3107a40008152602001670214e8348c4f00008152602001666a94d74f43000081525081526020016040518060800160405280662386f26fc10000815260200166038d7ea4c680008152602001670214e8348c4f00008152602001666a94d74f430000815250815260200183604001516001600160a01b0316815260200183606001518152506040516200084d9062002b48565b6200085991906200305f565b604051809103906000f08015801562000876573d6000803e3d6000fd5b50603380546001600160a01b0319166001600160a01b0392909216919091179055610100820151600080516020620204898339815191529063e5d6bf0290620008c19060036200327f565b6040518263ffffffff1660e01b8152600401620008e091815260200190565b600060405180830381600087803b158015620008fb57600080fd5b505af115801562000910573d6000803e3d6000fd5b5050604080518082018252600a8152694879706572647269766560b01b602082015260335491519093508592506001600160a01b039091169082908290620009589062002b56565b62000965929190620033ba565b604051809103906000f08015801562000982573d6000803e3d6000fd5b5060335460405187916001600160a01b031690620009a09062002b64565b620009ad929190620033ba565b604051809103906000f080158015620009ca573d6000803e3d6000fd5b5060335460405188916001600160a01b031690620009e89062002b72565b620009f5929190620033ba565b604051809103906000f08015801562000a12573d6000803e3d6000fd5b5060335460405189916001600160a01b03169062000a309062002b80565b62000a3d929190620033ba565b604051809103906000f08015801562000a5a573d6000803e3d6000fd5b506033546040518a916001600160a01b03169062000a789062002b8e565b62000a85929190620033ba565b604051809103906000f08015801562000aa2573d6000803e3d6000fd5b5060405162000ab19062002b9c565b62000ac4989796959493929190620033e4565b604051809103906000f08015801562000ae1573d6000803e3d6000fd5b50603280546001600160a01b0319166001600160a01b0392831690811790915560408051606081018252601e5461010090049093168352600160208085019190915281516000815290810182528382015251631df417fd60e21b815290916377d05ff49168056bc75e2d631000009162000b6991839166b1a2bc2ec500009160040162003453565b60206040518083038185885af115801562000b88573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062000baf919062002fe8565b506031546032546040516340c10f1960e01b81526001600160a01b03918216600482015268056bc75e2d6310000060248201529116906340c10f1990604401600060405180830381600087803b15801562000c0957600080fd5b505af115801562000c1e573d6000803e3d6000fd5b50505050505050565b600080516020620204a983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000c7557600080fd5b505af115801562000c8a573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206202048983398151915292506306447d569150602401600060405180830381600087803b15801562000ce757600080fd5b505af115801562000cfc573d6000803e3d6000fd5b50506032546020546040516338c0646560e11b81526001600160a01b0391821660048201526001602482015291169250637180c8ca9150604401600060405180830381600087803b15801562000d5157600080fd5b505af115801562000d66573d6000803e3d6000fd5b50505050600080516020620204a983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000db857600080fd5b505af115801562000dcd573d6000803e3d6000fd5b50506020546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202048983398151915292506306447d5691506024015b600060405180830381600087803b15801562000e2757600080fd5b505af115801562000e3c573d6000803e3d6000fd5b50506031546032546040516370a0823160e01b81526001600160a01b03918216600482015260009450911691506370a0823190602401602060405180830381865afa15801562000e90573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eb6919062002fe8565b60405163248e63e160e11b815260016004820181905260248201819052604482018190526064820152909150600080516020620204898339815191529063491cc7c290608401600060405180830381600087803b15801562000f1757600080fd5b505af115801562000f2c573d6000803e3d6000fd5b505060315460325460408051630161b2cb60e71b815290516001600160a01b03938416955092909116925063b0d96580916004808301926102609291908290030181865afa15801562000f83573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fa9919062003521565b6101a001516001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a360325460315460405162b40d3160e11b81526001600160a01b0391821660048201529116906301681a6290602401600060405180830381600087803b1580156200102c57600080fd5b505af115801562001041573d6000803e3d6000fd5b50506031546032546040516370a0823160e01b81526001600160a01b039182166004820152620010c59450911691506370a0823190602401602060405180830381865afa15801562001097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010bd919062002fe8565b6000620027fe565b60315460325460408051630161b2cb60e71b81529051620011bf936001600160a01b03908116936370a082319391169163b0d9658091600480820192610260929091908290030181865afa15801562001122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001148919062003521565b6101a001516040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801562001192573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011b8919062002fe8565b82620027fe565b50565b6040516370a0823160e01b81526001600160a01b0380851660048301526000916200124291869186918216906370a0823190602401602060405180830381865afa15801562001215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200123b919062002fe8565b85620013fc565b949350505050565b60606016805480602002602001604051908101604052809291908181526020018280548015620012a457602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001285575b5050505050905090565b6060601d805480602002602001604051908101604052809291908181526020016000905b82821015620013f357600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b82821015620013db578382906000526020600020018054620013479062003634565b80601f0160208091040260200160405190810160405280929190818152602001828054620013759062003634565b8015620013c65780601f106200139a57610100808354040283529160200191620013c6565b820191906000526020600020905b815481529060010190602001808311620013a857829003601f168201915b50505050508152602001906001019062001325565b505050508152505081526020019060010190620012d2565b50505050905090565b6040516370a0823160e01b81526001600160a01b03858116600483015260009182918616906370a0823190602401602060405180830381865afa15801562001448573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200146e919062002fe8565b905080841115620014925760405163188c93a560e31b815260040160405180910390fd5b600080516020620204a983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620014e057600080fd5b505af1158015620014f5573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03891660048201526000805160206202048983398151915292506306447d569150602401600060405180830381600087803b1580156200154a57600080fd5b505af11580156200155f573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526001600160a01b0389166004820152670de0b6b3a7640000602482015260008051602062020489833981519152925063c88a5e6d9150604401600060405180830381600087803b158015620015c257600080fd5b505af1158015620015d7573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890528816925063a9059cbb91506044016020604051808303816000875af11580156200162b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001651919062003670565b509295945050505050565b60606018805480602002602001604051908101604052809291908181526020018280548015620012a4576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001285575050505050905090565b60606017805480602002602001604051908101604052809291908181526020018280548015620012a4576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001285575050505050905090565b600080516020620204a983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000db857600080fd5b60008160405160200162001783919062003694565b60408051601f198184030181529082905280516020909101206318caf8e360e31b82529150600080516020620204898339815191529063c657c71890620017d19084908690600401620036a9565b600060405180830381600087803b158015620017ec57600080fd5b505af115801562001801573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526001600160a01b038416600482015269021e19e0c9bab2400000602482015260008051602062020489833981519152925063c88a5e6d9150604401600060405180830381600087803b1580156200186657600080fd5b505af11580156200187b573d6000803e3d6000fd5b50505050919050565b6060601b805480602002602001604051908101604052809291908181526020016000905b82821015620013f35760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200195557602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620019165790505b50505050508152505081526020019060010190620018a8565b600080516020620204a983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620019bc57600080fd5b505af1158015620019d1573d6000803e3d6000fd5b505060325460408051630161b2cb60e71b815290516000805160206202048983398151915294506306447d5693506001600160a01b039092169163b0d9658091600480820192610260929091908290030181865afa15801562001a38573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a5e919062003521565b61016001516040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240162000e0c565b6060601a805480602002602001604051908101604052809291908181526020016000905b82821015620013f357838290600052602060002001805462001ad69062003634565b80601f016020809104026020016040519081016040528092919081815260200182805462001b049062003634565b801562001b555780601f1062001b295761010080835404028352916020019162001b55565b820191906000526020600020905b81548152906001019060200180831162001b3757829003601f168201915b50505050508152602001906001019062001ab4565b6060601c805480602002602001604051908101604052809291908181526020016000905b82821015620013f35760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562001c3b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162001bfc5790505b5050505050815250508152602001906001019062001b8e565b600080516020620204a983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001ca257600080fd5b505af115801562001cb7573d6000803e3d6000fd5b5050601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202048983398151915292506306447d569150602401600060405180830381600087803b15801562001d1057600080fd5b505af115801562001d25573d6000803e3d6000fd5b5050604051630618f58760e51b81526282b42960e81b600482015260008051602062020489833981519152925063c31eb0e09150602401600060405180830381600087803b15801562001d7757600080fd5b505af115801562001d8c573d6000803e3d6000fd5b505060325460315460405162b40d3160e11b81526001600160a01b039182166004820152911692506301681a6291506024015b600060405180830381600087803b15801562001dda57600080fd5b505af115801562001def573d6000803e3d6000fd5b50505050565b60606019805480602002602001604051908101604052809291908181526020016000905b82821015620013f357838290600052602060002001805462001e3b9062003634565b80601f016020809104026020016040519081016040528092919081815260200182805462001e699062003634565b801562001eba5780601f1062001e8e5761010080835404028352916020019162001eba565b820191906000526020600020905b81548152906001019060200180831162001e9c57829003601f168201915b50505050508152602001906001019062001e19565b600080516020620204a983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001f1d57600080fd5b505af115801562001f32573d6000803e3d6000fd5b50506020546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202048983398151915292506306447d569150602401600060405180830381600087803b15801562001f8b57600080fd5b505af115801562001fa0573d6000803e3d6000fd5b5050604051630618f58760e51b81526313dd85ff60e31b600482015260008051602062020489833981519152925063c31eb0e09150602401600060405180830381600087803b15801562001ff357600080fd5b505af115801562002008573d6000803e3d6000fd5b505060325460305460405162b40d3160e11b81526001600160a01b0361010090920482166004820152911692506301681a62915060240162001dbf565b60085460009060ff16156200205e575060085460ff1690565b604051630667f9d760e41b815260008051602062020489833981519152600482018190526519985a5b195960d21b602483015260009163667f9d7090604401602060405180830381865afa158015620020bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020e1919062002fe8565b1415905090565b600080516020620204a983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200213657600080fd5b505af11580156200214b573d6000803e3d6000fd5b50506020546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202048983398151915292506306447d569150602401600060405180830381600087803b158015620021a457600080fd5b505af1158015620021b9573d6000803e3d6000fd5b505050506000603260009054906101000a90046001600160a01b03166001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002213573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022399190620036cf565b604051630618f58760e51b81526313dd85ff60e31b6004820152909150600080516020620204898339815191529063c31eb0e090602401600060405180830381600087803b1580156200228b57600080fd5b505af1158015620022a0573d6000803e3d6000fd5b505060325460405162b40d3160e11b81526001600160a01b03858116600483015290911692506301681a629150602401600060405180830381600087803b158015620022eb57600080fd5b505af115801562002300573d6000803e3d6000fd5b5050505050565b60606015805480602002602001604051908101604052809291908181526020018280548015620012a4576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001285575050505050905090565b6200239160405180604001604052806005815260200164616c69636560d81b8152506200176e565b601e60016101000a8154816001600160a01b0302191690836001600160a01b03160217905550620023dd604051806040016040528060038152602001623137b160e91b8152506200176e565b601f80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526563656c696e6560d01b602082015262002425906200176e565b602060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555062002471604051806040016040528060038152602001623230b760e91b8152506200176e565b602180546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600381526265766560e81b6020820152620024b6906200176e565b602280546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260088152673232b83637bcb2b960c11b602082015262002500906200176e565b602480546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526536b4b73a32b960d11b602082015262002548906200176e565b602380546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b3332b2a1b7b63632b1ba37b960a11b602082015262002596906200176e565b602580546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600e81526d39bbb2b2b821b7b63632b1ba37b960911b6020820152620025e6906200176e565b602680546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600a815269676f7665726e616e636560b01b602082015262002632906200176e565b602780546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260068152653830bab9b2b960d11b60208201526200267a906200176e565b602880546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260098152683932b3b4b9ba3930b960b91b6020820152620026c5906200176e565b602980546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b726577617264536f7572636560a01b602082015262002713906200176e565b602a80546001600160a01b0319166001600160a01b039290921691909117905542602b55565b6000806200277062002760620027518660646200327f565b66a5bbed86c5a0009062002869565b6748cd4072281e00009062002887565b905062002786670de0b6b3a76400008262002887565b9050620027f481620027ed620027b9620027b3620027ad89670de0b6b3a7640000620036ef565b6200289e565b620028cd565b620027e6620027b3620027d28a8a6301e1338062002aff565b620027ad90670de0b6b3a7640000620036ef565b9062002887565b9062002869565b9150505b92915050565b60405163260a5b1560e21b8152600481018390526024810182905260008051602062020489833981519152906398296c549060440160006040518083038186803b1580156200284c57600080fd5b505afa15801562002861573d6000803e3d6000fd5b505050505050565b6000620028808383670de0b6b3a764000062002aff565b9392505050565b60006200288083670de0b6b3a76400008462002aff565b60006001600160ff1b03821115620028c95760405163396ea70160e11b815260040160405180910390fd5b5090565b6000808213620028f05760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906200297e9084901c6200289e565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b600082600019048411830215820262002b1757600080fd5b5091020490565b612035806200370683390190565b612245806200573b83390190565b6102e3806200798083390190565b61412c8062007c6383390190565b613dc1806200bd8f83390190565b613e9a806200fb5083390190565b61404080620139ea83390190565b6140028062017a2a83390190565b61329f806201ba2c83390190565b6117be806201eccb83390190565b6001600160a01b0381168114620011bf57600080fd5b60008060006060848603121562002bd657600080fd5b833562002be38162002baa565b9250602084013562002bf58162002baa565b9150604084013562002c078162002baa565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b8181101562002c555783516001600160a01b03168352928401929184019160010162002c2e565b50909695505050505050565b6000815180845260005b8181101562002c895760208185018101518683018201520162002c6b565b506000602082860101526020601f19601f83011685010191505092915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101562002d5f57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101562002d4857605f1989850301835262002d3584865162002c61565b948e01949350918d019160010162002d16565b505050978a01979450509188019160010162002cd0565b50919a9950505050505050505050565b6000806000806080858703121562002d8657600080fd5b843562002d938162002baa565b9350602085013562002da58162002baa565b925060408501359150606085013562002dbe8162002baa565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff8111828210171562002e065762002e0662002dc9565b60405290565b60006020828403121562002e1f57600080fd5b813567ffffffffffffffff8082111562002e3857600080fd5b818401915084601f83011262002e4d57600080fd5b81358181111562002e625762002e6262002dc9565b604051601f8201601f19908116603f0116810190838211818310171562002e8d5762002e8d62002dc9565b8160405282815287602084870101111562002ea757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b8481101562002f7157898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101562002f5b5783516001600160e01b0319168252928b019260019290920191908b019062002f2f565b50978a0197955050509187019160010162002ef1565b50919998505050505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101562002fdb57603f1988860301845262002fc885835162002c61565b9450928501929085019060010162002fa9565b5092979650505050505050565b60006020828403121562002ffb57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b83811015620030545781516001600160a01b0316875295820195908201906001016200302d565b509495945050505050565b604081526200307a6040820183516001600160a01b03169052565b600060208301516200309760608401826001600160a01b03169052565b5060408301516001600160a01b03166080830152606083015161038060a08401819052620030ca6103c085018362003018565b91506080850151620030e760c08601826001600160a01b03169052565b5060a08501516001600160a01b03811660e08601525060c08501516101006200311a818701836001600160a01b03169052565b60e087015161012087810191909152908701516101408088019190915290870151610160808801919091529087015161018080880191909152908701516101a080880191909152908701516101c080880191909152908701516101e080880191909152908701516102008088019190915290870151610220808801919091529087015161024080880191909152908701516102608088019190915290870151915061028090620031ed82880184805182526020810151602083015260408101516040830152606081015160608301525050565b87015180516103008801526020808201516103208901526040808301516103408a0152606090920151610360890152918801516001600160a01b0316938701939093526102a08701516103a087015285840381870152601184527048797065726472697665466163746f727960781b90840152508101620027f4565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620027f857620027f862003269565b80516001600160a01b031682526020810151620032c160208401826001600160a01b03169052565b506040810151620032dd60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015162003350828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e08082015180518285015260208101516102008501526040810151610220850152606081015161024085015262001def565b6102808101620033cb828562003299565b6001600160a01b03929092166102609190910152919050565b6000610340808352620033fa8184018c62002c61565b9150506200340c602083018a62003299565b6001600160a01b039788166102808301529587166102a08201529386166102c08501529185166102e084015284166103008301529092166103209092019190915292915050565b8381528260208201526060604082015260018060a01b03825116606082015260208201511515608082015260006040830151606060a08401526200349b60c084018262002c61565b9695505050505050565b8051620034b28162002baa565b919050565b600060808284031215620034ca57600080fd5b6040516080810181811067ffffffffffffffff82111715620034f057620034f062002dc9565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600061026082840312156200353557600080fd5b6200353f62002ddf565b6200354a83620034a5565b81526200355a60208401620034a5565b60208201526200356d60408401620034a5565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518183015250610140808401518183015250610160620035d8818501620034a5565b90820152610180620035ec848201620034a5565b908201526101a062003600848201620034a5565b908201526101c062003614848201620034a5565b908201526101e06200362985858301620034b7565b908201529392505050565b600181811c908216806200364957607f821691505b6020821081036200366a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156200368357600080fd5b815180151581146200288057600080fd5b60208152600062002880602083018462002c61565b6001600160a01b0383168152604060208201819052600090620012429083018462002c61565b600060208284031215620036e257600080fd5b8151620028808162002baa565b80820180821115620027f857620027f86200326956fe6101006040523480156200001257600080fd5b506040516200203538038062002035833981016040819052620000359162000298565b8230818189898960006200004a8482620003e8565b506001620000598382620003e8565b5060ff81166080524660a0526200006f6200011e565b60c0525050600680546001600160a01b038086166001600160a01b03199283168117909355600780549186169190921617905560405190915033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505090151560e052600c55506200053292505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001529190620004b4565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001e257600080fd5b81516001600160401b0380821115620001ff57620001ff620001ba565b604051601f8301601f19908116603f011681019082821181831017156200022a576200022a620001ba565b81604052838152602092508660208588010111156200024857600080fd5b600091505b838210156200026c57858201830151818301840152908201906200024d565b6000602085830101528094505050505092915050565b805180151581146200029357600080fd5b919050565b60008060008060008060c08789031215620002b257600080fd5b86516001600160401b0380821115620002ca57600080fd5b620002d88a838b01620001d0565b97506020890151915080821115620002ef57600080fd5b50620002fe89828a01620001d0565b955050604087015160ff811681146200031657600080fd5b60608801519094506001600160a01b03811681146200033457600080fd5b9250620003446080880162000282565b915060a087015190509295509295509295565b600181811c908216806200036c57607f821691505b6020821081036200038d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e3576000816000526020600020601f850160051c81016020861015620003be5750805b601f850160051c820191505b81811015620003df57828155600101620003ca565b5050505b505050565b81516001600160401b03811115620004045762000404620001ba565b6200041c8162000415845462000357565b8462000393565b602080601f8311600181146200045457600084156200043b5750858301515b600019600386901b1c1916600185901b178555620003df565b600085815260208120601f198616915b82811015620004855788860151825594840194600190910190840162000464565b5085821015620004a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620004c48162000357565b60018281168015620004df5760018114620004f55762000526565b60ff198416875282151583028701945062000526565b8760005260208060002060005b858110156200051d5781548a82015290840190820162000502565b50505082870194505b50929695505050505050565b60805160a05160c05160e051611a9f62000596600039600081816103d4015281816105e701528181610701015281816109e001528181610a7f01528181610dbe0152610e20015260006109bc01526000610987015260006103140152611a9f6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80637a8c63b511610125578063b7009613116100ad578063dd62ed3e1161007c578063dd62ed3e1461051a578063e688747b14610545578063ea7ca2761461057b578063ed0d0efb146105b2578063f2fde38b146105d257600080fd5b8063b7009613146104b8578063bf7e214f146104cb578063c53a3985146104de578063d505accf1461050757600080fd5b806395d89b41116100f457806395d89b41146104545780639dc29fac1461045c578063a0712d681461046f578063a9059cbb14610482578063aed307771461049557600080fd5b80637a8c63b5146103cf5780637a9e5e4b146103f65780637ecebe00146104095780638da5cb5b1461042957600080fd5b806323b872dd116101a857806342966c681161017757806342966c68146103635780634b5159da1461037657806367aff4841461038957806370a082311461039c578063728b952b146103bc57600080fd5b806323b872dd146102fc578063313ce5671461030f5780633644e5151461034857806340c10f191461035057600080fd5b8063095ea7b3116101ef578063095ea7b3146102915780630bade8a4146102b45780630ea9b75b146102d757806318160ddd146102ea578063239c70ae146102f357600080fd5b806305f05a941461022157806306a36aee1461023657806306fdde0314610269578063088a4ed01461027e575b600080fd5b61023461022f366004611502565b6105e5565b005b61025661024436600461153b565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b610271610671565b6040516102609190611558565b61023461028c3660046115a7565b6106ff565b6102a461029f3660046115c0565b61075c565b6040519015158152602001610260565b6102a46102c2366004611609565b600a6020526000908152604090205460ff1681565b6102346102e5366004611635565b6107c9565b61025660025481565b610256600c5481565b6102a461030a36600461167c565b6108a1565b6103367f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610260565b610256610983565b61023461035e3660046115c0565b6109de565b6102346103713660046115a7565b610a7d565b6102346103843660046116bd565b610ae2565b6102346103973660046116d9565b610b74565b6102566103aa36600461153b565b60036020526000908152604090205481565b6102346103ca366004611707565b610c3c565b6102a47f000000000000000000000000000000000000000000000000000000000000000081565b61023461040436600461153b565b610cc5565b61025661041736600461153b565b60056020526000908152604090205481565b60065461043c906001600160a01b031681565b6040516001600160a01b039091168152602001610260565b610271610daf565b61023461046a3660046115c0565b610dbc565b61023461047d3660046115a7565b610e1e565b6102a46104903660046115c0565b610eb9565b6102a46104a336600461153b565b600d6020526000908152604090205460ff1681565b6102a46104c6366004611735565b610f1f565b60075461043c906001600160a01b031681565b61043c6104ec36600461153b565b6008602052600090815260409020546001600160a01b031681565b61023461051536600461177c565b61101d565b610256610528366004611707565b600460209081526000928352604080842090915290825290205481565b6102a46105533660046117ea565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b6102a461058936600461181d565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b6102566105c0366004611609565b600b6020526000908152604090205481565b6102346105e036600461153b565b611261565b7f00000000000000000000000000000000000000000000000000000000000000001561064657610621336000356001600160e01b0319166112df565b6106465760405162461bcd60e51b815260040161063d90611849565b60405180910390fd5b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b6000805461067e90611880565b80601f01602080910402602001604051908101604052809291908181526020018280546106aa90611880565b80156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b505050505081565b7f0000000000000000000000000000000000000000000000000000000000000000156107575761073b336000356001600160e01b0319166112df565b6107575760405162461bcd60e51b815260040161063d90611849565b600c55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107b79086815260200190565b60405180910390a35060015b92915050565b6107df336000356001600160e01b0319166112df565b6107fb5760405162461bcd60e51b815260040161063d906118ba565b801561082b576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610852565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610894911515815260200190565b60405180910390a3505050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146108fd576108d883826118f6565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b038516600090815260036020526040812080548592906109259084906118f6565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020611a4a8339815191529061096e9087815260200190565b60405180910390a360019150505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146109b9576109b4611389565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610a3657610a1a336000356001600160e01b0319166112df565b610a365760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610a6f57600c54811115610a6f5760405162461bcd60e51b815260040161063d90611909565b610a798282611423565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610ad557610ab9336000356001600160e01b0319166112df565b610ad55760405162461bcd60e51b815260040161063d90611849565b610adf338261147d565b50565b610af8336000356001600160e01b0319166112df565b610b145760405162461bcd60e51b815260040161063d906118ba565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610b8a336000356001600160e01b0319166112df565b610ba65760405162461bcd60e51b815260040161063d906118ba565b8015610bd5576001600160a01b03831660009081526009602052604090208054600160ff85161b179055610bfb565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610894911515815260200190565b610c52336000356001600160e01b0319166112df565b610c6e5760405162461bcd60e51b815260040161063d906118ba565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b0316331480610d5a575060075460405163b700961360e01b81526001600160a01b039091169063b700961390610d1990339030906001600160e01b0319600035169060040161194b565b602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190611978565b610d6357600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b6001805461067e90611880565b7f000000000000000000000000000000000000000000000000000000000000000015610e1457610df8336000356001600160e01b0319166112df565b610e145760405162461bcd60e51b815260040161063d90611849565b610a79828261147d565b7f000000000000000000000000000000000000000000000000000000000000000015610e7657610e5a336000356001600160e01b0319166112df565b610e765760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610eaf57600c54811115610eaf5760405162461bcd60e51b815260040161063d90611909565b610adf3382611423565b33600090815260036020526040812080548391908390610eda9084906118f6565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020611a4a833981519152906107b79086815260200190565b6001600160a01b038083166000908152600860205260408120549091168015610fbb5760405163b700961360e01b81526001600160a01b0382169063b700961390610f729088908890889060040161194b565b602060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190611978565b91505061097c565b6001600160e01b031983166000908152600a602052604090205460ff168061101457506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b4284101561106d5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161063d565b60006001611079610983565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611185573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111bb5750876001600160a01b0316816001600160a01b0316145b6111f85760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161063d565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b611277336000356001600160e01b0319166112df565b6112935760405162461bcd60e51b815260040161063d906118ba565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6007546000906001600160a01b03168015801590611369575060405163b700961360e01b81526001600160a01b0382169063b7009613906113289087903090889060040161194b565b602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190611978565b8061138157506006546001600160a01b038581169116145b949350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516113bb9190611995565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b80600260008282546114359190611a36565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020611a4a83398151915291015b60405180910390a35050565b6001600160a01b038216600090815260036020526040812080548392906114a59084906118f6565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020611a4a83398151915290602001611471565b6001600160a01b0381168114610adf57600080fd5b8015158114610adf57600080fd5b6000806040838503121561151557600080fd5b8235611520816114df565b91506020830135611530816114f4565b809150509250929050565b60006020828403121561154d57600080fd5b813561097c816114df565b60006020808352835180602085015260005b818110156115865785810183015185820160400152820161156a565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156115b957600080fd5b5035919050565b600080604083850312156115d357600080fd5b82356115de816114df565b946020939093013593505050565b80356001600160e01b03198116811461160457600080fd5b919050565b60006020828403121561161b57600080fd5b61097c826115ec565b803560ff8116811461160457600080fd5b60008060006060848603121561164a57600080fd5b61165384611624565b9250611661602085016115ec565b91506040840135611671816114f4565b809150509250925092565b60008060006060848603121561169157600080fd5b833561169c816114df565b925060208401356116ac816114df565b929592945050506040919091013590565b600080604083850312156116d057600080fd5b611520836115ec565b6000806000606084860312156116ee57600080fd5b83356116f9816114df565b925061166160208501611624565b6000806040838503121561171a57600080fd5b8235611725816114df565b91506020830135611530816114df565b60008060006060848603121561174a57600080fd5b8335611755816114df565b92506020840135611765816114df565b9150611773604085016115ec565b90509250925092565b600080600080600080600060e0888a03121561179757600080fd5b87356117a2816114df565b965060208801356117b2816114df565b955060408801359450606088013593506117ce60808901611624565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156117fd57600080fd5b61180683611624565b9150611814602084016115ec565b90509250929050565b6000806040838503121561183057600080fd5b823561183b816114df565b915061181460208401611624565b6020808252601d908201527f45524332304d696e7461626c653a206e6f7420617574686f72697a6564000000604082015260600190565b600181811c9082168061189457607f821691505b6020821081036118b457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107c3576107c36118e0565b60208082526022908201527f45524332304d696e7461626c653a20496e76616c6964206d696e7420616d6f756040820152611b9d60f21b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561198a57600080fd5b815161097c816114f4565b60008083548160018260011c915060018316806119b357607f831692505b602080841082036119d257634e487b7160e01b86526022600452602486fd5b8180156119e657600181146119fb57611a28565b60ff1986168952841515850289019650611a28565b60008a81526020902060005b86811015611a205781548b820152908501908301611a07565b505084890196505b509498975050505050505050565b808201808211156107c3576107c36118e056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b72d33adf7638e25dc85331d084651ca91bd5a446d8c74aebde43f55010ef92464736f6c6343000816003360a06040523480156200001157600080fd5b50604080518082018252601781527f4c6971756964207374616b656420457468657220322e300000000000000000006020808301919091528251808401845260058152640e6e88aa8960db1b91810191909152600080546001600160a01b0319908116825560018054309216821790559351909384938493600019939192909185919082908290829033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505081600990816200010c9190620001de565b50600a6200011b8282620001de565b505050600d9390935542600e55151560805250600b55620002aa565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016257607f821691505b6020821081036200018357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001d9576000816000526020600020601f850160051c81016020861015620001b45750805b601f850160051c820191505b81811015620001d557828155600101620001c0565b5050505b505050565b81516001600160401b03811115620001fa57620001fa62000137565b62000212816200020b84546200014d565b8462000189565b602080601f8311600181146200024a5760008415620002315750858301515b600019600386901b1c1916600185901b178555620001d5565b600085815260208120601f198616915b828110156200027b578886015182559484019460019091019084016200025a565b50858210156200029a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051611f4e620002f760003960008181610592015281816108d8015281816109f601528181610bf001528181610c7101528181610cd70152818161117801526111da0152611f4e6000f3fe6080604052600436106102725760003560e01c8063728b952b1161014f578063aed30777116100c1578063dd62ed3e1161007a578063dd62ed3e1461078f578063e688747b146107d5578063ea7ca27614610818578063ed0d0efb1461085c578063f2fde38b14610889578063f5eb42dc146108a957600080fd5b8063aed30777146106b4578063b7009613146106e4578063bf7e214f14610704578063c51ea9cc14610724578063c53a398514610744578063d5002f2e1461077a57600080fd5b80638fcb4e5b116101135780638fcb4e5b1461060c57806395d89b411461062c5780639dc29fac14610641578063a0712d6814610661578063a1903eab14610681578063a9059cbb1461069457600080fd5b8063728b952b146105405780637a28fb88146105605780637a8c63b5146105805780637a9e5e4b146105b45780638da5cb5b146105d457600080fd5b8063313ce567116101e857806347b714e0116101ac57806347b714e0146104975780634b5159da146104ab578063679aefce146104cb57806367aff484146104e05780636d7804591461050057806370a082311461052057600080fd5b8063313ce5671461040657806334fcf4371461042257806337cfdaca1461044257806340c10f191461045757806342966c681461047757600080fd5b80630bade8a41161023a5780630bade8a41461034b5780630ea9b75b1461037b57806318160ddd1461039b57806319208451146103b0578063239c70ae146103d057806323b872dd146103e657600080fd5b806305f05a941461027757806306a36aee1461029957806306fdde03146102d9578063088a4ed0146102fb578063095ea7b31461031b575b600080fd5b34801561028357600080fd5b50610297610292366004611ae2565b6108d6565b005b3480156102a557600080fd5b506102c66102b4366004611b1b565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156102e557600080fd5b506102ee610962565b6040516102d09190611b38565b34801561030757600080fd5b50610297610316366004611b87565b6109f4565b34801561032757600080fd5b5061033b610336366004611ba0565b610a51565b60405190151581526020016102d0565b34801561035757600080fd5b5061033b610366366004611be9565b60046020526000908152604090205460ff1681565b34801561038757600080fd5b50610297610396366004611c15565b610a6b565b3480156103a757600080fd5b506008546102c6565b3480156103bc57600080fd5b506102c66103cb366004611b87565b610b43565b3480156103dc57600080fd5b506102c6600b5481565b3480156103f257600080fd5b5061033b610401366004611c5c565b610b61565b34801561041257600080fd5b50604051601281526020016102d0565b34801561042e57600080fd5b5061029761043d366004611b87565b610bee565b34801561044e57600080fd5b506102c6610c53565b34801561046357600080fd5b50610297610472366004611ba0565b610c6f565b34801561048357600080fd5b50610297610492366004611b87565b610cd5565b3480156104a357600080fd5b5060006102c6565b3480156104b757600080fd5b506102976104c6366004611c9d565b610d3a565b3480156104d757600080fd5b50600d546102c6565b3480156104ec57600080fd5b506102976104fb366004611cb9565b610dcc565b34801561050c57600080fd5b506102c661051b366004611c5c565b610e94565b34801561052c57600080fd5b506102c661053b366004611b1b565b610f2b565b34801561054c57600080fd5b5061029761055b366004611ce7565b610f4d565b34801561056c57600080fd5b506102c661057b366004611b87565b610fd6565b34801561058c57600080fd5b5061033b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c057600080fd5b506102976105cf366004611b1b565b610feb565b3480156105e057600080fd5b506000546105f4906001600160a01b031681565b6040516001600160a01b0390911681526020016102d0565b34801561061857600080fd5b506102c6610627366004611ba0565b6110d5565b34801561063857600080fd5b506102ee611167565b34801561064d57600080fd5b5061029761065c366004611ba0565b611176565b34801561066d57600080fd5b5061029761067c366004611b87565b6111d8565b6102c661068f366004611b1b565b61123a565b3480156106a057600080fd5b5061033b6106af366004611ba0565b6112ff565b3480156106c057600080fd5b5061033b6106cf366004611b1b565b600c6020526000908152604090205460ff1681565b3480156106f057600080fd5b5061033b6106ff366004611d15565b611387565b34801561071057600080fd5b506001546105f4906001600160a01b031681565b34801561073057600080fd5b5061033b61073f366004611c5c565b611485565b34801561075057600080fd5b506105f461075f366004611b1b565b6002602052600090815260409020546001600160a01b031681565b34801561078657600080fd5b506010546102c6565b34801561079b57600080fd5b506102c66107aa366004611ce7565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b3480156107e157600080fd5b5061033b6107f0366004611d5c565b6001600160e01b03191660009081526005602052604090205460ff919091161c600116151590565b34801561082457600080fd5b5061033b610833366004611d8f565b6001600160a01b0391909116600090815260036020526040902054600160ff9092161c16151590565b34801561086857600080fd5b506102c6610877366004611be9565b60056020526000908152604090205481565b34801561089557600080fd5b506102976108a4366004611b1b565b611525565b3480156108b557600080fd5b506102c66108c4366004611b1b565b60116020526000908152604090205481565b7f00000000000000000000000000000000000000000000000000000000000000001561093757610912336000356001600160e01b0319166115a2565b6109375760405162461bcd60e51b815260040161092e90611dbb565b60405180910390fd5b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b60606009805461097190611df2565b80601f016020809104026020016040519081016040528092919081815260200182805461099d90611df2565b80156109ea5780601f106109bf576101008083540402835291602001916109ea565b820191906000526020600020905b8154815290600101906020018083116109cd57829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000015610a4c57610a30336000356001600160e01b0319166115a2565b610a4c5760405162461bcd60e51b815260040161092e90611dbb565b600b55565b600033610a5f81858561164c565b60019150505b92915050565b610a81336000356001600160e01b0319166115a2565b610a9d5760405162461bcd60e51b815260040161092e90611e2c565b8015610acd576001600160e01b0319821660009081526005602052604090208054600160ff86161b179055610af4565b6001600160e01b0319821660009081526005602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610b36911515815260200190565b60405180910390a3505050565b6000610a65610b5160105490565b610b59610c53565b84919061165e565b6000610b6b61167c565b6000610b7683610b43565b9050610b838585836116ad565b506040518381526001600160a01b038516903390600080516020611ef98339815191529060200160405180910390a36040518181526001600160a01b038516903390600080516020611ed9833981519152906020015b60405180910390a360019150505b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000015610c4657610c2a336000356001600160e01b0319166115a2565b610c465760405162461bcd60e51b815260040161092e90611dbb565b610c4e61167c565b600d55565b6000610c5d611729565b600f54610c6a9190611e68565b905090565b7f000000000000000000000000000000000000000000000000000000000000000015610cc757610cab336000356001600160e01b0319166115a2565b610cc75760405162461bcd60e51b815260040161092e90611dbb565b610cd1828261178e565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610d2d57610d11336000356001600160e01b0319166115a2565b610d2d5760405162461bcd60e51b815260040161092e90611dbb565b610d373382611880565b50565b610d50336000356001600160e01b0319166115a2565b610d6c5760405162461bcd60e51b815260040161092e90611e2c565b6001600160e01b03198216600081815260046020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610de2336000356001600160e01b0319166115a2565b610dfe5760405162461bcd60e51b815260040161092e90611e2c565b8015610e2d576001600160a01b03831660009081526003602052604090208054600160ff85161b179055610e53565b6001600160a01b03831660009081526003602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610b36911515815260200190565b6000610e9e61167c565b6000610eab8585856116ad565b9050836001600160a01b0316856001600160a01b0316600080516020611ef983398151915283604051610ee091815260200190565b60405180910390a3836001600160a01b0316856001600160a01b0316600080516020611ed983398151915285604051610f1b91815260200190565b60405180910390a3949350505050565b6001600160a01b038116600090815260116020526040812054610a6590610fd6565b610f63336000356001600160e01b0319166115a2565b610f7f5760405162461bcd60e51b815260040161092e90611e2c565b6001600160a01b0382811660008181526002602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6000610a65610fe3610c53565b601054610b59565b6000546001600160a01b0316331480611080575060015460405163b700961360e01b81526001600160a01b039091169063b70096139061103f90339030906001600160e01b03196000351690600401611e7b565b602060405180830381865afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110809190611ea8565b61108957600080fd5b600180546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b60006110df61167c565b60006110eb84846118ea565b9050836001600160a01b0316336001600160a01b0316600080516020611ef98339815191528360405161112091815260200190565b60405180910390a36040518381526001600160a01b038516903390600080516020611ed98339815191529060200160405180910390a361115f83610fd6565b949350505050565b6060600a805461097190611df2565b7f0000000000000000000000000000000000000000000000000000000000000000156111ce576111b2336000356001600160e01b0319166115a2565b6111ce5760405162461bcd60e51b815260040161092e90611dbb565b610cd18282611880565b7f00000000000000000000000000000000000000000000000000000000000000001561123057611214336000356001600160e01b0319166115a2565b6112305760405162461bcd60e51b815260040161092e90611dbb565b610d37338261178e565b600061124461167c565b60105460000361128457346010819055600f8190553360009081526011602052604081208054909190611278908490611e68565b90915550349392505050565b60006112a261129260105490565b61129a610c53565b34919061165e565b905034600f60008282546112b69190611e68565b9250508190555080601060008282546112cf9190611e68565b909155505033600090815260116020526040812080548392906112f3908490611e68565b90915550909392505050565b600061130961167c565b600061131483610b43565b905061132084826118ea565b506040518381526001600160a01b038516903390600080516020611ef98339815191529060200160405180910390a36040518181526001600160a01b038516903390600080516020611ed98339815191529060200160405180910390a35060019392505050565b6001600160a01b0380831660009081526002602052604081205490911680156114235760405163b700961360e01b81526001600160a01b0382169063b7009613906113da90889088908890600401611e7b565b602060405180830381865afa1580156113f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141b9190611ea8565b915050610be7565b6001600160e01b0319831660009081526004602052604090205460ff168061147c57506001600160e01b031983166000908152600560209081526040808320546001600160a01b03891684526003909252909120541615155b95945050505050565b60008061149183610b43565b6001600160a01b0386166000908152601160205260408120805492935083929091906114be908490611ec5565b90915550506001600160a01b038416600090815260116020526040812080548392906114eb908490611e68565b92505081905550836001600160a01b0316856001600160a01b0316600080516020611ef983398151915285604051610bd991815260200190565b61153b336000356001600160e01b0319166115a2565b6115575760405162461bcd60e51b815260040161092e90611e2c565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6001546000906001600160a01b0316801580159061162c575060405163b700961360e01b81526001600160a01b0382169063b7009613906115eb90879030908890600401611e7b565b602060405180830381865afa158015611608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162c9190611ea8565b8061115f57506000546001600160a01b0385811691161491505092915050565b6116598383836001611947565b505050565b600082600019048411830215820261167557600080fd5b5091020490565b6000611686611729565b905080156116a65780600f60008282546116a09190611e68565b90915550505b5042600e55565b6000806116b983610fd6565b90506116c6853383611a1d565b6001600160a01b038516600090815260116020526040812080548592906116ee908490611ec5565b90915550506001600160a01b0384166000908152601160205260408120805485929061171b908490611e68565b909155509095945050505050565b6000600d5460000361173b5750600090565b600e5442101561174b5750600090565b60006117696301e13380600e54426117639190611ec5565b90611a95565b90506000610be761178583600d54611aaa90919063ffffffff16565b600f5490611aaa565b336000908152600c602052604090205460ff166117f757600b548111156117f75760405162461bcd60e51b815260206004820152601d60248201527f4d6f636b4c69646f3a20496e76616c6964206d696e7420616d6f756e74000000604482015260640161092e565b600061180260105490565b60000361181057508061181c565b61181982610b43565b90505b6001600160a01b03831660009081526011602052604081208054839290611844908490611e68565b9250508190555081600f600082825461185d9190611e68565b9250508190555080601060008282546118769190611e68565b9091555050505050565b600061188b82610b43565b6001600160a01b0384166000908152601160205260408120805492935083929091906118b8908490611ec5565b9250508190555081600f60008282546118d19190611ec5565b9250508190555080601060008282546118769190611ec5565b3360009081526011602052604081208054839190839061190b908490611ec5565b90915550506001600160a01b03831660009081526011602052604081208054849290611938908490611e68565b90915550610be7905082610fd6565b6001600160a01b0384166119715760405163e602df0560e01b81526000600482015260240161092e565b6001600160a01b03831661199b57604051634a1406b160e11b81526000600482015260240161092e565b6001600160a01b0380851660009081526007602090815260408083209387168352929052208290558015611a1757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611a0e91815260200190565b60405180910390a35b50505050565b6001600160a01b038381166000908152600760209081526040808320938616835292905220546000198114611a175781811015611a8657604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161092e565b611a1784848484036000611947565b6000610be783670de0b6b3a76400008461165e565b6000610be78383670de0b6b3a764000061165e565b6001600160a01b0381168114610d3757600080fd5b8015158114610d3757600080fd5b60008060408385031215611af557600080fd5b8235611b0081611abf565b91506020830135611b1081611ad4565b809150509250929050565b600060208284031215611b2d57600080fd5b8135610be781611abf565b60006020808352835180602085015260005b81811015611b6657858101830151858201604001528201611b4a565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215611b9957600080fd5b5035919050565b60008060408385031215611bb357600080fd5b8235611bbe81611abf565b946020939093013593505050565b80356001600160e01b031981168114611be457600080fd5b919050565b600060208284031215611bfb57600080fd5b610be782611bcc565b803560ff81168114611be457600080fd5b600080600060608486031215611c2a57600080fd5b611c3384611c04565b9250611c4160208501611bcc565b91506040840135611c5181611ad4565b809150509250925092565b600080600060608486031215611c7157600080fd5b8335611c7c81611abf565b92506020840135611c8c81611abf565b929592945050506040919091013590565b60008060408385031215611cb057600080fd5b611b0083611bcc565b600080600060608486031215611cce57600080fd5b8335611cd981611abf565b9250611c4160208501611c04565b60008060408385031215611cfa57600080fd5b8235611d0581611abf565b91506020830135611b1081611abf565b600080600060608486031215611d2a57600080fd5b8335611d3581611abf565b92506020840135611d4581611abf565b9150611d5360408501611bcc565b90509250925092565b60008060408385031215611d6f57600080fd5b611d7883611c04565b9150611d8660208401611bcc565b90509250929050565b60008060408385031215611da257600080fd5b8235611dad81611abf565b9150611d8660208401611c04565b60208082526018908201527f4d6f636b4c69646f3a206e6f7420617574686f72697a65640000000000000000604082015260600190565b600181811c90821680611e0657607f821691505b602082108103611e2657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a6557610a65611e52565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b600060208284031215611eba57600080fd5b8151610be781611ad4565b81810381811115610a6557610a65611e5256fe9d9c909296d9c674451c0c24f02cb64981eb3b727f99865939192f880a755dcbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220105ab26bee2dab9a2c174c558c2bab81b069de85ef1e094b6be70d0e0dbdf4e964736f6c63430008160033608060405234801561001057600080fd5b506040516102e33803806102e383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610250806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806370a082311461003b578063a9059cbb14610061575b600080fd5b61004e61004936600461019a565b610084565b6040519081526020015b60405180910390f35b61007461006f3660046101b5565b6100f9565b6040519015158152602001610058565b600080546040516370a0823160e01b81526001600160a01b038481166004830152909116906370a0823190602401602060405180830381865afa1580156100cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f391906101df565b92915050565b60008054604051633147aa7360e21b81523360048201526001600160a01b038581166024830152604482018590529091169063c51ea9cc906064016020604051808303816000875af1158015610153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017791906101f8565b9392505050565b80356001600160a01b038116811461019557600080fd5b919050565b6000602082840312156101ac57600080fd5b6101778261017e565b600080604083850312156101c857600080fd5b6101d18361017e565b946020939093013593505050565b6000602082840312156101f157600080fd5b5051919050565b60006020828403121561020a57600080fd5b8151801515811461017757600080fdfea26469706673582212204b183c313b96e0683f5a88758b9632ed742db6bf65ceab157a80b57ac063632e64736f6c63430008160033608060405260026001553480156200001657600080fd5b506040516200412c3803806200412c833981016040819052620000399162000708565b60006200004782826200096d565b508160e0015182610100015110806200007557508160e0015182610100015162000072919062000a39565b15155b156200009457604051630219d66360e11b815260040160405180910390fd5b610100820151600b8190556101208301511080620000c757508160e00151826101200151620000c4919062000a39565b15155b15620000e65760405163f9c0959d60e01b815260040160405180910390fd5b610120820151600c81905561014083015110806200011957508160e0015182610140015162000116919062000a39565b15155b156200013857604051633007ad0160e11b815260040160405180910390fd5b610140820151600d81905561016083015110806200016b57508160e0015182610160015162000168919062000a39565b15155b156200018a5760405163cfb699cb60e01b815260040160405180910390fd5b610160820151600e556101a08201516101808301511115620001bf5760405163ef9bc65f60e01b815260040160405180910390fd5b610180820151600f556101a08201516010556101e08201516101c08301511115620001fd576040516330554de160e01b815260040160405180910390fd5b6101c08201516011556101e082015160125561022082015161020083015111156200023b576040516383ebdfb760e01b815260040160405180910390fd5b61020082015160135561022082015160145561026082015151670de0b6b3a764000010806200027a5750670de0b6b3a764000082610260015160200151115b80620002965750670de0b6b3a764000082610260015160400151115b80620002b25750670de0b6b3a764000082610260015160600151115b15620002d15760405163161071fb60e11b815260040160405180910390fd5b610260820151805160198190556020820151601a556040820151601b55606090910151601c556102408301515111806200031c57508161026001516020015182610240015160200151115b806200033957508161026001516040015182610240015160400151115b806200035657508161026001516060015182610240015160600151115b1562000375576040516315b05a8f60e01b815260040160405180910390fd5b61024082015180516015556020808201516016556040808301516017556060928301516018558451600280546001600160a01b03199081166001600160a01b03938416179091558387015160038054831691841691909117905591860151600480548416918316919091179055608086015160078054841691831691909117905560a086015160088054841691831691909117905560c08601516009805490931691161790559083015180516200043192601d9201906200046e565b5050610280810151600580546001600160a01b0319166001600160a01b039092169190911790556102a081015160065560e00151600a5562000a5c565b828054828255906000526020600020908101928215620004c6579160200282015b82811115620004c657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200048f565b50620004d4929150620004d8565b5090565b5b80821115620004d45760008155600101620004d9565b634e487b7160e01b600052604160045260246000fd5b6040516102c081016001600160401b03811182821017156200052b576200052b620004ef565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200055c576200055c620004ef565b604052919050565b80516001600160a01b03811681146200057c57600080fd5b919050565b600082601f8301126200059357600080fd5b815160206001600160401b03821115620005b157620005b1620004ef565b8160051b620005c282820162000531565b9283528481018201928281019087851115620005dd57600080fd5b83870192505b848310156200060757620005f78362000564565b82529183019190830190620005e3565b979650505050505050565b6000608082840312156200062557600080fd5b604051608081016001600160401b03811182821017156200064a576200064a620004ef565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600082601f8301126200068d57600080fd5b81516001600160401b03811115620006a957620006a9620004ef565b6020620006bf601f8301601f1916820162000531565b8281528582848701011115620006d457600080fd5b60005b83811015620006f4578581018301518282018401528201620006d7565b506000928101909101919091529392505050565b600080604083850312156200071c57600080fd5b82516001600160401b03808211156200073457600080fd5b9084019061038082870312156200074a57600080fd5b6200075462000505565b6200075f8362000564565b81526200076f6020840162000564565b6020820152620007826040840162000564565b60408201526060830151828111156200079a57600080fd5b620007a88882860162000581565b606083015250620007bc6080840162000564565b6080820152620007cf60a0840162000564565b60a0820152620007e260c0840162000564565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240620008708882860162000612565b9082015262000884876102c0850162000612565b61026082015262000899610340840162000564565b61028082015261036092909201516102a0830152602085015191935080821115620008c357600080fd5b50620008d2858286016200067b565b9150509250929050565b600181811c90821680620008f157607f821691505b6020821081036200091257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000968576000816000526020600020601f850160051c81016020861015620009435750805b601f850160051c820191505b8181101562000964578281556001016200094f565b5050505b505050565b81516001600160401b03811115620009895762000989620004ef565b620009a1816200099a8454620008dc565b8462000918565b602080601f831160018114620009d95760008415620009c05750858301515b600019600386901b1c1916600185901b17855562000964565b600085815260208120601f198616915b8281101562000a0a57888601518255948401946001909101908401620009e9565b508582101562000a295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008262000a5757634e487b7160e01b600052601260045260246000fd5b500690565b6136c08062000a6c6000396000f3fe6080604052600436106103a65760003560e01c80638e127cf5116101e7578063d2c35ce81161010d578063e4e7148f116100a0578063ec895f111161006f578063ec895f1114610ae9578063f259645814610b09578063f8c09e5914610b29578063fe3d5aeb14610b5957600080fd5b8063e4e7148f14610a74578063e71f34b314610a94578063e83e34b114610ab4578063eb71f66c14610ac957600080fd5b8063dd2b8fbb116100dc578063dd2b8fbb14610a09578063e0e2daaa14610a29578063e1b39c8014610a3f578063e333155514610a5457600080fd5b8063d2c35ce81461099d578063d6f50169146109bd578063daac24da146109d3578063daf012e6146109f357600080fd5b8063b256126311610185578063c415b95c11610154578063c415b95c1461093b578063c905a4b51461095b578063d0f96b9214610971578063d23d7ea31461098757600080fd5b8063b2561263146108c3578063bc30e7a1146108e3578063bf9bd5cd14610903578063c17225631461091957600080fd5b806399623bb1116101c157806399623bb11461084e5780639af252621461086e578063a64c90bf1461088e578063a98a46db146108a357600080fd5b80638e127cf5146107f85780638efc09861461081857806397b0e8ce1461082e57600080fd5b80634554f9a9116102cc578063628027a31161026a57806383b361e81161023957806383b361e81461077857806384c19aab1461079857806385229785146107b85780638627a4f0146107d857600080fd5b8063628027a3146106e35780636b44e6be146107035780636e95d67c146107435780636f6d5c4a1461075857600080fd5b80634fbfee77116102a65780634fbfee771461065a57806354fd4d501461067a5780635720c9d5146106ad5780635aa6e675146106c357600080fd5b80634554f9a91461060e578063488007601461062457806349f13de71461063a57600080fd5b80631ecda0fe116103445780632e7cd971116103135780632e7cd9711461059b5780633e2d2014146105ae578063411c3035146105ce578063421caba8146105ee57600080fd5b80631ecda0fe146105025780632885e3ac146105265780632907d3dd146105465780632b58f4181461056657600080fd5b806310d1dc3e1161038057806310d1dc3e1461047557806311e77bfe146104955780631978ebcf146104b55780631b59be0c146104d557600080fd5b806304baa00b146103d557806306fdde031461042857806310780f731461043d57600080fd5b366103d0576002600154036103ce57604051630aac75b560e31b815260040160405180910390fd5b005b600080fd5b3480156103e157600080fd5b506104126040518060400160405280601181526020017048797065726472697665466163746f727960781b81525081565b60405161041f9190612cec565b60405180910390f35b34801561043457600080fd5b50610412610b79565b34801561044957600080fd5b5060085461045d906001600160a01b031681565b6040516001600160a01b03909116815260200161041f565b34801561048157600080fd5b506103ce610490366004612cff565b610c07565b3480156104a157600080fd5b506103ce6104b0366004612d11565b610d20565b3480156104c157600080fd5b506103ce6104d0366004612d11565b610df9565b3480156104e157600080fd5b506104f56104f0366004612d2a565b610e7b565b60405161041f9190612d9f565b34801561050e57600080fd5b50610518600f5481565b60405190815260200161041f565b34801561053257600080fd5b506103ce610541366004612cff565b610f56565b34801561055257600080fd5b506103ce610561366004612d11565b6110bc565b34801561057257600080fd5b5061045d610581366004612e14565b60208052600090815260409020546001600160a01b031681565b61045d6105a93660046130ee565b61113e565b3480156105ba57600080fd5b506103ce6105c9366004612e14565b611580565b3480156105da57600080fd5b506103ce6105e93660046131cf565b6115f4565b3480156105fa57600080fd5b506103ce610609366004612e14565b6117c5565b34801561061a57600080fd5b5061051860105481565b34801561063057600080fd5b5061051860145481565b34801561064657600080fd5b5061045d6106553660046131fb565b6118ce565b34801561066657600080fd5b506103ce610675366004612d11565b6119c0565b34801561068657600080fd5b50610412604051806040016040528060078152602001660ec625c605c62760cb1b81525081565b3480156106b957600080fd5b50610518600b5481565b3480156106cf57600080fd5b5060025461045d906001600160a01b031681565b3480156106ef57600080fd5b506103ce6106fe366004612d11565b611a1d565b34801561070f57600080fd5b5061073361071e366004612e14565b60226020526000908152604090205460ff1681565b604051901515815260200161041f565b34801561074f57600080fd5b50602154610518565b34801561076457600080fd5b506103ce610773366004612d11565b611a9f565b34801561078457600080fd5b506103ce610793366004612d11565b611b43565b3480156107a457600080fd5b506103ce6107b3366004612d11565b611bc5565b3480156107c457600080fd5b506103ce6107d3366004612e14565b611c47565b3480156107e457600080fd5b506103ce6107f3366004612e14565b611cbb565b34801561080457600080fd5b506103ce610813366004612d11565b611d2f565b34801561082457600080fd5b50610518600e5481565b34801561083a57600080fd5b506103ce610849366004612d11565b611dd3565b34801561085a57600080fd5b5060055461045d906001600160a01b031681565b34801561087a57600080fd5b506103ce610889366004612d2a565b611e55565b34801561089a57600080fd5b506104f5611ebd565b3480156108af57600080fd5b506103ce6108be366004612e14565b611f1f565b3480156108cf57600080fd5b506103ce6108de366004612e14565b611f93565b3480156108ef57600080fd5b506104f56108fe36600461328f565b612007565b34801561090f57600080fd5b5061051860125481565b34801561092557600080fd5b5061092e612109565b60405161041f91906132b1565b34801561094757600080fd5b5060075461045d906001600160a01b031681565b34801561096757600080fd5b5061051860065481565b34801561097d57600080fd5b50610518600a5481565b34801561099357600080fd5b5061051860115481565b3480156109a957600080fd5b506103ce6109b8366004612e14565b612161565b3480156109c957600080fd5b5061051860135481565b3480156109df57600080fd5b5061045d6109ee366004612d11565b6121d5565b3480156109ff57600080fd5b50610518600d5481565b348015610a1557600080fd5b506103ce610a24366004612e14565b612205565b348015610a3557600080fd5b50610518600c5481565b348015610a4b57600080fd5b50601e54610518565b348015610a6057600080fd5b5060045461045d906001600160a01b031681565b348015610a8057600080fd5b5060035461045d906001600160a01b031681565b348015610aa057600080fd5b506103ce610aaf366004612d11565b612279565b348015610ac057600080fd5b5061092e61231d565b348015610ad557600080fd5b506103ce610ae4366004612d11565b612375565b348015610af557600080fd5b506104f5610b0436600461328f565b61240d565b348015610b1557600080fd5b5060095461045d906001600160a01b031681565b348015610b3557600080fd5b50610733610b44366004612e14565b601f6020526000908152604090205460ff1681565b348015610b6557600080fd5b5061045d610b74366004612d11565b61250f565b60008054610b86906132dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb2906132dc565b8015610bff5780601f10610bd457610100808354040283529160200191610bff565b820191906000526020600020905b815481529060010190602001808311610be257829003601f168201915b505050505081565b6002546001600160a01b03163314610c31576040516282b42960e81b815260040160405180910390fd5b60408051608081018252601954808252601a546020830152601b5492820192909252601c5460608201529082351180610c71575080602001518260200135115b80610c83575080604001518260400135115b80610c95575080606001518260600135115b15610cb3576040516315b05a8f60e01b815260040160405180910390fd5b81356015819055602080840135601681905560408086013560178190556060808801356018819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6002546001600160a01b03163314610d4a576040516282b42960e81b815260040160405180910390fd5b80600b54610d589190613310565b151580610d71575080600c54610d6e9190613310565b15155b80610d88575080600d54610d859190613310565b15155b80610d9f575080600e54610d9c9190613310565b15155b15610dbd576040516311b75c1560e31b815260040160405180910390fd5b600a8190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6002546001600160a01b03163314610e23576040516282b42960e81b815260040160405180910390fd5b601254811115610e4657604051631670f79760e01b815260040160405180910390fd5b60118190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610dee565b60215460609067ffffffffffffffff811115610e9957610e99612e31565b604051908082528060200260200182016040528015610ec2578160200160208202803683370190505b50905060005b82811015610f4e5760206000858584818110610ee657610ee6613332565b9050602002016020810190610efb9190612e14565b6001600160a01b0390811682526020820192909252604001600020548351911690839083908110610f2e57610f2e613332565b6001600160a01b0390921660209283029190910190910152600101610ec8565b505b92915050565b6002546001600160a01b03163314610f80576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260155481526016546020820152601754918101919091526018546060820152670de0b6b3a764000082351180610fcb5750670de0b6b3a76400008260200135115b80610fe15750670de0b6b3a76400008260400135115b80610ff75750670de0b6b3a76400008260600135115b80611003575080518235105b80611015575080602001518260200135105b80611027575080604001518260400135105b80611039575080606001518260600135105b156110575760405163161071fb60e11b815260040160405180910390fd5b81356019819055602080840135601a819055604080860135601b819055606080880135601c819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a790608001610d14565b6002546001600160a01b031633146110e6576040516282b42960e81b815260040160405180910390fd5b601054811115611109576040516328a2d9a960e01b815260040160405180910390fd5b600f8190556040518181527f41f729b931ad8e33d697fff6bc6736a1ac6ee09e8265efae2794ac1635c217a690602001610dee565b6001600160a01b0389166000908152601f602052604081205460ff1661117757604051636e623f0f60e01b815260040160405180910390fd5b611182888686612524565b60408051336020808301919091528183018e905282518083038401815260608301938490528051910120631d321d7560e31b9092526000916001600160a01b038d169163e990eba8916111df918e908e908e908a90606401613459565b6020604051808303816000875af11580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122291906134a9565b90508a60206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460009054906101000a90046001600160a01b03168961014001906001600160a01b031690816001600160a01b0316815250508a6001600160a01b03167fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed234465828c8c8c6040516112e194939291906134c6565b60405180910390a26021805460018082019092557f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5700180546001600160a01b0319166001600160a01b03848116918217909255600090815260226020908152604091829020805460ff1916851790559280558051339381019390935282018e90528c16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b81526004016113aa959493929190613518565b60206040518083038185885af11580156113c8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113ed919061357b565b50600260015560005b601d5481101561149a57816001600160a01b0316637180c8ca601d838154811061142257611422613332565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b5050600190920191506113f69050565b506004805460405163ab033ea960e01b81526001600160a01b039182169281019290925282169063ab033ea990602401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50479250508115905061157057604051600090339083908381818185875af1925050503d8060008114611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b505090508061156e576040516312171d8360e31b815260040160405180910390fd5b505b509b9a5050505050505050505050565b6002546001600160a01b031633146115aa576040516282b42960e81b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517fae062fb82c932c653cd44617343ecda1d13e375e0d6f20d969c944fbda1963d390600090a250565b6002546001600160a01b0316331480159061161a57506003546001600160a01b03163314155b15611637576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382166000908152601f602052604090205460ff1661167057604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b0316601e828154811061168d5761168d613332565b6000918252602090912001546001600160a01b0316146116c057604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601f60205260409020805460ff19169055601e80546116f0906001906135aa565b8154811061170057611700613332565b600091825260209091200154601e80546001600160a01b03909216918390811061172c5761172c613332565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601e80548061176b5761176b6135bd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6002546001600160a01b031633148015906117eb57506003546001600160a01b03163314155b15611808576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff16156118425760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020526040808220805460ff19166001908117909155601e8054918201815583527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3500180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6001600160a01b0387166000908152601f602052604081205460ff1661190757604051636e623f0f60e01b815260040160405180910390fd5b611912878686612524565b60408051336020808301919091528183018c90528251808303840181526060830193849052805191012063182a20c360e31b9092526000916001600160a01b038b169163c15106189161196f918c908c908a908a906064016135d3565b6020604051808303816000875af115801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b291906134a9565b9a9950505050505050505050565b6002546001600160a01b031633146119ea576040516282b42960e81b815260040160405180910390fd5b600681905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6002546001600160a01b03163314611a47576040516282b42960e81b815260040160405180910390fd5b601354811015611a6a57604051630a35539d60e41b815260040160405180910390fd5b60148190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610dee565b6002546001600160a01b03163314611ac9576040516282b42960e81b815260040160405180910390fd5b600b54811080611ae45750600a54611ae19082613310565b15155b80611af05750600d5481115b15611b0e5760405163f9c0959d60e01b815260040160405180910390fd5b600c8190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610dee565b6002546001600160a01b03163314611b6d576040516282b42960e81b815260040160405180910390fd5b601454811115611b9057604051635a8f655760e01b815260040160405180910390fd5b60138190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610dee565b6002546001600160a01b03163314611bef576040516282b42960e81b815260040160405180910390fd5b600f54811015611c1257604051637edc061360e11b815260040160405180910390fd5b60108190556040518181527f0e56d83f54e6f5b08716a54b3abdb59b3025bf12c1875c87ab98ab081d6f838190602001610dee565b6002546001600160a01b03163314611c71576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6002546001600160a01b03163314611ce5576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd290600090a250565b6002546001600160a01b03163314611d59576040516282b42960e81b815260040160405180910390fd5b600a54811080611d745750600a54611d719082613310565b15155b80611d805750600c5481115b15611d9e57604051630219d66360e11b815260040160405180910390fd5b600b8190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610dee565b6002546001600160a01b03163314611dfd576040516282b42960e81b815260040160405180910390fd5b601154811015611e205760405163019cfb7b60e61b815260040160405180910390fd5b60128190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610dee565b6002546001600160a01b03163314611e7f576040516282b42960e81b815260040160405180910390fd5b611e8b601d8383612c37565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc388282604051610d14929190613612565b6060601d805480602002602001604051908101604052809291908181526020018280548015611f1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ef7575b5050505050905090565b6002546001600160a01b03163314611f49576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6f717fb0ab51206dea4064a35c94c2784f8714b012fbde820e0ddee36265eb6a90600090a250565b6002546001600160a01b03163314611fbd576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab90600090a250565b606081831061202957604051633b2735ab60e11b815260040160405180910390fd5b60215482111561204c5760405163e0f7becb60e01b815260040160405180910390fd5b61205683836135aa565b67ffffffffffffffff81111561206e5761206e612e31565b604051908082528060200260200182016040528015612097578160200160208202803683370190505b509050825b82811015610f4e57602181815481106120b7576120b7613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106120e9576120e9613332565b6001600160a01b039092166020928302919091019091015260010161209c565b6121346040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526015548152601654602082015260175491810191909152601854606082015290565b6002546001600160a01b0316331461218b576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000602182815481106121ea576121ea613332565b6000918252602090912001546001600160a01b031692915050565b6002546001600160a01b0316331461222f576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6002546001600160a01b031633146122a3576040516282b42960e81b815260040160405180910390fd5b600c548110806122be5750600a546122bb9082613310565b15155b806122ca5750600e5481115b156122e857604051633007ad0160e11b815260040160405180910390fd5b600d8190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610dee565b6123486040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526019548152601a546020820152601b5491810191909152601c54606082015290565b6002546001600160a01b0316331461239f576040516282b42960e81b815260040160405180910390fd5b600d548110806123ba5750600a546123b79082613310565b15155b156123d85760405163cfb699cb60e01b815260040160405180910390fd5b600e8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610dee565b606081831061242f57604051633b2735ab60e11b815260040160405180910390fd5b601e548211156124525760405163e0f7becb60e01b815260040160405180910390fd5b61245c83836135aa565b67ffffffffffffffff81111561247457612474612e31565b60405190808252806020026020018201604052801561249d578160200160208202803683370190505b509050825b82811015610f4e57601e81815481106124bd576124bd613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106124ef576124ef613332565b6001600160a01b03909216602092830291909101909101526001016124a2565b6000601e82815481106121ea576121ea613332565b600b54836101000151108061253f5750600c54836101000151115b8061255b5750600a548361010001516125589190613310565b15155b1561257957604051635428734d60e01b815260040160405180910390fd5b600d548360e0015110806125925750600e548360e00151115b806125b057508261010001518360e001516125ad9190613310565b15155b156125ce5760405163253fffcf60e11b815260040160405180910390fd5b600f548360c0015110806125e757506010548360c00151115b156126055760405163ef9bc65f60e01b815260040160405180910390fd5b6019546101c08401515111806126395750601a5460e08401516101c085015160200151612637916301e1338090612895565b115b8061264e5750601b546101c084015160400151115b806126635750601c546101c084015160600151115b8061267557506015546101c084015151105b8061269e575060165460e08401516101c08501516020015161269c916301e13380906128bb565b105b806126b357506017546101c084015160400151105b806126c857506018546101c084015160600151105b156126e657604051632d8768f960e01b815260040160405180910390fd5b6011548210806126f7575060125482115b15612715576040516330554de160e01b815260040160405180910390fd5b600061273a6611c37937e0800061273485671bc16d674ec800006128d9565b906128f5565b60135490915061274a90826128f5565b82108061277d575061277a612771671bc16d674ec8000061276b86856128f5565b9061290b565b60145490612920565b82115b1561279b576040516383ebdfb760e01b815260040160405180910390fd5b60006127ab838660e00151612935565b60055460408701519192506001600160a01b0391821691161415806127d65750600654856060015114155b806127f557506007546101608601516001600160a01b03908116911614155b8061281457506008546101808601516001600160a01b03908116911614155b8061283357506009546101a08601516001600160a01b03908116911614155b8061285257506004546101408601516001600160a01b03908116911614155b80612861575061012085015115155b1561287f5760405163e8c02dd760e01b815260040160405180910390fd5b3061014086015261012090940193909352505050565b60008260001904841183021582026128ac57600080fd5b50910281810615159190040190565b60008260001904841183021582026128d257600080fd5b5091020490565b60006128ee83670de0b6b3a7640000846128bb565b9392505050565b600081831161290457816128ee565b5090919050565b60006128ee8383670de0b6b3a76400006128bb565b600081831161292f57826128ee565b50919050565b600080612966612957612949866064613660565b66a5bbed86c5a0009061290b565b6748cd4072281e0000906128d9565b905061297a670de0b6b3a7640000826128d9565b90506129d28161276b6129a56129a061299b89670de0b6b3a7640000613677565b6129da565b612a08565b6129cc6129a06129ba8a8a6301e133806128bb565b61299b90670de0b6b3a7640000613677565b906128d9565b949350505050565b60006001600160ff1b03821115612a045760405163396ea70160e11b815260040160405180910390fd5b5090565b6000808213612a2a5760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612ab69084901c6129da565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b828054828255906000526020600020908101928215612c8a579160200282015b82811115612c8a5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612c57565b50612a049291505b80821115612a045760008155600101612c92565b6000815180845260005b81811015612ccc57602081850181015186830182015201612cb0565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006128ee6020830184612ca6565b60006080828403121561292f57600080fd5b600060208284031215612d2357600080fd5b5035919050565b60008060208385031215612d3d57600080fd5b823567ffffffffffffffff80821115612d5557600080fd5b818501915085601f830112612d6957600080fd5b813581811115612d7857600080fd5b8660208260051b8501011115612d8d57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612de05783516001600160a01b031683529284019291840191600101612dbb565b50909695505050505050565b6001600160a01b0381168114612e0157600080fd5b50565b8035612e0f81612dec565b919050565b600060208284031215612e2657600080fd5b81356128ee81612dec565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715612e6b57612e6b612e31565b60405290565b600082601f830112612e8257600080fd5b813567ffffffffffffffff80821115612e9d57612e9d612e31565b604051601f8301601f19908116603f01168101908282118183101715612ec557612ec5612e31565b81604052838152866020858801011115612ede57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215612f1057600080fd5b6040516080810181811067ffffffffffffffff82111715612f3357612f33612e31565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102408284031215612f7757600080fd5b612f7f612e47565b9050612f8a82612e04565b8152612f9860208301612e04565b6020820152612fa960408301612e04565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140613006818401612e04565b90820152610160613018838201612e04565b9082015261018061302a838201612e04565b908201526101a061303c838201612e04565b908201526101c061304f84848301612efe565b9082015292915050565b60006060828403121561306b57600080fd5b6040516060810167ffffffffffffffff828210818311171561308f5761308f612e31565b81604052829350843591506130a382612dec565b90825260208401359081151582146130ba57600080fd5b81602084015260408501359150808211156130d457600080fd5b506130e185828601612e71565b6040830152505092915050565b6000806000806000806000806000806103608b8d03121561310e57600080fd5b8a35995061311e60208c01612e04565b985060408b013567ffffffffffffffff8082111561313b57600080fd5b6131478e838f01612e71565b99506131568e60608f01612f64565b98506102a08d013591508082111561316d57600080fd5b6131798e838f01612e71565b97506102c08d013596506102e08d013595506103008d013594506103208d01359150808211156131a857600080fd5b506131b58d828e01613059565b9250506103408b013590509295989b9194979a5092959850565b600080604083850312156131e257600080fd5b82356131ed81612dec565b946020939093013593505050565b600080600080600080600080610320898b03121561321857600080fd5b88359750602089013561322a81612dec565b96506132398a60408b01612f64565b955061028089013567ffffffffffffffff81111561325657600080fd5b6132628b828c01612e71565b989b979a5095986102a0810135976102c082013597506102e0820135965061030090910135945092505050565b600080604083850312156132a257600080fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101610f50565b600181811c908216806132f057607f821691505b60208210810361292f57634e487b7160e01b600052602260045260246000fd5b60008261332d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b80516001600160a01b03168252602081015161336f60208401826001600160a01b03169052565b50604081015161338a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516133f0828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c09081015180519183019190915260208101516101e083015260408101516102008301526060015161022090910152565b60006102c087835280602084015261347381840188612ca6565b90506134826040840187613348565b8281036102808401526134958186612ca6565b915050826102a08301529695505050505050565b6000602082840312156134bb57600080fd5b81516128ee81612dec565b6001600160a01b03851681526102a0602082018190526000906134eb83820187612ca6565b90506134fa6040840186613348565b82810361028084015261350d8185612ca6565b979650505050505050565b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e084015261356f610100840182612ca6565b98975050505050505050565b60006020828403121561358d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f5057610f50613594565b634e487b7160e01b600052603160045260246000fd5b60006102c08783526135e86020840188613348565b806102608401526135fb81840187612ca6565b61028084019590955250506102a001529392505050565b60208082528181018390526000908460408401835b8681101561365557823561363a81612dec565b6001600160a01b031682529183019190830190600101613627565b509695505050505050565b8082028115828204841417610f5057610f50613594565b80820180821115610f5057610f5061359456fea26469706673582212205f8906911379fa644e3e4b0dac6b11cd0e0ad498dd3794c4f8378b03928cf2c364736f6c634300081600336102806040523480156200001257600080fd5b5060405162003dc138038062003dc18339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516102205161024051610260516139696200045860003960008181610d040152612311015260008181610cd501526122d4015260008181610baf01528181610e3401528181610ec401528181610f5401528181610fe4015281816115ff015281816116970152818161186001528181611e8b01528181611f6101526120b801526000610d9c015260008181610d7601526124c4015260008181610d50015261249e015260008181610d2a0152612478015260006110f1015260006110cb015260006110a50152600061107f015260008181610e0e01526124ea015260008181610dc20152818161128601526128ff015260008181610de80152612ac401526000818161061101528181610ca601528181611dfc015281816125ac015281816126390152612a4f015260008181610c77015261121f01526139696000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c806360246c8811610130578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104e6578063d8165743146104f9578063e44808bc1461050e578063e985e9c514610521578063fba560081461053457600080fd5b8063bd85b03914610490578063becee9c3146104a3578063c55dae63146104c3578063c69e16ad146104cb578063c6e6f592146104d357600080fd5b80639cd241af116100ff5780639cd241af14610431578063a22cb46514610444578063ab033ea914610457578063b0d9658014610468578063b88fed9f1461047d57600080fd5b806360246c88146103ef5780637180c8ca146104045780637ecebe0014610416578063950c5d031461042957600080fd5b806320fc4881116101be5780633e691db9116101825780633e691db91461038b57806346fbf68e1461039e5780634e41a1fb146103c15780634ed2d6ac146103d457806354fd4d50146103e757600080fd5b806320fc4881146102f057806321ff32a914610335578063313ce567146103565780633656eec2146103705780633a98ef391461038357600080fd5b806306fdde031161020557806306fdde031461028f5780630a4e14931461029757806314e5f07b146102b757806317fad7fc146102ca5780631c0f12b6146102dd57600080fd5b8062ad800c1461023657806301681a621461025f57806302329a291461027457806304baa00b14610287575b600080fd5b610249610244366004612d15565b610563565b6040516102569190612d7e565b60405180910390f35b61027261026d366004612da6565b61059a565b005b610272610282366004612dd1565b6105a3565b6102496105ac565b6102496105ec565b61029f610603565b6040516001600160a01b039091168152602001610256565b6102726102c5366004612dee565b610643565b6102726102d8366004612ecf565b61065f565b6102726102eb366004612f64565b610675565b6103036102fe366004612d15565b610688565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610256565b610348610343366004612fac565b6106f4565b604051908152602001610256565b61035e61073a565b60405160ff9091168152602001610256565b61034861037e366004612fee565b610752565b61034861078b565b61034861039936600461301e565b6107aa565b6103b16103ac366004612da6565b6107b5565b6040519015158152602001610256565b6102496103cf366004612d15565b6107d5565b6102726103e2366004613059565b6107e3565b610249610831565b6103f7610866565b60405161025691906130a3565b610272610412366004613144565b5050565b610348610424366004612da6565b610b75565b61029f610ba1565b61027261043f366004613172565b610be1565b610272610452366004613144565b610bf2565b610272610465366004612da6565b50565b610470610c5e565b60405161025691906131aa565b61034861048b366004612d15565b611126565b61034861049e366004612d15565b611134565b6104b66104b13660046132d0565b611156565b6040516102569190613312565b61029f611211565b610348611251565b6103486104e1366004612d15565b61126b565b6103486104f4366004612d15565b611279565b6105016112b0565b6040516102569190613356565b61027261051c366004613467565b6113bc565b6103b161052f3660046134c6565b611404565b61053c611448565b6040805182516001600160801b039081168252602093840151169281019290925201610256565b6060610595610571836114a7565b6040516020016105819190612d7e565b6040516020818303038152906040526115cf565b919050565b610465816115f3565b6104658161185e565b60606105e96040518060400160405280600f81526020016e53744554484879706572647269766560881b8152506040516020016105819190612d7e565b90565b60606105e9600160405160200161058191906134f4565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105e99101610581565b610654898989898989898989611978565b505050505050505050565b61066d868686868686611b6f565b505050505050565b6106828484848433611c23565b50505050565b604080516060810182526000808252602082018190529181019190915261059560086000848152602001908152602001600020604051602001610581919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b03868116855290835281842090851684528252808320548151928301526107339101610581565b9392505050565b60408051601260208201526000916105e99101610581565b6000828152600a602090815260408083206001600160a01b03851684528252808320548151928301526107859101610581565b92915050565b60006105e9610798611de4565b60405160200161058191815260200190565b600061078582611e74565b60006105956107c3836120b3565b60408051911515602083015201610581565b606061059561057183612198565b836107ed81612296565b6001600160a01b0316336001600160a01b03161461081e57604051632aab8bd360e01b815260040160405180910390fd5b61082a85858585612353565b5050505050565b60606105e9604051806040016040528060078152602001660ec625c605c62760cb1b8152506040516020016105819190612d7e565b6108df604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006108e96123c0565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b039092169161095491906135d1565b61095e91906135e4565b905060008215610a705773__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611eb692919061385d565b6040805180830381865af4158015611ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef691906138d3565b91509150611f14611f0682611377565b611f0f906138f7565b612a6d565b925082611f2a5760009650505050505050611371565b611f3382611ab1565b60078054600090611f4e9084906001600160801b03166136fb565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f7b81611ab1565b60078054601090611f9d908490600160801b90046001600160801b03166136fb565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611ffa87612c05565b6040518263ffffffff1660e01b81526004016120169190613913565b6040805180830381865af4158015612032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120569190613922565b915091508061206c575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916120d291613517565b6120dc91906136c8565b9050806000036120f457506000958695509350505050565b600080871161210457600061210f565b61210f8488846125f0565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561214357612143613952565b6040519080825280601f01601f19166020018201604052801561216d576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561218e578692505b828152826000602083013e90999098509650505050505050565b6000806121b36105ca565b90508083116121c35760006121cd565b6121cd81846136c8565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612817565b6000808061221a61221288670de0b6b3a76400006136c8565b899087612d3f565b9050861561225c5761222c88886125db565b915061224d8a8a846122468a670de0b6b3a76400006136c8565b8989612d65565b92506122598382613517565b90505b9750975097945050505050565b600061228761228084670de0b6b3a76400006136c8565b83906125db565b6115de90670de0b6b3a76400006136c8565b6000806122d0856122a8611a79565b6122b29190613517565b600254610ff2908790600160801b90046001600160801b03166136c8565b909210949350505050565b6000808080612332878661232b8b6123256122fe8c670de0b6b3a76400006136c8565b7f0000000000000000000000000000000000000000000000000000000000000000906125db565b906125db565b9190612d3f565b935061235e847f00000000000000000000000000000000000000000000000000000000000000006115e5565b9150600061237f61237789670de0b6b3a76400006136c8565b8a9088612d3f565b90506123ab817f00000000000000000000000000000000000000000000000000000000000000006125db565b93506123d7847f00000000000000000000000000000000000000000000000000000000000000006115e5565b6123e19084613517565b915050945094509450949050565b6000806000806000808888101561245e578615612414576124118d898b6125f0565b9c505b61241f8c898b6125f0565b9b5061242a8b611377565b6124338d611377565b61243d919061352a565b905061244a8b898b6125f0565b9a506124578a898b6125f0565b995061247d565b6124678b611377565b6124708d611377565b61247a919061352a565b90505b9b9c9a9b999a975050505050505050565b60008260000361249f57508461252f565b81156124f2576124d06124b28487613517565b6124bc85876115e5565b6124c6888a6115e5565b611d759190613517565b905060006124de8588611adb565b9050808210156124ec578091505b5061252f565b8285036125015750600061252f565b61252c61250e84876136c8565b61251885876125db565b612522888a6115e5565b611d7591906136c8565b90505b95945050505050565b600060016001607f1b0319821280612556575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b600080612582846000612d88565b61258d846000612d88565b612597919061352a565b905060008113156125b3576125ac8186613517565b94506125d2565b60008112156125d2576125c5816138f7565b6125cf90866136c8565b94505b50929392505050565b60006115de8383670de0b6b3a7640000612d3f565b600082600019048411830215820261260757600080fd5b5091020490565b604051631920845160e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631920845190602401611a22565b600060405163350b944160e11b815260040160405180910390fd5b604051638fcb4e5b60e01b81526001600160a01b038481166004830152602482018690527f00000000000000000000000000000000000000000000000000000000000000001690638fcb4e5b906044016020604051808303816000875af11580156126e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270c919061379c565b5050505050565b6000808061273461272c88670de0b6b3a76400006136c8565b8990876125f0565b9050861561225c5761274688886115e5565b915061224d8a8a846127608a670de0b6b3a76400006136c8565b8989612d9e565b6000806127748484612daf565b90925090508061278657612786611444565b5092915050565b6000816000036127a65750670de0b6b3a7640000611371565b826000036127b657506000611371565b60006127c183611377565b905060006127d66127d186611377565b612dee565b90508181026127ed670de0b6b3a764000082613968565b90506127f881613014565b9695505050505050565b60006115de83670de0b6b3a764000084612d3f565b60006115de83670de0b6b3a7640000846125f0565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612871906001600160801b031684612802565b905061289d7f000000000000000000000000000000000000000000000000000000000000000082613517565b6002546001600160801b03161115611aea576002547f0000000000000000000000000000000000000000000000000000000000000000906128e89083906001600160801b03166136c8565b6115de91906136c8565b6128fa6133ef565b60008061290684612c05565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b81526004016129419190613913565b6040805180830381865af415801561295d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129819190613922565b9350905082612996575060009150612a659050565b60006129bd6129b88461016001518561014001516115e590919063ffffffff16565b611377565b6129dd6129b88561012001518661010001516125db90919063ffffffff16565b6129e7919061352a565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016120749291906139e7565b6040805180830381865af4158015612090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b49190613a5d565b915091506120d26120c482611b4d565b6120cd90613a81565b612b9a565b9250826120e8576000965050505050505061066a565b6120f182611897565b6007805460009061210c9084906001600160801b031661383d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061213981611897565b6007805460109061215b908490600160801b90046001600160801b031661383d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6121b887612d32565b6040518263ffffffff1660e01b81526004016121d49190613a9d565b6040805180830381865af41580156121f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122149190613aac565b915091508061222a575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b031691612290916136a1565b61229a91906137c2565b9050806000036122b257506000958695509350505050565b60008087116122c25760006122cd565b6122cd848884611822565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561230157612301613adc565b6040519080825280601f01601f19166020018201604052801561232b576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561234c578692505b828152826000602083013e90999098509650505050505050565b600061238787878761238088670de0b6b3a76400006137c2565b8787612e6c565b979650505050505050565b60006114776123d36123ac84670de0b6b3a76400006137c2565b611438670de0b6b3a76400006123c2818a6128a8565b6123cc91906137c2565b87906126a4565b6123e590670de0b6b3a76400006136a1565b611d0384670de0b6b3a76400006137c2565b60008061242e85612406611856565b61241091906136a1565b600254610ea2908790600160801b90046001600160801b03166137c2565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000806000806000612465898789612e8f565b909250905061247482896137c2565b9750600061248382888a611822565b905061248f818b6137c2565b9a989950979650505050505050565b6000826000036124af57508461188e565b8115612502576124e06124c284876136a1565b6124cc8587610652565b6124d6888a610652565b611d0391906136a1565b905060006124ee85886118c5565b9050808210156124fc578091505b5061188e565b8285036125115750600061188e565b61253c61251e84876137c2565b61252885876126a4565b612532888a610652565b611d0391906137c2565b9695505050505050565b600061256e600b600061255a6002866111d9565b815260200190815260200160002054611b4d565b612580600b600061255a6001876111d9565b61066a919061385d565b60006125b67f0000000000000000000000000000000000000000000000000000000000000000836126a4565b6003546125cc91906001600160801b03166136a1565b6002546125e2906001600160801b031684610652565b101592915050565b600061066a826004611f95565b604051630f451f7160e31b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a28fb8890602401602060405180830381865afa15801561265f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066a91906138f9565b600061238787878761269d88670de0b6b3a76400006137c2565b8787612f0f565b60006106678383670de0b6b3a7640000612f20565b600080808061270a87866127038b6114386126dc8c670de0b6b3a76400006137c2565b7f0000000000000000000000000000000000000000000000000000000000000000906126a4565b9190612f20565b9350612736847f0000000000000000000000000000000000000000000000000000000000000000610652565b9150600061275761274f89670de0b6b3a76400006137c2565b8a9088612f20565b9050612783817f00000000000000000000000000000000000000000000000000000000000000006126a4565b93506127af847f0000000000000000000000000000000000000000000000000000000000000000610652565b6127b990846136a1565b915050945094509450949050565b60008183116127d65781610667565b5090919050565b6000806127f5846127ef8a888a612f20565b906128a8565b9050611d16888486612f20565b600061066783670de0b6b3a764000084611822565b6000806128248484612f46565b90925090508061283657612836612439565b5092915050565b6000816000036128565750670de0b6b3a764000061066a565b826000036128665750600061066a565b600061287183611b4d565b9050600061288661288186611b4d565b612f82565b905081810261289d670de0b6b3a764000082613af2565b905061253c816131a8565b600061066783670de0b6b3a764000084612f20565b600060016001607f1b038211156118c15760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612905575060016001607f1b0382135b156118c15760405163a5353be560e01b815260040160405180910390fd5b60008061293184600061333d565b61293c84600061333d565b612946919061385d565b905060008113156129625761295b81866136a1565b9450612981565b60008112156129815761297481613a81565b61297e90866137c2565b94505b50929392505050565b60035460009081906129a5906001600160801b0316846128a8565b90506129d17f0000000000000000000000000000000000000000000000000000000000000000826136a1565b6002546001600160801b031611156118d4576002547f000000000000000000000000000000000000000000000000000000000000000090612a1c9083906001600160801b03166137c2565b61147a91906137c2565b612a2e613579565b600080612a3a84612d32565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612a759190613a9d565b6040805180830381865af4158015612a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab59190613aac565b9350905082612aca57506000915061177d9050565b6000612af1612aec84610160015185610140015161065290919063ffffffff16565b611b4d565b612b11612aec8561012001518661010001516126a490919063ffffffff16565b612b1b919061385d565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c779190613b20565b935093509350935080612c935750600098975050505050505050565b868414612cc457612ca384611897565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612cf557612cd4836128e7565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612d2357612d0582611897565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612d3a6135cb565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612e32911661334c565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612e649290041661334c565b905292915050565b600080612e7d8888888888886133c2565b909250905080611d3057611d30612439565b600080612ed98561143885817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612ecf818c6128a8565b61143891906137c2565b9150612f05827f0000000000000000000000000000000000000000000000000000000000000000610652565b9050935093915050565b600080612e7d88888888888861348a565b6000826000190484118302158202612f3757600080fd5b50910281810615159190040190565b600080600083612f5586611b4d565b612f5f919061385d565b90506000811215612f7757600080925092505061064b565b946001945092505050565b6000808213612fa45760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906130279084901c611b4d565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136131c357506000919050565b680755bf798b4a1bf1e582126131ec576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061253c74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611b4d565b60008183136127d65781610667565b600080670de0b6b3a7640000613360610670565b61336a919061389a565b905080831161337a576000613384565b61338481846137c2565b915061147a6133bb670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000061389a565b8390612802565b60008060006133d4898988888861354a565b90506133ee866118886133e78a8d6136a1565b8790610652565b98506133fb858a86611822565b98508881101561341257600080925092505061347f565b888103670de0b6b3a7640000811061344757613440613439670de0b6b3a7640000896128a8565b829061283d565b905061345f565b61345c613439670de0b6b3a764000089612802565b90505b808910156134755760008093509350505061347f565b8803925060019150505b965096945050505050565b600080600061349c898988888861354a565b90506134ac86611888898b6136a1565b9750878110156134c357600080925092505061347f565b8781036134d1818688612f20565b9050670de0b6b3a764000081106134fe576134f7613439670de0b6b3a7640000896128a8565b9050613516565b613513613439670de0b6b3a764000089612802565b90505b61352081866128a8565b9050808a10156135385760008093509350505061347f565b90980398600198509650505050505050565b6000613556858561283d565b61356f61356786611888868b6126a4565b859085612f20565b61253c91906136a1565b60405180610120016040528061358d6135cb565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561364257600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561366e57600080fd5b85016060818803121561368057600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561066a5761066a61368b565b6001600160a01b038116811461057a57600080fd5b6000602082840312156136db57600080fd5b813561147a816136b4565b801515811461057a57600080fd5b60006020828403121561370657600080fd5b813561147a816136e6565b6000808335601e1984360301811261372857600080fd5b83018035915067ffffffffffffffff82111561374357600080fd5b60200191503681900382131561064b57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a082015260006137b560c083018486613758565b9998505050505050505050565b8181038181111561066a5761066a61368b565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c0820152600061380f60e083018486613758565b9a9950505050505050505050565b6001600160701b038181168382160190808211156128365761283661368b565b6001600160801b038181168382160190808211156128365761283661368b565b81810360008312801583831316838312821617156128365761283661368b565b60006020828403121561388f57600080fd5b815161147a816136b4565b808202811582820484141761066a5761066a61368b565b6001600160801b038281168282160390808211156128365761283661368b565b80820182811260008312801582168215821617156138f1576138f161368b565b505092915050565b60006020828403121561390b57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60008261393757613937613912565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561066a5761066a61368b565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a0820190506139fb828551613969565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613a7057600080fd5b505080516020909101519092909150565b6000600160ff1b8201613a9657613a9661368b565b5060000390565b610180810161066a8284613969565b60008060408385031215613abf57600080fd5b825191506020830151613ad1816136e6565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613b0157613b01613912565b600160ff1b821460001984141615613b1b57613b1b61368b565b500590565b60008060008060808587031215613b3657600080fd5b8451935060208501519250604085015191506060850151613680816136e656fea264697066735822122013ff070249adab2cd74e38bfc69cdd20d3705f5e520197fff5b41079973db17464736f6c634300081600336102806040523480156200001257600080fd5b5060405162004002380380620040028339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613b3d620004c56000396000505060005050600081816112c801526119e30152600081816102fb0152818161032a015261035701526000818160d6015281816105a101526116ef01526000818161084601528181610931015281816109c401528181610acd015281816115c0015281816116c9015281816121a70152818161220a01528181612ae901528181612e540152612e90015260008181610137015281816108b601528181610e7601528181611484015281816114e80152818161152f01526116a301526000611dac015260008181611f0701526130e901526000818161103a0152611edb0152600061309f0152600081816101790152818161090901528181610e9701528181611454015281816114b801528181611550015261171501526000818161015801528181610230015281816102d0015281816106eb015281816108e301528181610f720152612a7f01526000818161028f01528181610d3501528181610db001528181610e2601528181610ef20152610f2a0152600081816119b301528181611afa0152612ce2015260005050613b3d6000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c3660046135ad565b610066565b60405190815260200160405180910390f35b610041610061366004613611565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e8484846107f8565b90505b9392505050565b60006100a2610ba9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d482610bd3565b7f00000000000000000000000000000000000000000000000000000000000000008610156101155760405163211ddda360e11b815260040160405180910390fd5b600061019d610122610c0c565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c32565b9050848110806101ac57508381115b156101ca57604051633b61151160e11b815260040160405180910390fd5b6000806101d78986610c58565b9150915060006101e5610d2d565b90506101f5818360046001610d59565b50600254600454600354600092839261025f926001600160801b0380841693600f9390930b92600160801b900481169189911661025a6102557f00000000000000000000000000000000000000000000000000000000000000008b613677565b6113d7565b611421565b915091508061028157604051630552b01360e31b815260040160405180910390fd5b8b60006102f46008826102b47f00000000000000000000000000000000000000000000000000000000000000008961368a565b81526020810191909152604001600020546001600160801b03167f000000000000000000000000000000000000000000000000000000000000000061162e565b90506103207f000000000000000000000000000000000000000000000000000000000000000082613677565b88118061037f57507f00000000000000000000000000000000000000000000000000000000000000008111801561037f575061037c7f00000000000000000000000000000000000000000000000000000000000000008261368a565b88105b1561039d57604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103e9916001600160801b039091169061368a565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765491925090610424908390613677565b905060008060006104348a61165a565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa1569061046e90849060040161371b565b602060405180830381865af415801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af919061372a565b91506104c26104bd8c611794565b6117c2565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa156916105239185910161371b565b602060405180830381865af4158015610540573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610564919061372a565b9250818310156105875760405163184d952160e11b815260040160405180910390fd5b61059d8483610596818761368a565b91906117e8565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e05760405163211ddda360e11b815260040160405180910390fd5b508f6105ec868e611806565b101561060b5760405163c972651760e01b815260040160405180910390fd5b61062960008e60000160208101906106239190613758565b8e61181b565b610632896118c3565b95508561065257604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c90506000610715600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b031661025a7f00000000000000000000000000000000000000000000000000000000000000008c6102559190613677565b9b5090508a158061072f575061072c8c60006118d0565b81125b1561074d57604051630552b01360e31b815260040160405180910390fd5b600088156107655761076087848b6117e8565b610768565b60005b90506107776020850185613758565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107b460408a0160208b01613783565b866107c260408c018c6137a0565b6040516107d597969594939291906137e7565b60405180910390a250505050505050505050505050505050506100786001600055565b6000610802610ba9565b61080b82610bd3565b60065460ff161561082f57604051637983c05160e01b815260040160405180910390fd5b60008061083c8685610c58565b909250905061086c7f0000000000000000000000000000000000000000000000000000000000000000600261383b565b82101561088c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161249f92919061399c565b6040805180830381865af41580156124bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124df9190613a12565b915091506124fd6124ef82611794565b6124f890613a36565b612aa3565b925082612513576000965050505050505061141b565b61251c8261190b565b600780546000906125379084906001600160801b03166138a0565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506125648161190b565b60078054601090612586908490600160801b90046001600160801b03166138a0565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6125e38761165a565b6040518263ffffffff1660e01b81526004016125ff919061371b565b6040805180830381865af415801561261b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263f9190613a52565b9150915080612655575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916126bb91613677565b6126c5919061368a565b9050806000036126dd57506000958695509350505050565b60008087116126ed5760006126f8565b6126f88488846117e8565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561272c5761272c613a82565b6040519080825280601f01601f191660200182016040528015612756576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612777578692505b828152826000602083013e9093509150505b9550959350505050565b6000806000836127a286611794565b6127ac91906138c0565b905060008112156127c4576000809250925050610d26565b946001945092505050565b60008060006127e1888888888861303d565b9050600061280c670de0b6b3a76400006127fb8888612df3565b6128059190613677565b8390611806565b9050670de0b6b3a7640000811061284057612839612832670de0b6b3a764000089611806565b8290612c54565b9050612858565b612855612832670de0b6b3a764000089612df3565b90505b6128628186611806565b90508881101561287a57600080935093505050612789565b97909703976001975095505050505050565b600080600061289e898988888861306c565b90506128b8866119826128b18a8d613677565b8790612151565b98506128c5858a866117e8565b9850888110156128dc576000809250925050611623565b888103670de0b6b3a7640000811061290a57612903612832670de0b6b3a764000089612df3565b9050612922565b61291f612832670de0b6b3a764000089611806565b90505b8089101561293857600080935093505050611623565b90970398600198509650505050505050565b600080600080600061295d898789613091565b909250905061296c828961368a565b9750600061297b82888a6117e8565b9050612987818b61368a565b9a989950979650505050505050565b6000806129a4846000613117565b6129af846000613117565b6129b991906138c0565b905060008113156129d5576129ce8186613677565b94506129f4565b60008112156129f4576129e781613a36565b6129f1908661368a565b94505b50929392505050565b60006100918383670de0b6b3a76400005b6000826000190484118302158202612a2557600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612a48610d2d565b612a52919061383b565b9050808311612a62576000612a6c565b612a6c818461368a565b9150610091612805670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000061383b565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b809190613a98565b935093509350935080612b9c5750600098975050505050505050565b868414612bcd57612bac8461190b565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612bfe57612bdd83611935565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612c2c57612c0e8261190b565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612c6d5750670de0b6b3a764000061141b565b82600003612c7d5750600061141b565b6000612c8883611794565b90506000612c9d612c9886611794565b61312d565b9050818102612cb4670de0b6b3a764000082613ad9565b9050612cbf81613353565b9695505050505050565b604051630f451f7160e31b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a28fb8890602401602060405180830381865afa158015612d31573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141b919061372a565b600082600003612d66575084610078565b8115612db957612d97612d798487613677565b612d838587612151565b612d8d888a612151565b6116549190613677565b90506000612da58588611cdc565b905080821015612db3578091505b50610078565b828503612dc857506000610078565b610075612dd5848761368a565b612ddf85876129fd565b612de9888a612151565b611654919061368a565b600061009183670de0b6b3a764000084612a0e565b600060016001607f1b038211156117be5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612e4d906001600160801b031684612df3565b9050612e797f000000000000000000000000000000000000000000000000000000000000000082613677565b6002546001600160801b031611156118df576002547f000000000000000000000000000000000000000000000000000000000000000090612ec49083906001600160801b031661368a565b610091919061368a565b612ed6613549565b600080612ee28461165a565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612f1d919061371b565b6040805180830381865af4158015612f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5d9190613a52565b9350905082612f72575060009150611ad09050565b6000612f946115e584610160015185610140015161215190919063ffffffff16565b612fb46115e58561012001518661010001516129fd90919063ffffffff16565b612fbe91906138c0565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b60006130498585612c54565b61306261305a86611982868b612151565b8590856117e8565b6100759190613677565b60006130788585612c54565b61306261308986611982868b6129fd565b859085612a0e565b6000806130e1856130db85817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006130d1818c612df3565b6130db919061368a565b906129fd565b915061310d827f0000000000000000000000000000000000000000000000000000000000000000612151565b9050935093915050565b60008183136131265781610091565b5090919050565b600080821361314f5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906131d29084901c611794565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361336e57506000919050565b680755bf798b4a1bf1e58212613397576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612cbf74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611794565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610120016040528061355d6134e8565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000606082840312156118df57600080fd5b600080600080600060a086880312156135c557600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156135f857600080fd5b6136048882890161359b565b9150509295509295909350565b60008060006060848603121561362657600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561364b57600080fd5b6136578682870161359b565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561141b5761141b613661565b8181038181111561141b5761141b613661565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161141b828461369d565b60006020828403121561373c57600080fd5b5051919050565b6001600160a01b0381168114610c0957600080fd5b60006020828403121561376a57600080fd5b813561009181613743565b8015158114610c0957600080fd5b60006020828403121561379557600080fd5b813561009181613775565b6000808335601e198436030181126137b757600080fd5b83018035915067ffffffffffffffff8211156137d257600080fd5b602001915036819003821315610d2657600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761141b5761141b613661565b60008060006060848603121561386757600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561190457611904613661565b6001600160801b0381811683821601908082111561190457611904613661565b818103600083128015838313168383128216171561190457611904613661565b6000602082840312156138f257600080fd5b815161009181613743565b808201828112600083128015821682158216171561391d5761391d613661565b505092915050565b634e487b7160e01b600052601260045260246000fd5b60008261394a5761394a613925565b500690565b6001600160801b0382811682821603908082111561190457611904613661565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561141b5761141b613661565b60006102a0820190506139b082855161369d565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613a2557600080fd5b505080516020909101519092909150565b6000600160ff1b8201613a4b57613a4b613661565b5060000390565b60008060408385031215613a6557600080fd5b825191506020830151613a7781613775565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613aae57600080fd5b8451935060208501519250604085015191506060850151613ace81613775565b939692955090935050565b600082613ae857613ae8613925565b600160ff1b821460001984141615613b0257613b02613661565b50059056fea2646970667358221220e4bf2d27c60902a1880c8b58a8e6147859c86bb9a7c96e11bb7f057b4aa8a47964736f6c634300081600336102806040523480156200001257600080fd5b506040516200329f3803806200329f8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051612e8e62000411600039600050506000505060006109c10152600050506000818161026d0152611fe601526000818161182c0152818161188f01528181611bcb01528181611c0701528181611dff0152611fc001526000818161056f0152611f9a015260006114010152600061155c015260008181610733015261153001526000505060008181610590015261200c01526000818161066b015261244a0152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb01526106230152600081816110ed015281816122ed0152612365015260005050612e8e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612938565b61009a565b6040805192835260208301919091520160405180910390f35b61008561008036600461298f565b6100b5565b005b610059610095366004612938565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b909350915061012660208501856129c6565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c016129f1565b61017160408c018c612a0e565b60405161018396959493929190612a7e565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612ace565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e560208701876129c6565b88610ee8565b60006103066102fd60208701876129c6565b88848989610ad0565b90945090506103158188612af8565b9250600061032283610f88565b50905061033260208701876129c6565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e016129f1565b8a888e80604001906103829190612a0e565b604051610396989796959493929190612b0b565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e460208301836129c6565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f0000000000000000000000000000000000000000000000000000000000000000611161565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612b53565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a61117e565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061119f565b92505b506105c1836111bf565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612af8565b8a846111ed565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612b53565b429061132b565b846111ed565b61065e88611340565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612af8565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c6114e4565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d866000611519565b9150915080600960008282546107019190612b53565b9091555061071d905086600084610717816115e8565b88611612565b6107278183612b53565b915061075786838a8e877f000000000000000000000000000000000000000000000000000000000000000061178c565b915061076b61076683856117d6565b6117eb565b6006805460029061078c9084906201000090046001600160701b0316612b66565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b9826111bf565b600680546010906107db908490600160801b90046001600160801b0316612b86565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f6001846114e4565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f886001611519565b9150915080600960008282546108529190612b53565b9091555061086e905083600084610868816115e8565b8a611815565b6108788183612af8565b915061088761076683876117d6565b600680546002906108a89084906201000090046001600160701b0316612b66565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d5826111bf565b600680546010906108f7908490600160801b90046001600160801b0316612b86565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a610930876115e8565b610939836115e8565b6109439190612ba6565b6000611a06565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612bc6565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611a45565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611ad0565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611add565b9050610b56836111bf565b610b609083612be3565b600780546001600160801b0319166001600160801b0392909216919091179055610b89816111bf565b60078054601090610bab908490600160801b90046001600160801b0316612be3565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611afb565b9350610be68684611b94565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612af8565b905080600003610c72576001915050610e08565b6000610c7d85611ba9565b905080600003610c9257600192505050610e08565b600080610ca0838589611c45565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190612c81565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190612cf7565b91509150610d50610d42826115e8565b610d4b90612d1b565b611db9565b925082610d665760009650505050505050610e08565b610d6f826111bf565b60078054600090610d8a9084906001600160801b0316612b86565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db7816111bf565b60078054601090610dd9908490600160801b90046001600160801b0316612b86565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612af8565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612b53565b90915550506000838152600b602052604081208054839290610f3d908490612b53565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611f51565b6040518263ffffffff1660e01b8152600401610fcd9190612d37565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190612d46565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612b53565b6110939190612af8565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611add565b976001975095505050505050565b604051630f451f7160e31b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a28fb88906024015b602060405180830381865afa15801561113d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190612d76565b600061116d8284612ace565b6111779084612af8565b9392505050565b600254600454600091610421916001600160801b0390911690600f0b61208b565b60006111b6826111b0858888611add565b906120b1565b95945050505050565b60006001600160801b038211156111e957604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036112195750505050565b6000848152600860205260408120546001600160801b03169081900361127357611242836111bf565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790556112f1565b6112c46112bf670de0b6b3a764000061128c8886612af8565b6112969190612d8f565b85670de0b6b3a76400006112aa878a612af8565b6112b49190612d8f565b859291906001612126565b6111bf565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6112fa846111bf565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600081831161133a5782611177565b50919050565b6006546000908190611363908490600160801b90046001600160801b03166117d6565b6006546201000090046001600160701b031692509050818111156114df57600061138d8383612af8565b905061139c6112bf82866121c4565b600680546010906113be908490600160801b90046001600160801b0316612be3565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006113f785836121d990919063ffffffff16565b90506000611425827f00000000000000000000000000000000000000000000000000000000000000006117d6565b905080600960008282546114399190612b53565b9091555061144990508183612af8565b9150611454826111bf565b6002805460009061146f9084906001600160801b0316612b86565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061149c826121ee565b600480546000906114b1908490600f0b612da6565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b0382111561150e5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60008061152687856121d9565b91506000611554837f00000000000000000000000000000000000000000000000000000000000000006117d6565b9050611580817f00000000000000000000000000000000000000000000000000000000000000006117d6565b915083156115a3576115928282612af8565b61159c9084612af8565b92506115ba565b6115ad8282612af8565b6115b79084612b53565b92505b868610156115dd576115cd838789611add565b92506115da828789611add565b91505b509550959350505050565b60006001600160ff1b038211156111e95760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b031661165b6112bf8261163e670de0b6b3a764000086612d8f565b600554600160801b90046001600160801b031691908a6000612126565b600580546001600160801b03928316600160801b029216919091179055611681866111bf565b61168b9082612be3565b600480546001600160801b03928316600160801b0292169190911790556116b1846111bf565b600280546000906116cc9084906001600160801b0316612b86565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506116f983612218565b6004805460009061170e908490600f0b612da6565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061173e856111bf565b60028054601090611760908490600160801b90046001600160801b0316612be3565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806117a48461179e8a888a611add565b906121d9565b90506117b1888486611add565b6117bb9082612b53565b9050868111156117cb5786810391505b509695505050505050565b60006111778383670de0b6b3a7640000611add565b60006001600160701b038211156111e95760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061185757507f00000000000000000000000000000000000000000000000000000000000000006118558583612af8565b105b1561186457611864612254565b6004549084900390600f0b6118798482612ba6565b905083611885866115e8565b1380156118ba57507f00000000000000000000000000000000000000000000000000000000000000006118b8838361208b565b105b156118c7576118c7612254565b600354600160801b90046001600160801b03166119096112bf826118f3670de0b6b3a764000088612d8f565b6005546001600160801b031691908c6000612126565b600580546001600160801b0319166001600160801b03929092169190911790556119338882612af8565b905061193e816111bf565b600380546001600160801b03928316600160801b029216919091179055611964836111bf565b600280546001600160801b0319166001600160801b039290921691909117905561198d82612218565b600480546001600160801b0319166001600160801b03929092169190911790556119b6876111bf565b600280546010906119d8908490600160801b90046001600160801b0316612b86565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a21906112bf906001600160801b0316848461226d565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611a6b57611a6b612dd3565b6040519080825280601f01601f191660200182016040528015611a95576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611ab6578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611af457600080fd5b5091020490565b600080611b0885856117d6565b9050611b13816122d4565b945084600003611b27576000915050611177565b849150611b3a60408401602085016129f1565b15611b6957611b6285611b5060208601866129c6565b611b5d6040870187612a0e565b612324565b9150611b8c565b611b8c85611b7a60208601866129c6565b611b876040870187612a0e565b61233f565b509392505050565b60006111778383670de0b6b3a76400006123d9565b6003546000908190611bc4906001600160801b0316846121c4565b9050611bf07f000000000000000000000000000000000000000000000000000000000000000082612b53565b6002546001600160801b0316111561133a576002547f000000000000000000000000000000000000000000000000000000000000000090611c3b9083906001600160801b0316612af8565b6111779190612af8565b611c4d612885565b600080611c5984611f51565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c949190612d37565b6040805180830381865af4158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd49190612d46565b9350905082611ce95750600091506100ad9050565b6000611d10611d0b8461016001518561014001516117d690919063ffffffff16565b6115e8565b611d30611d0b856101200151866101000151611b9490919063ffffffff16565b611d3a9190612ba6565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e969190612de9565b935093509350935080611eb25750600098975050505050505050565b868414611ee357611ec2846111bf565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611f1457611ef383612218565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611f4257611f24826111bf565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b611f596128d7565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e0830152600354048216610100820152600554909161012083019161205191166123ff565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612083929004166123ff565b905292915050565b6000806120988484612475565b9092509050806120aa576120aa612254565b5092915050565b6000816000036120ca5750670de0b6b3a7640000610e08565b826000036120da57506000610e08565b60006120e5836115e8565b905060006120fa6120f5866115e8565b6124b4565b9050818102612111670de0b6b3a764000082612e2a565b905061211c816126da565b9695505050505050565b6000826000036121375750846111b6565b811561218a5761216861214a8487612b53565b61215485876117d6565b61215e888a6117d6565b61179e9190612b53565b90506000612176858861132b565b905080821015612184578091505b506111b6565b828503612199575060006111b6565b61211c6121a68487612af8565b6121b08587611b94565b6121ba888a6117d6565b61179e9190612af8565b600061117783670de0b6b3a7640000846123d9565b600061117783670de0b6b3a764000084611add565b600060016001607f1b038211156111e95760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612236575060016001607f1b0382135b156111e95760405163a5353be560e01b815260040160405180910390fd5b60405163bb55fd2760e01b815260040160405180910390fd5b60008061227b84600061286f565b61228684600061286f565b6122909190612ba6565b905060008113156122ac576122a58186612b53565b94506122cb565b60008112156122cb576122be81612d1b565b6122c89086612af8565b94505b50929392505050565b604051631920845160e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631920845190602401611120565b600060405163350b944160e11b815260040160405180910390fd5b604051638fcb4e5b60e01b81526001600160a01b038481166004830152602482018690527f00000000000000000000000000000000000000000000000000000000000000001690638fcb4e5b906044016020604051808303816000875af11580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d29190612d76565b5050505050565b60008260001904841183021582026123f057600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612413610426565b61241d9190612d8f565b905080831161242d576000612437565b6124378184612af8565b915061117761246e670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000612d8f565b83906121d9565b600080600083612484866115e8565b61248e9190612ba6565b905060008112156124a65760008092509250506124ad565b9150600190505b9250929050565b60008082136124d65760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906125599084901c6115e8565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136126f557506000919050565b680755bf798b4a1bf1e5821261271e576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061211c74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6115e8565b600081831361287e5781611177565b5090919050565b6040518061012001604052806128996128d7565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008060006060848603121561294d57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561297257600080fd5b84016060818703121561298457600080fd5b809150509250925092565b600080604083850312156129a257600080fd5b50508035926020909101359150565b6001600160a01b038116811461040b57600080fd5b6000602082840312156129d857600080fd5b8135611177816129b1565b801515811461040b57600080fd5b600060208284031215612a0357600080fd5b8135611177816129e3565b6000808335601e19843603018112612a2557600080fd5b83018035915067ffffffffffffffff821115612a4057600080fd5b6020019150368190038213156124ad57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b868152856020820152846040820152831515606082015260a060808201526000612aac60a083018486612a55565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b600082612add57612add612ab8565b500690565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e0857610e08612ae2565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000612b4560e083018486612a55565b9a9950505050505050505050565b80820180821115610e0857610e08612ae2565b6001600160701b038181168382160190808211156120aa576120aa612ae2565b6001600160801b038181168382160190808211156120aa576120aa612ae2565b81810360008312801583831316838312821617156120aa576120aa612ae2565b600060208284031215612bd857600080fd5b8151611177816129b1565b6001600160801b038281168282160390808211156120aa576120aa612ae2565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050612c95828551612c03565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215612d0a57600080fd5b505080516020909101519092909150565b6000600160ff1b8201612d3057612d30612ae2565b5060000390565b6101808101610e088284612c03565b60008060408385031215612d5957600080fd5b825191506020830151612d6b816129e3565b809150509250929050565b600060208284031215612d8857600080fd5b5051919050565b8082028115828204841417610e0857610e08612ae2565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715610e0857610e08612ae2565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612dff57600080fd5b8451935060208501519250604085015191506060850151612e1f816129e3565b939692955090935050565b600082612e3957612e39612ab8565b600160ff1b821460001984141615612e5357612e53612ae2565b50059056fea2646970667358221220799d80d2454b9f558fa6b8e71da72558b97a7d2f3664ec3d5224fe9dffb7ac9564736f6c634300081600336103206040523480156200001257600080fd5b50604051620017be380380620017be833981016040819052620000359162000346565b6001600081905587516001600160a01b0390811660809081526020808b0151831660a0908152918b01516101a052908a01516101c05260c0808b01516101e090815260e0808d015161020052610120808e0151909352610100808e0151909152610140808e0151909152908c01805151909252815190920151909152805160409081015161016052905160609081015161018052908a01518216610240528901516102605287166102205288908890889088908890889088908890620000fc898262000517565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e052166103005250620005e39950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b038111828210171562000173576200017362000137565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620001a457620001a462000137565b604052919050565b80516001600160a01b0381168114620001c457600080fd5b919050565b600060808284031215620001dc57600080fd5b604051608081016001600160401b038111828210171562000201576200020162000137565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600061026082840312156200024657600080fd5b620002506200014d565b90506200025d82620001ac565b81526200026d60208301620001ac565b60208201526200028060408301620001ac565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e0820152610100808301518183015250610120808301518183015250610140808301518183015250610160620002eb818401620001ac565b90820152610180620002ff838201620001ac565b908201526101a062000313838201620001ac565b908201526101c062000327838201620001ac565b908201526101e06200033c84848301620001c9565b9082015292915050565b600080600080600080600080610340898b0312156200036457600080fd5b88516001600160401b03808211156200037c57600080fd5b818b0191508b601f8301126200039157600080fd5b815181811115620003a657620003a662000137565b60209150620003be601f8201601f1916830162000179565b8181528d83838601011115620003d357600080fd5b60005b82811015620003f3578481018401518282018501528301620003d6565b506000838383010152809b5050506200040f8c828d0162000232565b98505050620004226102808a01620001ac565b9550620004336102a08a01620001ac565b9450620004446102c08a01620001ac565b9350620004556102e08a01620001ac565b9250620004666103008a01620001ac565b9150620004776103208a01620001ac565b90509295985092959890939650565b600181811c908216806200049b57607f821691505b602082108103620004bc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000512576000816000526020600020601f850160051c81016020861015620004ed5750805b601f850160051c820191505b818110156200050e57828155600101620004f9565b5050505b505050565b81516001600160401b0381111562000533576200053362000137565b6200054b8162000544845462000486565b84620004c2565b602080601f8311600181146200058357600084156200056a5750858301515b600019600386901b1c1916600185901b1785556200050e565b600085815260208120601f198616915b82811015620005b45788860151825594840194600190910190840162000593565b5085821015620005d35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516110ad62000711600039600081816105ee0152818161065a01526107530152600081816105660152818161078301526107e101526000818161051f015261097c0152600081816105ba01526106f00152600081816101ce015281816103900152818161062a0152818161068c015281816106be01528181610724015281816107b6015281816108120152818161094a01526109af0152600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506110ad6000f3fe6080604052600436106101b75760003560e01c80639032c726116100ec578063d899e1121161008a578063e44808bc11610064578063e44808bc14610588578063eac3e799146105a8578063f3f70707146105dc578063f698da2514610610576101b7565b8063d899e11214610554578063dbbe807014610541578063ded06231146103ca576101b7565b8063a6e8a859116100c6578063a6e8a8591461050d578063ab033ea9146102c7578063cba2e58d14610541578063cbc1343414610304576101b7565b80639032c726146104cd5780639cd241af146104ed578063a22cb4651461049a576101b7565b806330adf81f116101595780634c2ac1d9116101335780634c2ac1d91461046c5780634ed2d6ac1461047f5780637180c8ca1461049a57806377d05ff4146104ba576101b7565b806330adf81f146103f85780633e691db91461042c578063414f826d1461044c576101b7565b806317fad7fc1161019557806317fad7fc1461033e5780631c0f12b61461035e57806321b57d531461037e57806329b23fc1146103ca576101b7565b806301681a62146102c757806302329a29146102e9578063074a6de914610304575b3480156101c357600080fd5b5060003660606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051610206929190610a85565b600060405180830381855af49150503d8060008114610241576040519150601f19603f3d011682016040523d82523d6000602084013e610246565b606091505b5091509150811561026a57604051638bb0a34b60e01b815260040160405180910390fd5b600061027582610a95565b90506001600160e01b03198116636e64089360e11b1461029757815160208301fd5b8151600319810160048401908152926102b891810160200190602401610b06565b80519650602001945050505050f35b3480156102d357600080fd5b506102e76102e2366004610bcb565b610625565b005b3480156102f557600080fd5b506102e76102e2366004610c04565b34801561031057600080fd5b5061032461031f366004610c31565b610652565b604080519283526020830191909152015b60405180910390f35b34801561034a57600080fd5b506102e7610359366004610ccd565b610687565b34801561036a57600080fd5b506102e7610379366004610d62565b6106b9565b34801561038a57600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610335565b3480156103d657600080fd5b506103ea6103e5366004610daa565b6106e9565b604051908152602001610335565b34801561040457600080fd5b506103ea7f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b34801561043857600080fd5b506103ea610447366004610e04565b61071d565b34801561045857600080fd5b506102e7610467366004610e41565b61074e565b6103ea61047a366004610e63565b61077c565b34801561048b57600080fd5b506102e7610379366004610ec7565b3480156104a657600080fd5b506102e76104b5366004610f11565b6107b1565b6103ea6104c8366004610c31565b6107da565b3480156104d957600080fd5b506102e76104e8366004610f46565b61080d565b3480156104f957600080fd5b506102e7610508366004610fc4565b610945565b34801561051957600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b61032461054f366004610daa565b610974565b34801561056057600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561059457600080fd5b506102e76105a3366004610ffc565b6109aa565b3480156105b457600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e857600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561061c57600080fd5b506103ea6109db565b61064e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b5050565b60008061067e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b50935093915050565b6106b07f0000000000000000000000000000000000000000000000000000000000000000610a69565b50505050505050565b6106e27f0000000000000000000000000000000000000000000000000000000000000000610a69565b5050505050565b60006107147f0000000000000000000000000000000000000000000000000000000000000000610a69565b50949350505050565b60006107487f0000000000000000000000000000000000000000000000000000000000000000610a69565b50919050565b6107777f0000000000000000000000000000000000000000000000000000000000000000610a69565b505050565b60006107a77f0000000000000000000000000000000000000000000000000000000000000000610a69565b5095945050505050565b6107777f0000000000000000000000000000000000000000000000000000000000000000610a69565b60006108057f0000000000000000000000000000000000000000000000000000000000000000610a69565b509392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108426109db565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b179052516108eb919061105b565b600060405180830381855af49150503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b50915091508161093d57805160208201fd5b805160208201f35b61096e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b50505050565b6000806109a07f0000000000000000000000000000000000000000000000000000000000000000610a69565b5094509492505050565b6109d37f0000000000000000000000000000000000000000000000000000000000000000610a69565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6060600080836001600160a01b03166000366040516108eb9291905b8183823760009101908152919050565b805160208201516001600160e01b03198082169291906004831015610ac45780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610afd578181015183820152602001610ae5565b50506000910152565b600060208284031215610b1857600080fd5b815167ffffffffffffffff80821115610b3057600080fd5b818401915084601f830112610b4457600080fd5b815181811115610b5657610b56610acc565b604051601f8201601f19908116603f01168101908382118183101715610b7e57610b7e610acc565b81604052828152876020848701011115610b9757600080fd5b610ba8836020830160208801610ae2565b979650505050505050565b6001600160a01b0381168114610bc857600080fd5b50565b600060208284031215610bdd57600080fd5b8135610be881610bb3565b9392505050565b80358015158114610bff57600080fd5b919050565b600060208284031215610c1657600080fd5b610be882610bef565b60006060828403121561074857600080fd5b600080600060608486031215610c4657600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610c6b57600080fd5b610c7786828701610c1f565b9150509250925092565b60008083601f840112610c9357600080fd5b50813567ffffffffffffffff811115610cab57600080fd5b6020830191508360208260051b8501011115610cc657600080fd5b9250929050565b60008060008060008060808789031215610ce657600080fd5b8635610cf181610bb3565b95506020870135610d0181610bb3565b9450604087013567ffffffffffffffff80821115610d1e57600080fd5b610d2a8a838b01610c81565b90965094506060890135915080821115610d4357600080fd5b50610d5089828a01610c81565b979a9699509497509295939492505050565b60008060008060808587031215610d7857600080fd5b843593506020850135610d8a81610bb3565b92506040850135610d9a81610bb3565b9396929550929360600135925050565b60008060008060808587031215610dc057600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115610dec57600080fd5b610df887828801610c1f565b91505092959194509250565b600060208284031215610e1657600080fd5b813567ffffffffffffffff811115610e2d57600080fd5b610e3984828501610c1f565b949350505050565b60008060408385031215610e5457600080fd5b50508035926020909101359150565b600080600080600060a08688031215610e7b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610eae57600080fd5b610eba88828901610c1f565b9150509295509295909350565b60008060008060808587031215610edd57600080fd5b843593506020850135610eef81610bb3565b9250604085013591506060850135610f0681610bb3565b939692955090935050565b60008060408385031215610f2457600080fd5b8235610f2f81610bb3565b9150610f3d60208401610bef565b90509250929050565b600080600080600080600060e0888a031215610f6157600080fd5b8735610f6c81610bb3565b96506020880135610f7c81610bb3565b9550610f8a60408901610bef565b945060608801359350608088013560ff81168114610fa757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080600060608486031215610fd957600080fd5b833592506020840135610feb81610bb3565b929592945050506040919091013590565b600080600080600060a0868803121561101457600080fd5b85359450602086013561102681610bb3565b9350604086013561103681610bb3565b925060608601359150608086013561104d81610bb3565b809150509295509295909350565b6000825161106d818460208701610ae2565b919091019291505056fea2646970667358221220d9a824308bba485003bc429ada45f0b4fe3f8e1766c7283f6a7f032ed876aefc64736f6c634300081600330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220a3967fb91478e78e20cc806343e15c6485c380199d9db482fd8e2d8599c8111d64736f6c63430008160033"
)


class SweepTestContract(Contract):
    """A web3.py Contract class for the SweepTest contract."""

    abi: ABI = sweeptest_abi
    bytecode: bytes | None = try_bytecode_hexbytes(
        sweeptest_bytecode, "sweeptest"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = SweepTestContractFunctions(sweeptest_abi, self.w3, address)  # type: ignore
            self.events = SweepTestContractEvents(sweeptest_abi, self.w3, address)  # type: ignore
            self.errors = SweepTestContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: SweepTestContractEvents

    errors: SweepTestContractErrors = SweepTestContractErrors()

    functions: SweepTestContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = SweepTestContractFunctions(sweeptest_abi, w3, None)
        contract.errors = SweepTestContractErrors()

        return contract
