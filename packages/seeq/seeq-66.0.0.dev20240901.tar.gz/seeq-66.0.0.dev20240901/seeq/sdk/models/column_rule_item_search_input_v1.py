# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.0.0-v202409011703-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ColumnRuleItemSearchInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_indexes': 'list[int]',
        'item_type': 'str',
        'property_match_operators': 'list[str]',
        'property_names': 'list[str]'
    }

    attribute_map = {
        'column_indexes': 'columnIndexes',
        'item_type': 'itemType',
        'property_match_operators': 'propertyMatchOperators',
        'property_names': 'propertyNames'
    }

    def __init__(self, column_indexes=None, item_type=None, property_match_operators=None, property_names=None):
        """
        ColumnRuleItemSearchInputV1 - a model defined in Swagger
        """

        self._column_indexes = None
        self._item_type = None
        self._property_match_operators = None
        self._property_names = None

        if column_indexes is not None:
          self.column_indexes = column_indexes
        if item_type is not None:
          self.item_type = item_type
        if property_match_operators is not None:
          self.property_match_operators = property_match_operators
        if property_names is not None:
          self.property_names = property_names

    @property
    def column_indexes(self):
        """
        Gets the column_indexes of this ColumnRuleItemSearchInputV1.
        The indexes of the columns that should be used as item inputs to the search. A column index is 1-based

        :return: The column_indexes of this ColumnRuleItemSearchInputV1.
        :rtype: list[int]
        """
        return self._column_indexes

    @column_indexes.setter
    def column_indexes(self, column_indexes):
        """
        Sets the column_indexes of this ColumnRuleItemSearchInputV1.
        The indexes of the columns that should be used as item inputs to the search. A column index is 1-based

        :param column_indexes: The column_indexes of this ColumnRuleItemSearchInputV1.
        :type: list[int]
        """
        if column_indexes is None:
            raise ValueError("Invalid value for `column_indexes`, must not be `None`")

        self._column_indexes = column_indexes

    @property
    def item_type(self):
        """
        Gets the item_type of this ColumnRuleItemSearchInputV1.
        The type of item to search for. If specified, it must be a valid item type. If not specified,              the rule will search within all Signals, Conditions, and Scalars.

        :return: The item_type of this ColumnRuleItemSearchInputV1.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """
        Sets the item_type of this ColumnRuleItemSearchInputV1.
        The type of item to search for. If specified, it must be a valid item type. If not specified,              the rule will search within all Signals, Conditions, and Scalars.

        :param item_type: The item_type of this ColumnRuleItemSearchInputV1.
        :type: str
        """

        self._item_type = item_type

    @property
    def property_match_operators(self):
        """
        Gets the property_match_operators of this ColumnRuleItemSearchInputV1.
        The operator to use for matching the property value. Available options are EQUALS, EQUALS_IGNORE_CASE, NOT_EQUALS, WITHIN and STRING_CONTAINS. If including a 'Parent', the operator must be 'EQUALS'

        :return: The property_match_operators of this ColumnRuleItemSearchInputV1.
        :rtype: list[str]
        """
        return self._property_match_operators

    @property_match_operators.setter
    def property_match_operators(self, property_match_operators):
        """
        Sets the property_match_operators of this ColumnRuleItemSearchInputV1.
        The operator to use for matching the property value. Available options are EQUALS, EQUALS_IGNORE_CASE, NOT_EQUALS, WITHIN and STRING_CONTAINS. If including a 'Parent', the operator must be 'EQUALS'

        :param property_match_operators: The property_match_operators of this ColumnRuleItemSearchInputV1.
        :type: list[str]
        """
        if property_match_operators is None:
            raise ValueError("Invalid value for `property_match_operators`, must not be `None`")

        self._property_match_operators = property_match_operators

    @property
    def property_names(self):
        """
        Gets the property_names of this ColumnRuleItemSearchInputV1.
        The property name to search. Include 'Parent' to narrow the search results by looking for the item under the specified parent. Note that this is multi-level, so the search results will include more than just direct children of the parent.

        :return: The property_names of this ColumnRuleItemSearchInputV1.
        :rtype: list[str]
        """
        return self._property_names

    @property_names.setter
    def property_names(self, property_names):
        """
        Sets the property_names of this ColumnRuleItemSearchInputV1.
        The property name to search. Include 'Parent' to narrow the search results by looking for the item under the specified parent. Note that this is multi-level, so the search results will include more than just direct children of the parent.

        :param property_names: The property_names of this ColumnRuleItemSearchInputV1.
        :type: list[str]
        """
        if property_names is None:
            raise ValueError("Invalid value for `property_names`, must not be `None`")

        self._property_names = property_names

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnRuleItemSearchInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
