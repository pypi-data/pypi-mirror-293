import sys
import nmap  # Assurez-vous que le module python-nmap est installé

class TargetInfo:
    def __init__(self, target=None, context=None, ports=None):
        self.target = target if target else "No IP provided"  # Valeur par défaut si aucune IP n'est fournie
        self.context = context if context else "No context provided"  # Valeur par défaut si aucun contexte n'est fourni
        self.ports = ports if ports else "No ports scanned"

    def __str__(self):
        return f"Target IP: {self.target}, Context: {self.context}, Ports: {self.ports}"

    def get_summary(self):
        return f"Target: {self.target}, Context: {self.context}, Ports: {self.ports}"

def run_nmap_scan(target):
    scanner = nmap.PortScanner()
    scanner.scan(target, arguments='-p-')  # Scanne tous les ports
    open_ports = []
    for host in scanner.all_hosts():
        for proto in scanner[host].all_protocols():
            ports = scanner[host][proto].keys()
            for port in ports:
                if scanner[host][proto][port]['state'] == 'open':
                    open_ports.append(port)
    return open_ports

def get_target_info(args=None):
    if args is None:
        args = sys.argv[1:]  # Utilise les arguments de la ligne de commande

    if len(args) >= 1:
        target = args[0]
        context = args[1] if len(args) > 1 else None
    else:
        # Demander les informations via input si les arguments ne sont pas fournis
        while True:
            try:
                target = input("Veuillez entrer l'adresse IP à scanner: ").strip()
                if not target:
                    raise ValueError("Une adresse IP doit être fournie.")
                context = input("Contexte: ").strip()
                break
            except ValueError as ve:
                print(f"Erreur: {ve}. Veuillez réessayer.")
            except KeyboardInterrupt:
                print("\nProgramme interrompu (Ctrl+C).\nAucun rapport final ne sera généré.")
                sys.exit(1)  # Arrêter le programme proprement avec un code de sortie approprié

    print(f"Running Nmap scan on {target}...")
    open_ports = run_nmap_scan(target)
    ports_info = open_ports if open_ports else "No open ports found"

    return TargetInfo(target, context, ports_info)

if __name__ == "__main__":
    # Appel de get_target_info() et affichage des informations complètes
    target_info = get_target_info()
    print(target_info)
