Metadata-Version: 2.1
Name: sairyscan
Version: 0.0.3
Summary: Airyscan multi-array detector high resolution image reconstruction
Home-page: https://github.com/sylvainprigent/sairyscan
Author: Sylvain Prigent
Author-email: meriadec.prigent@gmail.com
License: BSD-3-Clause
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Testing
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: BSD License
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: scipy>=1.14.1
Requires-Dist: numpy==1.26.4
Requires-Dist: torch==2.2.1
Requires-Dist: torchvision>=0.17.1
Requires-Dist: scikit-image>=0.24.0
Requires-Dist: aicspylibczi
Provides-Extra: testing
Requires-Dist: tox; extra == "testing"
Requires-Dist: pytest; extra == "testing"
Requires-Dist: pytest-cov; extra == "testing"

# SAiryscan

SAiryscan is a python proof of concept of the algorithms developed in the publication: [Optic letters](https://opg.optica.org/ol/abstract.cfm?uri=ol-48-2-498&origin=search)


![optic_letters](docs/source/images/optic_letters.png "optic_letters")

The implementation is based on `PyTorch` for it capabilities of using the GPU if available.

## Documentation

The documentation is available [here](https://sylvainprigent.github.io/sairyscan/about.html).

## Quick start

The easiest way to use the code without modifications is to use de command line interface:

```bash
airyscan -i celegans.czi -r SRegisterPosition -m ISM -o celegans_ism.tiff
```

To build pipeline please refer to the API documentation [guide](https://sylvainprigent.github.io/sairyscan/guide.html)


# For development

## Install dev dependencies

```bash
pip install -r requirements.txt
```

## Run the tests

```bash
pytest sairyscan
```

## Check PEP8

```bash
pylint sairyscan
```

## Build the documentation

The documentation is written with Sphinx. To build is run the commands:

```bash
cd docs
pipenv run sphinx-build -b html ./source ./build
```
