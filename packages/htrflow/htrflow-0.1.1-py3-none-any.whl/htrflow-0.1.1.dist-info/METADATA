Metadata-Version: 2.3
Name: htrflow
Version: 0.1.1
Summary: htrflow is developed at Riksarkivet's AI-lab as an open-source package to simplify HTR
Project-URL: Documentation, https://ai-riksarkivet.github.io/htrflow
Project-URL: Repository, https://github.com/AI-Riksarkivet/htrflow
Author-email: ai@riksarkivet.se
License:                       EUROPEAN UNION PUBLIC LICENCE v. 1.2
                              EUPL © the European Union 2007, 2016
        
        This European Union Public Licence (the ‘EUPL’) applies to the Work (as defined
        below) which is provided under the terms of this Licence. Any use of the Work,
        other than as authorised under this Licence is prohibited (to the extent such
        use is covered by a right of the copyright holder of the Work).
        
        The Work is provided under the terms of this Licence when the Licensor (as
        defined below) has placed the following notice immediately following the
        copyright notice for the Work:
        
                Licensed under the EUPL
        
        or has expressed by any other means his willingness to license under the EUPL.
        
        1. Definitions
        
        In this Licence, the following terms have the following meaning:
        
        - ‘The Licence’: this Licence.
        
        - ‘The Original Work’: the work or software distributed or communicated by the
          Licensor under this Licence, available as Source Code and also as Executable
          Code as the case may be.
        
        - ‘Derivative Works’: the works or software that could be created by the
          Licensee, based upon the Original Work or modifications thereof. This Licence
          does not define the extent of modification or dependence on the Original Work
          required in order to classify a work as a Derivative Work; this extent is
          determined by copyright law applicable in the country mentioned in Article 15.
        
        - ‘The Work’: the Original Work or its Derivative Works.
        
        - ‘The Source Code’: the human-readable form of the Work which is the most
          convenient for people to study and modify.
        
        - ‘The Executable Code’: any code which has generally been compiled and which is
          meant to be interpreted by a computer as a program.
        
        - ‘The Licensor’: the natural or legal person that distributes or communicates
          the Work under the Licence.
        
        - ‘Contributor(s)’: any natural or legal person who modifies the Work under the
          Licence, or otherwise contributes to the creation of a Derivative Work.
        
        - ‘The Licensee’ or ‘You’: any natural or legal person who makes any usage of
          the Work under the terms of the Licence.
        
        - ‘Distribution’ or ‘Communication’: any act of selling, giving, lending,
          renting, distributing, communicating, transmitting, or otherwise making
          available, online or offline, copies of the Work or providing access to its
          essential functionalities at the disposal of any other natural or legal
          person.
        
        2. Scope of the rights granted by the Licence
        
        The Licensor hereby grants You a worldwide, royalty-free, non-exclusive,
        sublicensable licence to do the following, for the duration of copyright vested
        in the Original Work:
        
        - use the Work in any circumstance and for all usage,
        - reproduce the Work,
        - modify the Work, and make Derivative Works based upon the Work,
        - communicate to the public, including the right to make available or display
          the Work or copies thereof to the public and perform publicly, as the case may
          be, the Work,
        - distribute the Work or copies thereof,
        - lend and rent the Work or copies thereof,
        - sublicense rights in the Work or copies thereof.
        
        Those rights can be exercised on any media, supports and formats, whether now
        known or later invented, as far as the applicable law permits so.
        
        In the countries where moral rights apply, the Licensor waives his right to
        exercise his moral right to the extent allowed by law in order to make effective
        the licence of the economic rights here above listed.
        
        The Licensor grants to the Licensee royalty-free, non-exclusive usage rights to
        any patents held by the Licensor, to the extent necessary to make use of the
        rights granted on the Work under this Licence.
        
        3. Communication of the Source Code
        
        The Licensor may provide the Work either in its Source Code form, or as
        Executable Code. If the Work is provided as Executable Code, the Licensor
        provides in addition a machine-readable copy of the Source Code of the Work
        along with each copy of the Work that the Licensor distributes or indicates, in
        a notice following the copyright notice attached to the Work, a repository where
        the Source Code is easily and freely accessible for as long as the Licensor
        continues to distribute or communicate the Work.
        
        4. Limitations on copyright
        
        Nothing in this Licence is intended to deprive the Licensee of the benefits from
        any exception or limitation to the exclusive rights of the rights owners in the
        Work, of the exhaustion of those rights or of other applicable limitations
        thereto.
        
        5. Obligations of the Licensee
        
        The grant of the rights mentioned above is subject to some restrictions and
        obligations imposed on the Licensee. Those obligations are the following:
        
        Attribution right: The Licensee shall keep intact all copyright, patent or
        trademarks notices and all notices that refer to the Licence and to the
        disclaimer of warranties. The Licensee must include a copy of such notices and a
        copy of the Licence with every copy of the Work he/she distributes or
        communicates. The Licensee must cause any Derivative Work to carry prominent
        notices stating that the Work has been modified and the date of modification.
        
        Copyleft clause: If the Licensee distributes or communicates copies of the
        Original Works or Derivative Works, this Distribution or Communication will be
        done under the terms of this Licence or of a later version of this Licence
        unless the Original Work is expressly distributed only under this version of the
        Licence — for example by communicating ‘EUPL v. 1.2 only’. The Licensee
        (becoming Licensor) cannot offer or impose any additional terms or conditions on
        the Work or Derivative Work that alter or restrict the terms of the Licence.
        
        Compatibility clause: If the Licensee Distributes or Communicates Derivative
        Works or copies thereof based upon both the Work and another work licensed under
        a Compatible Licence, this Distribution or Communication can be done under the
        terms of this Compatible Licence. For the sake of this clause, ‘Compatible
        Licence’ refers to the licences listed in the appendix attached to this Licence.
        Should the Licensee's obligations under the Compatible Licence conflict with
        his/her obligations under this Licence, the obligations of the Compatible
        Licence shall prevail.
        
        Provision of Source Code: When distributing or communicating copies of the Work,
        the Licensee will provide a machine-readable copy of the Source Code or indicate
        a repository where this Source will be easily and freely available for as long
        as the Licensee continues to distribute or communicate the Work.
        
        Legal Protection: This Licence does not grant permission to use the trade names,
        trademarks, service marks, or names of the Licensor, except as required for
        reasonable and customary use in describing the origin of the Work and
        reproducing the content of the copyright notice.
        
        6. Chain of Authorship
        
        The original Licensor warrants that the copyright in the Original Work granted
        hereunder is owned by him/her or licensed to him/her and that he/she has the
        power and authority to grant the Licence.
        
        Each Contributor warrants that the copyright in the modifications he/she brings
        to the Work are owned by him/her or licensed to him/her and that he/she has the
        power and authority to grant the Licence.
        
        Each time You accept the Licence, the original Licensor and subsequent
        Contributors grant You a licence to their contributions to the Work, under the
        terms of this Licence.
        
        7. Disclaimer of Warranty
        
        The Work is a work in progress, which is continuously improved by numerous
        Contributors. It is not a finished work and may therefore contain defects or
        ‘bugs’ inherent to this type of development.
        
        For the above reason, the Work is provided under the Licence on an ‘as is’ basis
        and without warranties of any kind concerning the Work, including without
        limitation merchantability, fitness for a particular purpose, absence of defects
        or errors, accuracy, non-infringement of intellectual property rights other than
        copyright as stated in Article 6 of this Licence.
        
        This disclaimer of warranty is an essential part of the Licence and a condition
        for the grant of any rights to the Work.
        
        8. Disclaimer of Liability
        
        Except in the cases of wilful misconduct or damages directly caused to natural
        persons, the Licensor will in no event be liable for any direct or indirect,
        material or moral, damages of any kind, arising out of the Licence or of the use
        of the Work, including without limitation, damages for loss of goodwill, work
        stoppage, computer failure or malfunction, loss of data or any commercial
        damage, even if the Licensor has been advised of the possibility of such damage.
        However, the Licensor will be liable under statutory product liability laws as
        far such laws apply to the Work.
        
        9. Additional agreements
        
        While distributing the Work, You may choose to conclude an additional agreement,
        defining obligations or services consistent with this Licence. However, if
        accepting obligations, You may act only on your own behalf and on your sole
        responsibility, not on behalf of the original Licensor or any other Contributor,
        and only if You agree to indemnify, defend, and hold each Contributor harmless
        for any liability incurred by, or claims asserted against such Contributor by
        the fact You have accepted any warranty or additional liability.
        
        10. Acceptance of the Licence
        
        The provisions of this Licence can be accepted by clicking on an icon ‘I agree’
        placed under the bottom of a window displaying the text of this Licence or by
        affirming consent in any other similar way, in accordance with the rules of
        applicable law. Clicking on that icon indicates your clear and irrevocable
        acceptance of this Licence and all of its terms and conditions.
        
        Similarly, you irrevocably accept this Licence and all of its terms and
        conditions by exercising any rights granted to You by Article 2 of this Licence,
        such as the use of the Work, the creation by You of a Derivative Work or the
        Distribution or Communication by You of the Work or copies thereof.
        
        11. Information to the public
        
        In case of any Distribution or Communication of the Work by means of electronic
        communication by You (for example, by offering to download the Work from a
        remote location) the distribution channel or media (for example, a website) must
        at least provide to the public the information requested by the applicable law
        regarding the Licensor, the Licence and the way it may be accessible, concluded,
        stored and reproduced by the Licensee.
        
        12. Termination of the Licence
        
        The Licence and the rights granted hereunder will terminate automatically upon
        any breach by the Licensee of the terms of the Licence.
        
        Such a termination will not terminate the licences of any person who has
        received the Work from the Licensee under the Licence, provided such persons
        remain in full compliance with the Licence.
        
        13. Miscellaneous
        
        Without prejudice of Article 9 above, the Licence represents the complete
        agreement between the Parties as to the Work.
        
        If any provision of the Licence is invalid or unenforceable under applicable
        law, this will not affect the validity or enforceability of the Licence as a
        whole. Such provision will be construed or reformed so as necessary to make it
        valid and enforceable.
        
        The European Commission may publish other linguistic versions or new versions of
        this Licence or updated versions of the Appendix, so far this is required and
        reasonable, without reducing the scope of the rights granted by the Licence. New
        versions of the Licence will be published with a unique version number.
        
        All linguistic versions of this Licence, approved by the European Commission,
        have identical value. Parties can take advantage of the linguistic version of
        their choice.
        
        14. Jurisdiction
        
        Without prejudice to specific agreement between parties,
        
        - any litigation resulting from the interpretation of this License, arising
          between the European Union institutions, bodies, offices or agencies, as a
          Licensor, and any Licensee, will be subject to the jurisdiction of the Court
          of Justice of the European Union, as laid down in article 272 of the Treaty on
          the Functioning of the European Union,
        
        - any litigation arising between other parties and resulting from the
          interpretation of this License, will be subject to the exclusive jurisdiction
          of the competent court where the Licensor resides or conducts its primary
          business.
        
        15. Applicable Law
        
        Without prejudice to specific agreement between parties,
        
        - this Licence shall be governed by the law of the European Union Member State
          where the Licensor has his seat, resides or has his registered office,
        
        - this licence shall be governed by Belgian law if the Licensor has no seat,
          residence or registered office inside a European Union Member State.
        
        Appendix
        
        ‘Compatible Licences’ according to Article 5 EUPL are:
        
        - GNU General Public License (GPL) v. 2, v. 3
        - GNU Affero General Public License (AGPL) v. 3
        - Open Software License (OSL) v. 2.1, v. 3.0
        - Eclipse Public License (EPL) v. 1.0
        - CeCILL v. 2.0, v. 2.1
        - Mozilla Public Licence (MPL) v. 2
        - GNU Lesser General Public Licence (LGPL) v. 2.1, v. 3
        - Creative Commons Attribution-ShareAlike v. 3.0 Unported (CC BY-SA 3.0) for
          works other than software
        - European Union Public Licence (EUPL) v. 1.1, v. 1.2
        - Québec Free and Open-Source Licence — Reciprocity (LiLiQ-R) or Strong
          Reciprocity (LiLiQ-R+).
        
        The European Commission may update this Appendix to later versions of the above
        licences without producing a new version of the EUPL, as long as they provide
        the rights granted in Article 2 of this Licence and protect the covered Source
        Code from exclusive appropriation.
        
        All other changes or additions to this Appendix require the production of a new
        EUPL version.
License-File: LICENSE
Keywords: htr,htrflow,ocr
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Typing :: Typed
Requires-Python: >=3.10
Requires-Dist: jinja2==3.1.3
Requires-Dist: lorem<0.2,>=0.1.1
Requires-Dist: matplotlib<4,>=3.8.3
Requires-Dist: numpy==1.26.4
Requires-Dist: opencv-python>=4.6.0
Requires-Dist: requests<3,>=2.31.0
Requires-Dist: tqdm<5,>=4.66.2
Requires-Dist: xmlschema<4,>=3.0.2
Provides-Extra: all
Requires-Dist: accelerate>=0.33.0; extra == 'all'
Requires-Dist: bitsandbytes>=0.43.3; extra == 'all'
Requires-Dist: datasets>=2.17.1; extra == 'all'
Requires-Dist: huggingface-hub[cli]>=0.24.6; extra == 'all'
Requires-Dist: jiwer>=3.0.4; extra == 'all'
Requires-Dist: pagexml-tools>=0.5.0; extra == 'all'
Requires-Dist: pandas>=2.2.2; extra == 'all'
Requires-Dist: rich>=13.7.1; extra == 'all'
Requires-Dist: transformers[torch]>=4.44.1; extra == 'all'
Requires-Dist: typer>=0.12.0; extra == 'all'
Requires-Dist: ultralytics>=8.0.225; extra == 'all'
Provides-Extra: cli
Requires-Dist: jiwer>=3.0.4; extra == 'cli'
Requires-Dist: pagexml-tools>=0.5.0; extra == 'cli'
Requires-Dist: pandas>=2.2.2; extra == 'cli'
Requires-Dist: rich>=13.7.1; extra == 'cli'
Requires-Dist: typer>=0.12.0; extra == 'cli'
Provides-Extra: docs
Requires-Dist: mike>=2.1.1; extra == 'docs'
Requires-Dist: mkdocs-git-revision-date-localized-plugin>=1.2.6; extra == 'docs'
Requires-Dist: mkdocs-jupyter>=0.24.6; extra == 'docs'
Requires-Dist: mkdocs-material>=9.5.10; extra == 'docs'
Requires-Dist: mkdocs-swagger-ui-tag>=0.6.10; extra == 'docs'
Requires-Dist: mkdocs-table-reader-plugin>=2.2.2; extra == 'docs'
Requires-Dist: mkdocstrings[python]>=0.20; extra == 'docs'
Requires-Dist: termynal>=0.12.1; extra == 'docs'
Provides-Extra: eval
Requires-Dist: jiwer>=3.0.4; extra == 'eval'
Requires-Dist: pagexml-tools>=0.5.0; extra == 'eval'
Requires-Dist: pandas>=2.2.2; extra == 'eval'
Provides-Extra: huggingface
Requires-Dist: datasets>=2.17.1; extra == 'huggingface'
Requires-Dist: huggingface-hub[cli]>=0.24.6; extra == 'huggingface'
Requires-Dist: transformers[torch]>=4.44.1; extra == 'huggingface'
Provides-Extra: llm
Requires-Dist: accelerate>=0.33.0; extra == 'llm'
Requires-Dist: bitsandbytes>=0.43.3; extra == 'llm'
Requires-Dist: datasets>=2.17.1; extra == 'llm'
Requires-Dist: huggingface-hub[cli]>=0.24.6; extra == 'llm'
Requires-Dist: transformers[torch]>=4.44.1; extra == 'llm'
Provides-Extra: openmmlab
Requires-Dist: mmcv; extra == 'openmmlab'
Requires-Dist: mmdet==3.1.0; extra == 'openmmlab'
Requires-Dist: mmengine==0.7.2; extra == 'openmmlab'
Requires-Dist: mmocr==1.0.1; extra == 'openmmlab'
Requires-Dist: torch==2.0.0; extra == 'openmmlab'
Requires-Dist: yapf==0.40.1; extra == 'openmmlab'
Provides-Extra: ultralytics
Requires-Dist: huggingface-hub[cli]>=0.24.6; extra == 'ultralytics'
Requires-Dist: ultralytics>=8.0.225; extra == 'ultralytics'
Description-Content-Type: text/markdown

<img src="https://github.com/AI-Riksarkivet/htrflow/blob/main/docs/assets/riks.png?raw=true" width="10%" height="10%" align="right" />

# **htrflow**

<p align="center">
    <img alt="GitHub Repo stars" src="https://img.shields.io/github/stars/AI-Riksarkivet/htrflow">
    <img alt="License" src="https://img.shields.io/github/license/AI-Riksarkivet/htrflow">
    <a href="https://circleci.com/gh/AI-Riksarkivet/htrflow">
        <img alt="Build" src="https://img.shields.io/github/AI-Riksarkivet/htrflow/main">
    </a>
    <a href="https://github.com/AI-Riksarkivet/htrflow/releases">
        <img alt="GitHub release" src="https://img.shields.io/github/release/AI-Riksarkivet/htrflow.svg">
    </a>
    <a href="https://github.com/AI-Riksarkivet/htrflow/releases">
        <img alt="GitHub docs" src="https://img.shields.io/github/docs/AI-Riksarkivet/htrflow.svg">
    </a>
<!-- Add test, ci, build, publish, draft bagdges here... -->

</p>

<p align="center">
  <img src="https://github.com/AI-Riksarkivet/htrflow/blob/main/docs/assets/background_htrflow_2.png?raw=true" alt="HTRFLOW Image" width=70%>
</p>



HTRFlow is an open source tool for handwritten text recognition. It is developed by the AI lab at the Swedish National Archives (Riksarkivet).

## Docs
> ⚠️! Docs still under development

[![mkdocs](https://img.shields.io/badge/htrflow_docs-526CFE?style=for-the-badge&logo=MaterialForMkDocs&logoColor=white)](https://ai-riksarkivet.github.io/htrflow)


## Installation

### Package

<a href="https://pypi.org/project/htrflow/">
    <img alt="pypi" src="https://img.shields.io/pypi/pyversions/htrflow">
</a>

Either install with uv or pip:

#### uv:
```sh
uv pip install htrflow[all]
```

#### pip:

```sh
pip install htrflow[all] 
```
This includes ultralytics and transformers models, but if you want also to use openmmlab models:

```sh
pip install htrflow"[all,openmmlab]" 
```

> Note that this forces torch to 2.0.0, since openmmlabs depends on it for now..


### From source
Requirements:
  - [uv](https://docs.astral.sh/uv/) or pip
  - Python 3.10

Clone this repository and run
```sh
uv pip install -e .[all]
```
This will install the HTRFlow CLI and enable huggingface and ultralytics models in a virtual environment. If you also want to use openmmlab models such as RTMDet and Satrn, you also need to run:
```
uv pip install -e ."[all,openmmlab]"
```
Now activate the virtual enviroment with
```
source .venv/bin/activate
```
Or if you are using `uv` you can just run with `uv run` prefix before all your commands:
```
uv run <cmd>
```

The HTRFlow CLI is now available within the `.venv` from uv or where you installed the package. Try it by running:
```sh
htrflow pipeline examples/pipelines/demo.yaml examples/images/pages
```
This command runs HTRFlow on the three example pages in [examples/images/pages](https://github.com/AI-Riksarkivet/htrflow/tree/main/examples/images/pages) and writes the output Page XML and Alto XML.

## Usage
Once HTRFlow is installed, run it with:
```sh
htrflow pipeline <pipeline file> <input image(s)>
```

## Pipelines

HTRFlow is configured with a pipeline file which describes what steps it should perform and which models it should use. Here is an example of a simple pipeline:
```yaml
steps:
- step: Segmentation
  settings:
    model: RTMDet
    model_settings:
       model: Riksarkivet/rtmdet_lines
- step: TextRecognition
  settings:
    model: TrOCR
    model_settings:
       model: Riksarkivet/trocr-base-handwritten-swe
    generation_settings:
       num_beams: 1
- step: RemoveLowTextConfidenceLines
  settings:
    threshold: 0.9
- step: Export
  settings:
    dest: outputs/alto
    format: alto
```
This pipeline uses [Riksarkivet/rtmdet_lines](https://huggingface.co/Riksarkivet/rtmdet_lines) to detect the pages' text lines, then runs [Riksarkivet/trocr-base-handwritten-swe](https://huggingface.co/Riksarkivet/trocr-base-handwritten-swe) to transcribe them, filters the text lines on their confidence score, and then exports the result to Alto XML.

See the demo pipeline  [examples/pipelines/demo.yaml](https://github.com/AI-Riksarkivet/htrflow/tree/main/examples/pipelines/demo.yaml) for a more complex pipeline.

### Built-in pipeline steps
HTRflow comes with several pre-defined pipeline steps out of the box. These include:
- Inference, including text recognition and segmentation
- Image preprocessing
- Reading order detection
- Filtering
- Export


### Custom pipeline steps
You can define your own custom pipeline step by subclassing `PipelineStep` and defining the `run()` method. It takes a `Collection` and returns a `Collection`:
```python
class MyPipelineStep(PipelineStep):
    """A custom pipeline step"""
    def run(self, collection: Collection) -> Collection:
        for page in collection:
            # Do something
        return collection
```
You can add parameters to your pipeline step by also defining the `__init__()` method. It can take any number of arguments. Here, we add one argument, which can be accessed when the step is run:
```python
class MyPipelineStep(PipelineStep):
    """A custom pipeline step"""
    def __init__(self, arg):
        self.arg = arg

    def run(self, collection: Collection) -> Collection:
        for page in collection:
            # Do something
            if self.arg:
              ...
        return collection
```

To use the pipeline step in a pipeline, add the following to your pipeline file:
```yaml
steps:
  - step: MyPipelineStep
    settings: 
      arg: value
```
All key-value pairs listed under `settings` will be passed to the step's `__init__()` method. If the pipeline step doesn't need any arguments, you can omit `settings`.

For filtering and image processing operations, you can base your custom step on the base classes Prune and ProcessImages. Examples of this, and other pipeline steps, can be found in [htrflow/pipeline/steps.py](https://github.com/AI-Riksarkivet/htrflow/blob/56d70ad9e6d8aa38893ae3f46fa90f40311de195/src/htrflow/pipeline/steps.py).


## Models

The following model architectures are currently supported by HTRFlow:
| Model     | Type      | Fine-tuned by the AI lab|
| ------------- | ------------- | --- |
| TrOCR | Text recognition | [Riksarkivet/trocr-base-handwritten-swe](https://huggingface.co/Riksarkivet/trocr-base-handwritten-swe) |
| Satrn | Text recognition | [Riksarkivet/satrn_htr](https://huggingface.co/Riksarkivet/satrn_htr) |
| RTMDet | Segmentation | [Riksarkivet/rtmdet_lines](https://huggingface.co/Riksarkivet/rtmdet_lines) <br> [Riksarkivet/rtmdet_regions](https://huggingface.co/Riksarkivet/rtmdet_regions) |
| Yolo | Segmentation |  |
| DiT | Image classification |  |
