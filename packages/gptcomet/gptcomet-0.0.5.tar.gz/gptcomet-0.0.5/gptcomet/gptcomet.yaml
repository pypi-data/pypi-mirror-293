provider: "openai"  # LLM provider
file_ignore:  # File to ignore when generating a commit
  - "bun.lockb"
  - "Cargo.lock"
  - "composer.lock"
  - "Gemfile.lock"
  - "package-lock.json"
  - "pnpm-lock.yaml"
  - "poetry.lock"
  - "yarn.lock"
  - "pdm.lock"
  - "Pipfile.lock"
  - "*.py[cod]"

output:
  lang: "en"  # Commit message language

console:
  verbose: True

openai:
  api_base: "https://api.openai.com/v1"  # GPT base URL, default openai api
  api_key: "sk-xxxxxx"
  model: "text-davinci-003"
  retries: 2
  proxy: ""
  max_tokens: 4096
  top_p: 0.7
  temperature: 0.7
  frequency_penalty: 0
  extra_headers: "{}"  # JSON string

prompt:
  brief_commit_message: |
    you are an expert software engineer responsible for writing a clear and concise commit message.
    Task: Write a concise commit message based on the provided git diff content.

    Guidelines:
    - start with a concise, informative title.
    - follow with a high-level summary in bullet points (imperative tense).
    - focus on the most significant changes.
    
    use one of the following labels for the title:

    - build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
    - chore: Updating libraries, copyrights or other repo setting, includes updating dependencies.
    - ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, gitHub Actions)
    - docs: Non-code changes, such as fixing typos or adding new documentation
    - feat: a commit of the type feat introduces a new feature to the codebase
    - fix: A commit of the type fix patches a bug in your codebase
    - perf: A code change that improves performance
    - refactor: A code change that neither fixes a bug nor adds a feature
    - style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
    - test: Adding missing tests or correcting existing tests

    the commit message templete is <title>: <summary>

    your answer should only include a single commit message less than 70 characters, no other text.
    Examples:

    git diff:
    - if (user == null) {
    + if (user.isEmpty()) {
        throw new AuthenticationException("User not found");
    }

    Commit Message: fix: Fix user null check in authentication

    git diff:
    + public String exportToCSV(List<Data> dataList) {
    +     StringBuilder csvData = new StringBuilder();
    +     for (Data data : dataList) {
    +         csvData.append(data.toCSVRow());
    +     }
    +     return csvData.toString();
    + }

    Output: feat: Add CSV export functionality

    git diff:
    - public void processTransaction() {
    -     // Deprecated method
    -     processOldTransaction();
    - }
    + public void processTransaction() {
    +     processNewTransaction();
    + }

    Output: refactor: Refactor transaction processing method

    git diff:
    - for (int i = 0; i < list.size(); i++) {
    -     processItem(list.get(i));
    + for (Item item : list) {
    +     processItem(item);
    }

    Output: perf: Improve performance of item processing loop

    git diff:
    - String passwordHash = hashPassword(user.getPassword());
    + String passwordHash = hashPassword(user.getPassword(), SALT);

    Commit Message: fix: Fix password hashing vulnerability

    git diff:
    {{ placeholder }}

    Commit Message:
  # Prompt for brief commit message

  translation: |
    You are a professional polyglot programmer and translator. You are translating a git commit message.
    You want to ensure that the translation is high level and in line with the programmer's consensus, taking care to keep the formatting intact.

    Translate the following message into {{ output_language }}.

    GIT COMMIT MESSAGE:

    ###
    {{ placeholder }}
    ###

    Remember translate all given git commit message and give me only the translation.
    THE TRANSLATION:
  # Prompt for translation commit message to target language
