Metadata-Version: 2.1
Name: keras_spark
Version: 0.91
Summary: seamless support for spark datasets in keras fit() and .redict()
Author: christian sommeregger
Author-email: csommeregger@gmail.com
Description-Content-Type: text/markdown
License-File: LICENSE.txt

# Spark-Keras Project

This package allows users pyspark dataframe seamlessly in Keras models

## Basic Usage - Quickstart


Suppose we have the following pyspark dataframe
```python
import pandas as pd
from pyspark.sql import SparkSession
import tensorflow as tf

spark = SparkSession.builder.appName("spark_keras").getOrCreate()

spark_df = spark.createDataFrame(
    pd.DataFrame({
      "feature1": tf.random.normal([100]).numpy().tolist()
    , "label1": tf.random.normal([100]).numpy().tolist()
    , "partition_id": [0 for i in range(100)]
    })
)
```

then we can fit/predict KerasSparkModel using the standard keras api:

```python
import tensorflow as tf
from keras_spark.model import KerasSparkModel as Model

input = tf.keras.Input(shape=[1], name="feature1")
nn = tf.keras.layers.Dense(1,name="label1")
model = Model(input,nn(input))

# use .fit() on a pyspark dataframe
model.fit(spark_df,batch_size=10,epochs=100)

#use spark for distributed scoring of a pyspark dataframe
model.predict(spark_df).select("model_output.label1")
```

## Remarks:

1) Naming: 
    - *Inputs* names need to be explicitly set for each keras input - and need to correspond to their respective pyspark columns
    - *Output* names are inferred from the names of the keras output layers - they need to correspond to pyspark column names if .fit() is used
2) Casting:
   - it is assumed that dtypes of keras inputs and pyspark types are *compatible*
3) Partitioning:
   - the pyspark dataframe needs to contain a column called `partition_id` - its value is supposed to be in (0,nr_partitions)
   - make sure nr_partitions is chosen appropriately, ie s.t the spark driver can handle it
   - parallel processing of partitions is implemented using .interleave() and can be specified using `num_parallel_calls`
4) Prediction
   - .predict() will create exactly one additional *struct* column called `model_output`
   - outputs have to be selected using their name as a key. eg `model_output.label1`
5) Keras Version is assumed to be 3+
